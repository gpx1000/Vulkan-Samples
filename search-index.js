antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component","keyword"],"fieldVectors":[["title/1",[]],["name/1",[0,1.724]],["text/1",[1,7.761,2,4.967,3,8.439,4,4.577,5,3.647,6,5.735,7,6.302,8,4.577,9,4.031,10,3.999,11,10.526,12,8.439,13,7.761,14,8.439,15,8.439,16,5.855,17,6.302,18,5.103,19,6.136,20,7.761,21,8.439]],["component/1",[22,0.319]],["keyword/1",[]],["title/2-1",[23,52.121,24,36.02]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["keyword/2-1",[]],["title/2-2",[25,23.845,26,33.074]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["keyword/2-2",[]],["title/2-3",[22,12.915,27,27.059]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["keyword/2-3",[]],["title/2-4",[28,29.017,29,27.674]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["keyword/2-4",[]],["title/2-5",[30,42.727,31,37.558,32,38.576,33,42.727]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["keyword/2-5",[]],["title/2-6",[10,33.074,34,53.693]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["keyword/2-6",[]],["title/2-7",[35,50.747,36,49.526]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["keyword/2-7",[]],["title/2-8",[10,33.074,37,55.527]],["name/2-8",[]],["text/2-8",[]],["component/2-8",[]],["keyword/2-8",[]],["title/2-9",[38,84.657]],["name/2-9",[]],["text/2-9",[]],["component/2-9",[]],["keyword/2-9",[]],["title/2",[36,60.073]],["name/2",[36,1.223]],["text/2",[2,0.692,4,0.638,5,0.752,9,2.373,10,2.807,16,0.816,17,3.71,22,1.987,23,1.621,24,2.271,25,2.024,27,0.841,29,1.198,30,4.899,31,2.197,32,6.639,34,3.386,36,3.883,37,3.501,39,1.996,40,1.176,41,0.596,42,2.213,43,1.562,44,1.612,45,0.861,46,1.824,47,1.504,48,0.799,49,0.944,50,1.176,51,0.855,52,2.783,53,0.533,54,1.331,55,1.562,56,1.12,57,0.562,58,0.722,59,0.553,60,0.684,61,0.638,62,1.795,63,1.11,64,0.692,65,1.853,66,0.722,67,0.613,68,0.619,69,1.176,70,1.176,71,0.711,72,1.176,73,0.625,74,0.684,75,2.324,76,1.621,77,3.15,78,2.64,79,1.176,80,2.518,81,1.517,82,1.176,83,2.403,84,1.443,85,2.933,86,4.401,87,2.891,88,1.176,89,2.554,90,1.037,91,1.176,92,0.855,93,0.744,94,1.498,95,2.989,96,1.176,97,1.246,98,1.082,99,0.702,100,1.67,101,0.702,102,0.733,103,1.176,104,0.973,105,1.621,106,6.366,107,2.013,108,3.021,109,1.839,110,3.021,111,3.021,112,1.221,113,3.501,114,0.936,115,3.376,116,1.42,117,0.607,118,0.596,119,1.176,120,2.17,121,0.879,122,0.733,123,2.741,124,1.54,125,1.176,126,0.799,127,1.605,128,4.158,129,0.757,130,2.554,131,0.515,132,2.157,133,1.881,134,1.351,135,0.492,136,0.667,137,0.816,138,0.619,139,0.518,140,1.592,141,0.744,142,1.531,143,1.19,144,1.02,145,2.933,146,1.176,147,2.013,148,0.711,149,1.446,150,1.176,151,0.879,152,1.177,153,1.67,154,3.256,155,0.586,156,1.082,157,0.667,158,0.897,159,0.823,160,0.607,161,1.475,162,0.77,163,0.757,164,0.515,165,2.625,166,1.578,167,1.062,168,1.54,169,1.621,170,1.42,171,0.784,172,0.645,173,1.621,174,0.905,175,1.176,176,1.02,177,1.621,178,1.795,179,1.203,180,0.919,181,0.757,182,0.625,183,0.733,184,0.905,185,0.733,186,1.082,187,0.541,188,1.005,189,1.284,190,0.77,191,0.733,192,0.936,193,0.486,194,1.67,195,0.684,196,1.082,197,1.727,198,0.533,199,0.744,200,2.17,201,1.176,202,1.176,203,1.176,204,0.973,205,2.096,206,1.351,207,0.99,208,3.719,209,0.638,210,2.17,211,3.021,212,0.518,213,3.455,214,3.287,215,0.744,216,3.64,217,4.047,218,0.596,219,0.936,220,1.082,221,1.261,222,0.576,223,0.675,224,1.176,225,0.799,226,2.17,227,2.17,228,0.799,229,1.67,230,1.053,231,2.778,232,0.645,233,0.973,234,0.77,235,0.936,236,1.02,237,0.835,238,1.02,239,1.02,240,1.082,241,1.176,242,1.506,243,0.757,244,0.956,245,1.176,246,1.176,247,1.053,248,0.784,249,2.17,250,0.879,251,0.675,252,1.176,253,0.744,254,1.176,255,1.881,256,0.631,257,0.973,258,1.881,259,0.835,260,0.591,261,1.176,262,0.77,263,0.855,264,0.973,265,1.176,266,1.013,267,1.176,268,1.176,269,0.659,270,0.675,271,0.591,272,1.082,273,0.652,274,1.176,275,2.324,276,0.835,277,2.17,278,1.176,279,1.977,280,1.02,281,0.702,282,0.879,283,0.973,284,0.684,285,0.684,286,0.381,287,0.936,288,1.727,289,0.692,290,0.77,291,0.799,292,0.816,293,1.373,294,2.778,295,1.881,296,0.667,297,0.763,298,1.176,299,1.02,300,0.973,301,0.816,302,0.733,303,0.816,304,1.082,305,1.176,306,1.176,307,0.936,308,0.508,309,1.082,310,0.645,311,0.631,312,0.973,313,1.176,314,0.733,315,0.631,316,0.855]],["component/2",[22,0.319]],["keyword/2",[]],["title/3",[83,36.37,317,30.465,318,32.439,319,34.139,320,45.715]],["name/3",[83,1.371]],["text/3",[321,6.194,322,6.194,323,5.571,324,6.735,325,6.735,326,6.735,327,6.735,328,6.735,329,6.735,330,6.194,331,6.735,332,6.735,333,6.735,334,6.735,335,6.735,336,6.735,337,6.735,338,6.735,339,6.735,340,6.735,341,6.735,342,6.735,343,6.735,344,6.735,345,6.735,346,6.735,347,6.735,348,6.735,349,6.735,350,6.735,351,6.735,352,6.735,353,6.735,354,6.735,355,6.194,356,6.194,357,6.735,358,6.735,359,6.735,360,6.735,361,6.735,362,6.735,363,6.735,364,6.735,365,6.735,366,6.735,367,6.735,368,6.735,369,6.735,370,6.735]],["component/3",[22,0.319]],["keyword/3",[]],["title/4-1",[371,51.936]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["keyword/4-1",[]],["title/4-2",[372,57.528]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["keyword/4-2",[]],["title/4-3",[22,15.666]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["keyword/4-3",[]],["title/4-4",[28,29.017,230,33.878]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["keyword/4-4",[]],["title/4-5",[373,48.01]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["keyword/4-5",[]],["title/4-6",[127,44.981]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["keyword/4-6",[]],["title/4-7",[164,30.547,165,41.629]],["name/4-7",[]],["text/4-7",[]],["component/4-7",[]],["keyword/4-7",[]],["title/4-8",[44,36.326]],["name/4-8",[]],["text/4-8",[]],["component/4-8",[]],["keyword/4-8",[]],["title/4-9",[374,48.01]],["name/4-9",[]],["text/4-9",[]],["component/4-9",[]],["keyword/4-9",[]],["title/4-10",[32,63.221]],["name/4-10",[]],["text/4-10",[]],["component/4-10",[]],["keyword/4-10",[]],["title/4-11",[375,77.854]],["name/4-11",[]],["text/4-11",[]],["component/4-11",[]],["keyword/4-11",[]],["title/4-12",[36,60.073]],["name/4-12",[]],["text/4-12",[]],["component/4-12",[]],["keyword/4-12",[]],["title/4-13",[376,43.464,377,36.717]],["name/4-13",[]],["text/4-13",[]],["component/4-13",[]],["keyword/4-13",[]],["title/4",[22,12.915,42,19.637]],["name/4",[286,0.558]],["text/4",[5,1.549,6,1.287,9,2.573,16,1.314,22,1.91,25,1.14,27,2.088,28,0.787,32,4.022,36,3.172,42,2.945,43,2.239,44,2.907,46,2.614,47,2.681,49,2.342,52,2.163,54,2.742,55,0.787,60,2.597,62,1.566,63,0.968,64,2.631,66,1.162,77,1.66,80,0.959,83,2.654,89,3.413,90,1.593,94,2.916,101,1.129,109,0.927,112,1.084,113,3.556,114,4.285,123,4.554,124,5.518,127,3.263,128,2.535,130,0.884,132,1.087,136,1.074,138,0.996,140,1.894,141,1.198,149,2.223,152,1.809,153,1.457,155,1.66,156,1.741,158,0.782,159,1.265,165,1.989,166,1.377,172,1.038,177,1.016,188,0.877,189,0.647,192,1.506,205,3.101,214,1.414,216,1.566,217,1.741,218,0.959,220,1.741,230,0.919,243,1.218,244,0.834,247,0.919,257,1.566,266,2.086,269,1.061,273,1.849,279,1.239,281,2.666,282,1.414,283,1.566,284,1.938,285,1.1,289,1.115,308,1.441,310,1.038,314,1.179,321,1.741,322,1.741,355,1.741,356,1.741,374,2.535,375,1.741,377,1.755,378,2.654,379,1.1,380,1.218,381,1.414,382,2.11,383,1.556,384,1.414,385,1.198,386,0.797,387,1.038,388,2.267,389,1.457,390,0.846,391,1.566,392,1.038,393,1.414,394,1.894,395,1.894,396,1.755,397,0.968,398,0.935,399,0.884,400,1.566,401,1.074,402,3.464,403,2.491,404,1.741,405,1.074,406,1.501,407,1.894,408,1.218,409,1.049,410,1.894,411,3.067,412,1.894,413,3.067,414,1.741,415,1.741,416,1.894,417,1.641,418,1.506,419,0.852,420,2.223,421,1.457,422,1.894,423,1.344,424,6.23,425,1.894,426,1.772,427,3.067,428,2.267,429,3.067,430,1.914,431,3.335,432,1.646,433,1.566,434,3.067,435,1.894,436,1.894,437,2.891,438,1.115,439,1.894,440,1.506,441,1.641,442,0.797,443,1.641,444,1.741,445,1.344,446,1.087,447,1.894,448,1.741,449,1.129,450,3.067,451,1.457,452,1.566,453,1.741,454,1.894,455,1.087,456,1.179,457,1.894,458,3.335,459,1.641,460,1.506,461,2.891,462,1.894,463,1.129,464,1.038,465,1.894,466,1.894,467,1.457,468,1.506,469,1.741,470,1.287,471,0.927,472,1.1,473,2.077,474,1.506,475,1.1,476,1.239,477,1.506,478,0.829,479,1.894,480,1.344,481,1.641,482,1.506,483,1.344,484,1.314,485,1.179,486,1.145,487,1.894,488,1.566,489,1.566,490,3.335,491,1.287,492,1.641,493,1.894,494,1.894,495,3.335,496,1.741,497,1.049,498,1.741,499,1.741,500,1.566,501,1.894,502,1.377,503,1.894,504,1.894,505,1.162,506,1.162,507,1.179,508,1.061,509,0.764,510,1.087]],["component/4",[22,0.319]],["keyword/4",[]],["title/5-1",[511,42.817,512,45.667]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["keyword/5-1",[]],["title/5-2",[27,23.018,130,27.705,512,38.847]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["keyword/5-2",[]],["title/5-3",[173,27.726,195,30.017,285,30.017,512,33.799]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["keyword/5-3",[]],["title/5-4",[173,37.462,374,39.58]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["keyword/5-4",[]],["title/5-5",[195,40.557,512,45.667]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["keyword/5-5",[]],["title/5",[512,55.392]],["name/5",[286,0.558]],["text/5",[9,1.696,10,1.682,27,3.414,52,1.808,54,2.178,61,1.925,77,2.819,89,3.762,94,2.258,106,5.275,109,3.457,128,3.211,130,2.642,145,6.255,149,2.366,169,3.791,173,3.791,176,3.077,189,1.213,193,1.467,195,5.943,208,2.412,209,1.925,212,1.564,218,4.084,230,1.723,266,2.642,270,2.038,285,6.126,308,1.533,310,3.872,372,2.412,374,5.323,376,3.526,390,1.586,418,2.824,421,5.434,473,3.526,488,2.936,491,4.8,502,4.117,510,2.038,511,4.945,512,7.865,513,3.077,514,3.55,515,2.366,516,6.111,517,2.651,518,1.868,519,2.731,520,2.323,521,3.265,522,2.013,523,1.682,524,1.868,525,5.208,526,2.651,527,3.265,528,2.731,529,1.669,530,3.077,531,1.709,532,3.55,533,2.013,534,2.936,535,2.211,536,3.55,537,1.968,538,7.064,539,3.55,540,3.55,541,3.55,542,3.55,543,3.55,544,3.55,545,5.663,546,3.55,547,3.55,548,3.55,549,3.55,550,3.55,551,3.55,552,3.55]],["component/5",[22,0.319]],["keyword/5",[]],["title/6",[28,29.017,149,46.512]],["name/6",[286,0.558]],["text/6",[22,1.857,28,4.173,44,4.307,106,7.496,109,4.913,149,6.689]],["component/6",[22,0.319]],["keyword/6",[]],["title/7-1",[516,48.427,553,35.051]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["keyword/7-1",[]],["title/7-2",[554,84.657]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["keyword/7-2",[]],["title/7-3",[555,77.854]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["keyword/7-3",[]],["title/7-4",[556,77.854]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["keyword/7-4",[]],["title/7-5",[557,84.657]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["keyword/7-5",[]],["title/7-6",[558,77.854]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["keyword/7-6",[]],["title/7-7",[559,84.657]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["keyword/7-7",[]],["title/7-8",[560,84.657]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["keyword/7-8",[]],["title/7-9",[561,84.657]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["keyword/7-9",[]],["title/7-10",[562,84.657]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["keyword/7-10",[]],["title/7-11",[23,52.121,563,69.794]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["keyword/7-11",[]],["title/7-12",[117,36.02,564,55.527]],["name/7-12",[]],["text/7-12",[]],["component/7-12",[]],["keyword/7-12",[]],["title/7-13",[49,30.343,565,30.754]],["name/7-13",[]],["text/7-13",[]],["component/7-13",[]],["keyword/7-13",[]],["title/7-14",[281,50.495]],["name/7-14",[]],["text/7-14",[]],["component/7-14",[]],["keyword/7-14",[]],["title/7-15",[218,42.896]],["name/7-15",[]],["text/7-15",[]],["component/7-15",[]],["keyword/7-15",[]],["title/7-16",[78,27.446,95,41.096,566,29.647,567,42.727]],["name/7-16",[]],["text/7-16",[]],["component/7-16",[]],["keyword/7-16",[]],["title/7-17",[127,37.084,516,48.427]],["name/7-17",[]],["text/7-17",[]],["component/7-17",[]],["keyword/7-17",[]],["title/7-18",[282,63.221]],["name/7-18",[]],["text/7-18",[]],["component/7-18",[]],["keyword/7-18",[]],["title/7-19",[218,42.896]],["name/7-19",[]],["text/7-19",[]],["component/7-19",[]],["keyword/7-19",[]],["title/7-20",[127,37.084,516,48.427]],["name/7-20",[]],["text/7-20",[]],["component/7-20",[]],["keyword/7-20",[]],["title/7-21",[283,70.025]],["name/7-21",[]],["text/7-21",[]],["component/7-21",[]],["keyword/7-21",[]],["title/7-22",[218,42.896]],["name/7-22",[]],["text/7-22",[]],["component/7-22",[]],["keyword/7-22",[]],["title/7-23",[127,37.084,516,48.427]],["name/7-23",[]],["text/7-23",[]],["component/7-23",[]],["keyword/7-23",[]],["title/7-24",[568,77.854]],["name/7-24",[]],["text/7-24",[]],["component/7-24",[]],["keyword/7-24",[]],["title/7-25",[218,42.896]],["name/7-25",[]],["text/7-25",[]],["component/7-25",[]],["keyword/7-25",[]],["title/7-26",[569,23.407,570,47.234,571,36.972]],["name/7-26",[]],["text/7-26",[]],["component/7-26",[]],["keyword/7-26",[]],["title/7-27",[127,37.084,516,48.427]],["name/7-27",[]],["text/7-27",[]],["component/7-27",[]],["keyword/7-27",[]],["title/7-28",[284,49.194]],["name/7-28",[]],["text/7-28",[]],["component/7-28",[]],["keyword/7-28",[]],["title/7-29",[218,42.896]],["name/7-29",[]],["text/7-29",[]],["component/7-29",[]],["keyword/7-29",[]],["title/7-30",[127,37.084,572,60.49]],["name/7-30",[]],["text/7-30",[]],["component/7-30",[]],["keyword/7-30",[]],["title/7-31",[28,24.683,54,36.423,572,51.456]],["name/7-31",[]],["text/7-31",[]],["component/7-31",[]],["keyword/7-31",[]],["title/7-32",[87,53.693,218,35.364]],["name/7-32",[]],["text/7-32",[]],["component/7-32",[]],["keyword/7-32",[]],["title/7-33",[54,42.817,127,37.084]],["name/7-33",[]],["text/7-33",[]],["component/7-33",[]],["keyword/7-33",[]],["title/7-34",[87,45.674,442,24.992,573,51.456]],["name/7-34",[]],["text/7-34",[]],["component/7-34",[]],["keyword/7-34",[]],["title/7-35",[127,31.545,284,34.5,567,49.108]],["name/7-35",[]],["text/7-35",[]],["component/7-35",[]],["keyword/7-35",[]],["title/7",[124,49.526,127,37.084]],["name/7",[127,0.916]],["text/7",[8,0.494,9,2.897,10,0.81,17,1.276,22,1.474,23,0.68,24,0.882,25,1.565,27,0.663,28,1.713,29,1.432,32,1.276,33,0.753,34,0.7,42,1.516,46,0.442,47,0.453,49,1.324,52,2.353,53,0.774,54,4.771,56,1.247,60,0.529,64,2.425,65,1.048,67,1.881,77,0.453,78,1.918,80,0.461,81,0.457,87,6.508,89,3.333,90,3.173,92,0.662,93,1.081,94,1.827,95,3.98,101,2.984,105,1.804,106,0.68,112,0.296,113,2.873,114,0.724,117,2.365,127,4.786,128,1.727,129,0.585,130,1.127,132,0.522,135,0.381,137,0.632,138,0.479,139,0.401,145,0.607,149,0.607,153,1.859,155,0.851,158,1.702,162,4.516,164,0.748,166,0.662,173,0.489,180,1.023,181,0.585,182,0.484,189,0.311,192,0.724,195,0.993,197,1.36,198,0.412,199,1.081,204,0.753,205,2.505,207,0.78,208,0.618,209,0.494,212,0.401,218,0.866,219,0.724,222,0.445,230,0.83,237,0.646,239,0.789,243,1.554,244,0.401,247,3.09,253,0.576,255,0.789,260,0.858,266,1.421,276,0.646,279,0.596,282,0.68,284,4.627,285,1.77,286,0.294,289,1.793,290,1.993,292,3.179,296,0.516,299,1.481,300,0.753,308,0.393,309,0.837,311,0.489,318,3.55,373,0.516,374,1.37,379,0.993,382,0.576,386,0.719,387,0.937,392,0.937,397,0.465,399,1.923,411,0.837,413,0.837,415,0.837,417,0.789,418,1.36,419,0.409,420,2.406,421,0.7,424,2.801,430,0.522,442,1.929,443,3.571,444,0.837,445,0.646,459,0.789,460,0.724,474,0.724,509,0.367,515,0.607,516,6.76,519,0.7,531,0.438,535,0.567,553,2.069,564,3.278,565,1.065,566,2.871,567,6.587,568,1.572,569,1.424,570,3.645,571,2.249,572,3.571,573,0.789,574,1.127,575,1.482,576,1.676,577,0.91,578,1.315,579,2.112,580,0.837,581,0.789,582,0.558,583,0.753,584,0.837,585,0.91,586,0.33,587,0.529,588,0.837,589,0.596,590,0.91,591,1.213,592,2.222,593,0.837,594,1.324,595,1.572,596,1.709,597,0.91,598,1.709,599,5.853,600,1.572,601,0.662,602,2.64,603,1.709,604,0.431,605,1.37,606,0.543,607,0.91,608,0.91,609,0.449,610,0.646,611,0.7,612,0.363,613,0.91,614,0.91,615,2.416,616,2.606,617,2.222,618,2.222,619,2.416,620,0.837,621,0.522,622,0.91,623,0.91,624,0.91,625,5.051,626,1.725,627,0.607,628,1.709,629,1.709,630,1.714,631,2.801,632,0.7,633,0.91,634,0.91,635,1.572,636,2.625,637,0.504,638,1.709,639,0.91,640,0.789,641,2.126,642,0.91,643,3.046,644,0.91,645,0.91,646,0.91,647,0.91,648,0.91,649,1.709,650,0.91,651,0.91,652,0.837,653,0.91,654,0.91,655,2.416,656,0.91,657,0.91,658,1.276,659,0.91,660,3.046,661,2.416,662,0.91,663,6.365,664,1.709,665,1.709,666,1.324,667,1.709,668,1.709,669,2.416,670,0.91,671,0.91,672,0.91,673,0.91,674,0.91,675,0.91,676,2.222,677,2.416,678,0.789,679,0.91,680,0.837,681,0.91,682,0.91,683,0.91,684,0.91,685,0.91,686,0.91,687,0.91,688,0.789,689,0.91,690,0.91,691,0.789,692,0.7,693,0.91,694,0.91,695,0.516,696,0.536,697,0.724,698,0.91,699,0.91,700,0.576,701,0.504,702,0.91,703,0.724,704,0.753,705,0.837,706,0.724,707,0.489,708,0.7,709,0.91,710,0.646,711,0.91,712,0.91,713,0.91,714,0.91,715,0.91,716,0.91,717,0.51,718,0.91,719,2.416,720,0.91,721,0.91,722,0.91,723,0.516,724,1.36,725,0.51,726,0.837,727,0.91,728,0.567,729,0.91,730,0.91,731,0.91,732,0.91,733,0.91,734,0.91,735,0.91,736,2.416,737,2.416,738,0.91,739,1.709,740,0.91,741,0.91,742,0.543,743,0.993,744,0.91,745,0.91,746,0.499,747,0.789,748,0.91,749,0.91,750,0.91,751,0.91,752,0.91,753,0.91,754,0.91,755,0.662,756,0.91,757,0.91,758,0.662,759,2.161,760,0.91,761,0.91,762,0.632]],["component/7",[22,0.319]],["keyword/7",[]],["title/8-1",[763,49.829]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["keyword/8-1",[]],["title/8-2",[508,39.123,509,28.158]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["keyword/8-2",[]],["title/8",[42,16.704,269,33.28,406,26.71]],["name/8",[764,1.724]],["text/8",[2,2.137,18,2.196,28,2.004,36,1.481,42,1.022,43,0.867,44,2.069,49,2.096,52,2.086,56,1.077,58,2.228,61,3.127,63,1.067,67,1.892,84,0.997,94,1.448,99,1.244,100,1.605,102,1.299,109,1.021,131,0.913,140,1.538,158,3.184,159,0.792,160,1.874,177,1.12,180,0.884,187,1.669,188,0.966,192,1.66,199,1.32,205,2.519,209,1.132,215,1.32,225,1.418,232,1.144,256,2.588,260,1.048,262,2.376,269,3.662,270,1.198,314,1.299,379,1.212,385,1.32,406,4.265,409,2.672,475,2.801,497,2.013,506,3.537,508,3.232,509,3.454,520,2.376,523,0.989,529,0.981,565,2.879,569,0.823,601,1.517,632,1.605,641,2.488,701,1.156,703,1.66,707,1.949,746,1.144,763,1.228,765,1.726,766,2.376,767,1.808,768,1.448,769,3.631,770,2.124,771,3.631,772,1.991,773,1.342,774,3.345,775,2.059,776,1.244,777,1.039,778,4.585,779,3.004,780,1.558,781,1.448,782,2.519,783,4.435,784,3.35,785,3.335,786,3.437,787,3.918,788,2.335,789,2.4,790,0.926,791,3.339,792,1.132,793,2.086,794,7.17,795,6.008,796,1.17,797,2.086,798,2.086,799,2.468,800,1.808,801,1.32,802,2.512,803,2.801,804,1.418,805,1.17,806,3.631,807,3.59,808,1.39,809,1.481,810,2.519,811,2.64,812,1.824,813,1.12,814,3.339,815,2.261,816,1.39,817,2.285,818,1.448,819,3.339,820,1.808,821,1.66,822,3.147,823,2.889,824,3.631,825,2.086,826,3.004,827,1.39,828,1.605,829,2.086,830,1.808,831,1.448,832,3.213,833,3.505,834,3.709,835,1.726,836,2.086,837,1.156,838,1.481,839,2.086,840,1.726,841,1.919,842,1.28,843,1.448,844,1.418,845,1.448,846,1.39,847,1.481,848,1.39,849,1.448,850,1.66,851,1.558,852,1.39,853,1.067,854,1.919,855,1.481,856,1.448,857,1.262,858,2.086,859,2.086,860,1.244,861,1.66,862,1.342,863,1.558,864,2.793,865,1.132,866,1.057,867,2.086,868,1.84,869,1.66,870,1.28,871,1.808,872,1.66,873,1.12,874,1.558,875,2.228,876,1.365,877,1.448,878,1.12,879,1.39,880,2.086,881,2.086]],["component/8",[22,0.319]],["keyword/8",[]],["title/9-1",[398,41.785]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["keyword/9-1",[]],["title/9-2",[281,41.629,399,32.569]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["keyword/9-2",[]],["title/9-3",[247,33.878,405,39.58]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["keyword/9-3",[]],["title/9",[882,84.657]],["name/9",[404,1.585]],["text/9",[9,3.333,41,2.356,42,1.963,52,1.485,59,2.186,94,3.713,118,2.356,130,2.17,132,2.669,158,1.921,167,2.276,187,2.138,209,2.522,230,2.257,247,3.387,281,4.997,380,4.488,383,3.257,390,2.077,399,3.909,405,4.751,475,2.702,505,2.852,508,2.606,509,1.876,528,3.577,569,1.833,641,2.4,704,5.772,706,5.552,781,3.226,796,2.606,853,2.377,864,3.577,883,4.03,884,4.415,885,3.042,886,4.65,887,6.048,888,3.299,889,2.895,890,3.042,891,6.979,892,6.979,893,4.65,894,5.552,895,6.418,896,6.418,897,4.65,898,4.65,899,4.415,900,3.299,901,6.979,902,4.65,903,4.03,904,4.276,905,3.299,906,3.36,907,3.333,908,4.65,909,4.488,910,3.299,911,2.606,912,4.65,913,4.276,914,3.16,915,2.138,916,4.65,917,4.03,918,4.65,919,4.65,920,4.65,921,2.773,922,3.699,923,4.65,924,4.65,925,4.65,926,4.65,927,2.107,928,2.895,929,2.773,930,3.846]],["component/9",[22,0.319]],["keyword/9",[]],["title/10-1",[763,49.829]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["keyword/10-1",[]],["title/10-2",[138,36.717,374,39.58]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["keyword/10-2",[]],["title/10-3",[284,49.194]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["keyword/10-3",[]],["title/10-4",[22,10.986,28,24.683,374,33.669]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["keyword/10-4",[]],["title/10-5",[89,39.505]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["keyword/10-5",[]],["title/10",[124,49.526,374,39.58]],["name/10",[374,0.977]],["text/10",[22,1.161,28,2.608,42,1.765,46,3.045,47,3.123,52,2.004,54,3.849,59,1.902,61,2.193,65,3.849,73,2.149,87,4.827,89,4.629,94,1.613,114,3.217,115,2.748,124,2.87,127,3.333,138,3.301,143,2.217,153,4.827,164,1.77,169,2.171,173,3.368,180,2.658,181,2.601,209,2.193,222,3.071,238,3.505,271,2.031,273,2.241,284,5.448,285,3.646,291,2.748,374,6.366,417,5.438,434,5.77,442,3.236,443,3.505,459,8.125,516,4.353,553,2.031,555,3.719,556,3.719,573,3.505,604,1.916,630,4.452,631,3.719,697,3.217,758,2.941,763,2.38,770,1.782,780,3.02,781,2.806,810,2.806,915,1.859,931,5.438,932,4.353,933,4.044,934,3.719,935,5.189,936,5.085,937,4.044,938,2.446,939,4.044,940,3.345,941,3.217,942,4.044,943,7.686,944,3.269,945,4.044,946,3.345,947,2.171,948,2.049,949,4.044,950,4.263,951,4.044,952,4.105,953,4.044,954,2.601,955,4.044,956,4.044,957,4.044]],["component/10",[22,0.319]],["keyword/10",[]],["title/11-1",[22,10.986,131,25.985,134,36.972]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["keyword/11-1",[]],["title/11-2",[22,8.46,131,20.008,134,28.469,198,20.714,777,22.758]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["keyword/11-2",[]],["title/11-3",[22,9.559,43,21.476,131,22.608,134,32.168]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["keyword/11-3",[]],["title/11-4",[42,16.704,164,25.985,958,27.096]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["keyword/11-4",[]],["title/11-5",[52,16.496,121,38.576,132,29.647,959,32.676]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["keyword/11-5",[]],["title/11-6",[45,27.674,579,27.362]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["keyword/11-6",[]],["title/11-7",[42,14.533,43,21.476,247,25.074,574,24.105]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["keyword/11-7",[]],["title/11-8",[295,36.972,509,23.953,927,26.901]],["name/11-8",[]],["text/11-8",[]],["component/11-8",[]],["keyword/11-8",[]],["title/11-9",[183,32.168,471,25.282,472,30.017,473,32.168]],["name/11-9",[]],["text/11-9",[]],["component/11-9",[]],["keyword/11-9",[]],["title/11-10",[117,36.02,779,32.087]],["name/11-10",[]],["text/11-10",[]],["component/11-10",[]],["keyword/11-10",[]],["title/11-11",[159,26.477,779,32.087]],["name/11-11",[]],["text/11-11",[]],["component/11-11",[]],["keyword/11-11",[]],["title/11-12",[112,22.682,779,32.087]],["name/11-12",[]],["text/11-12",[]],["component/11-12",[]],["keyword/11-12",[]],["title/11",[132,48.589]],["name/11",[286,0.558]],["text/11",[16,1.093,22,1.656,24,0.813,26,0.747,27,1.496,29,1.123,42,2.201,43,2.93,45,2.794,52,2.602,58,0.967,59,0.741,62,1.303,73,0.837,74,0.916,77,1.92,78,3.213,80,0.798,93,0.997,94,4.776,106,1.177,109,1.888,112,1.765,113,1.254,116,1.031,117,1.462,118,3.064,129,1.013,130,1.322,131,4.391,132,4.677,133,1.366,134,6.058,135,1.185,139,1.248,158,0.651,159,1.787,162,1.031,164,2.377,165,0.94,173,1.52,180,1.995,181,1.013,182,0.837,187,0.724,188,0.73,193,1.17,195,0.916,198,2.461,222,1.386,223,0.904,244,0.694,247,0.765,256,2.071,266,1.8,270,2.214,271,1.422,273,1.57,281,0.94,282,1.177,283,1.303,284,0.916,295,0.981,308,1.223,386,0.663,388,1.071,390,1.723,392,0.864,397,0.806,398,0.778,442,0.663,469,1.449,471,1.386,472,0.916,473,1.764,477,2.253,478,1.24,485,0.981,486,0.953,488,1.303,492,2.455,498,1.449,499,1.449,500,3.191,509,1.556,513,1.366,529,0.741,531,0.759,553,2.365,575,0.967,579,1.847,580,1.449,605,0.894,612,1.538,626,0.753,666,0.864,700,0.997,706,1.254,728,2.402,777,2.703,779,2.78,785,1.025,817,0.747,821,1.254,857,0.953,868,0.798,890,1.031,907,0.753,927,2.134,936,0.855,944,0.821,948,1.435,958,0.719,959,0.997,960,1.013,961,3.024,962,1.366,963,1.449,964,0.953,965,1.118,966,1.177,967,1.118,968,0.927,969,0.735,970,1.965,971,1.254,972,1.791,973,1.366,974,1.576,975,1.576,976,1.924,977,3.624,978,1.576,979,1.576,980,1.146,981,1.118,982,1.366,983,0.741,984,1.576,985,1.576,986,1.576,987,1.576,988,0.916,989,1.071,990,2.343,991,2.832,992,1.576,993,1.576,994,1.887,995,0.916,996,0.997,997,1.576,998,0.967,999,0.806,1000,4.332,1001,1.449,1002,2.772,1003,1.576,1004,1.366,1005,1.576,1006,1.576,1007,1.071,1008,1.449,1009,1.071,1010,1.212,1011,1.118,1012,1.146,1013,1.576,1014,1.576,1015,1.576,1016,2.832,1017,1.576,1018,1.576,1019,1.449,1020,1.576,1021,1.576,1022,2.115,1023,1.576,1024,2.832,1025,1.576,1026,1.303,1027,1.576,1028,1.576,1029,1.366,1030,2.832,1031,2.832,1032,2.832,1033,1.576,1034,1.576,1035,1.576,1036,1.576,1037,1.576,1038,1.449,1039,1.576,1040,2.604,1041,1.576,1042,1.576,1043,1.449,1044,0.873,1045,1.576,1046,1.576,1047,0.719,1048,1.449,1049,1.576,1050,1.576,1051,1.576,1052,1.071,1053,0.883,1054,1.576,1055,2.832,1056,1.576,1057,1.576,1058,1.576,1059,1.576,1060,1.576,1061,1.576,1062,1.576,1063,1.576,1064,1.576,1065,1.576,1066,1.071,1067,0.806,1068,1.254,1069,1.576,1070,1.576,1071,1.576,1072,1.303,1073,1.576,1074,1.576,1075,1.449,1076,1.303,1077,1.212,1078,1.576,1079,0.927]],["component/11",[22,0.319]],["keyword/11",[]],["title/12-1",[371,51.936]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["keyword/12-1",[]],["title/12-2",[22,12.915,49,30.343]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["keyword/12-2",[]],["title/12-3",[428,57.528]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["keyword/12-3",[]],["title/12-4",[44,25.475,90,28.357,586,21.497]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["keyword/12-4",[]],["title/12-5",[565,30.754,1080,36.717]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["keyword/12-5",[]],["title/12-6",[4,37.854,1047,31.853]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["keyword/12-6",[]],["title/12-7",[159,22.523,426,31.545,958,27.096]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["keyword/12-7",[]],["title/12-8",[159,22.523,398,29.304,1044,32.906]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["keyword/12-8",[]],["title/12-9",[1081,38.261,1082,48.427]],["name/12-9",[]],["text/12-9",[]],["component/12-9",[]],["keyword/12-9",[]],["title/12-10",[1083,63.221]],["name/12-10",[]],["text/12-10",[]],["component/12-10",[]],["keyword/12-10",[]],["title/12-11",[455,23.532,463,24.455,523,19.429,785,14.845,786,17.259,1084,24.794]],["name/12-11",[]],["text/12-11",[]],["component/12-11",[]],["keyword/12-11",[]],["title/12-12",[612,27.833,1085,43.464]],["name/12-12",[]],["text/12-12",[]],["component/12-12",[]],["keyword/12-12",[]],["title/12-13",[612,27.833,964,42.207]],["name/12-13",[]],["text/12-13",[]],["component/12-13",[]],["keyword/12-13",[]],["title/12-14",[785,25.271,786,29.38]],["name/12-14",[]],["text/12-14",[]],["component/12-14",[]],["keyword/12-14",[]],["title/12-15",[1080,36.717,1086,42.207]],["name/12-15",[]],["text/12-15",[]],["component/12-15",[]],["keyword/12-15",[]],["title/12-16",[115,47.428,786,29.38]],["name/12-16",[]],["text/12-16",[]],["component/12-16",[]],["keyword/12-16",[]],["title/12-17",[889,43.464,1087,44.15]],["name/12-17",[]],["text/12-17",[]],["component/12-17",[]],["keyword/12-17",[]],["title/12-18",[159,26.477,426,37.084]],["name/12-18",[]],["text/12-18",[]],["component/12-18",[]],["keyword/12-18",[]],["title/12-19",[1088,42.817,1089,49.526]],["name/12-19",[]],["text/12-19",[]],["component/12-19",[]],["keyword/12-19",[]],["title/12-20",[409,28.63,637,28.63,915,23.748,1090,42.727]],["name/12-20",[]],["text/12-20",[]],["component/12-20",[]],["keyword/12-20",[]],["title/12-21",[637,32.906,915,27.294,1091,37.556]],["name/12-21",[]],["text/12-21",[]],["component/12-21",[]],["keyword/12-21",[]],["title/12-22",[1092,53.693,1093,33.336]],["name/12-22",[]],["text/12-22",[]],["component/12-22",[]],["keyword/12-22",[]],["title/12-23",[259,32.439,478,20.008,509,18.444,1094,32.439,1095,35.169]],["name/12-23",[]],["text/12-23",[]],["component/12-23",[]],["keyword/12-23",[]],["title/12-24",[463,27.267,509,18.444,785,16.553,868,23.164,1096,33.239]],["name/12-24",[]],["text/12-24",[]],["component/12-24",[]],["keyword/12-24",[]],["title/12-25",[478,25.985,1044,32.906,1097,36.972]],["name/12-25",[]],["text/12-25",[]],["component/12-25",[]],["keyword/12-25",[]],["title/12-26",[22,12.915,43,29.017]],["name/12-26",[]],["text/12-26",[]],["component/12-26",[]],["keyword/12-26",[]],["title/12-27",[112,14.857,446,26.238,1093,21.835,1098,30.465,1099,31.065]],["name/12-27",[]],["text/12-27",[]],["component/12-27",[]],["keyword/12-27",[]],["title/12-28",[586,21.497,1100,24.094,1101,31.545]],["name/12-28",[]],["text/12-28",[]],["component/12-28",[]],["keyword/12-28",[]],["title/12-29",[74,34.5,777,29.556,1100,24.094]],["name/12-29",[]],["text/12-29",[]],["component/12-29",[]],["keyword/12-29",[]],["title/12-30",[1102,49.526,1103,40.058]],["name/12-30",[]],["text/12-30",[]],["component/12-30",[]],["keyword/12-30",[]],["title/12-31",[112,13.324,446,23.532,958,18.712,1093,19.583,1098,27.323,1099,27.861]],["name/12-31",[]],["text/12-31",[]],["component/12-31",[]],["keyword/12-31",[]],["title/12-32",[586,18.703,958,23.575,1100,20.963,1101,27.446]],["name/12-32",[]],["text/12-32",[]],["component/12-32",[]],["keyword/12-32",[]],["title/12-33",[74,30.017,777,25.716,958,23.575,1100,20.963]],["name/12-33",[]],["text/12-33",[]],["component/12-33",[]],["keyword/12-33",[]],["title/12-34",[958,27.096,1102,42.129,1103,34.075]],["name/12-34",[]],["text/12-34",[]],["component/12-34",[]],["keyword/12-34",[]],["title/12-35",[112,19.294,958,27.096,1104,36.972]],["name/12-35",[]],["text/12-35",[]],["component/12-35",[]],["keyword/12-35",[]],["title/12-36",[271,35.051,958,31.853]],["name/12-36",[]],["text/12-36",[]],["component/12-36",[]],["keyword/12-36",[]],["title/12-37",[310,28.318,396,27.175,958,23.575,1105,38.576]],["name/12-37",[]],["text/12-37",[]],["component/12-37",[]],["keyword/12-37",[]],["title/12-38",[142,26.174,159,19.596,958,23.575,1106,32.676]],["name/12-38",[]],["text/12-38",[]],["component/12-38",[]],["keyword/12-38",[]],["title/12-39",[788,38.179,958,27.096,1107,38.847]],["name/12-39",[]],["text/12-39",[]],["component/12-39",[]],["keyword/12-39",[]],["title/12-40",[478,25.985,779,27.294,958,27.096]],["name/12-40",[]],["text/12-40",[]],["component/12-40",[]],["keyword/12-40",[]],["title/12-41",[28,15.452,89,17.344,386,15.645,478,16.267,958,16.962,1108,21.876,1109,20.375]],["name/12-41",[]],["text/12-41",[]],["component/12-41",[]],["keyword/12-41",[]],["title/12-42",[958,27.096,1110,36.972,1111,28.585]],["name/12-42",[]],["text/12-42",[]],["component/12-42",[]],["keyword/12-42",[]],["title/12-43",[271,42.515]],["name/12-43",[]],["text/12-43",[]],["component/12-43",[]],["keyword/12-43",[]],["title/12-44",[142,30.083,159,22.523,1106,37.556]],["name/12-44",[]],["text/12-44",[]],["component/12-44",[]],["keyword/12-44",[]],["title/12-45",[788,44.882,1107,45.667]],["name/12-45",[]],["text/12-45",[]],["component/12-45",[]],["keyword/12-45",[]],["title/12-46",[478,30.547,779,32.087]],["name/12-46",[]],["text/12-46",[]],["component/12-46",[]],["keyword/12-46",[]],["title/12-47",[28,17.046,89,19.133,386,17.259,478,17.945,1108,24.132,1109,22.476]],["name/12-47",[]],["text/12-47",[]],["component/12-47",[]],["keyword/12-47",[]],["title/12-48",[112,22.682,1104,43.464]],["name/12-48",[]],["text/12-48",[]],["component/12-48",[]],["keyword/12-48",[]],["title/12-49",[1110,43.464,1111,33.604]],["name/12-49",[]],["text/12-49",[]],["component/12-49",[]],["keyword/12-49",[]],["title/12-50",[426,37.084,1112,44.882]],["name/12-50",[]],["text/12-50",[]],["component/12-50",[]],["keyword/12-50",[]],["title/12-51",[310,18.633,396,17.881,449,20.273,604,25.915,812,17.069,1113,20.554,1114,19.275]],["name/12-51",[]],["text/12-51",[]],["component/12-51",[]],["keyword/12-51",[]],["title/12-52",[449,27.267,604,21.664,1113,27.646,1115,24.29,1116,35.169]],["name/12-52",[]],["text/12-52",[]],["component/12-52",[]],["keyword/12-52",[]],["title/12-53",[22,12.915,45,27.674]],["name/12-53",[]],["text/12-53",[]],["component/12-53",[]],["keyword/12-53",[]],["title/12-54",[877,48.427,1117,42.207]],["name/12-54",[]],["text/12-54",[]],["component/12-54",[]],["keyword/12-54",[]],["title/12-55",[785,25.271,1100,28.325]],["name/12-55",[]],["text/12-55",[]],["component/12-55",[]],["keyword/12-55",[]],["title/12-56",[594,38.261,1047,31.853]],["name/12-56",[]],["text/12-56",[]],["component/12-56",[]],["keyword/12-56",[]],["title/12-57",[399,32.569,587,40.557]],["name/12-57",[]],["text/12-57",[]],["component/12-57",[]],["keyword/12-57",[]],["title/12-58",[406,31.4,1118,48.427]],["name/12-58",[]],["text/12-58",[]],["component/12-58",[]],["keyword/12-58",[]],["title/12-59",[112,19.294,875,36.423,1119,30.357]],["name/12-59",[]],["text/12-59",[]],["component/12-59",[]],["keyword/12-59",[]],["title/12-60",[397,30.357,1111,28.585,1120,34.075]],["name/12-60",[]],["text/12-60",[]],["component/12-60",[]],["keyword/12-60",[]],["title/12-61",[172,25.061,397,23.375,717,25.625,1120,26.238,1121,29.398]],["name/12-61",[]],["text/12-61",[]],["component/12-61",[]],["keyword/12-61",[]],["title/12-62",[172,25.061,183,28.469,717,25.625,1120,26.238,1121,29.398]],["name/12-62",[]],["text/12-62",[]],["component/12-62",[]],["keyword/12-62",[]],["title/12-63",[789,34.745,1119,35.687]],["name/12-63",[]],["text/12-63",[]],["component/12-63",[]],["keyword/12-63",[]],["title/12-64",[789,29.556,958,27.096,1119,30.357]],["name/12-64",[]],["text/12-64",[]],["component/12-64",[]],["keyword/12-64",[]],["title/12-65",[402,44.882,1122,44.15]],["name/12-65",[]],["text/12-65",[]],["component/12-65",[]],["keyword/12-65",[]],["title/12-66",[1122,44.15,1123,45.667]],["name/12-66",[]],["text/12-66",[]],["component/12-66",[]],["keyword/12-66",[]],["title/12-67",[505,36.423,1122,37.556,1123,38.847]],["name/12-67",[]],["text/12-67",[]],["component/12-67",[]],["keyword/12-67",[]],["title/12-68",[1124,49.526,1125,45.667]],["name/12-68",[]],["text/12-68",[]],["component/12-68",[]],["keyword/12-68",[]],["title/12-69",[442,24.992,586,21.497,1126,37.556]],["name/12-69",[]],["text/12-69",[]],["component/12-69",[]],["keyword/12-69",[]],["title/12-70",[1127,73.372]],["name/12-70",[]],["text/12-70",[]],["component/12-70",[]],["keyword/12-70",[]],["title/12-71",[873,37.462,1047,31.853]],["name/12-71",[]],["text/12-71",[]],["component/12-71",[]],["keyword/12-71",[]],["title/12-72",[789,29.556,790,26.341,1128,36.423]],["name/12-72",[]],["text/12-72",[]],["component/12-72",[]],["keyword/12-72",[]],["title/12-73",[789,29.556,790,26.341,1129,54.599]],["name/12-73",[]],["text/12-73",[]],["component/12-73",[]],["keyword/12-73",[]],["title/12-74",[717,25.625,1120,39.547,1130,31.719,1131,30.465]],["name/12-74",[]],["text/12-74",[]],["component/12-74",[]],["keyword/12-74",[]],["title/12-75",[1132,61.554]],["name/12-75",[]],["text/12-75",[]],["component/12-75",[]],["keyword/12-75",[]],["title/12-76",[123,36.972,471,29.058,612,23.676]],["name/12-76",[]],["text/12-76",[]],["component/12-76",[]],["keyword/12-76",[]],["title/12-77",[262,45.667,785,25.271]],["name/12-77",[]],["text/12-77",[]],["component/12-77",[]],["keyword/12-77",[]],["title/12-78",[464,28.318,778,25.716,1100,20.963,1133,25.716]],["name/12-78",[]],["text/12-78",[]],["component/12-78",[]],["keyword/12-78",[]],["title/12-79",[183,32.168,641,26.659,1100,20.963,1133,25.716]],["name/12-79",[]],["text/12-79",[]],["component/12-79",[]],["keyword/12-79",[]],["title/12-80",[1100,20.963,1133,25.716,1134,31.69,1135,26.174]],["name/12-80",[]],["text/12-80",[]],["component/12-80",[]],["keyword/12-80",[]],["title/12-81",[57,28.357,398,29.304,905,42.129]],["name/12-81",[]],["text/12-81",[]],["component/12-81",[]],["keyword/12-81",[]],["title/12-82",[112,19.294,790,26.341,1136,45.674]],["name/12-82",[]],["text/12-82",[]],["component/12-82",[]],["keyword/12-82",[]],["title/12-83",[397,30.357,586,21.497,1047,27.096]],["name/12-83",[]],["text/12-83",[]],["component/12-83",[]],["keyword/12-83",[]],["title/12-84",[256,31.867,579,23.276,866,30.083]],["name/12-84",[]],["text/12-84",[]],["component/12-84",[]],["keyword/12-84",[]],["title/12-85",[112,24.518,784,30.017,1119,26.413]],["name/12-85",[]],["text/12-85",[]],["component/12-85",[]],["keyword/12-85",[]],["title/12-86",[112,22.682,139,30.754]],["name/12-86",[]],["text/12-86",[]],["component/12-86",[]],["keyword/12-86",[]],["title/12-87",[1100,28.325,1137,45.667]],["name/12-87",[]],["text/12-87",[]],["component/12-87",[]],["keyword/12-87",[]],["title/12-88",[243,38.179,1100,24.094,1117,35.904]],["name/12-88",[]],["text/12-88",[]],["component/12-88",[]],["keyword/12-88",[]],["title/12-89",[112,19.294,399,27.705,1138,41.194]],["name/12-89",[]],["text/12-89",[]],["component/12-89",[]],["keyword/12-89",[]],["title/12-90",[876,45.085,1100,18.553,1115,24.29,1139,27.267]],["name/12-90",[]],["text/12-90",[]],["component/12-90",[]],["keyword/12-90",[]],["title/12-91",[22,12.915,101,41.629]],["name/12-91",[]],["text/12-91",[]],["component/12-91",[]],["keyword/12-91",[]],["title/12-92",[123,43.464,387,38.261]],["name/12-92",[]],["text/12-92",[]],["component/12-92",[]],["keyword/12-92",[]],["title/12-93",[22,12.915,28,29.017]],["name/12-93",[]],["text/12-93",[]],["component/12-93",[]],["keyword/12-93",[]],["title/12-94",[475,40.557,1140,55.527]],["name/12-94",[]],["text/12-94",[]],["component/12-94",[]],["keyword/12-94",[]],["title/12",[22,12.915,1141,30.144]],["name/12",[286,0.558]],["text/12",[2,0.728,4,1.4,6,0.84,7,0.327,8,0.238,10,0.208,16,0.304,19,0.318,22,1.77,25,0.15,26,1.362,27,1.689,28,1.31,29,0.772,35,0.899,41,0.43,42,2.31,43,2.54,44,2.128,45,3.549,46,0.412,47,0.218,49,2.073,52,3.083,53,0.385,55,3.205,57,0.765,59,0.206,61,0.461,64,0.943,67,0.644,68,0.447,74,0.255,77,1.431,78,0.233,80,0.627,81,0.427,84,0.591,85,0.292,89,0.747,90,1.085,94,0.175,97,0.487,99,0.261,101,0.955,106,0.327,107,0.292,109,0.416,112,2.159,115,0.298,117,0.438,118,0.986,121,0.327,122,0.273,123,0.997,127,0.657,128,0.701,130,0.396,131,0.852,132,0.251,135,1.823,136,1.104,137,0.304,138,0.651,139,1.506,140,1.217,141,0.537,142,0.811,143,0.24,145,0.292,147,0.566,151,0.327,152,0.238,155,0.423,158,1.615,159,1.733,160,0.638,161,0.84,163,0.282,164,0.192,165,0.507,171,0.292,172,0.466,177,0.86,178,0.362,179,0.471,180,1.093,182,0.451,187,0.39,188,0.901,189,0.15,190,0.287,191,0.529,193,1.801,194,0.337,198,1.428,199,0.277,206,0.529,207,1.312,208,0.298,209,0.461,212,0.706,215,0.782,218,0.43,219,0.348,221,0.494,222,0.416,223,1.481,225,0.298,228,0.577,230,0.412,243,0.282,244,0.545,247,2.115,251,0.251,259,0.311,260,0.621,262,0.556,266,0.204,270,0.251,271,0.977,273,2.415,281,0.507,284,0.255,285,0.255,286,0.142,301,0.304,302,0.77,308,0.189,310,0.466,311,0.235,315,0.235,319,0.327,371,0.269,372,1.322,373,0.482,376,0.273,377,0.447,379,0.719,382,0.277,383,1.931,385,0.537,386,1.327,387,0.678,390,1.849,393,0.327,396,0.651,397,0.819,398,1.121,399,0.577,401,1.289,402,0.546,406,1.759,409,0.243,419,1.161,420,0.292,426,0.851,428,0.298,430,0.71,432,1.274,440,0.676,442,0.956,446,0.71,449,0.507,455,0.487,456,0.273,463,0.507,464,0.678,471,1.112,475,0.719,478,1.606,480,0.603,483,0.877,484,0.304,485,0.273,486,0.265,497,0.243,505,0.759,507,0.273,508,0.246,509,1.378,510,0.487,518,0.651,520,0.287,522,0.482,523,1.223,524,0.23,529,1.214,531,0.771,533,0.248,537,0.888,553,0.621,565,1.001,566,0.71,569,1.243,571,0.273,574,0.908,575,0.521,579,0.891,581,0.736,582,1.194,583,0.362,586,1.796,587,0.719,594,0.678,604,1.077,605,1.104,612,2.547,621,0.251,625,0.292,627,0.292,637,0.471,666,0.24,696,0.258,701,0.243,707,0.86,710,0.311,717,0.898,723,0.908,724,0.348,725,0.476,742,0.507,759,0.311,763,0.728,766,1.048,770,0.706,773,0.795,774,0.304,775,0.248,776,0.261,777,0.797,778,0.969,779,1.045,782,0.304,784,1.67,785,2.824,786,1.923,787,0.577,788,0.546,789,1.131,790,1.628,792,0.461,801,0.537,802,0.228,803,0.255,805,0.246,807,0.997,812,0.621,813,1.045,815,0.273,816,0.292,817,0.403,828,0.337,833,0.318,837,0.243,843,0.304,844,0.577,846,0.292,847,0.311,852,0.292,853,1.32,857,0.265,860,0.738,865,0.461,866,0.627,868,0.43,873,0.456,875,0.759,876,0.556,877,0.304,884,0.277,889,0.997,899,0.537,905,0.603,906,1.243,907,0.406,910,0.603,911,0.246,915,0.736,927,1.169,928,0.273,938,0.265,940,0.362,944,0.228,947,0.456,948,0.986,950,0.577,952,0.809,959,0.537,960,0.282,961,0.687,964,0.265,967,0.311,968,0.258,969,1.06,970,0.589,976,0.298,981,0.311,983,2.332,988,0.255,989,0.84,996,0.277,999,0.819,1009,0.577,1011,0.311,1012,0.318,1044,1.259,1047,1.784,1053,0.693,1067,0.995,1080,0.843,1081,0.878,1082,0.304,1083,0.327,1084,0.514,1085,1.607,1086,0.514,1088,0.759,1091,0.782,1093,1.373,1094,0.311,1095,0.337,1098,0.824,1099,0.298,1100,2.229,1101,1.034,1102,0.311,1103,0.919,1104,0.529,1105,0.327,1106,0.782,1107,0.556,1108,0.5,1109,0.878,1110,0.529,1111,1.243,1112,0.795,1113,0.748,1114,1.289,1115,0.851,1116,0.337,1117,0.514,1118,0.304,1119,1.747,1120,2.244,1121,1.461,1122,0.277,1123,1.048,1124,0.311,1125,1.273,1126,0.537,1128,1.194,1130,0.304,1131,0.566,1132,0.899,1133,0.969,1134,0.982,1135,1.308,1136,0.653,1137,0.556,1138,0.304,1139,0.507,1142,0.618,1143,0.657,1144,0.296,1145,0.888,1146,0.703,1147,0.521,1148,0.304,1149,0.38,1150,0.38,1151,0.38,1152,0.265,1153,0.348,1154,0.348,1155,0.348,1156,0.337,1157,0.693,1158,0.577,1159,0.937,1160,0.337,1161,1.447,1162,0.38,1163,0.348,1164,0.736,1165,0.38,1166,1.067,1167,0.556,1168,0.337,1169,0.298,1170,0.348,1171,0.38,1172,0.348,1173,1.177,1174,0.337,1175,1.35,1176,0.318,1177,0.566,1178,0.261,1179,0.277,1180,0.521,1181,0.38,1182,0.304,1183,0.265,1184,0.38,1185,0.337,1186,0.327,1187,0.348,1188,0.738,1189,2.532,1190,2.586,1191,2.635,1192,0.348,1193,0.362,1194,0.782,1195,0.38,1196,0.38,1197,0.521,1198,0.337,1199,0.311,1200,0.248,1201,0.304,1202,0.38,1203,0.348,1204,0.318,1205,0.304,1206,0.653,1207,0.809,1208,0.362,1209,0.38,1210,0.362,1211,0.337,1212,0.362,1213,0.529,1214,0.304,1215,0.348,1216,0.738,1217,0.514,1218,0.362,1219,0.23,1220,0.362,1221,0.577,1222,0.676,1223,0.298,1224,0.318,1225,0.327,1226,0.471,1227,0.327,1228,0.38,1229,0.362,1230,0.348,1231,0.298,1232,0.556,1233,0.38,1234,0.38,1235,0.298,1236,0.38,1237,0.362,1238,0.348,1239,0.287,1240,0.318,1241,0.984,1242,0.514,1243,0.318,1244,0.38,1245,0.603,1246,0.38,1247,0.255,1248,0.287,1249,0.362,1250,0.248,1251,0.603,1252,0.327,1253,0.362,1254,0.327,1255,0.304,1256,0.362,1257,0.348,1258,0.362,1259,0.348,1260,0.298,1261,0.304,1262,0.466,1263,0.566,1264,0.556,1265,0.38,1266,0.676,1267,0.265,1268,0.618,1269,1.259,1270,0.951,1271,0.337,1272,0.38,1273,0.292,1274,0.304,1275,0.261,1276,0.38,1277,0.403,1278,0.348,1279,0.265,1280,0.265,1281,0.362,1282,0.255,1283,0.292,1284,0.38,1285,0.38,1286,0.703,1287,0.304,1288,0.362,1289,0.348,1290,0.403,1291,0.38,1292,0.304,1293,0.318,1294,0.403,1295,0.348,1296,1.072,1297,0.634,1298,0.38,1299,1.325,1300,1.111,1301,0.603,1302,0.38,1303,0.603,1304,1.072,1305,0.327,1306,0.318,1307,0.255,1308,0.362,1309,0.362,1310,0.403,1311,0.318,1312,0.403,1313,0.362,1314,0.676,1315,0.38,1316,0.653,1317,0.781,1318,0.362,1319,0.653,1320,0.38,1321,0.728,1322,0.703,1323,0.703,1324,0.327,1325,0.38,1326,0.304,1327,0.403,1328,0.304,1329,0.318,1330,0.38,1331,0.298,1332,0.403,1333,0.318,1334,0.676,1335,0.38,1336,0.265,1337,0.931,1338,0.703,1339,0.298,1340,0.589,1341,0.38,1342,0.292,1343,0.304,1344,0.311,1345,0.348,1346,0.403,1347,0.38,1348,1.072,1349,0.736,1350,0.38,1351,0.298,1352,0.38,1353,0.304,1354,0.5,1355,0.327,1356,0.38,1357,0.618,1358,0.311,1359,0.38,1360,0.984,1361,0.38,1362,0.38,1363,0.38,1364,0.337,1365,0.38,1366,0.38,1367,0.362,1368,1.232,1369,0.38,1370,0.337,1371,0.348,1372,0.38,1373,0.362,1374,0.348,1375,0.38,1376,0.348,1377,0.38,1378,0.362,1379,0.38,1380,0.38]],["component/12",[22,0.319]],["keyword/12",[]],["title/13-1",[198,20.714,471,22.375,472,26.565,832,30.465,1342,30.465]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["keyword/13-1",[]],["title/13-2",[42,14.533,402,33.218,403,38.576,627,34.424]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["keyword/13-2",[]],["title/13-3",[4,37.854,1133,34.745]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["keyword/13-3",[]],["title/13-4",[43,24.683,117,30.64,1219,31.234]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["keyword/13-4",[]],["title/13-5",[43,24.683,117,30.64,455,34.075]],["name/13-5",[]],["text/13-5",[]],["component/13-5",[]],["keyword/13-5",[]],["title/13-6",[24,30.64,43,24.683,199,37.556]],["name/13-6",[]],["text/13-6",[]],["component/13-6",[]],["keyword/13-6",[]],["title/13-7",[785,21.497,786,24.992,970,41.194]],["name/13-7",[]],["text/13-7",[]],["component/13-7",[]],["keyword/13-7",[]],["title/13-8",[406,31.4,497,38.684]],["name/13-8",[]],["text/13-8",[]],["component/13-8",[]],["keyword/13-8",[]],["title/13-9",[44,29.948,406,31.4]],["name/13-9",[]],["text/13-9",[]],["component/13-9",[]],["keyword/13-9",[]],["title/13-10",[314,52.72]],["name/13-10",[]],["text/13-10",[]],["component/13-10",[]],["keyword/13-10",[]],["title/13-11",[1381,84.657]],["name/13-11",[]],["text/13-11",[]],["component/13-11",[]],["keyword/13-11",[]],["title/13-12",[1235,57.528]],["name/13-12",[]],["text/13-12",[]],["component/13-12",[]],["keyword/13-12",[]],["title/13-13",[1382,77.854]],["name/13-13",[]],["text/13-13",[]],["component/13-13",[]],["keyword/13-13",[]],["title/13-14",[1383,56.418]],["name/13-14",[]],["text/13-14",[]],["component/13-14",[]],["keyword/13-14",[]],["title/13",[42,19.637,400,57.73]],["name/13",[1384,1.724]],["text/13",[4,1.93,5,0.261,6,0.971,24,2.055,26,0.357,28,0.313,29,1.579,41,1.033,42,2.347,43,3.094,44,0.323,45,0.566,48,0.512,49,2.205,52,2.622,53,0.647,54,0.462,57,0.682,58,0.462,59,0.354,60,0.437,63,0.385,64,0.443,65,0.876,66,0.462,67,1.351,75,1.099,77,0.711,80,0.724,81,1.555,84,0.682,89,1.21,90,0.682,93,0.476,94,1.034,97,1.17,112,0.245,117,2.617,127,0.759,129,0.484,130,0.351,131,1.557,132,0.432,135,1.084,136,1.756,138,1.364,139,1.755,140,0.605,141,0.476,142,0.724,143,0.413,148,1.233,155,0.375,157,0.427,158,3.73,159,0.286,163,0.919,164,0.329,165,0.449,167,0.998,168,0.534,169,0.404,172,2.183,173,0.404,177,0.404,180,0.864,181,0.484,182,0.4,185,0.469,187,1.424,188,1.845,190,0.493,193,1.47,195,0.437,198,1.982,199,2.519,207,1.413,212,2.087,218,1.803,221,0.83,222,0.998,223,0.82,253,0.476,266,0.351,269,1.143,284,0.437,285,0.437,290,1.696,291,0.971,296,0.81,308,1.72,314,0.469,315,0.404,316,1.885,318,0.534,377,3.387,379,1.8,380,1.311,381,0.562,386,1.498,390,0.911,397,0.385,398,1.756,399,0.351,401,1.156,402,4.141,403,4.808,405,4.221,406,3.632,409,0.417,419,0.643,423,0.534,430,0.432,432,1.006,438,0.841,442,1.498,451,0.579,455,2.042,456,0.89,463,1.847,468,1.137,470,0.512,471,0.998,472,0.437,473,0.469,475,0.437,497,2.207,505,0.462,506,0.876,508,0.422,509,2.598,510,0.82,511,3.302,515,0.502,517,0.562,522,0.81,523,1.686,528,1.099,529,1.456,537,0.792,564,0.599,565,0.629,574,1.661,579,0.799,582,2.683,586,0.273,594,1.118,604,0.966,612,0.813,621,0.82,696,0.841,700,0.476,723,0.427,725,1.453,742,0.449,765,0.623,770,0.332,772,0.783,775,0.427,776,0.852,777,1.291,779,2.011,783,1.099,785,3.304,786,1.993,789,0.375,796,1.143,801,1.64,802,0.392,803,1.506,805,0.422,809,0.534,812,0.378,813,1.094,817,0.966,818,0.522,828,1.099,831,0.522,832,1.359,833,0.547,837,1.437,842,1.251,843,0.522,844,0.512,853,3.407,855,0.534,856,0.522,860,0.852,861,0.599,862,0.484,863,0.562,865,1.68,868,0.724,877,0.522,879,1.359,884,0.476,885,0.493,914,0.512,921,0.449,927,0.647,928,0.469,929,1.216,941,0.599,944,0.392,947,0.767,959,1.64,961,1.112,969,1.21,970,2.469,977,0.579,983,0.354,989,0.971,996,1.29,1044,0.417,1047,0.344,1053,1.143,1081,0.413,1088,0.462,1089,0.534,1096,0.547,1109,0.783,1112,0.484,1118,0.991,1126,0.476,1130,0.522,1132,0.547,1133,2.68,1134,0.876,1135,1.314,1139,0.449,1142,1.482,1143,0.759,1144,0.262,1145,0.417,1148,0.991,1152,0.455,1153,0.599,1157,4.072,1159,0.688,1174,1.099,1183,0.455,1187,0.599,1188,0.852,1194,1.959,1199,1.447,1205,2.469,1206,0.579,1215,0.599,1216,2.123,1219,0.752,1223,1.385,1224,0.547,1226,0.417,1232,0.493,1235,1.385,1242,1.568,1247,0.83,1248,0.493,1250,0.427,1262,1.118,1264,2.862,1268,1.039,1269,0.417,1283,0.952,1293,1.482,1297,0.562,1315,0.652,1321,0.443,1336,0.455,1339,0.971,1342,1.728,1343,0.522,1354,0.443,1355,0.562,1376,0.599,1382,0.692,1385,0.753,1386,2.247,1387,1.875,1388,0.652,1389,0.692,1390,0.692,1391,0.692,1392,0.692,1393,1.039,1394,2.144,1395,1.314,1396,2.592,1397,3.097,1398,0.443,1399,0.484,1400,0.579,1401,0.919,1402,0.623,1403,1.936,1404,0.753,1405,0.652,1406,0.652,1407,1.482,1408,0.462,1409,0.599,1410,1.429,1411,1.482,1412,0.753,1413,1.429,1414,0.753,1415,1.314,1416,0.476,1417,1.429,1418,1.238,1419,0.599,1420,1.568,1421,0.753,1422,0.753,1423,1.314,1424,0.692,1425,0.753,1426,0.753,1427,0.971,1428,1.238,1429,0.652,1430,1.875,1431,0.753,1432,1.039,1433,0.753,1434,0.449,1435,0.599,1436,0.753,1437,0.562,1438,0.935,1439,0.753,1440,0.522,1441,0.692,1442,0.512,1443,1.429,1444,0.692,1445,0.579,1446,0.753,1447,0.547,1448,1.359,1449,0.753,1450,0.753,1451,0.753,1452,0.692,1453,0.753,1454,0.753,1455,2.039,1456,0.547,1457,0.502,1458,0.692,1459,0.562,1460,0.753,1461,0.512,1462,0.753,1463,0.692,1464,0.652,1465,0.692,1466,1.546,1467,0.623,1468,0.547,1469,0.753,1470,0.522,1471,1.099,1472,0.753,1473,1.839,1474,0.753,1475,0.753,1476,0.753,1477,0.753,1478,0.753,1479,0.623,1480,0.599,1481,0.652,1482,0.512,1483,0.692,1484,0.692,1485,1.429,1486,0.692,1487,0.753,1488,0.579,1489,0.652,1490,0.599,1491,0.652,1492,0.753,1493,0.512,1494,0.753,1495,0.599,1496,0.753,1497,0.753,1498,0.623,1499,1.067,1500,0.599,1501,0.753,1502,0.753,1503,0.652,1504,0.692,1505,0.753,1506,0.753,1507,0.753]],["component/13",[22,0.319]],["keyword/13",[]],["title/14-1",[28,35.196]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["keyword/14-1",[]],["title/14-2",[22,12.915,28,29.017]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["keyword/14-2",[]],["title/14-3",[22,10.986,28,24.683,43,24.683]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["keyword/14-3",[]],["title/14-4",[28,24.683,54,36.423,284,34.5]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["keyword/14-4",[]],["title/14-5",[78,37.084,95,55.527]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["keyword/14-5",[]],["title/14-6",[30,57.73,491,47.428]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["keyword/14-6",[]],["title/14",[587,40.557,931,60.49]],["name/14",[286,0.558]],["text/14",[9,3.692,22,1.611,24,3.261,25,3.216,28,4.317,30,3.375,32,4.718,43,1.697,52,1.303,54,2.504,56,3.261,64,2.402,65,2.504,78,2.168,80,2.068,89,4.061,90,1.949,94,4.141,95,3.247,98,5.81,99,3.768,114,6.15,127,2.168,128,5.889,130,3.607,134,5.42,145,5.152,153,4.86,187,2.905,194,3.139,208,2.773,243,4.063,248,2.72,284,3.671,421,3.139,440,6.15,488,5.226,491,4.293,553,2.049,569,2.491,592,3.753,707,4.672,723,2.314,726,8.004,773,2.624,931,6.7,936,2.213,947,2.19,1029,3.537,1329,2.967,1508,3.753,1509,3.537,1510,3.247,1511,8.703,1512,6.318,1513,6.318,1514,6.318,1515,6.318,1516,4.081,1517,4.081,1518,7.109,1519,7.73,1520,4.081,1521,4.081,1522,2.342]],["component/14",[22,0.319]],["keyword/14",[]],["title/15-1",[165,50.495]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["keyword/15-1",[]],["title/15-2",[587,49.194]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["keyword/15-2",[]],["title/15",[511,51.936]],["name/15",[286,0.558]],["text/15",[9,3.51,10,2.362,22,0.922,27,1.932,29,1.976,52,3.281,54,4.508,77,2.481,84,2.38,94,3.842,138,2.622,145,3.321,158,2.059,164,2.181,165,6.411,169,3.944,172,2.732,173,2.675,193,2.059,199,4.649,229,3.834,378,7.665,473,3.104,483,3.537,491,3.387,511,5.91,512,7.033,523,2.362,524,2.622,525,4.583,526,3.722,527,4.583,528,3.834,529,2.344,530,4.32,531,2.4,587,4.27,589,3.261,696,2.933,917,6.369,932,3.458,961,2.139,1113,3.014,1135,2.525,1219,2.622,1242,3.014,1267,3.014,1499,3.722,1523,3.965,1524,4.984,1525,4.984,1526,4.984,1527,4.984,1528,4.984,1529,4.984,1530,4.984,1531,4.984,1532,4.984,1533,4.984,1534,4.984,1535,4.984,1536,4.984,1537,4.984,1538,4.984,1539,6.369,1540,7.349]],["component/15",[22,0.319]],["keyword/15",[]],["title/16",[128,39.58,138,36.717]],["name/16",[286,0.558]],["text/16",[]],["component/16",[22,0.319]],["keyword/16",[]],["title/17-1",[22,12.915,43,29.017]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["keyword/17-1",[]],["title/17-2",[112,14.857,446,26.238,1093,21.835,1098,30.465,1099,31.065]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["keyword/17-2",[]],["title/17-3",[586,21.497,1100,24.094,1101,31.545]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["keyword/17-3",[]],["title/17-4",[74,34.5,777,29.556,1100,24.094]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["keyword/17-4",[]],["title/17-5",[1102,49.526,1103,40.058]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["keyword/17-5",[]],["title/17-6",[112,13.324,446,23.532,958,18.712,1093,19.583,1098,27.323,1099,27.861]],["name/17-6",[]],["text/17-6",[]],["component/17-6",[]],["keyword/17-6",[]],["title/17-7",[586,18.703,958,23.575,1100,20.963,1101,27.446]],["name/17-7",[]],["text/17-7",[]],["component/17-7",[]],["keyword/17-7",[]],["title/17-8",[74,30.017,777,25.716,958,23.575,1100,20.963]],["name/17-8",[]],["text/17-8",[]],["component/17-8",[]],["keyword/17-8",[]],["title/17-9",[958,27.096,1102,42.129,1103,34.075]],["name/17-9",[]],["text/17-9",[]],["component/17-9",[]],["keyword/17-9",[]],["title/17-10",[112,19.294,958,27.096,1104,36.972]],["name/17-10",[]],["text/17-10",[]],["component/17-10",[]],["keyword/17-10",[]],["title/17-11",[271,35.051,958,31.853]],["name/17-11",[]],["text/17-11",[]],["component/17-11",[]],["keyword/17-11",[]],["title/17-12",[310,28.318,396,27.175,958,23.575,1105,38.576]],["name/17-12",[]],["text/17-12",[]],["component/17-12",[]],["keyword/17-12",[]],["title/17-13",[142,26.174,159,19.596,958,23.575,1106,32.676]],["name/17-13",[]],["text/17-13",[]],["component/17-13",[]],["keyword/17-13",[]],["title/17-14",[788,38.179,958,27.096,1107,38.847]],["name/17-14",[]],["text/17-14",[]],["component/17-14",[]],["keyword/17-14",[]],["title/17-15",[478,25.985,779,27.294,958,27.096]],["name/17-15",[]],["text/17-15",[]],["component/17-15",[]],["keyword/17-15",[]],["title/17-16",[28,15.452,89,17.344,386,15.645,478,16.267,958,16.962,1108,21.876,1109,20.375]],["name/17-16",[]],["text/17-16",[]],["component/17-16",[]],["keyword/17-16",[]],["title/17-17",[958,27.096,1110,36.972,1111,28.585]],["name/17-17",[]],["text/17-17",[]],["component/17-17",[]],["keyword/17-17",[]],["title/17-18",[271,42.515]],["name/17-18",[]],["text/17-18",[]],["component/17-18",[]],["keyword/17-18",[]],["title/17-19",[142,30.083,159,22.523,1106,37.556]],["name/17-19",[]],["text/17-19",[]],["component/17-19",[]],["keyword/17-19",[]],["title/17-20",[788,44.882,1107,45.667]],["name/17-20",[]],["text/17-20",[]],["component/17-20",[]],["keyword/17-20",[]],["title/17-21",[478,30.547,779,32.087]],["name/17-21",[]],["text/17-21",[]],["component/17-21",[]],["keyword/17-21",[]],["title/17-22",[28,17.046,89,19.133,386,17.259,478,17.945,1108,24.132,1109,22.476]],["name/17-22",[]],["text/17-22",[]],["component/17-22",[]],["keyword/17-22",[]],["title/17-23",[112,22.682,1104,43.464]],["name/17-23",[]],["text/17-23",[]],["component/17-23",[]],["keyword/17-23",[]],["title/17-24",[1110,43.464,1111,33.604]],["name/17-24",[]],["text/17-24",[]],["component/17-24",[]],["keyword/17-24",[]],["title/17-25",[426,37.084,1112,44.882]],["name/17-25",[]],["text/17-25",[]],["component/17-25",[]],["keyword/17-25",[]],["title/17-26",[310,18.633,396,17.881,449,20.273,604,25.915,812,17.069,1113,20.554,1114,19.275]],["name/17-26",[]],["text/17-26",[]],["component/17-26",[]],["keyword/17-26",[]],["title/17-27",[449,27.267,604,21.664,1113,27.646,1115,24.29,1116,35.169]],["name/17-27",[]],["text/17-27",[]],["component/17-27",[]],["keyword/17-27",[]],["title/17",[]],["name/17",[286,0.558]],["text/17",[16,1.493,22,1.982,28,1.55,42,2.825,43,4.085,44,4.114,46,1.044,47,1.071,52,2.881,55,1.55,57,1.028,74,1.25,84,1.028,89,1.004,109,1.053,112,2.371,128,2.115,132,1.235,135,4.011,138,1.132,139,1.643,142,2.501,155,1.071,158,0.889,159,1.872,160,1.11,180,0.911,188,1.727,190,1.408,193,0.889,198,2.236,207,1.702,219,1.712,247,4.654,260,1.08,271,2.478,273,5.314,281,1.283,310,2.044,372,1.462,386,0.906,387,1.179,390,2.63,396,1.962,406,0.968,419,1.678,426,1.143,430,1.235,446,2.14,449,2.224,478,2.914,484,1.493,485,1.34,486,1.301,509,0.868,523,1.019,531,1.036,571,1.34,574,1.004,586,2.132,604,2.339,612,0.858,696,1.266,775,1.22,777,2.457,778,1.071,779,2.269,785,2.642,786,0.906,788,2.398,789,1.071,812,1.08,875,1.32,915,0.989,927,1.69,948,1.09,969,1.004,970,1.493,983,4.509,1047,0.982,1053,1.206,1093,2.357,1098,2.485,1099,1.462,1100,2.961,1101,2.622,1102,1.527,1103,2.14,1104,2.322,1105,1.607,1106,3.122,1107,2.44,1108,2.195,1109,2.044,1110,2.322,1111,1.795,1112,2.398,1113,2.255,1114,1.22,1115,1.143,1116,1.655,1119,1.1,1126,1.361,1143,1.143,1147,1.32,1189,5.572,1190,5.329,1191,5.799,1197,1.32,1264,1.408,1266,1.712,1267,1.301,1268,1.564,1269,1.192,1270,1.655,1271,1.655,1272,1.864,1273,1.434,1274,1.493,1275,1.283,1276,1.864,1277,1.978,1278,1.712,1279,1.301,1280,1.301,1281,1.779,1282,1.25]],["component/17",[22,0.319]],["keyword/17",[]],["title/18-1",[22,12.915,28,29.017]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["keyword/18-1",[]],["title/18-2",[475,40.557,1140,55.527]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["keyword/18-2",[]],["title/18",[]],["name/18",[286,0.558]],["text/18",[22,1.971,55,3.575,97,4.936,131,3.764,191,5.356,193,3.554,225,5.844,372,5.844,440,6.842,478,3.764,852,5.731,967,6.103,1167,5.627,1213,5.356,1375,7.454,1376,6.842,1377,7.454,1378,7.114,1379,7.454,1380,7.454]],["component/18",[22,0.319]],["keyword/18",[]],["title/19-1",[22,12.915,45,27.674]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["keyword/19-1",[]],["title/19-2",[877,48.427,1117,42.207]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["keyword/19-2",[]],["title/19-3",[785,25.271,1100,28.325]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["keyword/19-3",[]],["title/19-4",[594,38.261,1047,31.853]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["keyword/19-4",[]],["title/19-5",[399,32.569,587,40.557]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["keyword/19-5",[]],["title/19-6",[406,31.4,1118,48.427]],["name/19-6",[]],["text/19-6",[]],["component/19-6",[]],["keyword/19-6",[]],["title/19-7",[112,19.294,875,36.423,1119,30.357]],["name/19-7",[]],["text/19-7",[]],["component/19-7",[]],["keyword/19-7",[]],["title/19-8",[397,30.357,1111,28.585,1120,34.075]],["name/19-8",[]],["text/19-8",[]],["component/19-8",[]],["keyword/19-8",[]],["title/19-9",[172,25.061,397,23.375,717,25.625,1120,26.238,1121,29.398]],["name/19-9",[]],["text/19-9",[]],["component/19-9",[]],["keyword/19-9",[]],["title/19-10",[172,25.061,183,28.469,717,25.625,1120,26.238,1121,29.398]],["name/19-10",[]],["text/19-10",[]],["component/19-10",[]],["keyword/19-10",[]],["title/19-11",[789,34.745,1119,35.687]],["name/19-11",[]],["text/19-11",[]],["component/19-11",[]],["keyword/19-11",[]],["title/19-12",[789,29.556,958,27.096,1119,30.357]],["name/19-12",[]],["text/19-12",[]],["component/19-12",[]],["keyword/19-12",[]],["title/19-13",[402,44.882,1122,44.15]],["name/19-13",[]],["text/19-13",[]],["component/19-13",[]],["keyword/19-13",[]],["title/19-14",[1122,44.15,1123,45.667]],["name/19-14",[]],["text/19-14",[]],["component/19-14",[]],["keyword/19-14",[]],["title/19-15",[505,36.423,1122,37.556,1123,38.847]],["name/19-15",[]],["text/19-15",[]],["component/19-15",[]],["keyword/19-15",[]],["title/19-16",[1124,49.526,1125,45.667]],["name/19-16",[]],["text/19-16",[]],["component/19-16",[]],["keyword/19-16",[]],["title/19-17",[442,24.992,586,21.497,1126,37.556]],["name/19-17",[]],["text/19-17",[]],["component/19-17",[]],["keyword/19-17",[]],["title/19-18",[1127,73.372]],["name/19-18",[]],["text/19-18",[]],["component/19-18",[]],["keyword/19-18",[]],["title/19-19",[873,37.462,1047,31.853]],["name/19-19",[]],["text/19-19",[]],["component/19-19",[]],["keyword/19-19",[]],["title/19-20",[789,29.556,790,26.341,1128,36.423]],["name/19-20",[]],["text/19-20",[]],["component/19-20",[]],["keyword/19-20",[]],["title/19-21",[789,29.556,790,26.341,1129,54.599]],["name/19-21",[]],["text/19-21",[]],["component/19-21",[]],["keyword/19-21",[]],["title/19-22",[717,25.625,1120,39.547,1130,31.719,1131,30.465]],["name/19-22",[]],["text/19-22",[]],["component/19-22",[]],["keyword/19-22",[]],["title/19-23",[1132,61.554]],["name/19-23",[]],["text/19-23",[]],["component/19-23",[]],["keyword/19-23",[]],["title/19-24",[123,36.972,471,29.058,612,23.676]],["name/19-24",[]],["text/19-24",[]],["component/19-24",[]],["keyword/19-24",[]],["title/19-25",[262,45.667,785,25.271]],["name/19-25",[]],["text/19-25",[]],["component/19-25",[]],["keyword/19-25",[]],["title/19-26",[464,28.318,778,25.716,1100,20.963,1133,25.716]],["name/19-26",[]],["text/19-26",[]],["component/19-26",[]],["keyword/19-26",[]],["title/19-27",[183,32.168,641,26.659,1100,20.963,1133,25.716]],["name/19-27",[]],["text/19-27",[]],["component/19-27",[]],["keyword/19-27",[]],["title/19-28",[1100,20.963,1133,25.716,1134,31.69,1135,26.174]],["name/19-28",[]],["text/19-28",[]],["component/19-28",[]],["keyword/19-28",[]],["title/19-29",[57,28.357,398,29.304,905,42.129]],["name/19-29",[]],["text/19-29",[]],["component/19-29",[]],["keyword/19-29",[]],["title/19-30",[112,19.294,790,26.341,1136,45.674]],["name/19-30",[]],["text/19-30",[]],["component/19-30",[]],["keyword/19-30",[]],["title/19-31",[397,30.357,586,21.497,1047,27.096]],["name/19-31",[]],["text/19-31",[]],["component/19-31",[]],["keyword/19-31",[]],["title/19-32",[256,31.867,579,23.276,866,30.083]],["name/19-32",[]],["text/19-32",[]],["component/19-32",[]],["keyword/19-32",[]],["title/19-33",[112,24.518,784,30.017,1119,26.413]],["name/19-33",[]],["text/19-33",[]],["component/19-33",[]],["keyword/19-33",[]],["title/19-34",[112,22.682,139,30.754]],["name/19-34",[]],["text/19-34",[]],["component/19-34",[]],["keyword/19-34",[]],["title/19-35",[1100,28.325,1137,45.667]],["name/19-35",[]],["text/19-35",[]],["component/19-35",[]],["keyword/19-35",[]],["title/19-36",[243,38.179,1100,24.094,1117,35.904]],["name/19-36",[]],["text/19-36",[]],["component/19-36",[]],["keyword/19-36",[]],["title/19-37",[112,19.294,399,27.705,1138,41.194]],["name/19-37",[]],["text/19-37",[]],["component/19-37",[]],["keyword/19-37",[]],["title/19-38",[876,45.085,1100,18.553,1115,24.29,1139,27.267]],["name/19-38",[]],["text/19-38",[]],["component/19-38",[]],["keyword/19-38",[]],["title/19",[]],["name/19",[286,0.558]],["text/19",[2,0.556,6,1.202,8,0.512,19,0.687,22,1.303,26,2.431,27,2.521,28,1.546,29,0.702,35,1.815,41,0.479,42,1.83,43,1.956,44,0.759,45,4.381,52,3.399,53,0.428,55,3.847,57,0.845,59,0.444,61,0.512,64,0.556,67,0.492,68,0.497,77,2.109,80,1.265,81,0.474,84,0.845,85,0.629,89,0.441,90,1.776,94,0.377,101,1.055,107,0.629,112,2.689,117,0.487,118,1.884,123,0.588,127,1.326,128,0.536,130,0.826,131,1.093,135,0.395,138,0.497,139,2.073,140,1.057,141,1.119,145,0.629,159,1.41,161,1.202,164,0.413,172,0.518,177,0.95,179,0.524,180,1.331,182,0.502,189,0.323,193,1.298,194,0.727,198,1.685,207,1.434,209,0.512,212,1.384,215,1.579,221,0.549,222,0.462,223,1.016,228,1.202,230,0.458,243,0.607,247,0.458,251,0.542,260,0.889,262,1.158,271,0.474,273,0.524,284,0.549,301,0.655,302,1.102,311,0.507,372,0.642,373,0.536,376,0.588,377,0.497,382,0.597,383,2.196,386,1.051,390,1.661,393,0.705,397,1.606,398,1.551,399,1.165,401,0.536,402,1.138,406,1.906,419,1.123,420,0.629,426,0.502,432,0.873,442,1.051,446,0.542,464,0.97,471,1.222,478,1.093,480,1.256,483,1.771,497,0.524,505,0.579,507,0.588,509,0.381,523,0.839,529,0.444,531,1.202,533,0.536,537,0.981,565,1.1,566,0.542,569,1.466,574,1.165,579,1.232,581,1.534,582,1.531,583,0.781,586,1.998,587,1.028,594,0.97,604,0.448,605,1.003,612,3.077,621,0.542,627,0.629,701,0.524,707,0.95,717,1.761,723,1.782,724,0.751,725,0.529,759,0.67,763,0.556,766,1.158,770,0.78,774,0.655,777,0.47,778,1.564,779,0.434,782,0.655,784,2.981,785,2.718,786,0.745,789,1.851,790,2.751,802,0.492,803,0.549,812,0.889,813,0.95,815,0.588,817,0.448,844,1.202,853,1.606,860,1.055,866,0.479,873,0.95,875,0.579,876,1.158,877,0.655,899,0.597,905,1.256,906,1.79,907,0.451,910,0.67,927,1.131,944,0.492,948,1.265,950,1.202,959,0.597,961,0.405,969,0.441,970,0.655,983,1.477,999,0.905,1009,0.642,1047,2.341,1053,0.529,1067,1.276,1080,0.497,1085,1.102,1086,0.571,1088,1.531,1093,0.845,1098,0.629,1100,2.857,1101,0.502,1103,1.016,1109,0.97,1111,1.79,1113,0.571,1114,1.416,1115,0.94,1117,1.07,1118,0.655,1119,2.822,1120,3.732,1121,2.724,1122,0.597,1123,2.056,1124,0.67,1125,2.433,1126,0.597,1128,1.927,1130,0.655,1131,1.179,1132,1.815,1133,1.564,1134,1.086,1135,0.897,1136,1.361,1137,1.158,1138,0.655,1139,1.055,1142,0.687,1145,0.981,1159,0.852,1161,0.529,1166,0.629,1173,1.07,1177,0.629,1180,0.579,1188,1.055,1189,0.549,1190,0.512,1191,0.571,1207,1.158,1262,0.518,1263,0.629,1268,0.687,1269,2.061,1270,1.361,1283,0.629,1284,0.819,1285,0.819,1286,1.464,1287,0.655,1288,0.781,1289,0.751,1290,0.869,1291,0.819,1292,0.655,1293,0.687,1294,0.869,1295,0.751,1296,2.164,1297,1.321,1298,0.819,1299,2.599,1300,2.18,1301,1.256,1302,0.819,1303,1.256,1304,2.164,1305,0.705,1306,0.687,1307,0.549,1308,0.781,1309,0.781,1310,0.869,1311,0.687,1312,0.869,1313,0.781,1314,1.408,1315,0.819,1316,1.361,1317,1.627,1318,0.781,1319,1.361,1320,0.819,1321,1.469,1322,1.464,1323,1.464,1324,0.705,1325,0.819,1326,0.655,1327,0.869,1328,0.655,1329,0.687,1330,0.819,1331,0.642,1332,0.869,1333,0.687,1334,1.408,1335,0.819,1336,0.571,1337,1.826,1338,1.464,1339,0.642,1340,1.228,1341,0.819,1342,0.629,1343,0.655,1344,0.67,1345,0.751,1346,0.869,1347,0.819,1348,2.164,1349,1.534,1350,0.819,1351,0.642,1352,0.819,1353,0.655,1354,1.042,1355,0.705,1356,0.819,1357,1.287,1358,0.67,1359,0.819,1360,1.986,1361,0.819,1362,0.819,1363,0.819,1364,0.727,1365,0.819,1366,0.819,1367,0.781,1368,2.417,1369,0.819,1370,0.727,1371,0.751,1372,0.819,1373,0.781]],["component/19",[22,0.319]],["keyword/19",[]],["title/20-1",[22,12.915,49,30.343]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["keyword/20-1",[]],["title/20-2",[428,57.528]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["keyword/20-2",[]],["title/20-3",[44,25.475,90,28.357,586,21.497]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["keyword/20-3",[]],["title/20-4",[565,30.754,1080,36.717]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["keyword/20-4",[]],["title/20-5",[4,37.854,1047,31.853]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["keyword/20-5",[]],["title/20-6",[159,22.523,426,31.545,958,27.096]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["keyword/20-6",[]],["title/20-7",[159,22.523,398,29.304,1044,32.906]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["keyword/20-7",[]],["title/20-8",[1081,38.261,1082,48.427]],["name/20-8",[]],["text/20-8",[]],["component/20-8",[]],["keyword/20-8",[]],["title/20-9",[1083,63.221]],["name/20-9",[]],["text/20-9",[]],["component/20-9",[]],["keyword/20-9",[]],["title/20-10",[455,23.532,463,24.455,523,19.429,785,14.845,786,17.259,1084,24.794]],["name/20-10",[]],["text/20-10",[]],["component/20-10",[]],["keyword/20-10",[]],["title/20-11",[612,27.833,1085,43.464]],["name/20-11",[]],["text/20-11",[]],["component/20-11",[]],["keyword/20-11",[]],["title/20-12",[612,27.833,964,42.207]],["name/20-12",[]],["text/20-12",[]],["component/20-12",[]],["keyword/20-12",[]],["title/20-13",[785,25.271,786,29.38]],["name/20-13",[]],["text/20-13",[]],["component/20-13",[]],["keyword/20-13",[]],["title/20-14",[1080,36.717,1086,42.207]],["name/20-14",[]],["text/20-14",[]],["component/20-14",[]],["keyword/20-14",[]],["title/20-15",[115,47.428,786,29.38]],["name/20-15",[]],["text/20-15",[]],["component/20-15",[]],["keyword/20-15",[]],["title/20-16",[889,43.464,1087,44.15]],["name/20-16",[]],["text/20-16",[]],["component/20-16",[]],["keyword/20-16",[]],["title/20-17",[159,26.477,426,37.084]],["name/20-17",[]],["text/20-17",[]],["component/20-17",[]],["keyword/20-17",[]],["title/20-18",[1088,42.817,1089,49.526]],["name/20-18",[]],["text/20-18",[]],["component/20-18",[]],["keyword/20-18",[]],["title/20-19",[409,28.63,637,28.63,915,23.748,1090,42.727]],["name/20-19",[]],["text/20-19",[]],["component/20-19",[]],["keyword/20-19",[]],["title/20-20",[637,32.906,915,27.294,1091,37.556]],["name/20-20",[]],["text/20-20",[]],["component/20-20",[]],["keyword/20-20",[]],["title/20-21",[1092,53.693,1093,33.336]],["name/20-21",[]],["text/20-21",[]],["component/20-21",[]],["keyword/20-21",[]],["title/20-22",[259,32.439,478,20.008,509,18.444,1094,32.439,1095,35.169]],["name/20-22",[]],["text/20-22",[]],["component/20-22",[]],["keyword/20-22",[]],["title/20-23",[463,27.267,509,18.444,785,16.553,868,23.164,1096,33.239]],["name/20-23",[]],["text/20-23",[]],["component/20-23",[]],["keyword/20-23",[]],["title/20-24",[478,25.985,1044,32.906,1097,36.972]],["name/20-24",[]],["text/20-24",[]],["component/20-24",[]],["keyword/20-24",[]],["title/20",[]],["name/20",[286,0.558]],["text/20",[2,1.262,4,2.943,7,0.867,10,0.55,22,1.795,27,0.831,28,0.483,29,1.185,41,0.588,42,2.328,43,0.892,44,0.92,45,0.46,46,0.564,49,3.502,52,2.497,53,0.526,55,2.256,57,0.555,61,0.63,64,1.758,67,1.117,68,0.611,77,1.068,78,0.617,81,0.583,89,1.001,90,0.555,97,0.666,99,0.693,109,0.568,112,0.697,115,0.789,117,0.599,121,0.867,122,0.723,131,0.508,135,0.486,136,2.472,137,0.806,138,0.611,139,0.512,140,1.846,142,0.588,143,0.637,147,1.429,151,0.867,155,0.578,158,2.884,159,2.058,160,1.107,161,0.789,163,0.747,165,1.279,171,0.774,172,0.637,177,0.623,178,0.961,179,0.644,180,0.908,187,0.986,188,1.384,191,0.723,193,2.428,198,0.526,199,0.735,206,1.335,207,0.979,208,0.789,218,1.087,221,0.675,222,0.568,223,2.502,230,0.564,244,1.316,247,0.564,259,0.824,266,0.542,273,0.644,281,0.693,285,0.675,302,0.723,308,0.502,315,0.623,319,0.867,372,0.789,377,0.611,379,1.736,383,2.297,385,1.357,386,1.835,387,0.637,390,1.661,398,1.058,401,2.472,406,1.961,409,0.644,419,0.965,426,1.139,428,0.789,430,1.231,432,2.151,442,0.903,455,1.231,456,0.723,463,1.279,464,0.637,471,1.462,475,1.736,478,0.939,505,1.316,508,0.651,509,2.37,510,1.231,518,1.572,520,0.76,522,1.216,523,1.416,529,2.315,537,1.189,553,1.5,565,1.316,566,1.231,569,1.466,574,0.542,575,1.316,579,0.841,582,1.316,586,1.346,587,0.675,594,0.637,604,1.016,605,1.694,612,2.343,625,0.774,637,1.189,666,0.637,707,1.151,710,0.824,725,0.651,742,1.279,763,0.683,766,1.403,770,0.945,773,1.921,776,0.693,779,0.986,785,3.069,786,3.066,787,1.457,792,1.163,801,1.357,807,2.316,813,1.604,816,0.774,817,0.55,828,0.893,833,0.844,837,0.644,843,0.806,846,0.774,847,0.824,853,1.528,857,0.702,860,0.693,865,1.163,866,1.087,868,1.087,875,0.712,884,0.735,889,2.316,899,0.735,906,1.032,907,0.555,910,0.824,911,0.651,915,1.373,927,0.526,928,0.723,938,0.702,940,0.961,947,1.151,948,0.588,952,1.955,959,0.735,960,0.747,961,0.92,964,0.702,968,0.683,969,1.735,976,0.789,983,0.546,988,0.675,989,2.03,996,0.735,999,1.096,1011,0.824,1044,2.729,1047,1.363,1053,0.651,1067,1.096,1080,1.572,1081,2.039,1082,0.806,1083,0.867,1084,1.297,1085,2.714,1086,0.702,1091,1.89,1093,1.427,1094,0.824,1095,0.893,1101,0.617,1112,0.747,1114,1.216,1115,0.617,1128,0.712,1133,0.578,1134,1.316,1135,2.208,1143,0.617,1144,0.404,1145,1.189,1146,1.774,1147,0.712,1148,0.806,1149,1.006,1150,1.006,1151,1.006,1152,0.702,1153,0.924,1154,0.924,1155,0.924,1156,0.893,1157,1.675,1158,1.457,1159,1.438,1160,0.893,1161,2.76,1162,1.006,1163,0.924,1164,1.859,1165,1.006,1166,1.991,1167,0.76,1168,0.893,1169,0.789,1170,0.924,1171,1.006,1172,0.924,1173,1.807,1174,0.893,1175,3.024,1176,0.844,1177,0.774,1178,0.693,1179,0.735,1180,0.712,1181,1.006,1182,0.806,1183,0.702,1184,1.006,1185,0.893,1186,0.867,1187,0.924,1188,0.693,1189,0.675,1190,1.163,1191,0.702,1192,0.924,1193,0.961,1194,1.89,1195,1.006,1196,1.006,1197,0.712,1198,0.893,1199,0.824,1200,0.659,1201,0.806,1202,1.006,1203,0.924,1204,0.844,1205,0.806,1206,1.65,1207,0.76,1208,0.961,1209,1.006,1210,0.961,1211,0.893,1212,0.961,1213,0.723,1214,0.806,1215,0.924,1216,1.782,1217,1.297,1218,0.961,1219,0.611,1220,0.961,1221,1.457,1222,1.706,1223,0.789,1224,0.844,1225,0.867,1226,1.189,1227,0.867,1228,1.006,1229,0.961,1230,0.924,1231,0.789,1232,1.403,1233,1.006,1234,1.006,1235,0.789,1236,1.006,1237,0.961,1238,0.924,1239,0.76,1240,0.844,1241,2.377,1242,1.297,1243,0.844,1244,1.006,1245,0.824,1246,1.006,1247,0.675,1248,0.76,1249,0.961,1250,0.659,1251,1.522,1252,0.867,1253,0.961,1254,0.867,1255,0.806,1256,0.961,1257,0.924,1258,0.961,1259,0.924,1260,0.789,1261,0.806,1262,0.637,1263,0.774,1264,0.76,1265,1.006,1266,0.924]],["component/20",[22,0.319]],["keyword/20",[]],["title/21-1",[22,12.915,101,41.629]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["keyword/21-1",[]],["title/21-2",[123,43.464,387,38.261]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["keyword/21-2",[]],["title/21",[]],["name/21",[286,0.558]],["text/21",[22,1.533,42,2.331,43,3.444,44,3.554,45,3.285,52,2.645,55,3.444,101,4.941,123,7.083,182,4.401,270,4.754,271,4.16,372,5.629,373,4.698,387,4.541,442,3.487,524,4.358,805,4.643,927,3.753,961,3.554,1009,5.629,1245,5.878,1374,6.59]],["component/21",[22,0.319]],["keyword/21",[]],["title/22",[112,14.857,446,26.238,1093,21.835,1098,30.465,1099,31.065]],["name/22",[286,0.558]],["text/22",[5,2.924,22,1.948,25,2.883,42,2.374,52,2.695,112,3.421,138,4.44,189,2.883,297,2.967,406,3.797,419,3.797,446,4.843,786,3.552,969,3.938,1093,5.027,1098,5.624,1099,5.735,1144,2.938,1269,4.677,1270,6.492]],["component/22",[22,0.319]],["keyword/22",[]],["title/23",[586,21.497,1100,24.094,1101,31.545]],["name/23",[286,0.558]],["text/23",[5,2.897,22,1.936,25,2.856,42,2.352,52,2.67,139,4.611,142,4.236,160,4.315,188,3.872,189,2.856,297,2.939,523,3.962,586,3.789,785,3.027,1100,4.247,1101,5.56,1126,5.289,1144,2.911,1271,6.432]],["component/23",[22,0.319]],["keyword/23",[]],["title/24",[74,34.5,777,29.556,1100,24.094]],["name/24",[286,0.558]],["text/24",[5,2.98,22,1.971,25,2.938,42,2.42,52,2.746,57,4.108,74,4.997,189,2.938,297,3.023,390,3.842,612,3.43,777,4.281,785,3.114,915,3.954,1100,3.49,1144,2.994,1272,7.454,1273,5.731,1274,5.967,1275,5.13]],["component/24",[22,0.319]],["keyword/24",[]],["title/25",[1102,49.526,1103,40.058]],["name/25",[286,0.558]],["text/25",[5,3.098,22,2.178,25,3.055,42,2.516,52,2.855,109,4.376,132,5.132,189,3.055,190,5.851,297,3.143,785,3.238,1103,5.132,1144,3.113,1190,4.85,1276,7.75]],["component/25",[22,0.319]],["keyword/25",[]],["title/26-1",[236,60.49,1104,43.464]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["keyword/26-1",[]],["title/26-2",[467,65.127]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["keyword/26-2",[]],["title/26-3",[484,35.841,485,32.168,486,31.238,1104,32.168]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["keyword/26-3",[]],["title/26-4",[27,23.018,112,19.294,116,38.847]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["keyword/26-4",[]],["title/26",[42,14.533,52,16.496,112,16.787,1104,32.168]],["name/26",[286,0.558]],["text/26",[5,0.76,8,1.19,10,1.039,16,6.074,22,1.104,25,0.749,26,1.039,27,0.85,28,1.576,29,1.503,42,2.463,52,2.526,54,1.345,78,1.165,94,5.004,105,1.638,112,2.956,116,1.435,117,1.132,124,1.556,130,1.023,131,0.96,139,1.671,152,2.056,155,1.092,164,2.192,169,1.177,173,1.177,180,0.929,182,1.165,187,1.008,189,1.295,193,1.567,195,2.203,198,0.994,233,1.814,244,0.966,269,1.229,285,1.274,289,1.291,297,0.771,308,1.638,310,1.202,383,1.023,392,1.202,397,1.121,419,0.987,461,3.286,464,2.746,467,5.184,482,3.985,484,1.522,485,4.196,486,4.075,518,1.154,531,1.056,553,1.101,569,0.865,570,1.745,621,1.259,626,1.048,658,2.832,666,1.202,701,1.216,707,2.035,777,1.092,779,2.303,783,2.917,789,1.888,805,1.229,809,3.554,817,1.039,835,1.814,838,1.556,903,1.901,911,2.807,914,1.49,915,1.008,927,1.718,929,1.308,944,1.143,961,1.627,995,1.274,1052,4.054,1053,2.125,1104,6.014,1144,1.32,1152,1.326,1167,1.435,1170,1.745,1197,1.345,1225,1.638,1231,4.054,1241,1.745,1279,1.326,1445,2.917,1522,2.176,1541,1.366,1542,1.556,1543,2.017,1544,2.017,1545,1.595,1546,2.017,1547,3.487,1548,1.687,1549,1.687,1550,2.017,1551,1.901,1552,2.017,1553,2.017,1554,3.487,1555,3.487,1556,3.017,1557,2.017,1558,2.017,1559,3.286,1560,3.136,1561,3.487,1562,2.017,1563,2.017,1564,3.487,1565,3.136,1566,2.017,1567,2.017,1568,1.901,1569,1.901,1570,4.341,1571,2.017,1572,1.901,1573,2.017,1574,2.017,1575,2.017,1576,2.017,1577,2.017,1578,1.901,1579,2.017,1580,2.481,1581,2.017,1582,1.345,1583,1.638,1584,2.017,1585,2.017,1586,2.017,1587,2.017,1588,2.017,1589,2.017,1590,2.017,1591,2.017,1592,2.017,1593,2.017,1594,1.556,1595,2.017,1596,2.017,1597,2.017,1598,2.017,1599,2.017,1600,2.017,1601,2.017,1602,2.017,1603,2.017,1604,2.017,1605,3.487,1606,2.017,1607,3.487,1608,2.193,1609,2.017,1610,2.193,1611,2.017,1612,2.017,1613,2.193,1614,1.901,1615,2.193,1616,1.745]],["component/26",[22,0.319]],["keyword/26",[]],["title/27",[112,13.324,446,23.532,958,18.712,1093,19.583,1098,27.323,1099,27.861]],["name/27",[286,0.558]],["text/27",[5,2.952,22,2.132,25,2.91,42,2.979,43,3.542,44,3.655,135,3.564,189,2.91,247,4.135,273,4.722,297,2.995,446,4.889,983,4.006,1093,4.069,1098,5.677,1144,2.966,1189,4.95,1190,4.62,1191,5.152]],["component/27",[22,0.319]],["keyword/27",[]],["title/28",[586,18.703,958,23.575,1100,20.963,1101,27.446]],["name/28",[286,0.558]],["text/28",[5,2.952,22,2.132,25,2.91,42,2.979,43,3.542,44,3.655,135,3.564,189,2.91,247,4.135,273,4.722,297,2.995,586,3.084,983,4.006,1100,3.457,1101,4.526,1144,2.966,1189,4.95,1190,4.62,1191,5.152]],["component/28",[22,0.319]],["keyword/28",[]],["title/29",[74,30.017,777,25.716,958,23.575,1100,20.963]],["name/29",[286,0.558]],["text/29",[5,2.952,22,2.132,25,2.91,42,2.979,43,3.542,44,3.655,74,4.95,135,3.564,189,2.91,247,4.135,273,4.722,297,2.995,777,4.241,983,4.006,1100,3.457,1144,2.966,1189,4.95,1190,4.62,1191,5.152]],["component/29",[22,0.319]],["keyword/29",[]],["title/30",[958,27.096,1102,42.129,1103,34.075]],["name/30",[286,0.558]],["text/30",[5,2.98,22,2.141,25,2.938,42,2.996,43,3.575,44,3.69,135,3.598,189,2.938,247,4.174,273,4.767,297,3.023,983,4.044,1102,6.103,1103,4.936,1144,2.994,1189,4.997,1190,4.664,1191,5.201]],["component/30",[22,0.319]],["keyword/30",[]],["title/31-1",[236,60.49,1104,43.464]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["keyword/31-1",[]],["title/31-2",[467,65.127]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["keyword/31-2",[]],["title/31-3",[484,35.841,485,32.168,486,31.238,1104,32.168]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["keyword/31-3",[]],["title/31-4",[27,23.018,112,19.294,116,38.847]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["keyword/31-4",[]],["title/31",[42,17.84,52,13.093,112,13.324,958,18.712,1104,25.532]],["name/31",[286,0.558]],["text/31",[5,0.754,8,1.181,10,1.032,16,6.055,22,1.241,25,0.744,26,1.032,27,0.844,28,1.566,29,1.494,42,2.635,43,0.905,44,0.934,52,2.661,54,1.336,78,1.157,94,4.965,105,1.626,112,2.947,116,1.425,117,1.124,124,1.545,130,1.016,131,0.953,135,0.911,139,1.66,152,2.044,155,1.084,164,2.18,169,1.169,173,1.169,180,0.922,182,1.157,187,1.001,189,1.287,193,1.557,195,2.189,198,0.987,233,1.801,244,0.959,247,1.057,269,1.22,273,1.207,285,1.265,289,1.282,297,0.765,308,1.627,310,1.194,383,1.016,392,1.194,397,1.113,419,0.98,461,3.266,464,2.73,467,5.161,482,1.732,484,1.511,485,4.178,486,4.057,518,1.145,531,1.048,553,1.093,569,0.858,570,1.732,621,1.25,626,1.04,658,2.814,666,1.194,701,1.207,707,2.022,777,1.084,779,2.29,783,2.899,789,1.876,805,1.22,809,3.534,817,1.032,835,1.801,838,1.545,903,1.887,911,2.792,914,1.48,915,1.001,927,1.707,929,1.299,944,1.134,958,0.994,961,1.617,983,1.024,995,1.265,1052,4.034,1053,2.112,1104,5.998,1144,1.312,1152,1.317,1167,1.425,1170,1.732,1189,1.265,1190,1.181,1191,1.317,1197,1.336,1225,1.626,1231,4.034,1241,1.732,1279,1.317,1445,2.899,1522,2.163,1541,1.356,1542,1.545,1543,2.002,1544,2.002,1545,1.583,1546,2.002,1547,3.465,1548,1.675,1549,1.675,1550,2.002,1551,1.887,1552,2.002,1553,2.002,1554,3.465,1555,3.465,1556,2.998,1557,2.002,1558,2.002,1559,3.266,1560,3.117,1561,3.465,1562,2.002,1563,2.002,1564,3.465,1565,3.117,1566,2.002,1567,2.002,1568,1.887,1569,1.887,1570,4.317,1571,2.002,1572,1.887,1573,2.002,1574,2.002,1575,2.002,1576,2.002,1577,2.002,1578,1.887,1579,2.002,1580,2.465,1581,2.002,1582,1.336,1583,1.626,1584,2.002,1585,2.002,1586,2.002,1587,2.002,1588,2.002,1589,2.002,1590,2.002,1591,2.002,1592,2.002,1593,2.002,1594,1.545,1595,2.002,1596,2.002,1597,2.002,1598,2.002,1599,2.002,1600,2.002,1601,2.002,1602,2.002,1603,2.002,1605,2.002,1607,2.002,1617,4.981,1618,2.177,1619,2.002,1620,1.801,1621,2.177]],["component/31",[22,0.319]],["keyword/31",[]],["title/32",[271,35.051,958,31.853]],["name/32",[286,0.558]],["text/32",[5,3.009,22,2.15,25,2.966,42,3.014,43,3.61,44,3.726,135,3.632,189,2.966,247,4.215,271,4.361,273,4.813,297,3.052,983,4.083,1144,3.023,1189,5.046,1190,4.709,1191,5.251]],["component/32",[22,0.319]],["keyword/32",[]],["title/33",[42,8.166,310,15.912,396,15.27,449,17.312,604,22.781,812,14.577,958,13.247,1113,17.553,1114,16.46]],["name/33",[286,0.558]],["text/33",[5,2.844,17,6.13,22,2.201,25,2.804,42,2.91,43,3.413,44,3.522,135,3.434,149,5.47,189,2.804,247,3.984,266,3.83,273,4.549,297,2.885,310,4.5,396,4.318,983,3.86,1105,6.13,1144,2.858,1189,4.77,1190,4.452,1191,4.964]],["component/33",[22,0.319]],["keyword/33",[]],["title/34-1",[158,34.981]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["keyword/34-1",[]],["title/34-2",[112,27.513]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["keyword/34-2",[]],["title/34-3",[159,19.596,725,28.955,1097,32.168,1106,32.676]],["name/34-3",[]],["text/34-3",[]],["component/34-3",[]],["keyword/34-3",[]],["title/34",[42,12.862,142,23.164,159,17.343,958,20.864,1106,28.918]],["name/34",[286,0.558]],["text/34",[5,0.644,10,2.087,22,1.803,25,0.635,27,2.597,29,1.301,41,1.662,42,1.239,43,0.773,44,0.797,52,2.139,56,0.959,57,0.888,60,1.08,94,4.721,97,1.883,109,0.91,112,2.75,135,0.777,139,1.941,140,1.39,142,4.108,152,1.008,158,1.82,159,4.272,188,1.519,189,0.635,193,2.507,198,0.842,209,1.779,212,0.819,222,0.91,244,1.446,247,0.902,273,1.03,296,1.054,297,0.653,373,3.44,376,1.157,383,0.867,386,0.782,392,2.913,401,1.054,419,0.836,473,2.043,523,1.555,524,0.978,529,0.874,537,2.441,553,1.648,569,3.461,574,1.531,586,1.188,601,1.351,609,4.81,626,4.042,666,2.913,725,3.401,778,0.925,790,1.954,847,1.319,866,1.662,868,0.942,907,0.888,947,0.997,948,1.662,961,0.797,967,1.319,969,1.531,983,3.622,999,0.95,1002,1.931,1047,4.134,1053,2.979,1068,1.478,1081,2.414,1101,3.845,1106,7.015,1144,0.647,1189,1.08,1190,1.008,1191,1.984,1247,1.08,1319,1.43,1398,1.094,1541,1.157,1542,1.319,1620,2.714,1622,1.611,1623,1.537,1624,1.709,1625,1.43,1626,1.709,1627,1.858,1628,1.858,1629,3.281,1630,3.281,1631,2.832,1632,4.404,1633,3.817,1634,1.478,1635,1.709,1636,1.709,1637,4.404,1638,1.858,1639,1.709,1640,3.017,1641,1.858,1642,1.858,1643,1.709,1644,1.858,1645,1.388,1646,1.709,1647,1.709,1648,1.478,1649,1.858,1650,1.858,1651,1.858,1652,1.709,1653,1.858,1654,1.957,1655,3.281,1656,2.714,1657,1.709,1658,1.858,1659,1.43,1660,1.611,1661,3.017,1662,4.05,1663,3.504,1664,2.147,1665,1.709,1666,3.017,1667,1.319,1668,1.709,1669,1.858,1670,1.537,1671,1.709,1672,1.858,1673,1.858,1674,1.43,1675,1.709,1676,1.709,1677,1.709]],["component/34",[22,0.319]],["keyword/34",[]],["title/35",[42,14.533,788,33.218,958,23.575,1107,33.799]],["name/35",[286,0.558]],["text/35",[5,2.98,22,2.141,25,2.938,42,2.996,43,3.575,44,3.69,135,3.598,189,2.938,247,4.174,273,4.767,297,3.023,788,5.53,983,4.044,1107,5.627,1144,2.994,1189,4.997,1190,4.664,1191,5.201]],["component/35",[22,0.319]],["keyword/35",[]],["title/36",[42,14.533,478,22.608,779,23.748,958,23.575]],["name/36",[286,0.558]],["text/36",[5,2.98,22,2.141,25,2.938,42,2.996,43,3.575,44,3.69,135,3.598,189,2.938,247,4.174,273,4.767,297,3.023,478,3.764,779,3.954,983,4.044,1144,2.994,1189,4.997,1190,4.664,1191,5.201]],["component/36",[22,0.319]],["keyword/36",[]],["title/37-1",[1141,36.563]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["keyword/37-1",[]],["title/37-2",[1097,52.72]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["keyword/37-2",[]],["title/37-3",[29,33.567]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["keyword/37-3",[]],["title/37-4",[57,33.336,1678,50.747]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["keyword/37-4",[]],["title/37-5",[159,26.477,373,39.58]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["keyword/37-5",[]],["title/37-6",[131,22.608,198,23.405,1108,30.404,1679,38.576]],["name/37-6",[]],["text/37-6",[]],["component/37-6",[]],["keyword/37-6",[]],["title/37-7",[131,22.608,198,23.405,1108,30.404,1680,37.558]],["name/37-7",[]],["text/37-7",[]],["component/37-7",[]],["keyword/37-7",[]],["title/37-8",[28,24.683,1108,34.945,1280,35.904]],["name/37-8",[]],["text/37-8",[]],["component/37-8",[]],["keyword/37-8",[]],["title/37-9",[159,19.596,1081,28.318,1082,35.841,1307,30.017]],["name/37-9",[]],["text/37-9",[]],["component/37-9",[]],["keyword/37-9",[]],["title/37-10",[159,22.523,1067,30.357,1398,34.945]],["name/37-10",[]],["text/37-10",[]],["component/37-10",[]],["keyword/37-10",[]],["title/37",[28,15.452,42,10.457,89,17.344,386,15.645,958,16.962,1108,21.876,1109,20.375]],["name/37",[286,0.558]],["text/37",[2,0.719,5,0.423,9,0.583,22,0.716,24,1.159,25,0.417,26,0.579,27,0.871,28,3.223,29,1.237,42,0.632,43,0.508,44,0.964,49,0.976,52,3.07,55,0.508,56,0.63,59,1.466,68,0.642,71,0.738,74,0.71,78,2.71,90,1.073,94,4.235,112,1.013,128,1.274,130,0.57,131,2.455,135,0.511,140,0.517,159,3.784,160,1.159,164,1.694,167,1.894,180,2.16,188,1.04,189,1.322,193,0.928,198,4.738,207,0.557,209,0.662,212,0.538,221,0.71,225,0.83,230,0.593,244,2.247,247,0.593,251,2.927,260,1.128,273,0.677,293,1.421,297,0.429,308,0.527,311,0.655,317,0.814,388,0.83,390,0.546,406,1.403,419,2.036,432,0.603,446,1.289,478,3.271,497,0.677,509,0.493,512,0.799,520,0.799,531,1.081,533,1.769,535,0.76,565,0.538,569,1.23,575,0.749,582,0.749,586,0.813,609,3.689,621,0.701,626,4.387,695,0.692,701,0.677,710,1.594,742,0.728,743,1.305,746,0.669,762,0.847,770,0.99,772,0.669,773,0.785,775,0.692,777,0.608,779,1.434,785,0.813,786,0.514,802,0.636,813,0.655,817,1.064,844,0.83,872,0.971,878,0.655,906,1.501,936,1.691,938,0.738,944,0.636,947,0.655,948,0.619,960,1.444,964,0.738,969,0.57,983,0.574,988,1.305,996,0.772,999,1.595,1053,1.748,1081,3.075,1082,3.14,1085,2.41,1100,0.911,1108,6.559,1109,3.075,1130,0.847,1135,0.619,1143,0.649,1144,0.425,1159,1.081,1173,0.738,1180,0.749,1182,0.847,1189,0.71,1190,0.662,1191,0.738,1194,0.772,1200,0.692,1213,1.399,1214,0.847,1221,0.83,1226,0.677,1247,0.71,1250,0.692,1262,1.231,1275,0.728,1279,1.886,1280,4.135,1353,1.558,1370,1.728,1388,1.058,1394,1.01,1398,0.719,1399,0.785,1437,0.912,1447,2.814,1457,0.814,1466,0.728,1580,1.47,1620,1.01,1631,0.785,1634,4.462,1636,2.065,1645,2.89,1670,1.01,1679,1.677,1680,1.633,1681,1.123,1682,6.412,1683,2.267,1684,1.858,1685,2.399,1686,1.058,1687,0.888,1688,1.123,1689,1.058,1690,0.866,1691,0.971,1692,1.01,1693,1.221,1694,1.123,1695,1.058,1696,1.123,1697,3.119,1698,1.221,1699,1.221,1700,0.939,1701,1.221,1702,1.221,1703,2.272,1704,1.677,1705,1.01,1706,1.058,1707,3.354,1708,1.123,1709,1.058,1710,1.221,1711,1.058,1712,1.221,1713,2.246,1714,1.221,1715,1.123,1716,1.221,1717,1.947,1718,5.609,1719,1.221,1720,5.609,1721,5.609,1722,6.063,1723,2.246,1724,2.246,1725,6.063,1726,3.87,1727,3.119,1728,2.005,1729,1.221,1730,2.329,1731,1.221,1732,1.01,1733,2.246,1734,2.246,1735,2.58,1736,1.221,1737,1.221,1738,1.221,1739,1.221,1740,1.123,1741,1.123,1742,1.221,1743,1.123,1744,1.221,1745,1.01,1746,1.123,1747,1.221,1748,1.221,1749,1.221,1750,1.221,1751,1.221,1752,1.221,1753,1.221,1754,1.221,1755,1.221,1756,1.221,1757,1.221,1758,1.221]],["component/37",[22,0.319]],["keyword/37",[]],["title/38-1",[371,51.936]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["keyword/38-1",[]],["title/38-2",[167,22.375,921,27.267,1110,28.469,1111,22.01,1158,31.065]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["keyword/38-2",[]],["title/38-3",[24,36.02,164,30.547]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["keyword/38-3",[]],["title/38-4",[27,23.018,456,36.972,1111,28.585]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["keyword/38-4",[]],["title/38-5",[456,36.972,1111,28.585,1759,41.194]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["keyword/38-5",[]],["title/38-6",[256,31.867,386,24.992,1760,49.108]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["keyword/38-6",[]],["title/38-7",[770,30.754,1761,49.526]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["keyword/38-7",[]],["title/38-8",[770,30.754,1762,60.49]],["name/38-8",[]],["text/38-8",[]],["component/38-8",[]],["keyword/38-8",[]],["title/38-9",[1763,77.854]],["name/38-9",[]],["text/38-9",[]],["component/38-9",[]],["keyword/38-9",[]],["title/38-10",[1764,77.854]],["name/38-10",[]],["text/38-10",[]],["component/38-10",[]],["keyword/38-10",[]],["title/38",[42,14.533,958,23.575,1110,32.168,1111,24.87]],["name/38",[286,0.558]],["text/38",[2,0.608,5,0.358,8,2.161,10,0.489,22,0.927,24,2.584,25,0.353,27,0.4,29,0.409,41,2.019,42,1.121,43,1.122,44,0.443,45,1.34,49,1.47,52,2.973,53,0.871,56,0.533,57,0.918,59,1.874,60,1.568,63,0.528,66,0.633,71,1.163,73,1.021,80,0.523,84,0.493,89,0.482,90,2.392,92,0.75,93,0.653,94,4.421,109,0.941,112,0.335,130,0.897,131,0.452,135,0.804,140,0.437,143,0.566,152,0.56,158,0.794,160,0.992,164,2.383,167,0.941,171,1.281,172,0.566,173,0.554,177,3.329,179,1.066,180,2.474,182,1.796,185,0.643,187,1.24,188,0.478,189,0.353,193,1.869,207,0.877,209,1.043,212,0.455,215,0.653,218,0.523,222,1.95,230,0.933,232,0.566,244,2.207,247,0.501,251,1.103,256,3.135,260,0.518,266,0.897,269,1.512,273,0.572,279,0.675,293,0.653,295,0.643,297,0.363,315,0.554,382,1.216,383,0.482,385,0.653,386,2.75,387,1.853,390,0.859,397,0.528,401,0.585,406,0.464,419,1.214,432,0.949,438,0.608,442,1.904,449,0.616,456,2.481,460,1.529,470,1.306,471,1.321,476,0.675,509,2.975,511,0.633,518,3.596,523,0.489,524,0.543,531,0.926,535,1.197,537,0.572,565,0.847,569,0.407,579,1.325,586,1.224,604,0.489,605,0.585,609,3.061,612,2.473,626,1.903,641,2.335,666,1.054,692,0.794,695,1.53,725,1.078,728,0.643,743,1.568,746,0.566,770,3.711,772,0.566,775,1.917,777,0.514,778,0.514,785,0.977,786,1.136,790,0.458,799,0.701,802,1.002,803,0.6,805,1.078,810,0.716,813,0.554,817,0.911,818,0.716,837,0.572,848,0.688,849,1.334,852,0.688,857,0.624,862,0.664,864,0.794,868,0.523,906,0.497,907,2.6,915,1.832,921,1.609,927,1.223,929,1.147,936,2.161,944,2.076,947,0.554,954,1.236,960,0.664,961,1.45,968,0.608,983,0.485,988,0.6,995,0.6,999,1.728,1002,0.608,1004,0.895,1066,0.701,1068,0.821,1085,0.643,1088,0.633,1093,0.493,1109,1.054,1110,6.078,1111,4.541,1135,0.523,1144,0.359,1152,1.632,1157,1.078,1159,0.497,1176,0.75,1178,0.616,1188,0.616,1189,0.6,1190,0.56,1191,0.624,1200,0.585,1214,0.716,1216,1.147,1219,1.011,1242,1.163,1255,0.716,1260,1.834,1262,1.853,1267,0.624,1273,0.688,1274,0.716,1300,0.716,1306,0.75,1321,0.608,1331,1.306,1334,0.821,1337,0.6,1343,0.716,1401,0.664,1416,0.653,1434,0.616,1437,0.771,1448,0.688,1466,0.616,1490,0.821,1522,0.592,1541,0.643,1542,0.732,1580,0.675,1620,0.854,1678,1.398,1683,1.398,1692,0.854,1700,0.794,1703,0.965,1704,0.771,1759,1.334,1760,2.796,1761,0.732,1763,0.949,1765,0.716,1766,0.854,1767,0.75,1768,2.147,1769,0.664,1770,0.854,1771,0.821,1772,0.895,1773,1.59,1774,0.771,1775,1.529,1776,1.398,1777,1.59,1778,0.771,1779,0.949,1780,0.949,1781,0.949,1782,0.732,1783,1.032,1784,1.768,1785,0.771,1786,1.398,1787,0.75,1788,1.032,1789,1.281,1790,0.949,1791,1.768,1792,1.768,1793,1.59,1794,1.768,1795,0.949,1796,1.306,1797,0.895,1798,0.949,1799,1.032,1800,0.949,1801,0.949,1802,0.949,1803,0.949,1804,1.032,1805,1.032,1806,1.922,1807,1.768,1808,2.698,1809,1.032,1810,0.949,1811,0.949,1812,0.854,1813,0.701,1814,0.771,1815,0.949,1816,0.949,1817,0.821,1818,0.949,1819,1.032,1820,0.949,1821,0.701,1822,1.032,1823,1.922,1824,1.032,1825,1.962,1826,0.949,1827,0.949,1828,1.922,1829,0.949,1830,0.854,1831,0.949,1832,1.768,1833,1.922,1834,0.732,1835,1.032,1836,0.949,1837,3.109,1838,0.949,1839,2.698,1840,1.922,1841,1.768,1842,1.436,1843,1.032,1844,1.768,1845,1.768,1846,0.854,1847,0.949,1848,0.716,1849,1.032,1850,0.771,1851,1.922,1852,0.854,1853,1.306,1854,0.732,1855,3.664,1856,0.949,1857,0.949,1858,1.032,1859,1.032,1860,1.032,1861,0.949,1862,1.032,1863,1.032,1864,0.895,1865,0.949,1866,0.949,1867,0.949,1868,0.949,1869,0.854,1870,0.608,1871,1.032,1872,1.529,1873,0.949]],["component/38",[22,0.319]],["keyword/38",[]],["title/39",[271,42.515]],["name/39",[286,0.558]],["text/39",[5,2.952,22,1.959,25,2.91,42,2.397,52,2.72,188,3.945,189,2.91,207,3.888,271,5.317,297,2.995,478,3.728,571,5.305,586,3.084,778,4.241,785,3.084,927,3.86,1119,4.356,1143,4.526,1144,2.966,1197,5.226]],["component/39",[22,0.319]],["keyword/39",[]],["title/40-1",[1141,36.563]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["keyword/40-1",[]],["title/40-2",[1147,51.936]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["keyword/40-2",[]],["title/40-3",[553,42.515]],["name/40-3",[]],["text/40-3",[]],["component/40-3",[]],["keyword/40-3",[]],["title/40",[449,27.267,604,21.664,1113,27.646,1115,24.29,1116,35.169]],["name/40",[286,0.558]],["text/40",[5,1.291,9,1.78,22,1.349,25,1.273,42,1.048,52,1.19,76,4.395,107,2.483,129,2.396,131,1.631,139,2.593,140,2.493,159,1.414,170,2.438,188,1.726,189,1.273,235,2.965,244,2.593,290,7.442,296,2.113,297,1.31,308,1.609,312,3.082,390,1.665,398,1.839,438,3.464,449,2.223,468,6.59,553,1.871,566,2.139,578,2.867,579,1.461,604,2.789,609,2.904,725,3.299,728,2.321,770,3.65,772,2.043,784,4.238,785,3.265,786,4.225,790,2.611,803,4.238,866,1.888,873,3.914,889,3.665,890,3.85,907,1.78,947,3.159,972,2.357,995,3.419,1009,2.532,1011,2.644,1105,4.395,1113,4.41,1114,4.697,1115,1.98,1116,2.867,1135,1.888,1144,1.297,1147,4.474,1307,2.165,1343,2.586,1459,2.783,1690,4.176,1703,3.662,1874,3.726,1875,3.23,1876,5.1,1877,5.175,1878,5.412,1879,3.082,1880,3.427,1881,3.726,1882,3.726,1883,6.706,1884,5.885,1885,2.253,1886,3.23,1887,3.726,1888,3.23,1889,3.427,1890,3.726,1891,5.412,1892,2.965,1893,4.682,1894,3.23,1895,5.412,1896,2.783]],["component/40",[22,0.319]],["keyword/40",[]],["title/41-1",[1141,36.563]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["keyword/41-1",[]],["title/41-2",[1147,51.936]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["keyword/41-2",[]],["title/41-3",[553,42.515]],["name/41-3",[]],["text/41-3",[]],["component/41-3",[]],["keyword/41-3",[]],["title/41-4",[374,48.01]],["name/41-4",[]],["text/41-4",[]],["component/41-4",[]],["keyword/41-4",[]],["title/41",[310,18.633,396,17.881,449,20.273,604,25.915,812,17.069,1113,20.554,1114,19.275]],["name/41",[286,0.558]],["text/41",[2,2.548,5,0.887,10,1.214,18,2.618,22,1.484,25,0.875,28,1.065,42,0.721,46,1.243,49,1.882,52,1.382,55,1.065,76,1.913,84,1.223,97,1.47,99,2.582,107,1.707,112,0.832,118,1.298,126,1.74,129,1.647,138,1.347,139,1.128,140,1.834,141,1.62,148,1.549,159,0.972,160,2.902,189,0.875,207,1.169,235,2.038,269,1.436,281,1.528,282,1.913,289,1.507,290,1.676,296,1.452,297,0.9,308,1.106,310,4.397,319,7.222,374,2.455,379,1.488,390,1.144,396,4.22,409,2.399,449,1.528,509,1.033,529,1.204,553,3.32,565,1.128,566,1.47,569,1.01,579,2.205,586,0.927,594,1.404,604,2.665,606,1.528,637,2.399,725,3.152,728,1.595,767,2.22,770,3.257,772,1.404,773,2.784,775,1.452,777,2.799,784,3.268,785,1.568,786,3.376,790,4.619,792,1.389,810,1.777,812,4.289,816,1.707,866,4.064,889,2.696,890,2.833,906,3.862,907,1.223,927,1.16,944,1.334,947,2.324,948,1.298,961,1.099,969,1.195,995,2.516,1105,3.233,1113,4.469,1114,5.781,1115,2.3,1135,1.298,1137,4.326,1144,0.892,1147,4.534,1159,1.233,1169,1.74,1208,2.118,1226,2.399,1269,1.419,1307,2.516,1337,1.488,1342,3.747,1432,1.862,1444,2.355,1459,1.913,1690,3.072,1735,2.118,1812,4.651,1876,2.22,1877,3.99,1878,3.981,1883,3.981,1885,2.618,1886,2.22,1891,3.981,1892,2.038,1893,2.038,1894,3.752,1897,2.355,1898,2.118,1899,2.355,1900,2.561,1901,2.355,1902,2.561,1903,2.22,1904,2.561,1905,1.97,1906,2.22,1907,2.355,1908,2.561,1909,2.561,1910,1.97,1911,1.817,1912,2.355,1913,1.817,1914,2.561,1915,1.862,1916,2.355]],["component/41",[22,0.319]],["keyword/41",[]],["title/42-1",[158,34.981]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["keyword/42-1",[]],["title/42-2",[112,27.513]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["keyword/42-2",[]],["title/42-3",[159,19.596,725,28.955,1097,32.168,1106,32.676]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["keyword/42-3",[]],["title/42",[142,30.083,159,22.523,1106,37.556]],["name/42",[286,0.558]],["text/42",[5,0.597,10,1.454,22,1.716,25,0.589,27,2.48,29,1.217,41,1.555,42,0.863,52,2.043,56,0.889,57,0.823,60,1.001,94,4.927,97,1.761,109,0.843,112,2.405,131,0.754,139,1.828,140,1.3,142,3.75,152,0.935,158,1.714,159,4.165,188,1.421,189,0.589,193,2.385,198,0.781,209,1.664,212,0.759,244,1.352,296,0.977,297,0.606,373,3.273,376,1.073,383,0.804,386,0.725,392,2.759,401,0.977,419,0.775,473,1.911,523,1.454,524,0.907,529,0.81,537,2.299,553,1.541,569,3.348,574,0.804,601,1.253,609,4.681,626,4.53,666,2.759,725,3.235,790,1.84,847,1.223,866,1.555,868,0.873,907,0.823,947,0.925,948,1.555,961,0.739,967,1.223,969,1.432,983,2.366,999,0.881,1002,1.806,1047,4.231,1048,3.814,1053,2.821,1079,2.962,1081,2.274,1101,3.066,1106,6.823,1144,0.6,1247,1.001,1319,1.326,1398,1.014,1541,1.073,1542,1.223,1582,1.057,1622,1.494,1623,1.425,1624,1.585,1625,1.326,1626,1.585,1631,2.667,1633,4.362,1634,1.371,1635,1.585,1639,1.585,1640,2.822,1643,3.814,1645,1.287,1646,1.585,1647,1.585,1648,1.371,1652,2.822,1654,1.83,1656,2.538,1657,1.585,1659,1.326,1660,1.494,1661,2.822,1662,3.814,1663,3.3,1664,2.008,1665,1.585,1666,2.822,1667,1.223,1668,2.822,1670,1.425,1671,1.585,1674,1.326,1675,1.585,1676,1.585,1677,1.585,1917,1.723,1918,1.723,1919,3.068,1920,3.068,1921,3.068,1922,3.068,1923,1.585,1924,3.814,1925,3.068,1926,4.148,1927,3.068,1928,3.068,1929,3.068,1930,3.068,1931,3.068,1932,2.822,1933,1.723,1934,1.723,1935,1.723,1936,1.723,1937,1.723,1938,3.068,1939,1.723,1940,1.723,1941,3.068,1942,1.723,1943,1.723,1944,1.723,1945,1.723,1946,1.723,1947,1.723,1948,2.822,1949,2.441,1950,1.585,1951,1.585,1952,1.723,1953,1.723,1954,1.723]],["component/42",[22,0.319]],["keyword/42",[]],["title/43-1",[426,37.084,1112,44.882]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["keyword/43-1",[]],["title/43-2",[1955,77.854]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["keyword/43-2",[]],["title/43",[426,37.084,1112,44.882]],["name/43",[286,0.558]],["text/43",[2,1.24,5,0.73,9,1.748,18,1.274,22,1.074,25,0.719,27,0.816,42,0.593,46,1.022,47,1.048,52,1.853,56,1.087,57,1.748,59,1.721,63,1.077,67,1.097,68,1.108,75,1.62,77,1.048,81,1.058,84,1.006,94,3.088,100,1.62,126,4.898,130,3.066,140,2.057,158,1.513,159,2.493,163,1.354,167,1.031,182,1.119,187,1.683,189,0.719,193,0.87,207,2.648,218,1.067,244,0.928,260,1.838,281,2.183,297,0.74,308,0.91,311,1.965,315,1.13,377,2.554,386,2.044,390,2.169,392,1.155,419,0.947,426,5.729,430,2.101,433,1.742,438,1.24,446,2.787,509,0.85,574,0.983,630,1.494,696,1.24,746,1.155,775,1.194,777,1.048,785,0.763,837,2.029,840,1.742,848,1.403,857,1.274,870,1.292,873,3.114,878,1.13,888,1.494,922,6.839,929,2.183,948,2.46,980,1.531,998,1.292,999,1.872,1088,2.979,1112,3.731,1125,5.625,1128,1.292,1135,4.356,1144,0.733,1157,1.181,1159,1.014,1176,1.531,1200,2.754,1207,3.797,1254,6.125,1267,1.274,1279,1.274,1281,3.028,1282,6.58,1401,1.354,1408,2.246,1416,1.332,1427,1.431,1442,1.431,1457,1.403,1471,3.735,1499,1.573,1703,3.3,1769,3.731,1774,1.573,1776,1.531,1825,1.531,1850,1.573,1853,2.488,1870,1.24,1875,1.825,1910,1.62,1955,3.366,1956,1.937,1957,6.613,1958,2.54,1959,2.816,1960,3.173,1961,1.825,1962,3.661,1963,1.675,1964,3.661,1965,2.106,1966,2.106,1967,6.571,1968,7.744,1969,4.855,1970,1.675,1971,7.744,1972,1.937,1973,1.937,1974,3.661,1975,2.106,1976,2.106,1977,2.106,1978,2.106,1979,2.106,1980,2.106,1981,2.106,1982,2.106,1983,2.106,1984,2.106,1985,2.106,1986,2.106,1987,2.106,1988,3.177,1989,3.661,1990,4.855,1991,1.742,1992,2.106,1993,2.106,1994,2.106,1995,1.742,1996,1.494,1997,1.62,1998,3.366,1999,2.106,2000,1.937,2001,2.106]],["component/43",[22,0.319]],["keyword/43",[]],["title/44",[788,44.882,1107,45.667]],["name/44",[286,0.558]],["text/44",[5,3.068,22,2.006,25,3.025,42,2.491,52,2.827,112,2.877,155,4.408,189,3.025,198,4.012,297,3.112,785,3.206,788,5.693,875,5.432,1100,3.593,1107,5.793,1144,3.083,1266,7.044]],["component/44",[22,0.319]],["keyword/44",[]],["title/45",[478,30.547,779,32.087]],["name/45",[286,0.558]],["text/45",[5,3.193,22,2.056,25,3.149,42,2.593,128,5.226,189,3.149,297,3.24,478,4.034,779,4.237,785,3.337,1109,5.052,1144,3.209,1278,7.332]],["component/45",[22,0.319]],["keyword/45",[]],["title/46-1",[1141,36.563]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["keyword/46-1",[]],["title/46-2",[1097,52.72]],["name/46-2",[]],["text/46-2",[]],["component/46-2",[]],["keyword/46-2",[]],["title/46-3",[29,33.567]],["name/46-3",[]],["text/46-3",[]],["component/46-3",[]],["keyword/46-3",[]],["title/46-4",[57,33.336,1678,50.747]],["name/46-4",[]],["text/46-4",[]],["component/46-4",[]],["keyword/46-4",[]],["title/46-5",[159,26.477,373,39.58]],["name/46-5",[]],["text/46-5",[]],["component/46-5",[]],["keyword/46-5",[]],["title/46-6",[131,22.608,198,23.405,1108,30.404,1679,38.576]],["name/46-6",[]],["text/46-6",[]],["component/46-6",[]],["keyword/46-6",[]],["title/46-7",[131,22.608,198,23.405,1108,30.404,1680,37.558]],["name/46-7",[]],["text/46-7",[]],["component/46-7",[]],["keyword/46-7",[]],["title/46-8",[28,24.683,1108,34.945,1280,35.904]],["name/46-8",[]],["text/46-8",[]],["component/46-8",[]],["keyword/46-8",[]],["title/46-9",[159,19.596,1081,28.318,1082,35.841,1307,30.017]],["name/46-9",[]],["text/46-9",[]],["component/46-9",[]],["keyword/46-9",[]],["title/46-10",[159,22.523,1067,30.357,1398,34.945]],["name/46-10",[]],["text/46-10",[]],["component/46-10",[]],["keyword/46-10",[]],["title/46",[28,19.006,89,21.333,386,19.244,1108,26.907,1109,25.061]],["name/46",[286,0.558]],["text/46",[2,0.685,5,0.403,9,0.556,22,0.554,24,1.109,25,0.398,26,0.552,27,0.833,28,3.032,29,1.187,42,0.328,44,0.5,49,0.935,52,3.02,55,0.484,56,0.601,59,1.408,68,0.612,71,0.704,74,0.677,78,2.621,90,1.027,94,4.418,112,0.973,128,1.219,130,0.543,131,2.379,140,0.493,159,3.727,160,1.109,164,1.631,167,1.824,180,2.089,188,0.996,189,1.492,193,0.888,198,4.714,207,0.531,209,0.631,212,0.513,221,0.677,225,0.791,230,0.565,244,2.173,251,2.831,260,1.079,293,1.36,297,0.409,308,0.503,311,0.625,317,0.776,373,0.66,388,0.791,390,0.52,406,1.347,419,1.965,432,0.575,446,1.234,478,3.059,497,0.645,509,0.47,512,0.762,520,0.762,531,1.035,533,1.698,535,0.725,565,0.513,569,1.18,575,0.714,582,0.714,586,0.778,609,3.599,621,0.668,626,4.578,695,0.66,701,0.645,710,1.525,742,0.694,743,1.249,746,0.638,762,0.808,770,0.947,772,0.638,773,0.749,775,0.66,777,0.58,779,1.377,785,0.778,786,0.49,802,0.607,813,0.625,817,1.019,844,0.791,872,0.926,878,0.625,906,1.442,936,1.624,938,0.704,944,0.607,947,1.607,948,0.59,960,1.382,964,0.704,969,0.543,988,1.249,996,0.736,999,1.531,1053,1.678,1079,0.685,1081,2.979,1082,3.03,1085,2.32,1100,0.872,1108,6.521,1109,2.979,1130,0.808,1135,0.59,1143,0.619,1144,0.405,1159,1.035,1173,0.704,1180,0.714,1182,0.808,1194,0.736,1200,0.66,1203,0.926,1213,1.339,1214,0.808,1221,0.791,1226,0.645,1247,0.677,1250,0.66,1262,1.178,1275,0.694,1279,1.811,1280,4.025,1353,1.491,1370,1.654,1388,1.009,1394,0.963,1398,1.762,1399,0.749,1437,0.869,1447,2.709,1457,0.776,1466,0.694,1580,1.406,1631,0.749,1634,4.682,1645,2.783,1670,0.963,1679,1.605,1680,1.563,1682,6.67,1683,2.177,1684,1.778,1685,2.303,1686,1.009,1687,0.847,1688,1.071,1689,1.009,1690,0.826,1691,0.926,1692,0.963,1694,1.071,1695,1.009,1696,1.071,1700,0.896,1703,2.193,1704,1.605,1705,0.963,1706,1.009,1707,3.23,1708,1.071,1709,1.863,1711,1.009,1715,1.071,1717,1.863,1728,1.925,1730,2.236,1732,0.963,1735,3.612,1740,1.071,1741,1.071,1743,1.071,1745,0.963,1746,1.071,1923,1.071,2002,1.164,2003,3.23,2004,1.164,2005,1.164,2006,1.071,2007,1.164,2008,0.926,2009,1.071,2010,1.071,2011,0.963,2012,1.071,2013,1.071,2014,1.164,2015,1.164,2016,1.164,2017,4.998,2018,1.164,2019,1.164,2020,1.164,2021,1.164,2022,1.071,2023,1.071,2024,1.071,2025,1.164,2026,1.071,2027,3.785,2028,1.164,2029,3.726,2030,1.071,2031,2.994,2032,2.994,2033,3.427,2034,5.435,2035,0.963,2036,1.164,2037,1.977,2038,1.164,2039,1.164,2040,2.15,2041,1.164,2042,1.164,2043,1.164,2044,1.164,2045,1.164,2046,1.164,2047,1.164,2048,1.164,2049,1.164,2050,1.164,2051,3.726,2052,1.164,2053,1.164,2054,1.071,2055,1.164,2056,1.164,2057,1.164,2058,1.164,2059,1.164,2060,1.164,2061,1.164,2062,1.164,2063,1.164,2064,1.164,2065,1.164,2066,1.164,2067,1.164,2068,1.164,2069,1.164,2070,1.164,2071,1.164,2072,1.164,2073,1.164,2074,1.164,2075,1.164,2076,1.164,2077,0.869]],["component/46",[22,0.319]],["keyword/46",[]],["title/47-1",[371,51.936]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["keyword/47-1",[]],["title/47-2",[167,22.375,921,27.267,1110,28.469,1111,22.01,1158,31.065]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["keyword/47-2",[]],["title/47-3",[24,36.02,164,30.547]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["keyword/47-3",[]],["title/47-4",[27,23.018,456,36.972,1111,28.585]],["name/47-4",[]],["text/47-4",[]],["component/47-4",[]],["keyword/47-4",[]],["title/47-5",[456,36.972,1111,28.585,1759,41.194]],["name/47-5",[]],["text/47-5",[]],["component/47-5",[]],["keyword/47-5",[]],["title/47-6",[256,31.867,386,24.992,1760,49.108]],["name/47-6",[]],["text/47-6",[]],["component/47-6",[]],["keyword/47-6",[]],["title/47-7",[770,30.754,1761,49.526]],["name/47-7",[]],["text/47-7",[]],["component/47-7",[]],["keyword/47-7",[]],["title/47-8",[770,30.754,1762,60.49]],["name/47-8",[]],["text/47-8",[]],["component/47-8",[]],["keyword/47-8",[]],["title/47-9",[2078,77.854]],["name/47-9",[]],["text/47-9",[]],["component/47-9",[]],["keyword/47-9",[]],["title/47-10",[1764,77.854]],["name/47-10",[]],["text/47-10",[]],["component/47-10",[]],["keyword/47-10",[]],["title/47",[1110,43.464,1111,33.604]],["name/47",[286,0.558]],["text/47",[2,0.612,5,0.361,8,2.175,10,0.493,22,0.842,24,2.599,25,0.355,27,0.403,29,0.413,41,2.031,42,0.957,43,0.805,45,1.349,49,1.479,52,2.982,53,0.878,56,0.537,57,0.925,59,1.885,60,1.579,63,0.532,66,0.638,71,1.171,73,1.029,80,0.527,84,0.497,89,0.486,90,2.405,92,0.757,93,0.658,94,4.389,109,0.948,112,0.338,130,0.904,131,0.455,135,0.435,140,0.441,143,0.57,152,0.564,158,0.8,160,1,164,2.396,167,0.948,171,1.291,172,0.57,173,0.559,177,3.345,179,1.074,180,2.487,182,1.808,185,0.648,187,1.249,188,0.482,189,0.355,193,1.88,207,0.884,209,1.051,212,0.458,215,0.658,218,0.527,222,1.962,230,0.94,232,0.57,244,2.219,251,1.112,256,3.151,260,0.523,266,0.904,269,1.523,279,0.681,293,0.658,295,0.648,297,0.366,315,0.559,382,1.225,383,0.486,385,0.658,386,2.762,387,1.865,390,0.865,397,0.532,401,0.59,406,0.468,419,1.222,432,0.956,438,0.612,442,2.12,449,0.621,456,2.497,460,1.541,470,1.316,471,1.33,476,0.681,509,2.987,511,0.638,518,3.612,523,0.493,524,0.547,531,0.933,535,1.206,537,0.577,565,0.853,569,0.41,579,1.334,586,1.232,604,0.493,605,0.59,609,3.076,612,2.485,626,1.915,641,2.348,666,1.062,692,0.8,695,1.541,725,1.086,728,0.648,743,1.579,746,0.57,770,3.644,772,0.57,775,1.93,777,0.518,778,0.518,785,0.984,786,1.144,790,0.462,799,0.707,802,1.009,803,0.605,805,1.086,810,0.722,813,0.559,817,0.918,818,0.722,837,0.577,848,0.693,849,1.344,852,0.693,857,0.629,862,0.669,864,0.8,868,0.527,906,0.501,907,2.614,915,1.843,921,1.621,927,1.231,929,1.155,936,2.175,944,2.089,947,0.559,954,1.246,960,0.669,961,1.46,968,0.612,988,0.605,995,0.605,999,1.74,1002,0.612,1004,0.902,1007,1.316,1066,0.707,1068,0.828,1079,0.612,1085,0.648,1088,0.638,1093,0.497,1109,1.062,1110,6.029,1111,4.496,1135,0.527,1144,0.362,1152,1.643,1157,1.086,1159,0.501,1176,0.757,1178,0.621,1188,0.621,1200,0.59,1214,0.722,1216,1.155,1219,1.019,1242,1.171,1255,0.722,1260,1.846,1262,1.865,1267,0.629,1273,0.693,1274,0.722,1300,0.722,1306,0.757,1321,0.612,1331,1.316,1334,0.828,1337,0.605,1343,0.722,1401,0.669,1416,0.658,1434,0.621,1437,0.777,1448,0.693,1466,0.621,1490,0.828,1522,0.597,1541,0.648,1542,0.738,1580,0.681,1678,1.408,1683,1.408,1692,0.861,1700,0.8,1703,0.973,1704,0.777,1759,1.344,1760,2.814,1761,0.738,1765,0.722,1766,0.861,1767,0.757,1768,2.162,1769,0.669,1770,0.861,1771,0.828,1772,0.902,1773,1.602,1774,0.777,1775,1.541,1776,1.408,1777,1.602,1778,0.777,1779,0.957,1780,0.957,1781,0.957,1782,0.738,1784,1.781,1785,0.777,1786,1.408,1787,0.757,1790,0.957,1791,1.781,1792,1.781,1793,1.602,1794,1.781,1795,0.957,1797,0.902,1798,0.957,1800,0.957,1801,0.957,1802,0.957,1803,0.957,1807,1.781,1810,0.957,1811,0.957,1812,0.861,1813,0.707,1814,0.777,1815,0.957,1816,0.957,1817,0.828,1818,0.957,1820,0.957,1821,0.707,1825,1.976,1826,0.957,1827,0.957,1829,0.957,1830,0.861,1831,0.957,1832,1.781,1834,0.738,1836,0.957,1837,3.129,1838,0.957,1841,1.781,1842,1.446,1844,1.781,1845,1.781,1846,0.861,1847,0.957,1848,0.722,1850,0.777,1852,0.861,1853,1.316,1854,0.738,1855,3.687,1856,0.957,1857,0.957,1861,0.957,1864,0.902,1865,0.957,1866,0.957,1867,0.957,1868,0.957,1869,0.861,1870,0.612,1872,1.541,1873,0.957,2077,1.446,2078,0.957,2079,1.041,2080,0.902,2081,1.041,2082,1.041,2083,1.937,2084,1.041,2085,1.041,2086,1.041,2087,1.937,2088,1.041,2089,1.041,2090,4.55,2091,1.041,2092,1.041,2093,1.041,2094,1.937,2095,1.041,2096,1.937,2097,1.041,2098,1.781,2099,2.717,2100,1.937,2101,1.041,2102,1.937,2103,1.937,2104,1.041,2105,1.041,2106,1.041,2107,1.041]],["component/47",[22,0.319]],["keyword/47",[]],["title/48-1",[107,39.565,475,34.5,1140,47.234]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["keyword/48-1",[]],["title/48-2",[167,41.435]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["keyword/48-2",[]],["title/48",[475,40.557,1140,55.527]],["name/48",[286,0.558]],["text/48",[5,1.081,7,4.833,10,2.417,22,1.383,25,1.066,29,1.237,32,2.33,42,1.435,52,1.629,55,1.297,74,1.813,77,1.553,89,2.381,112,2.103,118,1.581,128,1.769,130,1.456,131,2.832,135,1.305,136,1.769,140,2.161,145,2.079,158,1.289,159,2.836,165,1.861,172,1.71,179,1.729,189,2.211,193,1.289,198,1.414,208,2.12,213,2.869,214,2.33,218,1.581,225,2.12,235,2.482,247,3.141,272,2.869,296,2.893,297,1.097,379,1.813,386,1.313,432,2.518,471,1.527,475,4.344,478,2.832,484,2.165,509,2.058,510,1.791,517,2.33,523,1.478,564,2.482,565,1.375,569,1.23,574,1.456,579,2,586,1.13,589,3.338,612,2.581,695,1.769,700,1.974,701,1.729,707,1.675,717,1.749,770,1.375,772,1.71,785,3.204,790,2.263,804,2.12,827,2.079,831,2.165,866,2.585,870,1.914,927,3.387,988,1.813,998,1.914,999,2.608,1086,1.887,1093,1.49,1103,1.791,1111,2.456,1114,4.675,1117,3.085,1119,1.595,1120,4.291,1128,3.13,1140,7.04,1143,1.658,1144,1.086,1145,1.729,1147,1.914,1178,1.861,1213,1.943,1219,1.641,1223,2.12,1225,2.33,1301,2.214,1307,2.964,1337,1.813,1345,2.482,1355,4.833,1377,2.704,1378,2.581,1379,4.421,1380,6.479,1398,3.809,1442,2.12,1456,2.268,1762,2.704,1830,2.581,1842,2.33,1876,2.704,1877,2.214,1879,4.22,1880,2.869,2108,2.33,2109,5.101,2110,6.472,2111,3.12,2112,5.101,2113,3.12,2114,3.12,2115,2.165,2116,3.925,2117,3.12,2118,3.81,2119,2.33,2120,3.12,2121,2.869,2122,2.214]],["component/48",[22,0.319]],["keyword/48",[]],["title/49-1",[1141,36.563]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["keyword/49-1",[]],["title/49-2",[27,27.059,586,25.271]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["keyword/49-2",[]],["title/49-3",[42,19.637,1052,47.428]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["keyword/49-3",[]],["title/49-4",[2123,57.73,2124,60.49]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["keyword/49-4",[]],["title/49-5",[485,43.464,486,42.207]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["keyword/49-5",[]],["title/49-6",[430,40.058,1126,44.15]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["keyword/49-6",[]],["title/49-7",[174,53.693,1419,55.527]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["keyword/49-7",[]],["title/49-8",[994,46.512,1303,49.526]],["name/49-8",[]],["text/49-8",[]],["component/49-8",[]],["keyword/49-8",[]],["title/49-9",[994,34.424,1091,32.676,1303,36.655,2125,39.739]],["name/49-9",[]],["text/49-9",[]],["component/49-9",[]],["keyword/49-9",[]],["title/49-10",[22,15.666]],["name/49-10",[]],["text/49-10",[]],["component/49-10",[]],["keyword/49-10",[]],["title/49-11",[167,34.16,399,32.569]],["name/49-11",[]],["text/49-11",[]],["component/49-11",[]],["keyword/49-11",[]],["title/49-12",[1383,56.418]],["name/49-12",[]],["text/49-12",[]],["component/49-12",[]],["keyword/49-12",[]],["title/49",[442,24.992,586,21.497,1126,37.556]],["name/49",[286,0.558]],["text/49",[5,0.295,6,0.578,8,1.561,10,0.403,16,0.59,22,0.421,24,0.439,25,0.291,26,0.403,27,0.622,28,0.354,29,2.042,34,1.234,35,0.619,41,2.61,42,1.101,43,0.354,44,0.365,45,1.357,49,0.697,51,1.166,52,2.718,53,1.774,55,0.946,57,0.766,58,0.522,59,0.754,61,0.87,65,0.522,67,0.443,74,0.494,80,0.813,81,0.427,84,1.087,94,4.592,97,0.921,99,0.957,101,0.957,109,0.785,112,1.272,117,0.828,118,0.431,126,0.578,130,0.749,131,0.702,134,0.999,135,0.356,136,0.91,140,0.68,141,2.476,142,0.813,148,0.515,155,0.424,158,1.414,160,0.439,164,0.996,166,1.166,167,0.416,168,0.604,174,1.234,179,0.472,180,0.964,184,1.751,186,3.147,188,0.394,189,0.291,193,0.352,195,1.322,212,0.707,222,0.785,244,1.003,248,0.567,253,0.538,256,0.457,260,0.427,263,1.166,266,0.749,276,3.901,297,0.299,308,0.983,310,0.466,311,0.457,384,0.635,386,0.358,390,0.38,392,2.146,396,0.448,397,0.435,399,0.397,400,1.327,405,0.483,406,1.295,408,0.547,409,1.595,433,0.704,442,2.449,446,0.488,448,0.782,463,0.507,471,0.416,480,0.604,485,2.131,486,2.639,497,0.889,502,2.846,507,0.999,509,1.161,511,0.522,515,0.567,526,0.635,529,0.4,531,0.772,534,1.882,535,1.792,537,1.896,565,1.268,569,0.897,574,0.397,579,1.341,586,3.791,594,1.578,609,1.932,610,2.042,700,0.538,701,0.889,703,0.677,723,0.91,746,1.578,776,2.041,778,1.133,779,1.323,785,1.239,786,0.358,792,0.461,800,0.737,802,0.443,803,0.494,805,0.899,810,1.113,811,1.166,812,0.427,818,1.113,831,0.59,832,1.069,856,0.59,863,0.635,868,0.431,874,0.635,875,0.522,878,0.457,907,0.766,910,1.138,911,1.276,915,1.046,927,2.163,936,0.461,944,1.186,947,0.457,954,1.463,961,0.688,970,0.59,983,1.353,989,0.578,994,6.576,1002,0.501,1026,3.238,1047,1.313,1052,1.546,1067,0.435,1080,1.514,1086,0.515,1091,1.44,1093,1.087,1094,0.604,1096,0.619,1101,1.209,1111,0.41,1119,1.472,1126,4.881,1134,0.984,1143,0.452,1144,0.296,1145,0.472,1159,2.101,1166,0.567,1167,0.557,1177,1.517,1178,0.507,1180,0.984,1186,1.699,1206,0.655,1231,0.578,1242,1.376,1260,0.578,1261,3.027,1267,0.97,1273,1.918,1279,0.97,1282,0.932,1292,1.113,1303,1.615,1306,0.619,1307,0.932,1321,0.944,1331,0.578,1333,0.619,1339,0.578,1354,1.339,1395,1.475,1411,0.619,1419,4.866,1440,0.59,1442,0.578,1457,0.567,1473,1.138,1488,0.655,1522,0.488,1549,0.655,1556,0.677,1623,1.882,1654,0.957,1664,0.557,1678,0.619,1703,0.427,1728,0.547,1761,1.138,1768,0.677,1769,0.547,1775,1.276,1776,0.619,1777,0.704,1782,0.604,1796,0.578,1814,1.198,1834,0.604,1870,0.501,1888,0.737,1889,0.782,1898,1.327,1996,0.604,2108,0.635,2115,1.113,2118,1.699,2124,0.737,2125,1.234,2126,0.851,2127,0.737,2128,1.475,2129,0.851,2130,0.851,2131,0.851,2132,0.782,2133,0.704,2134,0.782,2135,0.782,2136,0.851,2137,0.851,2138,0.501,2139,0.851,2140,0.851,2141,0.851,2142,0.851,2143,0.851,2144,0.851,2145,0.851,2146,0.851,2147,0.851,2148,0.851,2149,0.851,2150,0.851,2151,0.851,2152,0.851,2153,1.956,2154,1.475,2155,0.655,2156,1.39,2157,1.39,2158,0.737,2159,2.276,2160,1.604,2161,0.677,2162,0.619,2163,2.093,2164,4.36,2165,4.774,2166,4.012,2167,4.774,2168,1.604,2169,2.381,2170,0.704,2171,1.972,2172,0.737,2173,3.421,2174,3.914,2175,1.417,2176,0.851,2177,0.851,2178,1.604,2179,1.604,2180,0.635,2181,0.737,2182,0.851,2183,1.604,2184,1.198,2185,0.782,2186,0.851,2187,0.851,2188,0.851,2189,0.851,2190,0.851,2191,1.39,2192,1.39,2193,0.851,2194,0.851,2195,0.851,2196,0.851,2197,0.851,2198,0.704,2199,0.655,2200,0.655,2201,0.851,2202,0.851,2203,1.276,2204,0.851,2205,0.851,2206,0.851,2207,0.851,2208,0.704,2209,1.39,2210,0.677,2211,0.851,2212,0.704,2213,2.878,2214,1.604,2215,2.276,2216,0.851,2217,0.851,2218,1.604,2219,1.604,2220,0.851,2221,1.604,2222,0.704,2223,0.851,2224,0.851,2225,1.972,2226,0.851,2227,0.851,2228,1.604,2229,0.851,2230,0.851,2231,0.851,2232,3.421,2233,0.851,2234,1.327,2235,0.851,2236,0.851,2237,0.737,2238,0.851,2239,0.851,2240,0.704,2241,0.851,2242,0.851,2243,0.737,2244,0.704,2245,0.782,2246,0.851,2247,0.704,2248,1.39,2249,0.851,2250,0.677,2251,0.851,2252,0.635,2253,1.39,2254,0.704,2255,0.782,2256,0.851,2257,0.677,2258,0.851,2259,0.851,2260,0.851,2261,0.851,2262,0.782,2263,0.851,2264,0.737,2265,1.604,2266,0.782,2267,0.737,2268,0.851,2269,0.782,2270,1.39,2271,1.39]],["component/49",[22,0.319]],["keyword/49",[]],["title/50-1",[1141,36.563]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["keyword/50-1",[]],["title/50-2",[371,51.936]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["keyword/50-2",[]],["title/50-3",[94,13.554,386,14.308,489,28.114,872,27.041,1110,34.055,2272,26.148,2273,31.257]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["keyword/50-3",[]],["title/50-4",[386,24.992,489,49.108,1110,36.972]],["name/50-4",[]],["text/50-4",[]],["component/50-4",[]],["keyword/50-4",[]],["title/50",[1110,43.464,2274,64.185]],["name/50",[286,0.558]],["text/50",[5,1.807,10,3.6,22,2.021,25,1.782,28,2.168,42,2.521,45,3.553,52,2.426,55,3.158,68,2.743,126,3.544,132,2.993,140,2.209,143,2.859,189,1.782,193,2.155,244,2.298,291,3.544,296,2.957,297,1.833,315,2.799,386,4.144,387,4.164,396,2.743,423,3.7,471,2.552,489,7.412,524,2.743,579,2.978,604,2.471,787,3.544,813,2.799,818,3.618,872,4.149,913,4.796,961,2.238,969,2.433,1110,7.196,1111,2.511,1144,1.816,1262,2.859,1267,3.154,1274,3.618,1345,4.149,1354,3.069,1765,5.271,1766,4.313,2272,4.012,2273,4.796,2274,9.054,2275,7.597,2276,4.52,2277,4.52,2278,4.796,2279,5.215,2280,5.215,2281,4.796,2282,5.215]],["component/50",[22,0.319]],["keyword/50",[]],["title/51-1",[1141,36.563]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["keyword/51-1",[]],["title/51-2",[42,19.637,52,22.288]],["name/51-2",[]],["text/51-2",[]],["component/51-2",[]],["keyword/51-2",[]],["title/51-3",[22,15.666]],["name/51-3",[]],["text/51-3",[]],["component/51-3",[]],["keyword/51-3",[]],["title/51-4",[149,46.512,310,38.261]],["name/51-4",[]],["text/51-4",[]],["component/51-4",[]],["keyword/51-4",[]],["title/51-5",[266,39.505]],["name/51-5",[]],["text/51-5",[]],["component/51-5",[]],["keyword/51-5",[]],["title/51",[256,31.867,579,23.276,866,30.083]],["name/51",[286,0.558]],["text/51",[5,1.23,22,1.63,25,1.213,27,1.376,29,1.408,42,0.999,45,3.492,49,1.543,52,2.997,55,1.476,67,2.95,73,1.886,109,1.738,112,1.154,118,1.799,140,2.992,142,1.799,158,1.467,159,1.347,164,2.478,183,2.211,187,1.632,189,1.213,212,2.495,222,1.738,223,5.653,244,1.564,250,2.651,256,1.906,297,1.248,302,2.211,373,2.013,383,1.657,401,2.013,405,2.013,438,2.09,442,1.494,509,1.432,512,2.323,523,3.347,524,1.868,565,1.564,569,3.178,579,2.769,606,3.378,612,1.416,636,2.581,697,2.824,707,3.039,725,1.99,770,2.495,785,1.285,786,1.494,790,1.575,809,2.519,860,3.378,866,5.182,899,4.468,907,3.374,911,3.174,915,1.632,927,2.566,961,2.43,969,1.657,998,2.178,1100,2.867,1103,2.038,1111,1.709,1133,2.819,1137,4.622,1144,1.236,1200,2.013,1232,5.274,1267,2.147,1307,3.291,1366,3.077,1368,2.731,1680,2.581,1690,4.018,1703,1.783,1813,3.848,1973,3.265,2175,3.526,2240,2.936,2283,3.265,2284,3.265,2285,3.55,2286,2.651,2287,2.581,2288,3.55,2289,3.55,2290,3.077,2291,3.55,2292,3.55,2293,5.663,2294,2.651,2295,3.077,2296,4.908,2297,3.265,2298,6.986,2299,3.55,2300,3.55,2301,3.55,2302,3.265]],["component/51",[22,0.319]],["keyword/51",[]],["title/52-1",[1141,36.563]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["keyword/52-1",[]],["title/52-2",[262,45.667,586,25.271]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["keyword/52-2",[]],["title/52-3",[262,45.667,1219,36.717]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["keyword/52-3",[]],["title/52",[262,45.667,785,25.271]],["name/52",[286,0.558]],["text/52",[5,0.533,22,0.988,25,0.525,26,1.313,27,1.466,29,0.61,41,0.779,42,0.433,44,0.66,45,1.5,48,1.045,49,0.669,51,1.118,52,1.705,53,0.697,55,0.639,56,0.794,60,0.894,64,0.905,66,1.7,67,1.97,68,0.809,78,0.817,80,0.779,90,4.232,94,4.553,99,1.653,109,1.356,115,1.045,117,0.794,118,1.916,130,1.293,131,1.213,137,1.067,140,1.602,145,1.025,158,1.563,160,0.794,167,0.753,179,0.852,189,0.525,191,0.958,193,1.145,209,2.509,212,1.221,218,0.779,244,0.678,251,0.883,260,0.772,262,5.943,296,0.872,297,0.541,301,1.067,371,0.943,373,2.145,386,0.647,396,1.99,397,1.417,398,0.759,419,1.701,442,0.647,492,4.628,531,0.74,533,0.872,565,0.678,569,1.491,574,1.293,582,0.943,586,3.988,591,1.091,594,0.843,609,3.634,625,1.025,626,3.32,666,1.519,695,1.571,723,2.145,728,3.326,742,0.917,746,0.843,770,0.678,782,2.624,785,2.517,786,0.647,792,0.834,812,0.772,813,0.825,817,0.729,853,0.786,868,2.706,873,1.487,878,0.825,884,0.973,888,1.091,899,1.753,907,3.517,915,2.127,921,0.917,938,0.93,961,1.189,962,2.402,968,0.905,969,0.718,999,1.417,1002,1.631,1072,1.272,1081,0.843,1093,0.735,1109,1.519,1119,0.786,1144,0.535,1173,0.93,1197,0.943,1201,1.067,1219,3.657,1243,1.118,1260,3.143,1267,0.93,1275,0.917,1306,2.015,1331,3.143,1337,0.894,1354,3.504,1356,1.333,1357,1.118,1358,2.684,1408,0.943,1419,2.205,1456,5.354,1549,1.183,1582,0.943,1656,1.272,1703,0.772,1745,1.272,1778,1.148,1786,2.015,1789,2.52,1830,1.272,1842,1.148,1950,1.414,2077,2.069,2153,5.003,2164,0.973,2294,2.069,2303,1.148,2304,3.782,2305,1.538,2306,1.538,2307,1.183,2308,3.782,2309,1.333,2310,1.538,2311,1.538,2312,4.626,2313,2.548,2314,5.954,2315,3.782,2316,2.548,2317,1.414,2318,1.272,2319,1.538,2320,2.548,2321,3.782,2322,1.538,2323,1.538,2324,5.34,2325,2.771,2326,2.771,2327,2.771,2328,1.538,2329,2.771,2330,1.538,2331,1.538,2332,2.402,2333,1.538,2334,1.538,2335,7.108,2336,1.538,2337,1.538,2338,1.538,2339,1.538,2340,1.538,2341,1.333,2342,4.626,2343,1.224,2344,1.183,2345,1.183,2346,1.006,2347,1.538,2348,1.333,2349,2.771,2350,1.538,2351,1.538,2352,1.538,2353,1.538,2354,1.538,2355,5.34,2356,1.538,2357,1.538,2358,1.538,2359,3.782,2360,1.538,2361,1.538,2362,1.538,2363,1.538,2364,1.538,2365,1.538,2366,1.538,2367,1.538,2368,1.148,2369,1.538,2370,1.538,2371,1.538,2372,2.771,2373,1.538,2374,1.538,2375,1.538,2376,1.538,2377,1.414,2378,1.538,2379,1.538]],["component/52",[22,0.319]],["keyword/52",[]],["title/53",[877,48.427,1117,42.207]],["name/53",[286,0.558]],["text/53",[5,2.819,22,1.903,25,2.779,28,4.276,42,2.289,45,3.225,52,2.598,189,2.779,297,2.859,531,3.916,574,3.796,579,3.189,766,5.322,790,4.563,877,5.644,1114,5.833,1117,4.919,1144,2.832,1159,3.916,1284,7.05,1285,7.05,1286,6.728,1287,5.644]],["component/53",[22,0.319]],["keyword/53",[]],["title/54-1",[1141,36.563]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["keyword/54-1",[]],["title/54-2",[373,48.01]],["name/54-2",[]],["text/54-2",[]],["component/54-2",[]],["keyword/54-2",[]],["title/54-3",[289,49.829]],["name/54-3",[]],["text/54-3",[]],["component/54-3",[]],["keyword/54-3",[]],["title/54-4",[67,36.363,569,27.517]],["name/54-4",[]],["text/54-4",[]],["component/54-4",[]],["keyword/54-4",[]],["title/54-5",[101,30.81,102,32.168,230,25.074,399,24.105]],["name/54-5",[]],["text/54-5",[]],["component/54-5",[]],["keyword/54-5",[]],["title/54-6",[1437,52.121,2380,57.73]],["name/54-6",[]],["text/54-6",[]],["component/54-6",[]],["keyword/54-6",[]],["title/54-7",[42,14.533,139,22.761,145,34.424,174,39.739]],["name/54-7",[]],["text/54-7",[]],["component/54-7",[]],["keyword/54-7",[]],["title/54-8",[22,9.559,42,14.533,89,24.105,2381,41.096]],["name/54-8",[]],["text/54-8",[]],["component/54-8",[]],["keyword/54-8",[]],["title/54",[42,14.533,45,20.482,399,24.105,587,30.017]],["name/54",[286,0.558]],["text/54",[5,0.315,8,0.493,10,1.143,22,1.228,24,0.469,25,0.824,26,0.808,27,0.661,28,0.378,41,0.46,42,1.94,44,0.39,45,2.521,52,2.119,53,0.412,55,0.378,56,0.469,57,0.434,59,1.134,60,1.767,64,1.004,66,1.047,67,0.889,71,0.549,73,0.906,77,0.452,80,0.864,84,0.815,89,1.682,90,3.293,93,0.575,94,4.385,101,0.542,102,2.562,104,0.751,112,1.487,116,1.116,130,1.419,131,0.398,132,0.979,134,1.062,135,0.38,137,1.184,139,2.526,142,0.864,143,0.935,145,3.585,152,0.493,153,0.699,155,1.201,158,3.129,165,1.017,169,0.488,173,2.456,174,1.855,179,0.503,180,1.022,187,0.418,188,0.421,189,0.583,191,0.566,193,0.375,194,1.312,195,0.991,197,0.723,198,0.412,199,1.526,209,0.925,212,0.4,218,1.222,222,1.18,230,1.476,240,0.835,244,0.4,260,0.456,263,0.66,266,2.135,271,2.509,289,2.94,290,2.359,293,1.924,296,2.044,297,0.319,302,1.502,303,1.184,308,0.392,311,1.294,315,0.488,317,0.605,373,2.044,377,2.628,382,1.526,383,0.424,390,0.406,392,0.498,396,1.269,397,0.464,399,3.533,405,0.515,419,0.409,421,0.699,432,0.842,471,0.445,472,0.528,500,1.411,507,1.062,513,2.635,518,1.269,523,0.43,529,0.427,535,2.562,553,0.456,565,0.752,569,1.199,579,1.794,583,1.995,584,0.835,586,2.076,587,1.401,600,0.835,605,0.967,609,2.03,610,1.21,612,1.825,616,0.575,626,0.815,630,0.645,641,0.88,658,2.271,666,0.498,695,1.724,696,1.004,707,0.488,717,0.509,725,0.509,728,1.062,743,0.528,746,1.667,747,0.787,762,0.63,768,0.63,770,0.4,773,0.584,776,0.542,778,0.452,779,0.784,785,0.329,786,2.413,808,0.605,815,0.566,817,0.43,823,0.723,842,0.557,847,0.645,860,1.017,861,0.723,866,1.222,868,0.46,878,0.916,883,0.787,887,1.478,906,0.437,911,0.509,921,0.542,929,0.542,930,0.751,932,1.673,938,0.549,944,0.473,947,0.488,959,0.575,961,2.728,962,1.478,968,1.004,969,0.424,973,0.787,976,1.159,994,0.605,999,1.233,1002,0.535,1022,0.678,1067,1.233,1079,1.004,1097,0.566,1101,0.906,1133,0.452,1144,0.316,1174,0.699,1176,0.66,1183,0.549,1201,0.63,1219,0.478,1245,0.645,1262,2.508,1280,0.549,1282,0.528,1292,3.174,1301,0.645,1316,1.312,1321,0.535,1343,0.63,1351,1.159,1353,1.184,1358,1.21,1398,1.004,1408,0.557,1416,0.575,1437,2.271,1448,1.137,1466,0.542,1522,0.521,1541,1.062,1542,0.645,1548,0.699,1582,0.557,1594,0.645,1625,0.699,1631,0.584,1645,1.274,1654,1.438,1659,0.699,1667,1.21,1700,0.699,1777,0.751,1787,0.66,1789,0.605,1796,0.617,1821,1.159,1825,0.66,1870,0.535,1885,1.032,1903,0.787,1913,0.645,1915,0.66,1948,1.569,1998,0.835,2119,1.801,2138,0.535,2156,1.478,2164,0.575,2210,0.723,2270,0.787,2346,0.594,2368,3.417,2380,5.259,2381,2.419,2382,3.315,2383,3.565,2384,0.908,2385,1.569,2386,2.218,2387,1.569,2388,0.835,2389,0.835,2390,1.569,2391,0.787,2392,0.835,2393,0.787,2394,0.908,2395,0.908,2396,0.787,2397,1.919,2398,0.835,2399,0.908,2400,1.569,2401,2.412,2402,0.908,2403,0.908,2404,3.041,2405,3.041,2406,0.908,2407,0.835,2408,0.908,2409,1.706,2410,0.787,2411,0.835,2412,0.835,2413,0.835,2414,0.835,2415,0.908,2416,0.835,2417,0.835,2418,0.908,2419,0.908,2420,0.835,2421,0.908,2422,2.218,2423,1.184,2424,1.706,2425,0.835,2426,0.699,2427,0.835,2428,0.835,2429,2.412,2430,0.835,2431,0.908,2432,0.835,2433,4.575,2434,0.908,2435,0.908,2436,1.706,2437,1.569,2438,1.569,2439,0.908,2440,0.66,2441,0.835,2442,0.908,2443,0.908,2444,0.908,2445,1.569,2446,0.751,2447,1.312,2448,0.908,2449,1.357,2450,0.908,2451,0.908,2452,0.908,2453,2.515,2454,2.515,2455,0.787,2456,0.751,2457,0.908,2458,0.835,2459,0.908,2460,0.751,2461,0.908,2462,0.835,2463,1.274,2464,0.908,2465,1.706,2466,0.787,2467,0.751,2468,0.908,2469,0.908,2470,0.908,2471,0.908,2472,0.908,2473,0.908,2474,0.908,2475,0.908,2476,0.751,2477,0.908,2478,3.783,2479,2.412,2480,0.835,2481,0.908,2482,0.908,2483,1.706,2484,1.706,2485,1.706,2486,1.706,2487,1.706,2488,1.706,2489,2.412,2490,2.412,2491,1.706,2492,2.412,2493,0.751,2494,0.908,2495,0.835,2496,0.723,2497,0.908,2498,0.787,2499,0.908,2500,0.908,2501,0.787,2502,0.751,2503,0.908,2504,0.908,2505,0.835,2506,0.835,2507,0.751,2508,0.908,2509,0.835,2510,0.835,2511,1.706,2512,1.706,2513,0.908,2514,1.706,2515,0.908,2516,0.908,2517,0.908,2518,0.908,2519,0.908,2520,0.908,2521,0.908,2522,0.908,2523,0.908,2524,0.908,2525,0.908,2526,0.908,2527,0.908,2528,0.908,2529,0.908,2530,0.908,2531,0.908,2532,0.908,2533,0.908,2534,0.908,2535,0.908,2536,0.908,2537,0.908]],["component/54",[22,0.319]],["keyword/54",[]],["title/55-1",[1141,36.563]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["keyword/55-1",[]],["title/55-2",[983,27.917,1047,27.096,2538,49.108]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["keyword/55-2",[]],["title/55-3",[130,32.569,1159,33.604]],["name/55-3",[]],["text/55-3",[]],["component/55-3",[]],["keyword/55-3",[]],["title/55-4",[27,23.018,586,21.497,1047,27.096]],["name/55-4",[]],["text/55-4",[]],["component/55-4",[]],["keyword/55-4",[]],["title/55-5",[586,21.497,1047,27.096,2344,45.674]],["name/55-5",[]],["text/55-5",[]],["component/55-5",[]],["keyword/55-5",[]],["title/55-6",[586,25.271,983,32.819]],["name/55-6",[]],["text/55-6",[]],["component/55-6",[]],["keyword/55-6",[]],["title/55-7",[112,27.513]],["name/55-7",[]],["text/55-7",[]],["component/55-7",[]],["keyword/55-7",[]],["title/55",[586,25.271,1047,31.853]],["name/55",[286,0.558]],["text/55",[4,0.532,5,0.34,9,0.875,10,0.465,22,0.806,25,0.335,27,2.192,29,1.727,41,1.307,42,1.359,43,0.408,44,0.786,45,1.023,52,2.121,54,0.602,57,0.875,60,2.531,66,0.602,71,0.593,80,0.929,90,0.468,94,4.775,102,0.611,109,0.48,112,1.57,117,1.331,118,0.497,130,0.458,135,0.41,139,1.428,140,0.776,141,0.62,155,0.488,158,1.066,159,2.145,160,1.976,172,1.005,179,0.543,180,2.046,187,0.451,189,0.335,191,0.611,193,1.582,194,0.754,207,0.447,228,0.666,230,0.89,232,0.538,234,0.642,244,1.428,251,0.563,266,0.855,297,0.345,302,1.607,308,1.4,315,0.526,319,0.732,323,0.811,373,0.556,377,2.292,381,0.732,383,0.458,386,0.413,390,1.71,392,0.538,405,1.039,406,1.96,409,0.543,419,0.824,438,0.577,442,1.834,456,0.611,473,2.384,497,1.016,509,1.307,523,0.465,524,0.516,531,1.242,533,0.556,535,0.611,537,1.43,565,0.807,569,3.551,574,0.855,586,3.753,591,0.696,605,1.039,609,3.663,612,0.731,625,0.653,626,3.846,637,1.016,641,2.248,691,3.775,700,0.62,725,2.146,746,1.414,762,1.271,778,0.488,785,0.355,790,0.435,792,2.62,802,0.511,805,1.027,809,0.696,811,1.332,812,1.296,817,0.465,837,0.543,862,0.631,878,1.739,922,0.78,936,0.994,938,1.108,948,0.929,959,1.159,961,1.107,968,0.577,969,0.855,970,0.68,983,3.255,988,0.57,994,1.221,996,0.62,999,0.501,1040,0.902,1047,4.954,1081,4.192,1084,0.593,1101,3.816,1106,2.422,1109,1.414,1126,3.056,1134,0.602,1144,0.341,1159,0.882,1173,0.593,1178,0.585,1214,0.68,1231,0.666,1245,1.3,1260,0.666,1271,2.945,1275,0.585,1336,0.593,1337,0.57,1344,1.831,1351,0.666,1358,0.696,1365,2.236,1393,2.784,1398,0.577,1419,4.186,1434,0.585,1438,0.642,1493,0.666,1522,0.563,1648,2.052,1654,1.093,1656,3.603,1663,0.78,1703,0.92,1704,0.732,1730,0.732,1768,1.458,1769,0.631,1813,0.666,1846,0.811,1848,0.68,1869,0.811,1949,3.465,1988,0.642,2153,3.842,2212,0.811,2257,2.052,2313,1.685,2316,1.685,2344,4.349,2346,1.199,2463,0.732,2496,0.78,2538,0.811,2539,0.811,2540,0.85,2541,0.98,2542,1.833,2543,1.685,2544,1.685,2545,0.811,2546,0.902,2547,0.98,2548,0.98,2549,0.98,2550,1.833,2551,0.98,2552,0.98,2553,0.98,2554,1.833,2555,1.833,2556,0.98,2557,1.833,2558,0.98,2559,0.98,2560,0.98,2561,0.902,2562,0.98,2563,0.98,2564,0.98,2565,0.85,2566,1.833,2567,1.833,2568,3.829,2569,1.833,2570,3.24,2571,0.78,2572,0.811,2573,0.98,2574,1.833,2575,0.98,2576,1.833,2577,1.833,2578,1.833,2579,0.98,2580,3.829,2581,0.98,2582,1.833,2583,1.833,2584,2.58,2585,1.833,2586,0.98,2587,3.24,2588,2.58,2589,0.98,2590,1.833,2591,0.98,2592,1.833,2593,0.98,2594,0.98,2595,1.833,2596,3.24,2597,0.98,2598,1.833,2599,0.98,2600,1.833,2601,0.98,2602,0.98,2603,0.98,2604,0.98,2605,1.833,2606,1.833,2607,1.833,2608,1.833,2609,0.98,2610,0.98,2611,0.98,2612,0.98,2613,0.98,2614,0.98,2615,0.98,2616,0.98,2617,0.98,2618,0.98,2619,0.98,2620,0.98,2621,0.98,2622,3.829,2623,2.58,2624,4.356,2625,5.653,2626,0.98,2627,0.85,2628,0.98,2629,0.98,2630,0.98,2631,0.98]],["component/55",[22,0.319]],["keyword/55",[]],["title/56-1",[1141,36.563]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["keyword/56-1",[]],["title/56-2",[52,22.288,53,31.624]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["keyword/56-2",[]],["title/56-3",[723,25.925,983,21.496,1047,20.864,1156,35.169,2632,37.813]],["name/56-3",[]],["text/56-3",[]],["component/56-3",[]],["keyword/56-3",[]],["title/56-4",[723,39.58,1156,53.693]],["name/56-4",[]],["text/56-4",[]],["component/56-4",[]],["keyword/56-4",[]],["title/56-5",[936,37.854,1047,31.853]],["name/56-5",[]],["text/56-5",[]],["component/56-5",[]],["keyword/56-5",[]],["title/56-6",[388,27.861,579,16.074,873,22.007,1101,21.784,1147,25.153,1337,23.825]],["name/56-6",[]],["text/56-6",[]],["component/56-6",[]],["keyword/56-6",[]],["title/56-7",[193,21.344,198,23.405,377,27.175,873,27.726]],["name/56-7",[]],["text/56-7",[]],["component/56-7",[]],["keyword/56-7",[]],["title/56-8",[873,37.462,1080,36.717]],["name/56-8",[]],["text/56-8",[]],["component/56-8",[]],["keyword/56-8",[]],["title/56-9",[873,37.462,1100,28.325]],["name/56-9",[]],["text/56-9",[]],["component/56-9",[]],["keyword/56-9",[]],["title/56-10",[873,31.867,1101,31.545,1337,34.5]],["name/56-10",[]],["text/56-10",[]],["component/56-10",[]],["keyword/56-10",[]],["title/56-11",[478,22.394,627,34.098,873,16.807,1101,16.637,1337,18.195,2175,19.499,2633,28.795]],["name/56-11",[]],["text/56-11",[]],["component/56-11",[]],["keyword/56-11",[]],["title/56-12",[478,37.052]],["name/56-12",[]],["text/56-12",[]],["component/56-12",[]],["keyword/56-12",[]],["title/56-13",[52,14.599,873,24.538,1101,24.29,1337,26.565,2634,42.041]],["name/56-13",[]],["text/56-13",[]],["component/56-13",[]],["keyword/56-13",[]],["title/56-14",[6,47.428,1340,48.427]],["name/56-14",[]],["text/56-14",[]],["component/56-14",[]],["keyword/56-14",[]],["title/56-15",[7,44.337,8,32.201,2635,54.599]],["name/56-15",[]],["text/56-15",[]],["component/56-15",[]],["keyword/56-15",[]],["title/56-16",[42,16.704,419,26.71,1052,40.344]],["name/56-16",[]],["text/56-16",[]],["component/56-16",[]],["keyword/56-16",[]],["title/56-17",[419,31.4,1104,43.464]],["name/56-17",[]],["text/56-17",[]],["component/56-17",[]],["keyword/56-17",[]],["title/56-18",[485,36.972,486,35.904,968,34.945]],["name/56-18",[]],["text/56-18",[]],["component/56-18",[]],["keyword/56-18",[]],["title/56-19",[22,15.666]],["name/56-19",[]],["text/56-19",[]],["component/56-19",[]],["keyword/56-19",[]],["title/56-20",[399,27.705,873,31.867,1047,27.096]],["name/56-20",[]],["text/56-20",[]],["component/56-20",[]],["keyword/56-20",[]],["title/56-21",[1292,58.74]],["name/56-21",[]],["text/56-21",[]],["component/56-21",[]],["keyword/56-21",[]],["title/56-22",[289,34.945,300,49.108,509,23.953]],["name/56-22",[]],["text/56-22",[]],["component/56-22",[]],["keyword/56-22",[]],["title/56-23",[1383,56.418]],["name/56-23",[]],["text/56-23",[]],["component/56-23",[]],["keyword/56-23",[]],["title/56-24",[1383,56.418]],["name/56-24",[]],["text/56-24",[]],["component/56-24",[]],["keyword/56-24",[]],["title/56",[873,37.462,1047,31.853]],["name/56",[286,0.558]],["text/56",[2,0.284,4,0.506,5,0.167,6,1.189,8,2.14,10,0.642,17,0.36,18,0.564,22,0.457,25,0.165,26,0.229,27,0.362,28,0.563,29,0.694,34,0.718,41,0.886,42,0.597,43,0.388,45,1.233,49,0.589,51,0.351,52,2.151,53,1.542,55,0.388,57,0.23,58,0.831,59,0.439,64,0.549,66,0.296,67,0.486,68,0.254,71,0.292,77,0.24,78,0.496,80,0.473,84,1.013,90,1.337,93,0.305,94,4.78,97,1.004,101,0.556,102,0.301,112,1.779,116,0.886,117,0.481,127,0.929,130,0.225,131,0.211,136,0.529,139,0.771,140,0.395,141,1.341,142,0.245,155,0.24,158,0.56,159,0.183,163,0.31,164,0.766,167,0.457,168,1.241,172,1.354,173,0.939,174,0.371,177,0.727,179,0.267,180,1.046,182,0.72,187,0.975,188,0.81,189,0.956,193,0.723,195,1.232,199,1.77,204,1.12,207,0.618,212,0.411,218,0.245,222,0.236,230,1.358,231,0.858,235,0.384,237,0.662,244,0.934,247,0.234,248,0.322,251,0.277,256,0.501,263,0.351,264,1.12,266,0.816,269,0.98,270,0.535,271,0.469,273,0.517,285,0.28,289,2.471,290,1.616,291,0.328,297,0.17,300,0.772,308,1.066,311,0.501,316,0.678,317,0.322,372,0.328,377,2.076,380,0.6,382,0.857,384,0.36,386,0.892,388,0.328,389,0.371,390,0.605,392,0.511,396,0.254,397,0.247,399,1.718,405,0.992,406,0.954,408,0.6,418,1.077,419,0.217,442,0.203,455,1.217,460,1.077,463,0.288,471,0.663,478,2.313,485,1.743,486,2.227,497,0.267,502,0.985,509,0.996,510,0.535,511,0.296,515,0.622,516,0.335,518,0.712,519,0.371,522,0.274,523,1.005,524,0.254,526,0.697,528,0.371,531,0.652,537,2.705,558,0.444,565,0.411,566,0.277,569,1.655,574,0.225,579,1.219,586,1.013,588,0.858,594,0.511,609,3.513,612,0.985,616,1.341,621,0.277,626,1.337,630,0.662,641,0.699,695,0.529,696,0.797,697,0.742,701,0.267,723,2.885,725,0.271,728,0.301,743,0.542,746,0.265,762,0.335,772,0.265,773,0.6,775,0.274,776,1.473,779,0.222,781,0.94,785,0.49,786,0.57,790,1.096,792,0.506,799,0.634,804,0.328,805,0.271,808,0.322,810,0.647,812,0.242,813,0.501,816,1.166,817,0.442,832,0.902,837,0.969,842,0.296,850,0.384,856,0.647,857,0.292,862,0.31,868,2.127,869,0.384,871,0.809,873,4.975,876,0.316,877,0.335,878,0.501,885,0.316,888,0.662,894,0.742,906,0.449,907,0.647,909,0.31,911,0.523,914,0.328,915,0.222,921,0.288,922,0.384,927,1.268,936,0.735,938,0.292,944,1.105,946,0.399,952,0.316,954,1.363,959,0.305,961,0.4,968,0.284,969,0.225,971,0.742,976,0.328,980,0.985,981,0.662,983,3.402,989,0.328,994,0.902,995,0.28,998,0.296,999,0.477,1002,0.797,1022,0.697,1047,4.23,1053,0.271,1066,0.328,1079,0.797,1080,1.636,1093,0.23,1096,0.351,1100,1.602,1101,4.181,1106,0.857,1108,0.284,1109,0.265,1111,0.232,1126,0.305,1133,0.24,1143,0.72,1144,0.325,1147,0.572,1159,0.652,1172,0.384,1173,0.564,1177,1.865,1182,0.335,1183,1.058,1185,0.718,1188,0.288,1198,0.718,1201,0.647,1213,0.301,1216,0.556,1217,0.292,1219,0.254,1231,0.328,1240,0.351,1243,0.351,1249,0.399,1260,0.634,1261,0.647,1268,0.351,1279,0.292,1282,0.28,1283,0.322,1287,0.335,1292,0.94,1293,0.351,1297,0.697,1307,0.28,1316,0.371,1326,0.335,1337,1.807,1340,1.713,1351,1.189,1376,0.384,1393,0.351,1399,0.31,1401,0.31,1402,0.772,1411,0.351,1416,0.305,1427,0.634,1434,1.043,1438,0.316,1440,0.335,1442,0.634,1448,0.622,1466,1.043,1473,0.662,1490,0.384,1493,0.328,1522,0.535,1545,0.985,1559,0.418,1560,1.754,1565,1.754,1568,0.418,1569,0.418,1580,0.316,1582,0.296,1594,0.662,1623,1.12,1625,0.371,1631,0.871,1645,0.36,1654,0.556,1660,1.174,1663,2.474,1664,1.616,1687,0.351,1695,0.418,1703,0.469,1728,0.871,1769,1.588,1770,0.399,1771,0.384,1775,1.392,1787,0.678,1789,0.622,1796,1.441,1848,0.647,1870,0.549,1885,0.292,1893,1.077,1905,0.718,1913,0.662,1932,0.444,1957,0.371,1961,0.809,1970,0.384,1988,0.316,1991,0.399,1996,0.342,2121,0.444,2123,0.399,2138,0.284,2153,0.328,2155,0.371,2157,0.418,2158,0.418,2161,0.384,2162,0.351,2169,0.399,2175,2.904,2180,0.36,2181,0.418,2191,0.418,2192,0.418,2198,1.754,2199,0.371,2200,0.371,2203,3.883,2209,0.418,2222,0.399,2225,1.838,2243,0.418,2244,0.399,2248,0.418,2252,0.36,2253,0.418,2254,0.399,2255,0.444,2270,0.809,2271,0.418,2341,0.418,2346,0.316,2385,0.444,2391,0.418,2393,0.418,2397,0.384,2441,2.271,2467,0.399,2496,0.384,2505,0.444,2540,0.418,2545,0.399,2565,0.418,2627,0.418,2632,0.772,2633,0.858,2635,3.13,2636,0.483,2637,0.483,2638,1.354,2639,0.418,2640,0.384,2641,0.483,2642,0.483,2643,0.418,2644,0.444,2645,0.483,2646,0.444,2647,0.418,2648,0.384,2649,0.418,2650,0.418,2651,0.483,2652,1.354,2653,0.483,2654,0.483,2655,0.933,2656,0.483,2657,0.483,2658,0.483,2659,0.483,2660,0.483,2661,0.483,2662,0.483,2663,0.483,2664,0.483,2665,0.933,2666,0.483,2667,0.483,2668,0.483,2669,0.483,2670,0.483,2671,0.483,2672,0.483,2673,0.483,2674,0.933,2675,0.902,2676,1.838,2677,0.933,2678,0.483,2679,0.483,2680,0.483,2681,0.483,2682,0.483,2683,0.483,2684,0.483,2685,0.483,2686,0.483,2687,0.483,2688,0.399,2689,2.799,2690,1.354,2691,0.483,2692,0.483,2693,0.444,2694,0.371,2695,0.483,2696,1.354,2697,0.483,2698,0.444,2699,0.858,2700,0.483,2701,0.36,2702,0.444,2703,0.483,2704,0.418,2705,0.483,2706,1.174,2707,0.384,2708,0.483,2709,0.933,2710,1.245,2711,0.418,2712,0.678,2713,0.418,2714,0.933,2715,0.351,2716,0.483,2717,1.354,2718,0.483,2719,0.483,2720,0.483,2721,0.444,2722,0.483,2723,1.245,2724,0.444,2725,0.483,2726,0.483,2727,0.483,2728,0.933,2729,0.444,2730,0.444,2731,0.483,2732,0.483,2733,0.933,2734,0.483,2735,0.483,2736,0.933,2737,0.483,2738,0.483,2739,0.483,2740,0.483,2741,0.483,2742,0.483,2743,0.483,2744,0.483,2745,0.933,2746,0.933,2747,0.483,2748,0.483,2749,0.483,2750,0.483,2751,0.483,2752,0.483,2753,0.483,2754,0.483,2755,0.483,2756,0.483,2757,0.933,2758,0.483,2759,0.483,2760,0.483,2761,0.483,2762,0.483,2763,0.483,2764,0.483,2765,0.483,2766,0.483,2767,0.483,2768,0.483,2769,0.483,2770,0.933,2771,0.483,2772,0.483,2773,0.483,2774,2.469,2775,0.483,2776,0.483,2777,0.483,2778,0.483,2779,0.483,2780,0.483,2781,0.444,2782,0.483,2783,0.483,2784,1.609,2785,0.933,2786,0.483,2787,0.858,2788,0.399,2789,0.483,2790,0.483,2791,0.483,2792,0.933,2793,0.483,2794,0.444,2795,0.483,2796,0.483,2797,0.483,2798,1.354,2799,0.933,2800,0.483,2801,0.933,2802,0.342,2803,0.444,2804,0.858,2805,0.483,2806,0.933,2807,0.483,2808,0.483,2809,0.742,2810,0.483,2811,0.399,2812,1.354,2813,0.483,2814,0.483,2815,0.483,2816,0.444,2817,0.399,2818,0.418,2819,0.483,2820,1.245,2821,1.354,2822,0.933,2823,0.483,2824,0.483,2825,0.483,2826,0.933,2827,0.483,2828,0.483,2829,0.444,2830,0.444,2831,0.933,2832,0.483,2833,0.328,2834,0.483,2835,0.483,2836,0.483,2837,0.483,2838,0.483,2839,0.483,2840,0.483,2841,0.483,2842,0.933,2843,0.483,2844,0.483,2845,0.483,2846,0.483,2847,0.483,2848,0.399,2849,0.483,2850,1.354,2851,1.354,2852,3.403,2853,1.354,2854,1.354,2855,1.354,2856,1.354,2857,0.483,2858,1.354,2859,1.354,2860,1.354,2861,1.354,2862,1.354,2863,1.354,2864,0.483,2865,1.174,2866,1.354,2867,1.354,2868,0.483,2869,0.483,2870,0.933,2871,0.483,2872,0.483,2873,0.483,2874,0.933]],["component/56",[22,0.319]],["keyword/56",[]],["title/57-1",[1141,36.563]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["keyword/57-1",[]],["title/57-2",[42,19.637,52,22.288]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["keyword/57-2",[]],["title/57-3",[22,15.666]],["name/57-3",[]],["text/57-3",[]],["component/57-3",[]],["keyword/57-3",[]],["title/57-4",[149,46.512,310,38.261]],["name/57-4",[]],["text/57-4",[]],["component/57-4",[]],["keyword/57-4",[]],["title/57",[1100,28.325,1137,45.667]],["name/57",[286,0.558]],["text/57",[9,2.051,22,1.477,27,1.665,29,1.703,45,3.545,52,2.099,55,3.318,67,2.238,77,2.138,139,4.246,140,1.819,158,1.775,180,1.819,191,2.675,222,2.102,223,2.465,308,1.855,314,5.568,315,2.305,376,2.675,388,2.919,442,1.808,515,2.862,524,2.259,569,2.591,579,2.576,587,3.819,710,3.048,725,2.407,866,4.882,874,3.207,883,3.722,899,5.049,915,1.974,927,2.978,936,2.329,961,4.361,1135,4.882,1137,7.465,1161,2.407,1197,2.635,1221,2.919,1282,3.819,1368,3.304,1408,4.031,1894,3.722,2108,3.207,2175,6.001,2284,6.043,2290,3.722,2296,3.722,2298,7.749,2302,3.95,2875,6.571,2876,6.571,2877,5.055,2878,6.571,2879,4.295,2880,4.295,2881,3.95,2882,4.295,2883,4.295,2884,4.295,2885,4.295,2886,4.295,2887,4.295,2888,4.295,2889,4.295,2890,4.295]],["component/57",[22,0.319]],["keyword/57",[]],["title/58-1",[1141,36.563]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["keyword/58-1",[]],["title/58-2",[22,15.666]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["keyword/58-2",[]],["title/58-3",[2891,84.657]],["name/58-3",[]],["text/58-3",[]],["component/58-3",[]],["keyword/58-3",[]],["title/58-4",[149,46.512,310,38.261]],["name/58-4",[]],["text/58-4",[]],["component/58-4",[]],["keyword/58-4",[]],["title/58",[243,38.179,1100,24.094,1117,35.904]],["name/58",[286,0.558]],["text/58",[5,1.26,10,1.723,22,1.649,25,1.242,41,1.842,42,1.624,45,2.845,52,2.846,55,2.399,57,2.757,68,1.913,109,2.825,112,1.876,131,2.526,140,1.54,158,1.502,188,2.673,189,1.242,193,2.385,243,7,297,1.278,376,2.264,379,2.113,472,4.17,511,2.231,524,3.775,526,4.31,569,3.513,571,2.264,574,1.697,575,2.231,576,2.523,609,1.795,612,2.302,626,1.737,785,2.598,790,1.613,866,1.842,870,2.231,899,2.3,915,2.653,954,2.338,961,3.079,969,1.697,1100,2.342,1113,2.199,1117,5.389,1139,3.442,1143,1.932,1144,1.266,1147,2.231,1159,1.751,1166,2.423,1178,2.169,1210,3.008,1221,2.471,1223,2.471,1289,2.893,1326,2.523,1344,5.092,1368,2.797,1369,3.151,1371,4.592,1392,3.344,1408,2.231,1875,3.151,2108,5.359,2118,4.31,2294,4.31,2298,7.724,2309,3.151,2447,4.44,2877,2.797,2892,3.344,2893,3.636,2894,8.171,2895,5.771,2896,5.771,2897,3.636,2898,5.771,2899,5.308,2900,3.008,2901,3.636,2902,3.151,2903,3.636,2904,6.22,2905,3.344,2906,3.636,2907,3.344,2908,3.636,2909,3.636,2910,3.636,2911,3.636,2912,3.636,2913,3.636]],["component/58",[22,0.319]],["keyword/58",[]],["title/59-1",[1141,36.563]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["keyword/59-1",[]],["title/59-2",[876,45.667,1139,41.629]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["keyword/59-2",[]],["title/59-3",[876,45.667,1115,37.084]],["name/59-3",[]],["text/59-3",[]],["component/59-3",[]],["keyword/59-3",[]],["title/59-4",[42,14.533,221,30.017,876,33.799,1139,30.81]],["name/59-4",[]],["text/59-4",[]],["component/59-4",[]],["keyword/59-4",[]],["title/59-5",[42,14.533,221,30.017,876,33.799,1115,27.446]],["name/59-5",[]],["text/59-5",[]],["component/59-5",[]],["keyword/59-5",[]],["title/59-6",[158,28.84,1239,45.667]],["name/59-6",[]],["text/59-6",[]],["component/59-6",[]],["keyword/59-6",[]],["title/59",[876,45.085,1100,18.553,1115,24.29,1139,27.267]],["name/59",[286,0.558]],["text/59",[5,0.487,22,1.039,25,0.48,26,1.211,27,0.991,29,1.713,41,0.712,42,1.727,43,1.796,45,2.434,49,1.527,52,2.864,53,1.591,55,0.585,56,1.319,59,1.651,61,0.763,63,0.719,67,0.732,73,1.358,77,0.7,80,1.295,81,1.764,90,3.153,94,4.415,99,2.577,102,0.876,107,0.937,109,0.688,112,2.399,117,0.726,122,0.876,130,0.656,131,0.615,135,1.069,139,2.209,142,0.712,147,1.703,152,0.763,158,1.056,160,1.319,162,0.92,167,0.688,169,1.371,172,0.771,180,0.596,182,2.664,187,1.614,189,0.48,193,1.451,207,0.642,221,2.041,244,1.904,247,0.682,263,1.022,266,2.339,287,2.033,297,0.494,381,1.05,383,0.656,390,1.141,402,0.904,419,0.633,420,0.937,468,1.119,471,0.688,472,1.485,483,0.998,506,0.863,518,0.74,524,0.74,564,2.033,566,0.807,569,2.213,571,2.187,574,0.656,586,0.925,604,1.664,606,0.839,612,1.4,692,1.082,695,0.797,742,0.839,743,0.817,770,2.209,778,3.491,780,1.05,785,1.271,790,0.624,792,0.763,800,1.218,812,0.706,813,0.755,815,1.591,817,1.664,842,0.863,855,0.998,862,0.904,863,1.05,866,0.712,869,1.119,875,1.567,876,6.992,884,0.889,894,1.119,907,3.349,921,0.839,927,1.158,944,0.732,947,0.755,948,0.712,961,1.854,966,1.05,968,0.828,969,0.656,972,0.889,981,0.998,988,0.817,995,1.485,1007,2.936,1067,0.719,1086,0.85,1100,1.425,1103,2.48,1107,0.92,1109,0.771,1115,4.401,1131,0.937,1139,5.465,1144,0.489,1147,0.863,1158,0.955,1159,0.677,1161,0.788,1166,0.937,1180,0.863,1183,0.85,1197,0.863,1201,0.975,1213,0.876,1226,0.779,1235,0.955,1237,1.163,1250,1.449,1263,2.34,1273,0.937,1275,2.577,1280,0.85,1282,2.041,1353,0.975,1357,1.022,1367,1.163,1368,2.701,1371,1.119,1400,1.082,1420,1.082,1434,0.839,1456,1.858,1459,1.908,1466,0.839,1498,1.163,1522,0.807,1545,1.022,1548,1.966,1664,0.92,1683,1.022,1703,1.283,1765,0.975,1877,0.998,1893,3.437,1896,1.05,2116,1.082,2123,2.113,2157,1.218,2164,0.889,2171,1.218,2175,2.691,2247,1.163,2269,1.293,2277,1.218,2295,1.218,2344,1.082,2345,1.082,2423,0.975,2440,1.022,2446,1.163,2507,1.163,2509,1.293,2811,1.163,2833,1.736,2892,1.293,2914,5.013,2915,6.138,2916,2.555,2917,1.293,2918,1.406,2919,2.555,2920,1.293,2921,1.406,2922,2.555,2923,2.555,2924,7.092,2925,2.214,2926,1.406,2927,1.163,2928,1.406,2929,1.293,2930,3.512,2931,2.905,2932,3.512,2933,1.406,2934,1.293,2935,1.406,2936,2.214,2937,2.214,2938,1.406,2939,1.218,2940,2.555,2941,1.218,2942,1.406,2943,1.218,2944,1.406,2945,1.022,2946,1.406,2947,2.555,2948,1.406,2949,1.406,2950,1.406,2951,4.32,2952,3.512,2953,2.555,2954,2.555,2955,1.163,2956,1.293,2957,1.293,2958,1.406,2959,1.406,2960,0.904,2961,1.293,2962,1.406,2963,1.406,2964,1.406,2965,1.163,2966,1.293,2967,1.406,2968,1.218,2969,1.406,2970,1.406,2971,1.406,2972,1.406,2973,1.406,2974,1.218,2975,0.889]],["component/59",[22,0.319]],["keyword/59",[]],["title/60-1",[1141,36.563]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["keyword/60-1",[]],["title/60-2",[223,40.058,785,25.271]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["keyword/60-2",[]],["title/60-3",[612,33.76]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["keyword/60-3",[]],["title/60-4",[45,27.674,579,27.362]],["name/60-4",[]],["text/60-4",[]],["component/60-4",[]],["keyword/60-4",[]],["title/60",[785,25.271,1100,28.325]],["name/60",[286,0.558]],["text/60",[4,1.002,5,0.64,9,0.882,10,1.546,22,1.118,25,0.631,26,1.546,27,2.343,29,2.396,42,1.489,43,0.768,45,2.646,52,1.93,55,0.768,57,0.882,59,0.868,60,1.896,63,0.944,73,2.329,78,0.981,90,2.093,94,4.772,109,2.145,130,1.523,135,2.792,139,2.331,140,0.782,155,0.919,159,0.701,164,0.808,177,0.991,180,1.382,189,0.631,198,0.837,212,0.814,223,4.14,228,1.255,230,2.128,234,1.208,247,1.584,270,1.06,271,0.928,292,1.281,297,0.649,308,0.798,377,0.972,379,3.511,392,3.659,442,1.374,471,2.957,491,1.255,497,1.808,531,1.571,574,1.523,579,1.279,586,1.181,601,3.847,612,2.662,616,1.168,626,2.093,632,1.421,700,1.168,728,2.032,755,2.372,779,0.849,785,3.938,786,2.544,787,1.255,805,1.035,860,1.946,866,0.936,878,0.991,906,0.889,911,4.53,917,1.601,927,0.837,938,1.973,961,0.792,994,3.526,995,1.073,1002,1.087,1067,1.668,1097,1.15,1100,3.77,1111,1.571,1115,0.981,1144,0.643,1145,1.024,1177,1.231,1188,1.102,1190,1.002,1226,1.024,1227,1.379,1288,1.528,1337,2.547,1416,1.168,1616,2.596,1631,1.188,1674,4.07,1793,1.528,2138,2.58,2398,1.698,2426,1.421,2447,1.421,2449,2.596,2476,1.528,2802,1.311,2956,1.698,2960,1.188,2976,1.698,2977,6.633,2978,4.031,2979,3.263,2980,3.263,2981,6.674,2982,1.698,2983,1.601,2984,1.698,2985,2.828,2986,5.291,2987,3.263,2988,1.847,2989,1.847,2990,1.847,2991,1.847,2992,1.847,2993,1.847,2994,1.847,2995,1.847,2996,1.847,2997,1.847,2998,1.847,2999,1.847,3000,3.263,3001,1.847,3002,1.343,3003,3.263,3004,3.263,3005,1.847,3006,1.847,3007,1.847,3008,4.383,3009,1.847,3010,1.847,3011,1.847,3012,1.847,3013,1.698,3014,3.263,3015,1.847,3016,1.847,3017,1.847,3018,1.847,3019,1.847,3020,1.847,3021,2.51,3022,1.847,3023,1.847,3024,2.315,3025,1.847,3026,1.847,3027,1.847,3028,1.847,3029,3.263,3030,1.847,3031,1.528,3032,1.847,3033,1.847,3034,1.847,3035,1.601,3036,1.847,3037,1.847,3038,4.383,3039,1.528,3040,1.601,3041,1.528,3042,1.847,3043,5.557,3044,1.847,3045,1.847,3046,1.847,3047,1.847,3048,1.847,3049,3.263,3050,1.847,3051,1.847]],["component/60",[22,0.319]],["keyword/60",[]],["title/61-1",[1141,36.563]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["keyword/61-1",[]],["title/61-2",[612,33.76]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["keyword/61-2",[]],["title/61-3",[45,27.674,579,27.362]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["keyword/61-3",[]],["title/61",[183,32.168,641,26.659,1100,20.963,1133,25.716]],["name/61",[286,0.558]],["text/61",[4,0.603,5,0.385,9,0.531,22,0.533,25,0.38,26,1.364,27,0.799,29,1.673,42,1.011,43,0.463,44,1.235,45,2.267,52,1.825,53,0.504,55,0.463,56,1.064,57,2.015,59,1.984,63,0.569,66,0.682,73,0.591,77,0.554,84,0.531,90,0.531,94,5.071,107,0.741,117,0.574,118,1.459,130,0.519,134,0.693,135,0.862,139,0.908,140,1.787,155,0.554,164,0.487,167,0.544,169,1.106,180,0.471,183,0.693,187,1.324,189,0.38,193,1.19,212,0.49,216,0.92,218,0.564,234,0.728,248,0.741,270,0.639,271,0.559,292,0.772,297,0.391,302,1.283,308,0.48,379,1.673,390,0.921,396,1.515,398,2.083,430,0.639,438,0.655,442,0.468,491,0.756,523,0.977,531,0.536,553,0.559,569,2.254,574,2.855,576,0.772,579,1.654,586,0.403,604,0.527,606,0.664,609,3.779,612,3.395,626,2.922,641,1.064,666,1.13,746,0.61,755,0.809,786,0.868,788,1.325,796,0.624,853,1.054,868,2.671,870,0.682,900,0.789,905,3.389,906,1.73,907,1.716,911,0.624,927,1.912,947,1.106,961,2.262,983,1.354,995,0.646,998,1.264,1002,0.655,1007,3.245,1010,0.856,1012,0.809,1047,0.508,1067,2.695,1076,3.49,1077,3.246,1079,1.695,1097,0.693,1100,2.483,1103,1.653,1115,3.037,1117,2.552,1133,2.377,1139,2.848,1144,0.387,1161,0.624,1178,0.664,1190,0.603,1197,2.93,1226,0.617,1274,0.772,1280,1.246,1326,0.772,1357,3.068,1360,2.291,1361,4.139,1362,4.139,1374,1.64,1582,1.264,1690,1.462,1703,0.559,1759,0.772,1785,0.831,1789,0.741,1834,0.789,1910,0.856,1949,3.799,2108,0.831,2138,1.213,2286,0.831,2287,0.809,2368,1.539,2377,1.023,2440,4.156,2648,0.885,2802,0.789,2833,1.401,2899,1.023,2900,0.92,2960,0.715,3021,2.764,3024,3.389,3031,1.705,3052,1.895,3053,2.972,3054,1.786,3055,1.786,3056,2.061,3057,3.593,3058,2.061,3059,2.061,3060,2.061,3061,2.061,3062,1.112,3063,1.112,3064,1.895,3065,3.88,3066,1.895,3067,2.648,3068,2.061,3069,2.061,3070,2.061,3071,2.061,3072,1.112,3073,2.879,3074,1.112,3075,2.061,3076,1.112,3077,1.112,3078,4.775,3079,1.112,3080,2.061,3081,1.112,3082,1.112,3083,1.112,3084,1.112,3085,1.023,3086,2.495,3087,3.114,3088,1.895,3089,2.061,3090,2.061,3091,1.112,3092,1.112,3093,2.061,3094,1.112,3095,1.112,3096,1.112,3097,1.023,3098,1.112,3099,1.112,3100,1.112,3101,1.112,3102,0.964,3103,1.112,3104,1.112,3105,2.061,3106,1.112,3107,1.112,3108,1.112,3109,1.112,3110,1.895,3111,1.112,3112,1.112,3113,1.895,3114,3.657,3115,2.061,3116,2.061,3117,2.061,3118,1.112,3119,1.023,3120,1.895,3121,1.023,3122,1.023,3123,2.061,3124,1.895,3125,1.112,3126,1.112,3127,1.112,3128,1.112,3129,1.112,3130,1.112,3131,1.112,3132,1.023,3133,0.964,3134,5.271,3135,1.112,3136,1.112,3137,0.964,3138,0.964,3139,0.964,3140,0.964,3141,0.964,3142,0.964,3143,1.895,3144,0.885,3145,0.964,3146,0.964,3147,2.495,3148,1.112,3149,1.112,3150,2.648,3151,3.593,3152,2.061,3153,2.061,3154,1.112,3155,1.112,3156,1.023,3157,1.112,3158,1.112,3159,1.023,3160,1.023,3161,1.112,3162,1.112,3163,1.112,3164,1.112,3165,1.023,3166,0.92,3167,0.964,3168,1.112,3169,1.112,3170,1.112,3171,1.023,3172,1.112,3173,1.112,3174,1.112,3175,0.964,3176,0.964,3177,0.964,3178,0.92,3179,0.856,3180,0.964,3181,1.786,3182,0.92,3183,1.112]],["component/61",[22,0.319]],["keyword/61",[]],["title/62-1",[1141,36.563]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["keyword/62-1",[]],["title/62-2",[45,27.674,579,27.362]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["keyword/62-2",[]],["title/62-3",[112,27.513]],["name/62-3",[]],["text/62-3",[]],["component/62-3",[]],["keyword/62-3",[]],["title/62-4",[112,22.682,778,34.745]],["name/62-4",[]],["text/62-4",[]],["component/62-4",[]],["keyword/62-4",[]],["title/62-5",[112,22.682,790,30.965]],["name/62-5",[]],["text/62-5",[]],["component/62-5",[]],["keyword/62-5",[]],["title/62",[112,19.294,790,26.341,1136,45.674]],["name/62",[286,0.558]],["text/62",[5,0.73,9,1.006,22,1.216,25,0.719,26,2.301,29,1.451,33,1.742,41,1.067,42,1.632,43,1.522,44,0.904,45,1.925,52,2.855,53,0.954,55,2.997,57,1.006,61,1.142,73,1.119,81,1.058,94,3.794,109,1.031,112,3.091,131,0.922,132,1.209,135,2.427,140,2.057,145,1.403,147,1.403,164,1.602,169,1.965,177,1.965,189,0.719,193,2.006,207,0.961,218,1.067,221,1.224,230,1.022,244,0.928,291,5.262,297,0.74,303,1.461,390,0.941,464,3.951,478,1.602,485,1.311,486,1.274,512,1.378,518,1.108,524,1.926,529,0.99,537,2.029,571,5.353,579,0.826,604,0.998,609,2.397,627,1.403,707,1.13,759,2.598,778,3.271,785,0.763,786,1.541,790,4.327,812,1.058,815,3.613,817,0.998,850,1.675,866,3.924,870,1.292,888,1.494,900,2.598,907,2.771,910,1.494,927,2.629,944,1.907,961,0.904,998,1.292,999,1.872,1007,1.431,1010,1.62,1026,5.962,1052,1.431,1081,2.007,1103,2.101,1136,7.503,1139,2.183,1144,0.733,1161,1.181,1200,1.194,1250,3.291,1273,1.403,1275,1.256,1311,2.662,1337,2.127,1344,1.494,1363,1.825,1364,6.309,1373,1.742,1486,3.366,1664,1.378,1745,3.028,1813,2.488,1842,1.573,1877,2.598,2138,1.24,2175,2.28,2198,6.406,2286,1.573,2287,1.531,2900,3.028,3184,7.122,3185,8.941,3186,2.106,3187,4.333,3188,5.802,3189,2.106,3190,5.802,3191,2.106,3192,2.106,3193,2.106,3194,1.937,3195,7.542,3196,1.742,3197,2.106,3198,2.106,3199,2.106,3200,2.106,3201,3.661,3202,2.106,3203,2.106,3204,2.106,3205,2.106,3206,2.106,3207,2.106,3208,2.106,3209,4.855,3210,2.106,3211,1.62,3212,2.106,3213,1.937,3214,1.494,3215,2.106,3216,2.106,3217,2.106,3218,2.106,3219,2.106,3220,2.106,3221,2.106]],["component/62",[22,0.319]],["keyword/62",[]],["title/63",[789,29.556,790,26.341,1128,36.423]],["name/63",[286,0.558]],["text/63",[5,2.585,22,1.801,25,2.549,42,2.099,45,2.958,52,3.107,112,2.425,140,3.16,189,2.549,193,3.083,212,3.287,223,4.282,297,2.623,398,4.802,766,4.881,782,5.176,785,2.701,789,3.714,790,4.804,813,4.004,860,5.803,906,3.592,944,3.887,1086,4.512,1114,4.231,1128,4.577,1144,2.597,1338,6.171,1339,5.07,1340,5.176,1341,6.466]],["component/63",[22,0.319]],["keyword/63",[]],["title/64-1",[159,22.523,789,29.556,1128,36.423]],["name/64-1",[]],["text/64-1",[]],["component/64-1",[]],["keyword/64-1",[]],["title/64-2",[451,45.674,789,29.556,1128,36.423]],["name/64-2",[]],["text/64-2",[]],["component/64-2",[]],["keyword/64-2",[]],["title/64-3",[155,34.745,390,31.181]],["name/64-3",[]],["text/64-3",[]],["component/64-3",[]],["keyword/64-3",[]],["title/64-4",[142,23.164,230,22.19,844,31.065,1275,27.267,3222,37.813]],["name/64-4",[]],["text/64-4",[]],["component/64-4",[]],["keyword/64-4",[]],["title/64",[789,29.556,790,26.341,1128,36.423]],["name/64",[286,0.558]],["text/64",[5,0.639,10,0.873,22,1.76,25,0.63,29,0.731,41,0.934,42,0.519,44,1.398,45,2.095,49,1.902,52,2.578,55,1.819,63,1.665,73,0.979,75,1.418,77,0.918,78,0.979,81,0.926,84,0.88,94,1.745,99,1.099,102,1.148,104,1.525,112,1.717,115,1.252,118,0.934,130,0.86,135,0.771,136,1.045,138,0.97,140,2.824,141,1.166,142,2.217,143,3.308,152,1,159,3.939,164,0.807,167,0.902,179,1.805,189,0.63,193,1.346,207,1.486,223,3.826,230,2.929,244,1.435,251,1.058,260,0.926,271,2.198,276,2.311,297,0.648,383,0.86,392,1.01,398,2.978,401,1.045,419,0.829,432,1.608,442,2.224,451,1.418,507,2.028,533,1.847,537,1.022,553,0.926,565,0.812,566,1.869,579,0.723,606,1.943,626,1.556,666,1.785,700,3.342,707,1.748,763,3.552,770,1.435,776,1.099,777,1.621,782,1.279,785,2.777,786,1.842,787,1.252,789,5.357,790,2.677,792,1,805,1.033,813,0.989,823,2.591,831,1.279,834,2.506,843,3.036,844,5.487,850,4.203,853,0.942,879,2.916,900,2.311,906,0.887,907,0.88,911,1.033,915,1.497,927,0.835,936,1.767,947,0.989,948,0.934,952,3.948,961,1.398,996,2.06,1008,1.695,1083,3.268,1093,2.524,1100,0.748,1111,0.887,1114,3.78,1128,6.79,1143,0.979,1144,0.642,1145,1.022,1159,0.887,1183,1.97,1200,1.045,1204,1.34,1223,1.252,1226,1.805,1232,1.206,1267,1.115,1275,3.599,1279,1.115,1311,1.34,1338,1.525,1342,1.228,1344,2.311,1408,1.998,1434,1.099,1447,1.34,1470,1.279,1480,1.466,1730,1.376,1785,1.376,2115,1.279,2125,1.418,2138,1.085,2446,2.694,2811,1.525,2848,1.525,3222,2.694,3223,1.843,3224,1.695,3225,1.597,3226,1.843,3227,1.843,3228,2.694,3229,3.257,3230,2.591,3231,1.843,3232,1.843,3233,1.843,3234,7.053,3235,1.843,3236,3.793,3237,1.843,3238,1.843,3239,1.843,3240,1.843,3241,1.843,3242,3.257,3243,3.257,3244,1.597,3245,1.843,3246,1.843,3247,1.843,3248,1.843,3249,1.843,3250,4.376,3251,1.843,3252,3.257,3253,1.843,3254,1.695,3255,1.695,3256,1.466,3257,1.843,3258,1.597,3259,1.695,3260,1.843,3261,1.695]],["component/64",[22,0.319]],["keyword/64",[]],["title/65-1",[1141,36.563]],["name/65-1",[]],["text/65-1",[]],["component/65-1",[]],["keyword/65-1",[]],["title/65-2",[371,51.936]],["name/65-2",[]],["text/65-2",[]],["component/65-2",[]],["keyword/65-2",[]],["title/65-3",[1,77.854]],["name/65-3",[]],["text/65-3",[]],["component/65-3",[]],["keyword/65-3",[]],["title/65",[507,36.972,1885,35.904,3262,51.456]],["name/65",[286,0.558]],["text/65",[2,2.516,5,1.481,9,2.042,10,2.026,22,1.65,25,1.46,27,1.657,35,4.761,42,1.842,45,3.155,52,2.541,55,1.777,129,2.749,130,1.995,135,2.739,155,3.26,158,3.685,165,2.55,187,1.965,189,1.46,247,3.178,281,6.496,297,1.503,308,1.846,310,2.343,323,3.536,383,1.995,420,4.363,426,4.228,430,5.519,432,2.11,445,4.646,464,2.343,472,2.484,507,6.782,569,1.685,586,1.548,605,2.424,616,4.142,626,3.127,632,6.122,641,3.379,846,2.849,961,1.834,1112,4.21,1144,2.28,1219,2.249,1252,4.89,1324,3.192,1631,2.749,1885,6.586,1913,3.033,1959,3.288,3214,3.033,3262,9.439,3263,6.547,3264,7.319,3265,4.274,3266,7.958,3267,4.274,3268,4.274,3269,4.274,3270,4.274]],["component/65",[22,0.319]],["keyword/65",[]],["title/66-1",[1141,36.563]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["keyword/66-1",[]],["title/66-2",[515,39.565,612,23.676,1133,29.556]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["keyword/66-2",[]],["title/66-3",[27,23.018,123,36.972,612,23.676]],["name/66-3",[]],["text/66-3",[]],["component/66-3",[]],["keyword/66-3",[]],["title/66-4",[112,19.294,116,38.847,2538,49.108]],["name/66-4",[]],["text/66-4",[]],["component/66-4",[]],["keyword/66-4",[]],["title/66-5",[310,38.261,1219,36.717]],["name/66-5",[]],["text/66-5",[]],["component/66-5",[]],["keyword/66-5",[]],["title/66-6",[22,15.666]],["name/66-6",[]],["text/66-6",[]],["component/66-6",[]],["keyword/66-6",[]],["title/66-7",[73,37.084,377,36.717]],["name/66-7",[]],["text/66-7",[]],["component/66-7",[]],["keyword/66-7",[]],["title/66-8",[1383,56.418]],["name/66-8",[]],["text/66-8",[]],["component/66-8",[]],["keyword/66-8",[]],["title/66",[123,36.972,471,29.058,612,23.676]],["name/66",[286,0.558]],["text/66",[5,0.614,22,0.95,25,0.605,27,3.332,29,1.246,42,0.498,45,2.33,52,1.877,55,0.736,56,1.622,67,2.208,73,0.941,80,0.897,84,2.024,85,2.825,90,0.846,94,4.835,97,1.016,105,1.322,112,2.689,116,2.773,117,0.914,123,3.66,127,0.941,130,1.978,136,2.404,139,0.78,142,1.593,158,0.732,167,1.538,169,0.95,180,0.75,182,4.206,189,0.605,193,2.121,195,1.827,205,1.229,212,1.385,251,1.016,266,1.467,270,1.016,291,1.203,296,1.004,297,0.622,310,1.723,311,2.275,373,1.004,384,1.322,386,2.161,390,0.791,401,1.004,449,1.875,455,1.016,464,3.222,468,1.409,471,1.538,473,4.051,518,0.932,523,0.839,524,0.932,531,0.853,574,0.826,586,0.641,605,1.004,609,2.092,612,4.146,616,1.12,625,1.18,626,2.452,641,0.914,692,1.362,695,1.783,707,1.687,723,1.004,746,1.723,770,1.868,778,2.926,786,1.323,790,2.607,796,0.993,853,1.607,855,2.231,868,1.593,879,1.18,909,1.139,936,0.96,944,0.923,947,2.275,961,0.76,1053,2.877,1067,2.625,1072,1.465,1077,1.362,1079,1.85,1117,2.563,1119,0.905,1133,3.506,1144,0.616,1167,1.159,1179,1.988,1219,2.23,1238,1.409,1269,1.742,1280,1.071,1328,1.229,1352,2.724,1370,1.362,1407,1.287,1466,1.056,1468,1.287,1504,2.891,1522,1.016,1582,2.6,1606,1.628,1609,1.628,1612,1.628,1614,1.535,1631,2.726,1659,1.362,1690,1.256,1898,1.465,2138,1.042,2440,1.287,2538,1.465,2675,1.18,2917,1.628,2945,1.287,3021,3.261,3024,1.256,3086,1.535,3087,2.724,3271,5.133,3272,1.465,3273,1.771,3274,3.143,3275,1.771,3276,1.771,3277,1.771,3278,1.771,3279,1.771,3280,1.628,3281,2.891,3282,1.628,3283,1.771,3284,1.771,3285,1.628,3286,1.628,3287,1.771,3288,4.239,3289,2.891,3290,2.891,3291,1.771,3292,1.771,3293,1.771,3294,1.771,3295,1.771,3296,1.771,3297,1.771,3298,1.771,3299,1.771,3300,4.239,3301,3.143,3302,4.239,3303,1.771,3304,1.771,3305,1.771,3306,1.771,3307,1.771,3308,1.771,3309,2.891,3310,3.143,3311,1.771,3312,1.771,3313,1.771,3314,3.143,3315,1.771,3316,1.771,3317,1.771,3318,1.771,3319,1.771,3320,3.143,3321,1.771,3322,1.771,3323,1.771,3324,1.771,3325,1.771,3326,1.771,3327,1.771,3328,1.771,3329,1.771,3330,1.771,3331,1.771,3332,3.143,3333,1.771,3334,1.771,3335,1.771,3336,1.771,3337,1.771,3338,1.771,3339,3.143,3340,1.771,3341,1.771,3342,1.771,3343,3.143,3344,1.628,3345,1.771,3346,1.229,3347,1.628]],["component/66",[22,0.319]],["keyword/66",[]],["title/67-1",[1141,36.563]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["keyword/67-1",[]],["title/67-2",[2234,70.025]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["keyword/67-2",[]],["title/67-3",[45,27.674,579,27.362]],["name/67-3",[]],["text/67-3",[]],["component/67-3",[]],["keyword/67-3",[]],["title/67-4",[3348,69.794,3349,69.794]],["name/67-4",[]],["text/67-4",[]],["component/67-4",[]],["keyword/67-4",[]],["title/67",[112,24.518,784,30.017,1119,26.413]],["name/67",[286,0.558]],["text/67",[5,1.028,22,1.485,25,1.013,26,4.093,27,1.897,29,2.477,42,0.834,44,2.1,45,1.176,49,2.128,51,2.156,52,2.315,53,1.344,55,1.233,67,1.545,73,1.576,77,1.476,81,1.489,85,3.261,94,2.891,102,1.847,109,1.452,112,3.103,117,3.742,128,1.682,135,1.241,139,1.307,140,1.256,143,3.425,160,3.742,162,1.941,180,3.399,182,1.576,188,1.374,189,2.477,207,1.354,222,3.058,237,2.104,266,1.384,297,1.043,308,1.281,385,1.876,386,1.248,390,1.325,406,2.202,409,1.644,442,1.248,482,2.359,537,1.644,565,1.307,566,1.702,569,2.463,586,1.074,612,1.951,701,2.712,728,1.847,742,1.769,770,1.307,777,1.476,778,2.436,784,5.018,785,1.074,786,1.248,802,1.545,810,2.058,815,1.847,822,2.57,853,1.516,870,4.922,911,1.662,960,1.907,961,2.1,967,2.104,988,1.723,1007,2.015,1022,2.215,1081,1.626,1119,4.102,1144,1.033,1145,1.644,1177,1.976,1197,1.819,1239,1.941,1261,5.03,1280,1.793,1355,2.215,1499,2.215,1510,2.359,1594,2.104,1622,2.57,1703,1.489,1796,2.015,1814,2.215,1951,2.727,2138,1.746,2164,1.876,2234,8.187,2286,2.215,2287,2.156,2346,4.744,2945,2.156,2974,2.57,3256,2.359,3350,4.241,3351,2.727,3352,2.966,3353,4.894,3354,2.966,3355,2.966,3356,2.966,3357,2.727,3358,2.966,3359,2.966,3360,2.966,3361,2.966,3362,2.57,3363,2.727,3364,4.894,3365,2.966,3366,2.966,3367,2.966,3368,2.727,3369,2.727,3370,2.966,3371,2.727,3372,2.966,3373,2.966,3374,2.966,3375,2.966,3376,2.966,3377,2.966,3378,2.966,3379,2.727,3380,2.966,3381,2.966,3382,2.966,3383,2.966,3384,2.966]],["component/67",[22,0.319]],["keyword/67",[]],["title/68",[789,34.745,1119,35.687]],["name/68",[286,0.558]],["text/68",[5,2.482,10,3.395,22,2.09,25,2.447,27,3.673,42,2.987,44,3.074,45,2.841,55,2.978,112,3.671,135,2.997,188,3.318,189,2.447,247,3.477,273,3.971,297,2.518,397,3.663,419,3.223,778,3.566,789,4.716,790,3.178,958,3.269,983,3.369,1103,4.112,1119,5.776,1144,2.494,1189,4.163,1190,3.885,3385,5.926]],["component/68",[22,0.319]],["keyword/68",[]],["title/69-1",[1141,36.563]],["name/69-1",[]],["text/69-1",[]],["component/69-1",[]],["keyword/69-1",[]],["title/69-2",[78,31.545,569,23.407,1087,37.556]],["name/69-2",[]],["text/69-2",[]],["component/69-2",[]],["keyword/69-2",[]],["title/69-3",[579,17.922,612,18.231,1067,23.375,1134,28.045,1135,23.164]],["name/69-3",[]],["text/69-3",[]],["component/69-3",[]],["keyword/69-3",[]],["title/69-4",[90,17.752,569,14.653,586,13.457,1067,19.004,1100,15.083,1134,22.801,1135,18.832]],["name/69-4",[]],["text/69-4",[]],["component/69-4",[]],["keyword/69-4",[]],["title/69-5",[29,23.541,45,23.541,579,23.276]],["name/69-5",[]],["text/69-5",[]],["component/69-5",[]],["keyword/69-5",[]],["title/69",[1100,20.963,1133,25.716,1134,31.69,1135,26.174]],["name/69",[286,0.558]],["text/69",[5,0.708,22,1.411,24,1.055,25,0.698,26,2.248,27,1.84,29,1.881,42,1.599,43,0.85,44,0.877,45,2.809,52,2.581,55,0.85,59,1.677,64,1.203,78,1.086,94,4.85,102,1.273,117,4.376,130,0.954,134,1.273,135,0.855,155,1.017,158,0.845,169,1.097,177,1.097,180,0.866,183,1.273,187,1.64,189,0.698,207,0.933,212,1.572,221,2.757,234,1.337,260,1.026,271,1.026,292,1.418,297,0.718,299,1.771,303,2.475,390,0.913,398,1.009,442,0.86,471,1,491,1.389,524,2.496,569,1.871,574,2.214,579,2.528,606,1.219,609,1.009,612,3.642,626,0.976,641,1.055,701,1.133,728,2.955,770,0.901,850,1.626,860,1.219,868,2.404,900,2.531,907,0.976,911,1.999,927,0.926,944,1.065,948,1.036,969,0.954,995,1.188,999,1.045,1000,1.88,1001,1.88,1002,2.099,1007,4.382,1029,1.771,1067,1.045,1076,1.691,1077,1.572,1087,2.256,1100,2.875,1133,2.362,1134,5.919,1135,4.889,1137,3.104,1144,0.712,1145,1.133,1161,3.615,1226,1.133,1250,1.159,1282,1.188,1344,4.576,1360,1.626,1374,2.837,1582,2.911,1690,5.028,1842,1.526,1911,1.45,2125,2.744,2127,1.771,2138,2.099,2278,1.88,2294,1.526,2426,4.372,2440,1.486,2648,1.626,2848,1.691,3021,2.744,3024,1.45,3031,1.691,3039,2.95,3040,3.091,3041,2.95,3053,3.925,3054,3.091,3055,3.091,3114,1.771,3137,1.771,3138,3.091,3139,1.771,3140,1.771,3141,1.771,3142,1.771,3143,1.88,3145,1.771,3146,1.771,3156,1.88,3165,1.88,3166,1.691,3167,1.771,3175,1.771,3176,1.771,3177,1.771,3178,1.691,3179,1.572,3180,1.771,3181,3.091,3213,1.88,3386,4.745,3387,3.28,3388,2.044,3389,3.566,3390,2.044,3391,2.044,3392,2.044,3393,3.566,3394,3.566,3395,2.044,3396,4.745,3397,2.044,3398,2.044,3399,3.566,3400,2.044,3401,2.044,3402,2.044,3403,2.044,3404,2.044,3405,1.88,3406,2.044,3407,2.044,3408,4.745,3409,2.044,3410,2.044,3411,2.044,3412,2.044,3413,2.044,3414,2.044,3415,2.044,3416,2.044,3417,2.044,3418,2.044,3419,2.044,3420,2.044]],["component/69",[22,0.319]],["keyword/69",[]],["title/70-1",[45,23.541,406,26.71,1118,41.194]],["name/70-1",[]],["text/70-1",[]],["component/70-1",[]],["keyword/70-1",[]],["title/70-2",[406,23.24,909,33.218,1011,36.655,3421,44.769]],["name/70-2",[]],["text/70-2",[]],["component/70-2",[]],["keyword/70-2",[]],["title/70",[183,32.168,406,23.24,927,23.405,1118,35.841]],["name/70",[286,0.558]],["text/70",[5,0.813,9,1.121,22,1.299,25,0.802,26,3.328,42,1.131,44,2.68,45,3.036,55,0.976,59,1.104,64,1.382,73,1.247,89,1.095,94,4.885,101,1.4,134,2.503,140,2.233,155,2.001,179,1.301,180,0.994,187,1.848,189,0.802,271,3.136,297,0.825,307,1.868,311,1.26,317,4.162,376,2.503,386,0.988,396,2.115,399,1.095,406,4.871,442,2.629,452,1.942,472,1.364,484,1.629,491,3.583,524,4.028,533,1.331,535,1.462,566,1.347,571,3.889,579,0.92,604,1.112,605,2.28,609,3.082,630,4.983,723,1.331,817,1.112,833,2.923,847,1.666,848,1.564,873,1.26,887,2.035,909,4.924,927,1.064,929,1.4,936,2.18,961,2.68,990,1.942,994,1.564,1002,3.103,1009,1.595,1011,1.666,1019,2.159,1079,2.366,1118,5.991,1144,0.817,1242,3.188,1280,1.42,1324,1.753,1470,2.789,1683,2.923,1728,1.51,1765,1.629,1796,1.595,1825,1.707,1834,1.666,2138,3.103,2184,1.753,2252,1.753,2307,1.806,2346,1.536,2982,7.042,3041,4.361,3179,1.806,3362,2.035,3421,2.035,3422,4.02,3423,2.347,3424,2.347,3425,6.245,3426,2.347,3427,5.272,3428,4.02,3429,2.347,3430,2.347,3431,4.02,3432,2.347,3433,2.347,3434,4.02,3435,2.347,3436,2.347,3437,2.347,3438,2.035,3439,2.347,3440,2.347,3441,2.347,3442,6.245,3443,2.347,3444,4.02,3445,6.245,3446,6.245,3447,6.245,3448,2.347,3449,2.347,3450,5.272,3451,2.035,3452,2.347,3453,2.347,3454,2.347,3455,2.347,3456,2.347,3457,2.347,3458,2.347,3459,2.347,3460,4.02,3461,2.347,3462,5.272,3463,5.272,3464,2.347,3465,2.347,3466,2.347,3467,2.347,3468,2.347,3469,4.02]],["component/70",[22,0.319]],["keyword/70",[]],["title/71-1",[1141,36.563]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["keyword/71-1",[]],["title/71-2",[763,49.829]],["name/71-2",[]],["text/71-2",[]],["component/71-2",[]],["keyword/71-2",[]],["title/71-3",[579,23.276,789,29.556,1119,30.357]],["name/71-3",[]],["text/71-3",[]],["component/71-3",[]],["keyword/71-3",[]],["title/71-4",[612,27.833,1067,35.687]],["name/71-4",[]],["text/71-4",[]],["component/71-4",[]],["keyword/71-4",[]],["title/71-5",[310,38.261,377,36.717]],["name/71-5",[]],["text/71-5",[]],["component/71-5",[]],["keyword/71-5",[]],["title/71-6",[112,22.682,1297,52.121]],["name/71-6",[]],["text/71-6",[]],["component/71-6",[]],["keyword/71-6",[]],["title/71-7",[112,22.682,1119,35.687]],["name/71-7",[]],["text/71-7",[]],["component/71-7",[]],["keyword/71-7",[]],["title/71-8",[812,29.816,875,36.423,1139,35.412]],["name/71-8",[]],["text/71-8",[]],["component/71-8",[]],["keyword/71-8",[]],["title/71",[112,19.294,875,36.423,1119,30.357]],["name/71",[286,0.558]],["text/71",[5,0.382,6,1.94,8,1.108,9,2,10,0.522,17,2.132,22,1.125,25,0.376,26,0.522,27,1.107,28,2.818,29,1.413,39,1.013,41,0.558,42,0.803,43,0.458,45,1.132,46,0.535,47,0.548,52,2.509,55,0.849,59,0.518,61,1.108,81,1.79,84,0.526,94,4.888,104,0.911,112,3.496,117,0.569,118,1.035,126,0.749,130,0.514,131,0.482,134,0.686,139,0.485,140,1.774,143,1.12,151,0.823,155,1.017,158,0.844,161,0.749,167,1,172,0.604,179,0.611,187,0.939,188,0.51,189,0.376,205,2.473,207,0.503,212,0.485,222,1.397,223,1.172,228,0.749,230,0.535,237,0.782,242,0.764,244,1.846,269,1.145,297,0.387,308,1.539,311,1.096,316,2.591,371,0.676,386,0.464,388,0.749,392,0.604,397,0.563,398,0.544,406,0.496,409,0.611,419,0.496,446,0.632,464,1.12,471,1,506,0.676,509,0.824,518,1.502,521,1.013,524,1.875,531,0.53,537,0.611,553,1.79,565,1.258,566,1.172,569,1.405,571,2.219,578,0.847,579,1.397,586,0.399,587,0.64,589,0.721,606,0.657,609,1.008,612,2.425,616,1.806,626,2.501,641,2.702,688,0.955,707,0.591,710,0.782,747,0.955,765,1.689,772,0.604,775,0.625,776,0.657,778,1.017,784,0.64,785,0.399,789,2.607,790,0.906,792,1.548,802,1.487,804,0.749,808,1.361,812,1.434,815,2.953,817,0.522,846,0.734,866,2.403,870,0.676,875,4.674,878,0.591,884,0.697,885,0.721,900,0.782,906,1.375,911,1.145,914,0.749,915,0.506,927,0.925,936,0.597,947,0.591,961,0.473,969,0.514,999,1.044,1009,0.749,1052,0.749,1093,0.975,1101,0.585,1103,0.632,1106,0.697,1119,5.533,1133,1.017,1134,1.751,1139,3.123,1143,1.085,1144,1.823,1159,0.53,1161,0.617,1180,0.676,1185,0.847,1194,0.697,1204,0.801,1219,0.58,1231,1.388,1261,0.764,1268,0.801,1269,1.975,1273,3.49,1289,0.876,1296,0.955,1297,5.868,1301,0.782,1311,1.485,1321,1.202,1324,0.823,1340,0.764,1398,0.648,1408,0.676,1409,0.876,1445,0.847,1470,0.764,1503,0.955,1522,0.632,1616,0.876,1664,1.336,1761,0.782,1834,1.449,1879,0.911,1913,4.315,1916,1.013,2164,1.806,2181,0.955,2184,0.823,2234,5.858,2252,0.823,2267,1.77,2368,2.662,2571,0.876,2688,0.911,2710,4.361,2818,0.955,3102,4.923,3187,0.823,3272,0.911,3368,1.013,3369,1.013,3371,1.013,3379,1.013,3470,2.042,3471,1.102,3472,1.102,3473,1.102,3474,0.876,3475,1.102,3476,1.013,3477,1.013,3478,1.102,3479,2.042,3480,2.042,3481,1.102,3482,1.102,3483,2.042,3484,1.102,3485,1.102,3486,1.102,3487,4.742,3488,0.955,3489,1.878,3490,2.855,3491,1.102,3492,2.042,3493,1.102,3494,1.102,3495,1.013,3496,2.042,3497,1.102,3498,2.855,3499,1.102,3500,1.102,3501,1.102,3502,1.102,3503,1.102,3504,2.042,3505,1.102,3506,1.102,3507,2.042,3508,1.102,3509,1.102,3510,1.102,3511,3.564,3512,1.102,3513,3.564,3514,3.564,3515,1.102,3516,4.188,3517,4.188,3518,1.102,3519,1.102,3520,1.102,3521,1.102,3522,1.102,3523,1.102,3524,2.042,3525,1.102,3526,2.855,3527,2.042,3528,1.102,3529,1.102,3530,1.102,3531,3.564,3532,1.102,3533,2.042,3534,2.042,3535,2.042,3536,2.042,3537,2.042,3538,1.102,3539,2.042,3540,1.102,3541,1.102,3542,1.102]],["component/71",[22,0.319]],["keyword/71",[]],["title/72",[789,34.745,1119,35.687]],["name/72",[286,0.558]],["text/72",[5,2.793,10,3.82,22,2.079,25,2.754,27,3.965,42,2.268,55,3.351,112,3.839,188,3.734,189,2.754,297,2.834,397,4.122,419,3.627,778,4.013,789,4.013,790,3.577,1103,4.627,1119,5.744,1144,2.807,3385,6.668]],["component/72",[22,0.319]],["keyword/72",[]],["title/73",[128,29.294,189,17.648,270,29.647,1123,33.799]],["name/73",[286,0.558]],["text/73",[22,2.095,25,3.248,106,7.1,109,4.653,376,5.921,1122,6.014,1123,7.406,1269,5.27,3438,8.24]],["component/73",[22,0.319]],["keyword/73",[]],["title/74-1",[1690,60.073]],["name/74-1",[]],["text/74-1",[]],["component/74-1",[]],["keyword/74-1",[]],["title/74-2",[22,15.666]],["name/74-2",[]],["text/74-2",[]],["component/74-2",[]],["keyword/74-2",[]],["title/74-3",[29,27.674,45,27.674]],["name/74-3",[]],["text/74-3",[]],["component/74-3",[]],["keyword/74-3",[]],["title/74-4",[442,29.38,1243,50.747]],["name/74-4",[]],["text/74-4",[]],["component/74-4",[]],["keyword/74-4",[]],["title/74-5",[167,29.058,281,35.412,3543,54.599]],["name/74-5",[]],["text/74-5",[]],["component/74-5",[]],["keyword/74-5",[]],["title/74-6",[27,23.018,159,22.523,1269,32.906]],["name/74-6",[]],["text/74-6",[]],["component/74-6",[]],["keyword/74-6",[]],["title/74-7",[27,23.018,1125,38.847,1269,32.906]],["name/74-7",[]],["text/74-7",[]],["component/74-7",[]],["keyword/74-7",[]],["title/74-8",[43,21.476,529,24.29,565,22.761,1269,28.63]],["name/74-8",[]],["text/74-8",[]],["component/74-8",[]],["keyword/74-8",[]],["title/74-9",[1383,56.418]],["name/74-9",[]],["text/74-9",[]],["component/74-9",[]],["keyword/74-9",[]],["title/74",[42,12.862,161,31.065,483,32.439,1122,28.918,1123,29.912]],["name/74",[286,0.558]],["text/74",[5,0.461,8,1.034,9,0.334,10,0.631,22,1.051,24,0.361,25,0.239,26,0.631,27,1.301,29,1.155,41,1.232,42,2.784,43,3.052,44,0.3,45,1.782,48,0.475,51,0.508,52,2.29,53,0.864,55,0.291,56,0.361,59,0.626,60,1.108,65,1.17,67,1.267,73,0.707,74,0.406,75,0.538,77,0.348,80,0.966,81,0.351,89,0.89,90,0.911,93,0.442,94,4.344,112,0.227,122,2.09,131,1.647,133,1.154,135,0.557,137,0.485,138,0.7,139,1.98,148,0.423,159,3.065,161,0.475,163,0.45,164,0.306,165,3.538,167,0.933,169,1.563,177,0.715,180,2.406,181,0.45,182,1.292,187,0.612,189,0.239,191,0.435,193,1.204,195,0.406,198,1.102,207,0.608,209,0.379,212,0.587,221,0.406,222,2.027,229,0.538,230,0.646,232,0.73,242,0.485,251,1.395,260,0.351,266,0.621,271,0.669,279,0.871,281,2.471,285,0.406,293,1.206,296,0.396,297,0.246,301,1.687,302,0.435,307,0.556,308,0.302,311,1.305,318,0.945,376,0.829,377,0.368,381,0.522,382,0.842,390,0.312,396,1.279,397,0.681,406,1.094,419,0.314,432,0.657,442,2.391,449,0.417,471,0.652,478,0.306,483,0.496,497,0.387,510,0.401,518,0.368,523,0.631,529,2.267,531,0.641,533,1.379,535,0.829,537,1.614,569,0.752,579,1.315,582,0.429,586,0.88,594,0.383,601,0.508,602,1.652,604,0.331,605,1.081,609,2.38,612,0.279,621,0.401,626,2.146,637,0.738,652,2.236,666,0.73,695,1.652,696,3.762,708,1.024,723,1.652,728,0.829,746,1.045,763,0.784,772,0.383,775,0.396,776,1.137,781,0.485,786,0.294,803,1.413,813,1.305,837,0.738,857,0.423,862,0.45,878,0.375,884,0.442,885,0.457,907,0.334,909,1.564,921,1.137,927,0.317,929,0.417,941,0.556,944,1.517,947,0.375,948,2.598,959,1.206,960,1.226,961,1.615,966,0.522,968,0.411,969,1.566,989,0.475,999,1.716,1007,0.475,1022,0.522,1066,1.295,1068,1.059,1079,4.593,1088,2.757,1093,1.391,1094,0.496,1122,0.842,1123,6.433,1124,0.496,1125,4.574,1144,0.243,1159,0.337,1167,0.457,1179,0.842,1180,0.429,1207,2.71,1243,2.118,1254,0.522,1262,1.333,1264,1.247,1269,3.419,1279,0.423,1287,0.485,1316,1.024,1322,0.578,1323,0.578,1339,0.475,1351,0.475,1401,0.856,1416,0.442,1434,0.417,1438,0.457,1448,2.508,1473,0.496,1479,0.578,1493,0.475,1510,0.556,1522,1.672,1541,0.435,1548,0.538,1551,1.154,1580,0.457,1582,1.492,1594,0.945,1616,0.556,1678,0.508,1683,0.508,1703,1.89,1704,3.094,1761,0.945,1770,0.578,1774,0.994,1776,0.968,1786,2.118,1787,0.968,1796,0.475,1821,0.475,1834,1.353,1896,0.522,1915,0.508,1959,1.467,1963,0.556,2077,1.816,2180,0.522,2309,1.154,2341,0.606,2343,1.059,2346,0.457,2455,0.606,2496,1.059,2561,0.643,2701,0.522,3214,0.945,3290,0.643,3346,0.485,3543,1.224,3544,0.699,3545,0.699,3546,1.331,3547,0.699,3548,2.775,3549,0.699,3550,0.606,3551,1.331,3552,2.679,3553,0.699,3554,0.699,3555,1.224,3556,0.699,3557,0.699,3558,0.699,3559,0.699,3560,0.699,3561,0.699,3562,0.699,3563,0.699,3564,0.699,3565,0.699,3566,3.355,3567,0.699,3568,0.699,3569,1.331,3570,0.699,3571,0.699,3572,0.699,3573,1.331,3574,0.699,3575,0.699,3576,0.699,3577,0.699,3578,1.331,3579,1.331,3580,0.699,3581,0.699,3582,0.699,3583,0.699,3584,0.699,3585,0.699,3586,0.699,3587,0.699,3588,1.331,3589,1.906,3590,1.331,3591,1.331,3592,0.699,3593,0.699,3594,0.699,3595,1.331,3596,0.699,3597,0.699,3598,0.699,3599,0.699,3600,0.699,3601,0.699,3602,0.699,3603,0.699,3604,0.699,3605,1.331,3606,0.699,3607,0.699,3608,1.331,3609,2.431,3610,2.431,3611,1.331,3612,2.431,3613,1.331,3614,0.699,3615,0.699,3616,0.699,3617,0.699,3618,1.331,3619,1.331,3620,0.643,3621,2.431,3622,0.699,3623,0.699,3624,0.699,3625,1.331,3626,1.331,3627,3.764,3628,0.699,3629,2.431,3630,0.699,3631,0.699,3632,1.331,3633,0.699,3634,0.699,3635,0.699,3636,1.331,3637,0.699,3638,0.699,3639,0.699,3640,0.699,3641,0.699,3642,1.331,3643,0.699,3644,1.331,3645,1.331,3646,1.331,3647,0.699,3648,0.699,3649,0.699,3650,0.699,3651,0.699,3652,1.331,3653,2.431,3654,2.431,3655,0.699,3656,0.699,3657,0.643,3658,1.331,3659,0.699,3660,0.699,3661,0.699,3662,1.331,3663,0.699,3664,0.699,3665,0.699,3666,1.331,3667,0.699,3668,0.699,3669,0.699,3670,0.699,3671,0.699,3672,1.331,3673,0.699,3674,0.699,3675,0.643,3676,1.906,3677,0.699,3678,0.699,3679,0.699,3680,1.331,3681,2.431,3682,2.431,3683,0.699,3684,0.699,3685,0.699,3686,0.699,3687,0.699,3688,0.699,3689,2.913,3690,0.699,3691,0.699,3692,0.699,3693,0.699,3694,1.331,3695,2.431,3696,0.699,3697,1.331,3698,0.699,3699,0.699,3700,0.643,3701,1.331,3702,0.699,3703,0.699,3704,1.331,3705,0.606,3706,0.699,3707,0.699,3708,1.906,3709,0.643,3710,0.699,3711,0.699,3712,1.906,3713,1.224,3714,1.331,3715,1.331,3716,1.331,3717,1.331,3718,1.331,3719,0.699,3720,0.699,3721,0.699,3722,0.699,3723,0.699,3724,0.699,3725,0.606,3726,0.699,3727,0.699,3728,1.331,3729,0.699,3730,0.699,3731,0.699,3732,0.699,3733,0.699,3734,0.699,3735,0.699,3736,0.699,3737,0.699,3738,0.699,3739,0.643,3740,0.699]],["component/74",[22,0.319]],["keyword/74",[]],["title/75-1",[1141,36.563]],["name/75-1",[]],["text/75-1",[]],["component/75-1",[]],["keyword/75-1",[]],["title/75-2",[565,30.754,1269,38.684]],["name/75-2",[]],["text/75-2",[]],["component/75-2",[]],["keyword/75-2",[]],["title/75-3",[172,32.547,284,34.5,586,21.497]],["name/75-3",[]],["text/75-3",[]],["component/75-3",[]],["keyword/75-3",[]],["title/75-4",[42,16.704,43,24.683,164,25.985]],["name/75-4",[]],["text/75-4",[]],["component/75-4",[]],["keyword/75-4",[]],["title/75-5",[42,16.704,43,24.683,678,51.456]],["name/75-5",[]],["text/75-5",[]],["component/75-5",[]],["keyword/75-5",[]],["title/75-6",[42,16.704,43,24.683,921,35.412]],["name/75-6",[]],["text/75-6",[]],["component/75-6",[]],["keyword/75-6",[]],["title/75-7",[164,30.547,1123,45.667]],["name/75-7",[]],["text/75-7",[]],["component/75-7",[]],["keyword/75-7",[]],["title/75-8",[22,15.666]],["name/75-8",[]],["text/75-8",[]],["component/75-8",[]],["keyword/75-8",[]],["title/75-9",[1383,56.418]],["name/75-9",[]],["text/75-9",[]],["component/75-9",[]],["keyword/75-9",[]],["title/75",[1122,44.15,1123,45.667]],["name/75",[286,0.558]],["text/75",[5,0.518,9,1.29,22,1.266,25,0.511,26,0.708,27,1.047,28,0.621,41,2.961,42,2.04,43,2.43,44,0.641,45,2.527,46,0.725,49,1.174,52,2.994,53,2.888,55,1.123,59,0.703,63,0.764,66,0.917,68,0.786,71,0.904,78,1.435,80,0.757,94,4.041,112,0.486,131,0.654,135,1.894,139,3.014,140,0.633,148,0.904,158,1.116,159,2.751,163,0.961,168,1.061,169,0.802,171,2.462,172,3.975,180,1.918,189,0.511,193,0.618,207,0.682,209,0.811,212,1.19,222,0.731,225,2.51,244,2.307,251,2.598,266,0.697,279,0.978,284,3.704,285,0.868,297,0.525,308,1.166,311,0.802,379,0.868,382,1.708,385,0.945,386,0.629,396,1.943,402,0.961,403,1.116,406,3.262,419,0.672,432,1.823,442,0.629,471,1.322,475,0.868,478,2.558,497,2.901,505,0.917,510,0.858,518,0.786,526,2.017,529,1.27,553,0.751,565,2.307,569,0.589,574,0.697,582,1.657,586,3.252,605,2.095,609,1.823,678,3.923,695,1.531,696,2.174,708,1.15,725,0.838,743,0.868,766,0.978,770,1.628,779,0.687,782,3.141,785,1.639,803,1.569,813,0.802,817,1.28,831,1.037,852,0.996,860,0.891,907,0.714,909,0.961,914,1.016,921,3.802,938,0.904,947,2.81,948,1.872,954,0.961,969,1.26,988,0.868,994,2.462,998,0.917,999,0.764,1079,2.664,1093,0.714,1122,1.708,1123,5.569,1139,0.891,1142,1.087,1143,0.794,1144,0.52,1145,2.047,1159,1.3,1173,0.904,1178,1.611,1186,1.116,1200,0.848,1219,2.381,1226,1.497,1248,0.978,1262,0.819,1264,1.767,1269,3.791,1316,1.15,1321,1.589,1325,2.34,1326,1.874,1331,2.51,1358,1.061,1420,1.15,1468,1.087,1631,2.376,1654,3.122,1703,0.751,1767,1.087,1774,1.116,1786,3.291,1789,0.996,2008,1.189,2035,1.236,2118,2.017,2138,3.081,2175,0.931,2240,1.236,2252,2.759,2317,1.374,3024,1.916,3548,3.056,3620,1.374,3657,1.374,3700,1.374,3741,1.495,3742,1.495,3743,1.295,3744,1.495,3745,2.7,3746,5.844,3747,3.397,3748,1.236,3749,1.495,3750,1.495,3751,1.495,3752,1.495,3753,1.495,3754,1.495,3755,2.7,3756,1.295,3757,2.7,3758,5.235,3759,1.495,3760,1.495,3761,1.495,3762,1.495,3763,1.495,3764,1.495,3765,2.7,3766,1.495,3767,1.495,3768,1.495,3769,1.495,3770,2.7,3771,2.7,3772,1.495,3773,1.495,3774,1.495,3775,1.495,3776,1.495,3777,1.495,3778,1.495,3779,4.527,3780,1.495,3781,2.7,3782,1.495,3783,1.495,3784,1.495,3785,1.495,3786,1.495,3787,1.495,3788,1.495,3789,1.495,3790,2.7,3791,1.495,3792,1.495,3793,1.495,3794,1.495,3795,2.7,3796,3.694,3797,1.495,3798,2.7,3799,1.495,3800,1.495,3801,2.7,3802,1.495,3803,1.495,3804,1.495,3805,1.495,3806,1.495,3807,1.016,3808,1.236]],["component/75",[22,0.319]],["keyword/75",[]],["title/76",[402,44.882,1122,44.15]],["name/76",[286,0.558]],["text/76",[5,2.607,22,1.81,25,2.57,35,5.47,42,3.059,43,3.128,45,2.983,52,3.472,55,3.128,118,3.812,159,2.854,189,2.57,207,3.433,297,2.644,402,6.291,406,3.384,478,3.292,582,4.615,763,4.428,785,3.542,803,4.371,948,3.812,1085,4.685,1125,4.922,1144,2.619,1269,4.17,1322,6.222,1323,6.222,1324,5.618]],["component/76",[22,0.319]],["keyword/76",[]],["title/77-1",[1141,36.563]],["name/77-1",[]],["text/77-1",[]],["component/77-1",[]],["keyword/77-1",[]],["title/77-2",[612,33.76]],["name/77-2",[]],["text/77-2",[]],["component/77-2",[]],["keyword/77-2",[]],["title/77-3",[45,27.674,579,27.362]],["name/77-3",[]],["text/77-3",[]],["component/77-3",[]],["keyword/77-3",[]],["title/77",[57,28.357,398,29.304,905,42.129]],["name/77",[286,0.558]],["text/77",[4,1.111,5,0.71,9,0.978,22,0.88,25,0.7,26,2.698,27,1.385,29,2.561,42,1.602,43,0.852,44,0.879,45,2.813,52,2.062,53,0.928,55,0.852,56,1.057,57,3.645,59,2.235,63,1.047,77,1.02,84,0.978,94,4.897,107,1.365,118,1.038,130,0.956,135,1.495,139,0.903,140,2.013,155,1.02,164,0.897,169,1.1,180,0.868,183,1.276,187,2.185,189,0.7,193,1.477,212,0.903,234,1.34,270,1.176,271,1.029,292,1.421,297,0.72,308,0.885,379,2.077,398,3.767,442,0.862,491,1.392,523,0.971,524,1.078,531,0.986,569,2.244,574,3.014,576,1.421,579,1.863,609,3.502,612,3.754,626,2.27,641,1.844,666,1.123,746,1.123,786,1.504,788,2.298,853,1.827,868,2.408,870,1.257,905,5.415,906,2.741,907,0.978,927,2.154,961,2.039,983,0.963,995,1.19,998,2.192,1047,0.935,1067,2.43,1076,2.956,1077,2.749,1079,1.206,1097,1.276,1100,2.879,1133,2.366,1144,0.713,1161,1.148,1178,2.131,1190,1.111,1197,3.492,1226,1.135,1280,2.161,1326,1.421,1360,3.781,1582,2.192,1949,2.843,2138,2.103,2286,1.53,2287,1.489,2440,2.598,2648,1.63,2802,1.454,2833,3.23,2960,1.317,3021,3.656,3024,2.536,3031,2.956,3052,3.286,3053,5.868,3054,4.934,3055,4.934,3085,3.286,3086,4.119,3087,4.934,3088,3.286,3110,3.286,3113,1.884,3114,3.097,3119,3.286,3120,4.371,3121,1.884,3122,3.286,3124,4.371,3132,1.884,3133,1.775,3137,3.097,3138,3.097,3139,3.097,3140,3.097,3141,3.097,3142,3.097,3144,1.63,3145,1.775,3146,1.775,3147,1.775,3150,1.884,3159,1.884,3160,1.884,3166,1.694,3167,1.775,3175,1.775,3176,1.775,3177,1.775,3178,1.694,3179,1.576,3180,1.775,3181,3.097,3182,1.694,3809,3.574,3810,2.049,3811,2.049,3812,2.049,3813,3.574,3814,3.574,3815,2.049,3816,2.049,3817,2.049,3818,3.574,3819,3.574,3820,2.049,3821,2.049,3822,2.049]],["component/77",[22,0.319]],["keyword/77",[]],["title/78-1",[1141,36.563]],["name/78-1",[]],["text/78-1",[]],["component/78-1",[]],["keyword/78-1",[]],["title/78-2",[373,48.01]],["name/78-2",[]],["text/78-2",[]],["component/78-2",[]],["keyword/78-2",[]],["title/78-3",[164,20.008,396,24.05,442,19.244,927,20.714,3823,39.621]],["name/78-3",[]],["text/78-3",[]],["component/78-3",[]],["keyword/78-3",[]],["title/78",[42,16.704,45,23.541,1132,43.168]],["name/78",[286,0.558]],["text/78",[5,1.891,10,2.586,22,1.267,24,1.749,25,1.158,26,2.586,28,1.409,42,2.209,45,4.318,52,2.507,55,2.269,58,2.08,59,1.594,63,1.733,94,4.343,102,2.111,127,2.899,132,1.946,134,3.398,135,1.418,152,2.96,155,2.717,164,1.484,182,1.801,187,1.558,189,1.158,195,1.97,198,1.536,209,2.96,229,2.608,266,1.582,271,4.617,297,1.192,303,2.352,390,1.514,396,3.603,419,1.525,442,3.305,524,1.783,535,2.111,553,1.702,569,2.7,579,3.79,609,1.673,688,2.938,728,2.111,786,1.427,817,1.606,927,2.473,961,2.341,999,2.79,1022,2.531,1067,1.733,1079,1.995,1111,1.632,1132,3.968,1144,1.18,1242,2.05,1282,1.97,1287,2.352,1337,1.97,1347,2.938,1348,5.936,1349,2.938,1350,4.729,1393,2.465,1467,4.514,1541,3.398,1542,3.872,1582,2.08,1594,2.405,1796,2.304,2138,1.995,2283,3.117,2286,2.531,2287,3.968,2346,2.218,2386,6.298,2387,5.018,2388,3.117,2389,3.117,2390,5.018,2391,2.938,2392,3.117,2393,2.938,2939,2.938,3035,2.938,3351,3.117,3824,3.39,3825,2.405,3826,5.457,3827,3.39,3828,3.39,3829,5.457,3830,3.39,3831,3.39,3832,3.39,3833,3.39,3834,5.457,3835,5.457,3836,3.39,3837,3.39,3838,5.018,3839,3.39,3840,3.117,3841,3.39,3842,3.39]],["component/78",[22,0.319]],["keyword/78",[]],["title/79",[594,38.261,1047,31.853]],["name/79",[286,0.558]],["text/79",[5,2.72,22,1.861,25,2.682,27,3.044,42,2.209,45,3.113,90,3.75,139,3.459,189,2.682,221,4.562,297,2.76,386,3.305,419,3.532,531,3.78,569,3.965,586,2.843,594,5.513,786,3.305,812,3.943,959,4.966,1047,5.339,1067,4.014,1080,4.13,1144,2.733,1291,6.804]],["component/79",[22,0.319]],["keyword/79",[]],["title/80",[397,30.357,1111,28.585,1120,34.075]],["name/80",[286,0.558]],["text/80",[5,2.406,22,1.717,25,2.372,26,4.397,29,2.753,42,1.953,45,3.679,52,2.217,67,3.617,68,3.653,77,3.456,112,3.015,118,3.518,189,2.372,198,3.146,215,4.392,297,2.441,383,3.24,565,3.059,569,2.737,612,2.769,784,4.035,785,2.514,790,3.08,950,4.718,1100,2.818,1111,5.032,1120,5.998,1121,4.465,1131,4.627,1144,2.417,1298,6.017,1299,5.743,1300,4.817,1301,4.927,1302,6.017,1303,6.584]],["component/80",[22,0.319]],["keyword/80",[]],["title/81",[172,25.061,397,23.375,717,25.625,1120,26.238,1121,29.398]],["name/81",[286,0.558]],["text/81",[5,2.234,6,4.38,22,1.633,25,2.202,26,4.182,28,2.68,29,2.556,42,1.814,45,3.499,52,2.059,77,3.209,112,2.868,118,3.266,159,2.445,161,4.38,189,2.202,198,2.921,215,4.078,251,3.7,297,2.266,373,3.656,383,3.008,397,3.296,426,3.425,483,4.574,565,2.84,612,2.571,717,5.64,724,5.128,770,2.84,774,4.473,784,3.746,785,2.334,983,3.031,1120,6.877,1121,4.145,1142,4.687,1144,2.244,1299,5.332,1300,4.473,1304,5.587,1305,4.814,1306,4.687,1307,3.746]],["component/81",[22,0.319]],["keyword/81",[]],["title/82-1",[26,33.074,1121,44.882]],["name/82-1",[]],["text/82-1",[]],["component/82-1",[]],["keyword/82-1",[]],["title/82-2",[139,22.761,574,24.105,884,32.676,2833,35.102]],["name/82-2",[]],["text/82-2",[]],["component/82-2",[]],["keyword/82-2",[]],["title/82-3",[112,13.324,139,18.066,392,22.476,565,18.066,774,28.448,3843,35.534]],["name/82-3",[]],["text/82-3",[]],["component/82-3",[]],["keyword/82-3",[]],["title/82-4",[112,19.294,478,25.985,983,27.917]],["name/82-4",[]],["text/82-4",[]],["component/82-4",[]],["keyword/82-4",[]],["title/82-5",[717,25.625,1120,26.238,1131,30.465,1308,37.813,1309,37.813]],["name/82-5",[]],["text/82-5",[]],["component/82-5",[]],["keyword/82-5",[]],["title/82",[139,18.066,183,25.532,717,22.982,927,18.577,1100,16.639,1120,23.532]],["name/82",[286,0.558]],["text/82",[5,0.425,10,2.88,22,1.268,25,0.419,26,3.405,27,0.475,28,0.937,41,1.967,42,0.634,49,1.361,52,2.295,55,0.51,57,2.168,58,0.752,63,0.627,67,0.639,77,0.61,84,0.586,85,0.817,89,0.572,94,3.786,109,1.9,112,1.017,117,2.342,118,2.85,126,0.833,127,2.717,135,1.309,136,2.574,138,0.645,139,3.981,140,3.398,142,1.586,143,1.716,152,1.697,158,0.507,159,0.855,160,1.615,170,2.048,177,0.658,180,0.519,185,0.764,188,1.044,189,0.77,193,0.932,198,3.519,212,1.711,215,1.426,230,3.148,234,0.802,244,0.54,251,0.704,258,1.063,260,0.616,270,0.704,271,3.441,291,0.833,297,0.431,311,0.658,374,0.695,379,0.712,383,0.572,386,1.317,390,0.548,392,1.716,406,1.408,408,0.788,419,0.552,432,2.24,440,0.975,442,0.516,451,2.987,472,0.712,478,2.461,480,2.755,506,1.383,509,0.495,518,0.645,524,1.646,531,1.085,537,0.68,565,2,569,0.483,574,2.387,586,1.406,612,1.248,666,1.236,695,0.695,701,2.152,717,3.635,723,1.775,759,0.87,768,0.851,770,0.54,774,0.851,778,2.546,784,4.661,785,0.816,786,1.317,804,2.127,812,3.441,815,0.764,817,1.068,831,3.149,834,0.943,853,0.627,870,0.752,873,2.436,884,1.426,889,1.949,899,0.776,906,1.085,911,2.177,915,1.036,929,0.731,936,0.665,948,1.586,950,2.639,960,0.788,969,1.052,972,0.776,983,0.577,1009,0.833,1010,0.943,1081,1.236,1093,0.586,1099,1.532,1100,1.27,1103,0.704,1117,0.741,1120,4.458,1121,4.621,1131,2.085,1139,1.345,1143,1.198,1144,0.427,1145,1.25,1157,0.687,1159,0.59,1161,1.754,1177,0.817,1187,0.975,1213,1.949,1216,0.731,1223,0.833,1224,1.639,1226,1.25,1250,2.574,1267,1.363,1270,0.943,1275,1.867,1300,1.564,1308,2.588,1309,2.588,1311,0.891,1313,1.865,1314,0.975,1318,3.754,1320,1.063,1324,1.684,1331,1.532,1337,0.712,1355,0.916,1364,2.407,1370,2.987,1403,0.916,1432,0.891,1445,0.943,1456,1.639,1580,2.048,1654,0.731,1663,0.975,1674,1.734,1813,0.833,1886,3.365,1899,2.073,2118,0.916,2153,0.833,2175,0.764,2346,2.541,2502,1.865,2571,0.975,2640,0.975,2701,0.916,2833,2.127,2925,2.712,2936,1.063,3195,1.128,3230,0.975,3244,1.063,3262,1.063,3346,3.149,3357,1.128,3843,1.063,3844,2.878,3845,3.089,3846,1.063,3847,1.226,3848,1.063,3849,2.254,3850,1.226,3851,3.883,3852,1.226,3853,1.226,3854,1.226,3855,1.128,3856,1.226,3857,2.073,3858,2.073,3859,1.226,3860,1.063,3861,3.571,3862,1.226,3863,1.226,3864,1.226,3865,1.226,3866,1.226,3867,1.128,3868,2.254,3869,1.226,3870,1.226,3871,1.226,3872,1.226,3873,1.226,3874,1.226,3875,1.226,3876,1.226,3877,1.226,3878,1.226,3879,1.226,3880,1.226,3881,1.226,3882,1.226,3883,1.226,3884,1.226,3885,1.226,3886,2.254,3887,1.226,3888,2.254,3889,3.883,3890,2.254,3891,1.226,3892,3.129,3893,2.254,3894,1.226,3895,1.226,3896,1.226,3897,1.128,3898,1.226,3899,1.226,3900,3.883,3901,1.226,3902,1.226,3903,1.226,3904,1.226,3905,1.226,3906,1.226,3907,1.128,3908,2.254,3909,2.254]],["component/82",[22,0.319]],["keyword/82",[]],["title/83-1",[1141,36.563]],["name/83-1",[]],["text/83-1",[]],["component/83-1",[]],["keyword/83-1",[]],["title/83-2",[26,19.429,198,18.577,215,25.936,784,23.825,1121,26.366,1300,28.448]],["name/83-2",[]],["text/83-2",[]],["component/83-2",[]],["keyword/83-2",[]],["title/83-3",[3910,84.657]],["name/83-3",[]],["text/83-3",[]],["component/83-3",[]],["keyword/83-3",[]],["title/83-4",[3911,84.657]],["name/83-4",[]],["text/83-4",[]],["component/83-4",[]],["keyword/83-4",[]],["title/83-5",[3912,84.657]],["name/83-5",[]],["text/83-5",[]],["component/83-5",[]],["keyword/83-5",[]],["title/83-6",[3913,84.657]],["name/83-6",[]],["text/83-6",[]],["component/83-6",[]],["keyword/83-6",[]],["title/83-7",[612,23.676,717,33.28,1120,34.075]],["name/83-7",[]],["text/83-7",[]],["component/83-7",[]],["keyword/83-7",[]],["title/83-8",[1131,56.418]],["name/83-8",[]],["text/83-8",[]],["component/83-8",[]],["keyword/83-8",[]],["title/83-9",[1130,58.74]],["name/83-9",[]],["text/83-9",[]],["component/83-9",[]],["keyword/83-9",[]],["title/83-10",[612,23.676,1120,34.075,3914,54.599]],["name/83-10",[]],["text/83-10",[]],["component/83-10",[]],["keyword/83-10",[]],["title/83-11",[152,45.916]],["name/83-11",[]],["text/83-11",[]],["component/83-11",[]],["keyword/83-11",[]],["title/83",[717,33.28,1120,34.075,1130,41.194]],["name/83",[286,0.558]],["text/83",[5,0.445,8,1.277,9,1.556,22,0.746,24,0.663,25,0.439,26,2.227,27,0.913,28,1.354,29,0.51,42,0.362,52,1.687,57,1.556,60,1.368,63,0.657,73,1.731,78,0.683,84,0.614,94,3.997,109,1.152,112,2.665,116,0.841,117,1.215,118,2.677,127,1.251,130,0.6,135,0.538,139,3.1,140,2.457,141,0.813,142,0.651,147,0.857,152,0.697,160,2.425,163,0.827,167,1.973,171,0.857,173,0.69,180,0.545,183,0.801,184,0.989,187,2.161,189,0.439,193,1.942,198,1.476,207,1.075,208,0.874,209,0.697,215,1.489,228,0.874,229,0.989,230,0.624,242,0.892,244,1.435,247,0.624,266,1.52,269,2.259,271,0.646,285,0.747,297,0.452,302,0.801,308,0.555,311,0.69,317,0.857,374,0.729,383,1.099,386,1.371,392,0.705,393,6.457,396,1.714,397,1.204,406,0.578,414,5.755,419,1.813,438,0.757,442,0.541,480,0.912,486,0.777,497,1.305,509,0.519,523,1.544,524,0.676,529,1.107,531,1.568,533,0.729,537,2.234,565,1.435,569,2.467,571,0.801,574,1.52,578,0.989,586,2.877,589,0.841,609,1.162,612,1.299,616,0.813,626,1.556,641,1.215,701,1.305,708,1.811,717,2.962,742,0.767,770,0.566,774,5.689,778,1.172,784,3.37,786,0.541,789,0.64,792,0.697,808,0.857,810,0.892,812,1.636,815,3.291,831,2.797,840,1.063,853,0.657,863,0.96,865,0.697,870,3.839,873,2.522,879,0.857,890,1.541,906,0.619,907,2.77,911,1.32,928,0.801,930,1.063,936,1.767,961,0.552,969,0.6,983,0.604,998,0.789,999,1.204,1026,1.063,1047,0.587,1053,0.721,1067,0.657,1087,0.813,1103,3.033,1115,1.251,1120,5.539,1121,2.095,1126,1.489,1130,2.797,1131,2.686,1133,0.64,1144,0.448,1158,0.874,1159,0.619,1160,0.989,1161,1.826,1173,0.777,1180,0.789,1216,0.767,1219,1.714,1223,0.874,1242,0.777,1269,0.713,1271,0.989,1303,0.912,1305,3.01,1313,1.948,1318,5.176,1344,2.312,1351,0.874,1354,0.757,1378,2.695,1400,0.989,1408,0.789,1438,0.841,1466,0.767,1468,1.712,1481,1.114,1509,1.114,1523,1.023,1594,0.912,1631,0.827,1674,0.989,1679,0.96,1689,1.114,1691,1.023,1703,1.182,1730,2.433,1769,0.827,1796,1.6,1813,0.874,1834,1.671,1848,0.892,1879,2.695,1892,1.023,1915,0.935,2154,1.182,2156,4.073,2163,3.707,2164,3.343,2172,3.493,2175,2.029,2203,1.023,2212,1.063,2225,1.114,2290,1.114,2423,0.892,2463,0.96,2817,1.063,2907,1.182,2924,2.165,3187,3.01,3211,1.811,3230,1.023,3346,3.261,3489,4.322,3843,4.073,3845,1.873,3861,3.707,3897,1.182,3907,1.182,3915,1.286,3916,1.286,3917,1.286,3918,1.114,3919,1.182,3920,1.114,3921,4.031,3922,1.286,3923,1.286,3924,1.286,3925,1.286,3926,1.286,3927,1.286,3928,3.258,3929,1.286,3930,1.286,3931,1.286,3932,1.286,3933,1.286,3934,1.286,3935,2.355,3936,1.286,3937,1.182,3938,1.286,3939,2.355,3940,1.286,3941,1.286,3942,1.286,3943,1.286,3944,1.286,3945,1.063,3946,1.286,3947,1.286,3948,1.286,3949,1.286,3950,1.286,3951,1.286,3952,1.182,3953,2.355,3954,1.286,3955,1.286,3956,5.284,3957,1.286,3958,1.286,3959,1.286,3960,1.286,3961,1.286,3962,1.286,3963,1.182,3964,1.286]],["component/83",[22,0.319]],["keyword/83",[]],["title/84-1",[1141,36.563]],["name/84-1",[]],["text/84-1",[]],["component/84-1",[]],["keyword/84-1",[]],["title/84-2",[112,19.294,399,27.705,1138,41.194]],["name/84-2",[]],["text/84-2",[]],["component/84-2",[]],["keyword/84-2",[]],["title/84-3",[373,48.01]],["name/84-3",[]],["text/84-3",[]],["component/84-3",[]],["keyword/84-3",[]],["title/84-4",[158,18.89,399,21.333,605,25.925,707,24.538,1138,31.719]],["name/84-4",[]],["text/84-4",[]],["component/84-4",[]],["keyword/84-4",[]],["title/84-5",[586,18.703,707,27.726,792,28.017,1138,35.841]],["name/84-5",[]],["text/84-5",[]],["component/84-5",[]],["keyword/84-5",[]],["title/84-6",[406,31.4,1240,50.747]],["name/84-6",[]],["text/84-6",[]],["component/84-6",[]],["keyword/84-6",[]],["title/84-7",[471,29.058,1138,41.194,2381,47.234]],["name/84-7",[]],["text/84-7",[]],["component/84-7",[]],["keyword/84-7",[]],["title/84-8",[1383,56.418]],["name/84-8",[]],["text/84-8",[]],["component/84-8",[]],["keyword/84-8",[]],["title/84",[112,19.294,399,27.705,1138,41.194]],["name/84",[286,0.558]],["text/84",[5,0.487,8,0.763,16,0.975,22,0.928,25,0.48,41,0.712,42,0.396,44,0.603,45,0.557,48,0.955,52,2.463,53,1.591,55,0.585,56,0.726,59,0.661,64,1.504,67,1.331,68,0.74,73,1.866,81,1.764,84,0.672,89,1.192,90,0.672,94,4.514,97,0.807,99,0.839,101,0.839,102,1.591,105,1.05,112,3.272,131,0.615,135,0.588,154,1.218,155,0.7,158,1.785,162,0.92,166,1.022,169,1.371,171,1.703,180,2.6,182,0.747,187,1.614,188,0.651,189,0.48,197,2.033,207,0.642,209,1.905,212,0.619,221,0.817,222,1.25,230,0.682,233,1.163,238,1.218,242,0.975,243,0.904,244,0.619,266,1.192,269,1.968,271,1.764,281,0.839,289,3.304,290,2.827,292,1.773,296,1.449,297,0.494,302,1.591,373,1.449,376,0.876,382,2.733,383,0.656,384,1.05,396,1.344,397,0.719,399,3.981,406,0.633,419,0.633,442,0.592,446,0.807,456,1.591,464,0.771,471,2.115,478,0.615,485,0.876,486,0.85,497,1.416,507,0.876,518,0.74,553,0.706,565,0.619,566,0.807,569,1.977,574,0.656,579,2.201,586,1.564,587,0.817,589,0.92,604,0.666,605,1.991,609,1.261,625,0.937,626,0.672,658,7.215,666,0.771,695,0.797,704,1.163,707,4.3,725,0.788,743,2.041,746,0.771,762,0.975,778,3.056,786,0.592,790,1.917,792,2.343,796,1.432,802,1.331,804,0.955,805,0.788,809,0.998,812,0.706,817,1.211,837,0.779,838,1.813,844,0.955,846,0.937,848,0.937,863,1.05,868,1.779,906,1.23,907,0.672,915,0.646,927,1.958,929,0.839,936,0.763,944,2.925,961,0.603,968,1.504,973,1.218,976,0.955,1002,2.067,1047,1.166,1052,0.955,1053,0.788,1067,1.306,1079,0.828,1104,0.876,1119,0.719,1138,6.078,1144,0.489,1157,0.788,1159,0.677,1167,0.92,1180,0.863,1183,2.124,1219,0.74,1267,1.545,1280,0.85,1292,3.479,1340,4.58,1342,1.703,1372,1.218,1373,1.163,1398,0.828,1432,1.022,1438,0.92,1448,0.937,1466,0.839,1565,1.163,1570,1.218,1572,1.218,1578,1.218,1582,1.567,1631,0.904,1664,0.92,1678,1.022,1683,1.022,1703,1.764,1706,1.218,1789,0.937,1821,0.955,1825,1.022,1864,1.218,1869,1.163,1870,0.828,1877,0.998,1896,1.05,1912,1.293,1963,1.119,2164,2.733,2184,1.05,2262,1.293,2380,2.113,2381,3.989,2382,1.293,2383,3.745,2396,1.218,2400,1.293,2407,1.293,2410,1.218,2413,1.293,2416,1.293,2417,2.35,2420,2.35,2422,2.35,2425,1.293,2426,1.082,2427,1.293,2428,1.293,2430,1.293,2432,1.293,2437,1.293,2438,2.35,2440,1.022,2454,1.163,2462,1.293,2495,1.293,2676,1.218,2701,1.05,2706,1.218,2820,1.293,2830,2.35,2936,1.218,3451,1.218,3845,1.119,3965,2.555,3966,1.406,3967,1.406,3968,1.406,3969,1.406,3970,5.013,3971,2.555,3972,1.406,3973,1.406,3974,1.406,3975,2.555,3976,1.406,3977,2.555,3978,1.406,3979,1.406,3980,1.406,3981,1.406,3982,1.406,3983,1.406,3984,1.406,3985,1.406,3986,1.293,3987,2.555,3988,2.555,3989,1.406,3990,1.406,3991,1.406,3992,1.406,3993,1.406,3994,1.406,3995,1.406,3996,1.406,3997,1.406,3998,1.406,3999,1.406,4000,1.406,4001,1.406,4002,1.406,4003,1.218,4004,2.555,4005,3.512,4006,3.512,4007,1.406,4008,1.406,4009,1.406,4010,1.406,4011,1.406,4012,1.406,4013,1.406,4014,1.406,4015,1.406,4016,1.406]],["component/84",[22,0.319]],["keyword/84",[]],["title/85-1",[1141,36.563]],["name/85-1",[]],["text/85-1",[]],["component/85-1",[]],["keyword/85-1",[]],["title/85-2",[45,27.674,579,27.362]],["name/85-2",[]],["text/85-2",[]],["component/85-2",[]],["keyword/85-2",[]],["title/85-3",[112,19.294,139,26.161,1067,30.357]],["name/85-3",[]],["text/85-3",[]],["component/85-3",[]],["keyword/85-3",[]],["title/85-4",[112,22.682,310,38.261]],["name/85-4",[]],["text/85-4",[]],["component/85-4",[]],["keyword/85-4",[]],["title/85-5",[112,22.682,4017,64.185]],["name/85-5",[]],["text/85-5",[]],["component/85-5",[]],["keyword/85-5",[]],["title/85-6",[112,22.682,983,32.819]],["name/85-6",[]],["text/85-6",[]],["component/85-6",[]],["keyword/85-6",[]],["title/85-7",[112,22.682,4018,64.185]],["name/85-7",[]],["text/85-7",[]],["component/85-7",[]],["keyword/85-7",[]],["title/85-8",[569,23.407,868,30.083,1133,29.556]],["name/85-8",[]],["text/85-8",[]],["component/85-8",[]],["keyword/85-8",[]],["title/85-9",[553,42.515]],["name/85-9",[]],["text/85-9",[]],["component/85-9",[]],["keyword/85-9",[]],["title/85-10",[290,45.667,4019,60.49]],["name/85-10",[]],["text/85-10",[]],["component/85-10",[]],["keyword/85-10",[]],["title/85-11",[73,37.084,377,36.717]],["name/85-11",[]],["text/85-11",[]],["component/85-11",[]],["keyword/85-11",[]],["title/85-12",[1383,56.418]],["name/85-12",[]],["text/85-12",[]],["component/85-12",[]],["keyword/85-12",[]],["title/85",[112,22.682,139,30.754]],["name/85",[286,0.558]],["text/85",[4,0.304,5,0.194,10,0.265,18,0.338,22,1.208,25,0.191,26,0.737,27,1.704,29,1.252,42,1.073,43,0.233,45,0.956,46,0.272,47,0.279,49,0.676,52,2.65,53,0.488,55,0.831,56,0.289,59,1.644,61,0.584,77,0.774,78,0.826,81,1.004,84,0.267,87,0.431,90,1.152,94,4.443,97,0.892,101,0.334,102,0.348,107,0.373,109,0.274,112,3.665,117,2.993,118,1.013,127,1.487,128,0.61,129,0.36,130,0.725,131,0.68,132,0.321,134,1.742,135,0.45,136,0.61,137,0.388,138,0.294,139,3.263,140,2.082,142,0.545,143,0.59,154,0.485,155,0.279,158,1.576,159,0.212,162,0.704,164,1.383,169,0.834,173,0.834,180,2.279,181,0.36,182,0.297,184,0.431,187,2.572,188,0.259,189,0.368,190,0.704,193,0.445,195,1.161,198,0.254,199,0.354,204,0.463,207,0.709,209,0.584,212,1.233,218,0.284,219,0.445,221,0.625,222,0.274,230,0.522,232,0.852,242,0.747,244,1.813,248,0.373,251,0.321,256,0.578,260,1.004,263,1.13,270,0.618,271,0.281,289,1.176,290,3.216,292,1.079,297,0.197,308,0.465,310,2.694,315,0.3,316,0.407,323,0.463,383,0.261,384,1.492,385,0.354,386,0.841,389,0.431,390,1.078,392,0.307,393,1.161,396,0.294,398,0.531,399,0.725,405,1.791,419,0.252,420,0.717,421,0.431,423,0.397,430,0.618,432,0.276,442,1.178,464,0.59,471,0.527,472,0.625,473,0.348,482,0.856,483,0.397,500,0.89,509,0.434,515,0.373,518,3.679,520,0.366,523,0.737,529,0.263,531,0.962,533,2.164,537,0.31,553,0.781,565,0.474,566,0.321,569,2.699,570,0.445,571,0.348,574,0.933,576,0.388,579,1.371,586,0.873,594,1.917,604,0.737,605,0.317,606,1.192,609,1.726,612,1.753,626,1.965,641,0.802,695,0.317,696,0.633,700,0.983,701,0.31,707,1.073,723,0.61,725,0.871,728,0.67,742,0.642,743,0.625,746,0.307,758,0.407,762,0.388,763,0.329,770,1.233,776,0.334,777,0.536,778,2.321,779,0.715,783,0.431,784,2.555,785,1.381,786,0.453,788,0.36,790,2.069,812,0.781,813,0.3,817,0.51,837,0.31,847,0.397,862,0.36,865,0.304,866,0.545,868,3.307,869,0.445,874,0.418,875,0.66,885,0.704,888,0.397,900,0.397,911,0.603,914,0.731,915,0.495,927,0.704,929,0.334,932,0.747,936,1.084,946,0.463,947,0.578,948,1.013,961,0.858,970,1.079,972,0.354,976,0.38,980,0.407,983,2.906,990,0.463,994,0.373,1002,1.176,1007,1.056,1011,1.712,1047,1.442,1052,1.901,1053,0.603,1067,0.286,1072,1.286,1075,2.573,1079,2.744,1080,1.84,1081,0.307,1084,0.338,1100,1.135,1107,0.366,1115,1.062,1122,0.354,1133,2.566,1144,0.195,1145,1.337,1148,1.079,1157,0.603,1159,1.161,1161,0.603,1166,1.036,1188,0.334,1214,0.388,1219,0.566,1235,0.731,1239,1.017,1245,0.397,1247,0.903,1248,1.017,1250,0.882,1263,1.332,1267,0.338,1269,0.31,1280,0.338,1283,0.373,1288,0.463,1300,0.388,1307,0.903,1326,0.747,1344,1.103,1367,1.653,1399,0.36,1408,0.343,1442,0.38,1480,0.445,1499,0.418,1522,0.321,1580,0.366,1582,0.954,1583,0.418,1611,0.515,1614,0.485,1616,0.445,1625,0.431,1631,0.36,1654,2.086,1703,0.781,1767,0.407,1769,0.36,1789,1.865,1834,0.397,1885,0.651,1896,0.418,1949,0.445,1996,0.397,2138,0.329,2158,0.485,2175,0.968,2200,0.828,2254,0.463,2271,0.933,2294,0.804,2343,0.445,2345,0.431,2346,0.366,2348,0.485,2440,0.407,2675,0.717,2699,0.515,2712,1.453,2900,0.463,2957,0.99,2960,0.36,2977,0.515,3024,0.397,3043,0.515,3097,0.515,3147,0.485,3166,0.89,3182,0.463,3344,0.515,3347,0.515,3451,0.933,3550,0.933,3860,0.485,4017,2.218,4018,1.429,4019,2.09,4020,1.347,4021,1.076,4022,0.56,4023,0.56,4024,0.56,4025,0.56,4026,0.56,4027,1.076,4028,0.56,4029,0.515,4030,1.076,4031,0.56,4032,0.56,4033,0.56,4034,0.56,4035,0.56,4036,0.56,4037,0.56,4038,0.56,4039,0.56,4040,5.153,4041,1.999,4042,1.429,4043,0.56,4044,3.815,4045,0.56,4046,0.56,4047,0.56,4048,1.076,4049,1.076,4050,0.99,4051,1.554,4052,1.076,4053,0.56,4054,5.595,4055,1.554,4056,1.999,4057,1.076,4058,2.412,4059,0.56,4060,1.076,4061,1.076,4062,1.999,4063,0.56,4064,2.412,4065,0.56,4066,0.56,4067,1.076,4068,1.076,4069,1.076,4070,1.076,4071,0.56,4072,1.076,4073,0.56,4074,1.076,4075,0.56,4076,0.56,4077,0.56,4078,0.56,4079,0.56,4080,0.56,4081,0.56,4082,0.56,4083,0.56,4084,0.56,4085,0.56,4086,0.56,4087,0.56,4088,0.56,4089,0.56,4090,0.56,4091,0.56,4092,0.56,4093,0.56,4094,0.56,4095,0.56,4096,1.554,4097,1.076,4098,1.999,4099,0.56,4100,0.56,4101,1.999,4102,0.56,4103,0.56,4104,0.56,4105,0.56,4106,1.554,4107,0.56,4108,0.56,4109,1.076,4110,0.56,4111,0.56,4112,1.076,4113,1.554,4114,1.076,4115,1.076,4116,1.076,4117,0.56,4118,0.56,4119,0.56,4120,1.999,4121,0.56,4122,0.56,4123,0.56,4124,0.56,4125,0.56,4126,0.56,4127,0.56,4128,0.56,4129,0.56,4130,0.56,4131,0.56,4132,1.076,4133,0.56,4134,1.554,4135,1.076,4136,0.56,4137,1.999,4138,0.56,4139,1.076,4140,0.56,4141,0.56,4142,0.56,4143,0.56,4144,0.56,4145,0.56,4146,0.56,4147,1.554,4148,0.56,4149,0.56,4150,0.56,4151,0.56,4152,0.56,4153,0.56,4154,1.076,4155,0.56,4156,0.56,4157,0.56,4158,0.56,4159,0.515,4160,1.076,4161,0.56,4162,1.076,4163,0.99,4164,0.515,4165,1.076,4166,0.56,4167,1.076,4168,0.56,4169,0.56,4170,0.56,4171,0.56,4172,0.56,4173,0.56,4174,0.56,4175,0.56,4176,0.56,4177,0.56,4178,0.56,4179,0.56,4180,0.56,4181,0.56,4182,0.56,4183,0.56,4184,1.999,4185,0.485,4186,1.076,4187,0.56,4188,0.56,4189,0.56,4190,0.56,4191,0.56,4192,1.076,4193,0.56,4194,0.56,4195,0.56,4196,0.56,4197,0.56,4198,0.56,4199,0.56,4200,0.56,4201,0.515,4202,0.515,4203,0.56,4204,0.56,4205,1.076,4206,1.076]],["component/85",[22,0.319]],["keyword/85",[]],["title/86-1",[159,26.477,2968,60.49]],["name/86-1",[]],["text/86-1",[]],["component/86-1",[]],["keyword/86-1",[]],["title/86-2",[1141,36.563]],["name/86-2",[]],["text/86-2",[]],["component/86-2",[]],["keyword/86-2",[]],["title/86-3",[579,27.362,927,31.624]],["name/86-3",[]],["text/86-3",[]],["component/86-3",[]],["keyword/86-3",[]],["title/86-4",[45,27.674,579,27.362]],["name/86-4",[]],["text/86-4",[]],["component/86-4",[]],["keyword/86-4",[]],["title/86-5",[29,23.541,1275,35.412,4207,54.599]],["name/86-5",[]],["text/86-5",[]],["component/86-5",[]],["keyword/86-5",[]],["title/86-6",[472,40.557,473,43.464]],["name/86-6",[]],["text/86-6",[]],["component/86-6",[]],["keyword/86-6",[]],["title/86-7",[1383,56.418]],["name/86-7",[]],["text/86-7",[]],["component/86-7",[]],["keyword/86-7",[]],["title/86",[]],["name/86",[286,0.558]],["text/86",[5,0.623,18,2.596,22,1.099,24,1.645,25,0.615,27,0.697,28,1.785,29,3.164,42,0.506,44,2.819,45,2.355,52,1.896,53,0.815,55,0.748,67,0.937,81,0.903,84,2.48,94,4.111,109,0.88,112,1.395,128,1.02,147,3.958,148,1.088,155,2.585,158,1.774,159,2.696,168,1.277,177,2.304,182,1.694,188,1.476,189,1.089,193,1.317,198,2.353,209,0.976,212,1.405,239,2.763,244,1.405,250,1.343,295,1.985,297,0.632,302,1.12,308,0.777,315,0.966,377,3.739,381,1.343,385,1.138,386,0.757,397,0.92,406,4.334,442,1.342,472,1.045,478,3.111,486,1.088,497,4.422,509,0.726,524,0.946,529,1.499,553,0.903,565,1.405,574,0.839,579,2.575,589,1.177,616,1.138,621,1.033,625,3.46,626,0.859,696,1.059,723,1.808,777,0.896,779,1.466,785,1.154,790,2.635,792,0.976,812,1.601,813,0.966,815,1.985,817,0.853,823,2.536,842,1.104,846,1.199,866,2.175,878,2.787,884,2.017,885,1.177,890,2.086,895,2.932,900,2.262,906,2.5,907,0.859,927,2.691,952,1.177,969,0.839,971,1.431,972,2.017,983,1.499,996,1.138,1002,1.059,1007,2.917,1097,1.12,1100,1.742,1107,1.177,1108,2.527,1114,2.434,1143,0.956,1144,0.626,1157,1.787,1159,0.866,1161,1.008,1169,2.166,1179,1.138,1183,1.088,1200,1.02,1205,1.248,1217,1.088,1275,2.56,1283,2.124,1301,2.262,1307,1.045,1337,1.045,1342,2.861,1353,2.212,1354,4.183,1357,1.308,1358,1.277,1375,1.559,1429,1.559,1438,1.177,1447,1.308,1457,1.199,1461,2.166,1463,1.654,1470,2.212,1482,1.222,1518,1.654,1541,1.12,1654,1.901,1691,1.431,1703,1.601,1705,1.488,1870,1.059,1872,1.431,1885,3.14,1896,1.343,1911,2.262,2000,2.932,2127,1.559,2171,1.559,2199,2.452,2237,1.559,2446,2.637,2493,2.637,2640,1.431,2715,1.308,2729,1.654,2931,1.488,2955,1.488,2968,6.16,3228,4.295,3234,1.654,3350,2.763,3488,1.559,3747,1.654,4207,6.041,4208,1.799,4209,1.799,4210,2.932,4211,1.799,4212,1.654,4213,1.799,4214,1.799,4215,4.292,4216,1.799,4217,1.799,4218,1.799,4219,1.799,4220,1.799,4221,1.799,4222,1.799,4223,3.188,4224,1.799,4225,1.799,4226,1.799,4227,1.799,4228,1.799,4229,1.799,4230,1.654,4231,1.799,4232,1.799,4233,1.799,4234,3.188,4235,3.188,4236,3.188,4237,1.799,4238,4.292,4239,3.188,4240,1.654,4241,1.799,4242,1.799,4243,1.799,4244,1.799,4245,2.932,4246,1.799]],["component/86",[22,0.319]],["keyword/86",[]],["title/87",[1127,73.372]],["name/87",[286,0.558]],["text/87",[5,2.607,22,2.012,25,2.57,42,2.117,43,3.128,45,3.879,52,3.472,55,3.128,130,3.51,131,3.292,138,3.958,179,4.17,189,2.57,222,3.682,297,2.644,301,5.22,406,3.384,446,4.318,471,3.682,582,4.615,789,3.745,1085,4.685,1093,4.673,1098,5.013,1144,2.619,1270,5.787,1334,7.783,1335,6.52,1336,4.549]],["component/87",[22,0.319]],["keyword/87",[]],["title/88-1",[1141,36.563]],["name/88-1",[]],["text/88-1",[]],["component/88-1",[]],["keyword/88-1",[]],["title/88-2",[1125,38.847,1183,35.904,2119,44.337]],["name/88-2",[]],["text/88-2",[]],["component/88-2",[]],["keyword/88-2",[]],["title/88-3",[476,26.827,1398,24.132,1687,29.811,2467,33.913,4247,33.913,4248,37.705]],["name/88-3",[]],["text/88-3",[]],["component/88-3",[]],["keyword/88-3",[]],["title/88-4",[61,28.017,604,24.479,1088,31.69,1207,33.799]],["name/88-4",[]],["text/88-4",[]],["component/88-4",[]],["keyword/88-4",[]],["title/88-5",[188,23.924,523,24.479,838,36.655,1877,36.655]],["name/88-5",[]],["text/88-5",[]],["component/88-5",[]],["keyword/88-5",[]],["title/88-6",[330,31.257,611,26.148,1088,20.852,1207,22.239,1331,23.097,2035,28.114,2675,22.651,4249,33.989]],["name/88-6",[]],["text/88-6",[]],["component/88-6",[]],["keyword/88-6",[]],["title/88-7",[52,18.959,1124,42.129,1125,38.847]],["name/88-7",[]],["text/88-7",[]],["component/88-7",[]],["keyword/88-7",[]],["title/88-8",[22,15.666]],["name/88-8",[]],["text/88-8",[]],["component/88-8",[]],["keyword/88-8",[]],["title/88-9",[1262,46.409]],["name/88-9",[]],["text/88-9",[]],["component/88-9",[]],["keyword/88-9",[]],["title/88-10",[61,22.237,301,28.448,455,23.532,604,19.429,1092,31.541,4250,35.534]],["name/88-10",[]],["text/88-10",[]],["component/88-10",[]],["keyword/88-10",[]],["title/88-11",[565,30.754,4251,60.49]],["name/88-11",[]],["text/88-11",[]],["component/88-11",[]],["keyword/88-11",[]],["title/88-12",[522,33.669,4252,51.456,4253,51.456]],["name/88-12",[]],["text/88-12",[]],["component/88-12",[]],["keyword/88-12",[]],["title/88-13",[455,23.532,522,23.251,1728,26.366,4250,35.534,4252,35.534,4254,37.705]],["name/88-13",[]],["text/88-13",[]],["component/88-13",[]],["keyword/88-13",[]],["title/88-14",[61,20.158,188,17.214,301,25.788,390,16.604,604,17.613,1262,20.375,4185,32.212]],["name/88-14",[]],["text/88-14",[]],["component/88-14",[]],["keyword/88-14",[]],["title/88-15",[301,41.194,803,34.5,888,42.129]],["name/88-15",[]],["text/88-15",[]],["component/88-15",[]],["keyword/88-15",[]],["title/88-16",[1970,55.527,4255,57.73]],["name/88-16",[]],["text/88-16",[]],["component/88-16",[]],["keyword/88-16",[]],["title/88-17",[43,29.017,269,39.123]],["name/88-17",[]],["text/88-17",[]],["component/88-17",[]],["keyword/88-17",[]],["title/88-18",[1383,56.418]],["name/88-18",[]],["text/88-18",[]],["component/88-18",[]],["keyword/88-18",[]],["title/88",[1124,49.526,1125,45.667]],["name/88",[286,0.558]],["text/88",[2,0.332,5,0.196,8,1.093,18,1.219,22,1.041,25,0.193,27,0.421,28,0.235,29,0.799,41,0.794,42,0.684,43,0.838,47,0.541,49,0.472,52,2.041,53,1.102,55,0.838,57,0.519,58,0.347,59,1.807,61,2.935,65,1.236,66,1.236,67,1.05,71,0.657,80,1.785,84,0.27,89,0.732,90,0.519,94,4.369,97,1.618,99,0.648,100,0.835,117,0.292,122,0.976,126,0.738,130,0.264,139,0.888,140,0.664,141,0.687,148,1.47,151,0.422,158,1.588,159,2.357,163,0.363,164,0.686,166,0.411,168,0.401,169,0.303,170,0.37,171,0.376,173,0.842,179,0.313,180,2.197,181,0.363,184,0.435,187,1.905,188,0.933,189,0.193,207,0.716,208,0.384,209,0.306,212,0.249,218,0.794,221,0.328,222,2.421,232,0.31,237,0.401,242,1.088,244,1.242,248,0.376,253,0.687,255,0.49,256,1.708,262,0.711,266,0.732,269,0.317,287,0.449,293,4.253,297,0.199,301,4.435,308,0.87,311,0.303,315,0.583,317,0.724,318,0.401,376,0.676,380,0.363,386,1.024,388,0.738,390,0.9,398,0.279,405,0.889,408,0.363,426,1.071,432,0.279,446,2.378,455,3.106,471,3.44,476,2.082,497,0.313,507,0.352,509,1.421,511,0.347,515,0.376,523,1.152,529,0.266,531,0.97,533,0.32,571,0.676,582,3.578,586,0.568,604,3.109,609,1.392,611,0.435,612,0.433,616,1.784,626,3.932,630,0.401,636,2.794,641,1.983,695,0.616,696,0.332,700,0.687,701,0.313,705,0.999,723,1.143,743,0.328,746,1.745,767,1.359,768,0.392,770,0.249,772,0.31,774,0.392,775,0.616,776,0.337,785,0.73,796,0.609,799,0.384,802,2.002,803,0.631,810,0.753,813,0.303,817,0.515,822,0.941,837,0.602,838,0.401,846,0.376,848,0.724,852,0.724,856,0.392,864,1.206,871,0.49,873,0.303,878,0.303,888,0.771,906,0.755,907,2.114,915,0.721,921,0.337,927,0.492,929,0.337,941,0.449,954,1.008,959,0.357,965,0.771,969,1.485,981,0.401,988,0.631,995,0.328,998,0.347,999,0.289,1022,0.422,1066,0.738,1079,0.332,1084,0.948,1085,0.676,1086,0.342,1088,5.778,1092,6.255,1093,3.671,1099,1.065,1124,5.695,1125,6.121,1133,0.541,1135,1.232,1143,0.577,1144,0.197,1148,0.392,1157,0.879,1159,1.532,1166,0.724,1172,0.449,1177,0.724,1178,1.202,1179,0.687,1180,0.666,1183,1.705,1198,0.435,1199,0.401,1201,0.392,1207,5.512,1216,0.337,1235,0.384,1239,0.37,1245,0.401,1247,0.911,1254,0.422,1255,1.088,1262,4.618,1268,0.411,1279,1.925,1282,0.911,1297,0.811,1307,0.328,1321,0.639,1328,0.753,1329,0.79,1330,0.941,1331,2.611,1333,0.411,1351,0.384,1354,1.431,1358,0.401,1389,0.999,1398,0.332,1400,0.435,1401,0.363,1402,0.898,1405,1.359,1411,0.79,1416,0.687,1423,0.519,1427,0.738,1434,0.337,1438,0.711,1447,0.411,1464,0.49,1466,0.935,1471,0.435,1473,0.771,1490,0.864,1493,0.738,1499,0.422,1522,0.9,1545,0.411,1549,0.435,1583,0.422,1594,0.401,1682,0.467,1703,0.787,1728,1.008,1730,0.811,1759,0.392,1769,0.698,1771,0.449,1774,1.505,1787,0.411,1789,0.376,1821,0.384,1848,1.088,1853,0.384,1854,0.401,1877,0.401,1911,0.771,1956,0.519,1957,0.435,1958,0.392,1959,0.435,1961,1.359,1970,1.603,1972,0.519,1988,0.711,1996,0.401,1997,0.835,2035,0.898,2077,0.811,2098,0.519,2115,0.392,2119,2.869,2123,0.467,2124,0.49,2128,0.519,2133,0.898,2161,2.532,2162,0.411,2180,0.811,2184,1.171,2199,0.435,2200,0.435,2209,0.49,2222,0.467,2244,0.467,2245,1.442,2252,0.422,2254,0.467,2303,0.422,2343,0.449,2423,0.392,2456,0.898,2467,0.898,2498,0.49,2506,0.519,2644,0.999,2675,0.376,2693,0.519,2701,0.422,2707,1.603,2711,0.49,2715,1.465,2721,1.442,2809,1.934,2848,0.898,2937,0.49,2965,0.467,3024,0.771,3261,1.853,3474,0.449,3548,0.467,3552,0.519,3675,0.519,3709,0.519,3713,0.999,3739,0.519,3743,0.49,3807,0.384,3825,2.001,3867,0.999,3945,0.467,4019,0.49,4247,2.332,4250,0.941,4251,0.941,4252,1.747,4253,1.747,4254,1.442,4255,1.297,4256,1.853,4257,0.565,4258,0.565,4259,0.519,4260,0.519,4261,0.999,4262,0.565,4263,0.565,4264,0.565,4265,0.565,4266,0.565,4267,0.565,4268,0.565,4269,0.565,4270,0.941,4271,3.523,4272,0.565,4273,0.565,4274,0.565,4275,0.565,4276,1.568,4277,0.565,4278,1.568,4279,0.565,4280,0.565,4281,0.565,4282,0.565,4283,0.519,4284,0.519,4285,0.565,4286,0.565,4287,0.565,4288,0.565,4289,0.565,4290,0.565,4291,0.519,4292,0.565,4293,0.565,4294,1.568,4295,1.086,4296,1.086,4297,0.565,4298,0.565,4299,1.086,4300,0.999,4301,1.086,4302,0.519,4303,1.086,4304,1.086,4305,0.565,4306,0.565,4307,1.086,4308,1.086,4309,1.086,4310,0.565,4311,0.565,4312,0.565,4313,0.565,4314,0.565,4315,0.565,4316,0.565,4317,0.565,4318,0.565,4319,0.565,4320,0.565,4321,0.565,4322,0.565,4323,0.565,4324,0.565,4325,0.565,4326,0.565,4327,0.565,4328,0.565,4329,0.565,4330,0.565,4331,0.565,4332,0.565,4333,0.519,4334,0.565,4335,0.565,4336,0.519,4337,0.565,4338,0.565,4339,0.565,4340,1.086,4341,0.519,4342,1.568,4343,0.519,4344,1.297,4345,0.519,4346,0.565,4347,0.565,4348,0.565,4349,0.565,4350,1.568,4351,0.565,4352,0.565,4353,0.519,4354,0.565,4355,0.565,4356,0.49,4357,0.565,4358,0.565,4359,0.565,4360,1.086,4361,0.565,4362,0.565,4363,0.565,4364,0.565,4365,0.565,4366,0.565,4367,0.565,4368,1.086,4369,0.565,4370,0.565,4371,0.565,4372,1.086,4373,1.086,4374,0.565,4375,0.565,4376,0.565,4377,0.565,4378,0.49,4379,0.565,4380,1.086,4381,0.49,4382,0.565,4383,1.086,4384,0.565,4385,0.565,4386,0.999]],["component/88",[22,0.319]],["keyword/88",[]],["title/89-1",[1141,36.563]],["name/89-1",[]],["text/89-1",[]],["component/89-1",[]],["keyword/89-1",[]],["title/89-2",[612,33.76]],["name/89-2",[]],["text/89-2",[]],["component/89-2",[]],["keyword/89-2",[]],["title/89-3",[45,27.674,579,27.362]],["name/89-3",[]],["text/89-3",[]],["component/89-3",[]],["keyword/89-3",[]],["title/89",[464,28.318,778,25.716,1100,20.963,1133,25.716]],["name/89",[286,0.558]],["text/89",[4,0.887,5,0.567,9,0.781,10,0.775,22,0.736,25,0.559,26,1.884,27,1.542,29,1.161,42,1.119,43,0.68,45,2.668,48,1.111,52,1.27,53,0.741,55,0.68,59,1.377,63,0.836,73,1.556,84,0.781,94,5.054,107,4.795,113,1.301,117,2.052,132,0.939,135,2.331,140,0.693,155,0.814,164,0.716,177,0.878,180,0.693,183,1.019,187,0.752,189,0.559,193,2.302,198,0.741,212,0.721,234,1.07,244,0.721,247,0.794,270,0.939,271,0.821,292,1.135,297,0.575,308,0.706,379,2.311,419,0.736,438,2.341,442,1.233,464,4.706,491,1.111,523,1.388,531,0.788,565,2.965,569,1.568,574,1.856,579,0.641,601,1.189,609,4.484,612,3.178,626,3.213,641,1.511,701,3.729,755,1.189,778,4.821,779,0.752,787,1.111,805,0.917,853,0.836,868,0.829,906,0.788,910,4.394,911,1.642,927,0.741,961,1.257,983,2.912,995,0.95,1002,0.963,1053,0.917,1067,0.836,1079,0.963,1097,1.019,1100,2.92,1111,0.788,1133,2.774,1144,0.569,1190,0.887,1226,0.907,1337,0.95,1359,1.418,1556,1.301,1582,2.971,1703,1.997,2138,0.963,2153,1.111,2164,1.853,2426,1.258,2712,2.129,2802,1.161,2833,1.99,2960,1.052,3021,1.258,3024,4.774,3039,1.353,3040,1.418,3041,1.353,3053,2.423,3064,2.693,3065,3.657,3066,2.693,3067,3.657,3133,1.418,3178,1.353,3179,1.258,3280,2.693,3281,1.504,3282,2.693,3285,2.693,3286,3.657,3289,5.695,3309,3.657,3363,1.504,3477,2.693,4387,1.636,4388,1.636,4389,1.636,4390,1.636,4391,2.929,4392,2.929,4393,2.929,4394,2.929,4395,2.929,4396,1.636,4397,2.929,4398,2.929,4399,1.636,4400,1.636,4401,1.636,4402,2.929,4403,2.929,4404,4.843,4405,2.929,4406,2.929,4407,1.636,4408,1.636,4409,1.636,4410,1.636,4411,1.636,4412,1.636,4413,1.636,4414,1.636,4415,2.929,4416,1.636,4417,1.636,4418,2.929,4419,1.636,4420,1.636,4421,1.636,4422,1.636,4423,1.636,4424,1.636,4425,1.636,4426,1.636,4427,1.636,4428,2.929,4429,2.929,4430,1.636,4431,1.636,4432,2.929,4433,1.636,4434,2.929,4435,2.929,4436,1.636,4437,1.636,4438,1.636,4439,2.929,4440,3.977,4441,1.636,4442,2.929,4443,2.929,4444,2.929,4445,2.929,4446,2.929,4447,2.929,4448,2.929,4449,1.636,4450,1.636,4451,1.636,4452,1.636,4453,3.977,4454,1.636]],["component/89",[22,0.319]],["keyword/89",[]],["title/90-1",[1141,36.563]],["name/90-1",[]],["text/90-1",[]],["component/90-1",[]],["keyword/90-1",[]],["title/90-2",[57,17.752,164,16.267,579,14.571,637,20.6,915,17.087,1091,23.511,1273,24.769]],["name/90-2",[]],["text/90-2",[]],["component/90-2",[]],["keyword/90-2",[]],["title/90-3",[276,42.129,915,27.294,1091,37.556]],["name/90-3",[]],["text/90-3",[]],["component/90-3",[]],["keyword/90-3",[]],["title/90-4",[637,32.906,915,27.294,2125,45.674]],["name/90-4",[]],["text/90-4",[]],["component/90-4",[]],["keyword/90-4",[]],["title/90-5",[164,20.008,409,25.338,579,17.922,637,25.338,915,21.017]],["name/90-5",[]],["text/90-5",[]],["component/90-5",[]],["keyword/90-5",[]],["title/90-6",[22,9.559,637,28.63,915,23.748,1091,32.676]],["name/90-6",[]],["text/90-6",[]],["component/90-6",[]],["keyword/90-6",[]],["title/90-7",[94,13.554,627,22.651,637,18.838,915,15.626,1091,21.501,1339,23.097,4455,28.114,4456,31.257]],["name/90-7",[]],["text/90-7",[]],["component/90-7",[]],["keyword/90-7",[]],["title/90-8",[502,29.811,853,20.964,1194,25.936,1257,32.619,2650,35.534,4457,33.913]],["name/90-8",[]],["text/90-8",[]],["component/90-8",[]],["keyword/90-8",[]],["title/90-9",[46,28.818,47,29.556,157,33.669]],["name/90-9",[]],["text/90-9",[]],["component/90-9",[]],["keyword/90-9",[]],["title/90",[52,13.093,158,16.942,637,22.724,915,18.849,1091,25.936,1339,27.861]],["name/90",[286,0.558]],["text/90",[5,0.287,8,1.814,10,0.74,22,0.866,24,0.427,25,0.283,27,0.321,29,1.114,35,0.602,41,0.792,42,0.791,43,0.65,45,1.695,49,1.222,52,3.043,53,1.006,55,0.65,57,0.395,58,0.958,64,0.487,66,0.958,68,0.435,71,0.945,74,0.481,77,0.412,80,2.166,84,0.395,89,0.729,94,4.762,97,1.274,101,1.324,112,2.206,116,0.541,136,1.259,142,0.419,148,1.342,160,0.427,161,1.062,164,2.049,167,0.405,170,0.541,173,1.796,180,1.417,181,0.532,182,0.44,189,0.283,193,0.917,195,0.908,212,0.688,218,0.419,222,0.405,230,0.402,232,0.856,237,1.109,247,0.402,250,0.618,260,0.416,263,1.136,264,0.684,266,1.036,270,0.897,276,1.109,279,1.839,288,1.243,297,0.291,308,1.445,315,0.839,374,1.259,379,1.29,380,1.005,383,0.386,386,0.348,387,0.856,390,1.712,399,1.036,402,0.532,403,0.618,405,0.886,406,0.703,408,0.532,409,1.23,418,1.243,423,0.587,429,0.761,442,0.934,455,0.475,471,1.086,472,0.481,475,0.908,478,0.362,484,0.574,485,0.973,486,0.945,502,3.108,509,1.724,510,0.475,511,1.362,522,0.469,529,1.044,574,0.386,579,1.502,586,0.566,589,0.541,594,0.454,621,0.475,627,0.551,637,2.801,666,0.454,695,0.886,696,0.487,701,0.459,743,0.908,746,0.856,762,0.574,770,1.238,772,0.454,776,2.285,777,0.778,779,0.38,781,1.54,785,1.211,790,0.693,799,0.562,804,0.562,805,0.464,807,0.515,808,1.041,813,0.444,817,0.74,842,0.958,843,0.574,852,0.551,865,0.449,866,0.792,878,1.509,884,0.523,885,0.541,906,0.398,907,0.746,911,0.464,915,2.765,927,1.736,929,0.932,946,1.292,966,0.618,968,0.92,969,0.729,972,0.523,977,0.637,982,2.899,995,1.633,996,0.523,1012,0.602,1052,0.562,1080,0.435,1086,0.5,1091,4.816,1093,2.236,1111,0.752,1114,0.469,1135,1.125,1142,0.602,1143,1.777,1144,0.288,1145,0.459,1147,0.508,1156,0.637,1159,0.752,1163,0.658,1168,0.637,1180,0.508,1182,0.574,1183,0.945,1185,0.637,1188,0.932,1194,1.404,1201,0.574,1205,0.574,1207,0.541,1216,0.494,1217,0.5,1219,0.435,1235,1.062,1239,1.022,1240,0.602,1247,0.481,1248,0.541,1250,1.594,1252,0.618,1256,2.767,1257,6.578,1258,1.836,1259,2.661,1260,0.562,1261,0.574,1264,0.541,1269,0.459,1273,2.553,1274,1.084,1279,0.945,1283,0.551,1301,1.575,1303,0.587,1307,0.481,1311,1.136,1314,0.658,1339,2.273,1371,0.658,1390,0.761,1402,0.684,1411,0.602,1427,0.562,1440,1.084,1442,1.062,1445,0.637,1448,1.041,1461,1.508,1464,0.717,1466,0.494,1488,0.637,1491,0.717,1493,1.062,1498,1.292,1500,0.658,1503,0.717,1522,0.897,1523,0.658,1545,0.602,1556,2.236,1625,1.202,1664,1.839,1684,0.684,1776,0.602,1814,0.618,1842,0.618,1848,1.084,1854,1.109,1870,1.306,1872,0.658,1885,0.5,1907,1.437,1911,1.575,1915,0.602,1963,0.658,2115,0.574,2116,1.202,2125,0.637,2153,2.603,2162,0.602,2169,2.767,2172,1.354,2180,2.099,2184,0.618,2198,0.684,2212,0.684,2244,0.684,2287,1.136,2303,1.658,2318,0.684,2397,1.766,2634,1.437,2643,0.717,2646,2.585,2650,0.717,2675,0.551,2688,0.684,2694,0.637,2701,0.618,2702,0.761,2707,1.243,2712,1.136,2803,0.761,2804,2.041,2816,0.761,2877,0.637,2902,0.717,2925,1.354,2927,0.684,2945,0.602,3244,1.354,3256,1.243,3259,1.437,3474,0.658,3548,0.684,3725,0.717,3920,0.717,3952,0.761,4202,0.761,4333,1.437,4343,0.761,4381,0.717,4455,4.73,4456,2.041,4457,0.684,4458,1.562,4459,1.562,4460,0.827,4461,0.827,4462,0.827,4463,0.761,4464,0.827,4465,0.827,4466,0.761,4467,0.761,4468,0.761,4469,0.827,4470,2.22,4471,0.827,4472,0.827,4473,0.827,4474,2.22,4475,0.761,4476,0.827,4477,1.562,4478,1.562,4479,1.562,4480,0.827,4481,3.345,4482,1.562,4483,1.562,4484,1.562,4485,0.827,4486,1.562,4487,1.562,4488,0.827,4489,0.827,4490,0.827,4491,1.562,4492,0.827,4493,1.562,4494,0.827,4495,1.562,4496,0.827,4497,10.803,4498,0.827,4499,1.562,4500,1.562,4501,2.22,4502,4.681,4503,0.827,4504,0.827,4505,1.562,4506,1.562,4507,1.562,4508,0.827,4509,0.827,4510,0.827,4511,2.811,4512,0.761,4513,0.827,4514,0.827,4515,4.648,4516,0.827,4517,1.562,4518,2.811,4519,1.562,4520,0.827,4521,2.811,4522,0.827,4523,2.811,4524,0.827,4525,1.562,4526,0.827,4527,0.827,4528,0.827,4529,0.827,4530,1.562,4531,0.717,4532,0.827,4533,0.827,4534,0.827,4535,0.827,4536,0.827,4537,0.827,4538,1.562,4539,0.827,4540,0.827,4541,1.562,4542,0.827,4543,0.827,4544,0.827,4545,0.827,4546,0.827,4547,0.827,4548,0.827,4549,0.827,4550,1.437,4551,1.354,4552,0.827,4553,1.562,4554,0.827,4555,0.827,4556,0.684,4557,0.827,4558,0.761,4559,0.761,4560,0.827,4561,0.827,4562,0.761,4563,0.761]],["component/90",[22,0.319]],["keyword/90",[]],["title/91-1",[1141,36.563]],["name/91-1",[]],["text/91-1",[]],["component/91-1",[]],["keyword/91-1",[]],["title/91-2",[45,18.126,409,25.338,579,17.922,637,25.338,915,21.017]],["name/91-2",[]],["text/91-2",[]],["component/91-2",[]],["keyword/91-2",[]],["title/91-3",[164,20.008,193,18.89,409,25.338,529,21.496,1091,28.918]],["name/91-3",[]],["text/91-3",[]],["component/91-3",[]],["keyword/91-3",[]],["title/91-4",[22,8.46,409,25.338,637,25.338,915,21.017,1090,37.813]],["name/91-4",[]],["text/91-4",[]],["component/91-4",[]],["keyword/91-4",[]],["title/91-5",[185,36.972,390,26.524,4455,49.108]],["name/91-5",[]],["text/91-5",[]],["component/91-5",[]],["keyword/91-5",[]],["title/91-6",[58,42.817,1274,48.427]],["name/91-6",[]],["text/91-6",[]],["component/91-6",[]],["keyword/91-6",[]],["title/91-7",[46,28.818,47,29.556,157,33.669]],["name/91-7",[]],["text/91-7",[]],["component/91-7",[]],["keyword/91-7",[]],["title/91",[52,8.638,131,11.839,409,14.993,637,14.993,801,17.111,807,16.845,853,13.831,915,12.436,927,12.257,1090,22.375,2712,19.668]],["name/91",[286,0.558]],["text/91",[5,0.329,8,2.309,9,0.85,20,0.874,22,1.025,23,0.71,24,0.491,25,0.325,26,0.844,28,0.74,29,2.197,41,0.902,42,0.706,45,2.043,51,2.296,52,2.649,53,0.807,55,0.74,56,0.491,58,0.583,61,2.563,63,0.486,65,0.583,68,0.936,74,0.552,80,0.482,81,0.477,83,1.416,84,0.85,94,4.296,97,0.546,112,1.917,122,0.592,131,0.416,140,1.583,148,1.91,155,0.473,158,0.736,160,0.919,163,0.611,164,2.255,169,1.347,173,0.51,177,0.51,180,1.583,183,0.592,189,0.325,190,0.622,193,0.736,199,0.601,206,2.327,207,0.434,212,1.646,222,1.546,228,0.646,232,0.521,253,0.601,256,2.537,266,0.831,275,0.731,279,1.165,280,0.824,289,0.559,290,0.622,297,0.334,302,0.592,315,0.51,372,0.646,374,1.009,383,0.444,385,0.601,387,0.521,390,0.795,398,0.469,399,0.444,405,0.539,406,1.421,408,0.611,409,2.619,419,0.428,442,1.329,446,1.441,464,2.048,467,1.369,473,1.108,475,0.552,478,1.382,485,1.563,486,1.518,505,0.583,508,0.533,509,1.013,511,1.092,518,0.936,529,0.447,565,2.27,571,2.943,574,0.444,579,1.669,591,0.674,594,0.976,609,2.333,612,0.379,616,0.601,620,0.874,621,1.022,626,1.199,630,1.263,637,3.617,640,0.824,641,0.491,697,0.756,701,1.391,707,4.155,742,0.567,746,0.521,759,1.781,762,0.66,770,0.419,772,0.521,775,0.539,776,1.062,777,0.473,778,4.496,779,0.437,784,1.459,785,1.541,786,0.4,789,1.572,790,2.286,795,0.874,796,0.533,799,0.646,801,0.601,802,2.218,803,0.552,807,5.268,811,3.436,812,0.894,815,2.327,816,0.633,817,0.844,827,1.186,830,2.176,832,0.633,833,0.691,834,0.731,837,0.987,838,3.02,849,0.66,851,0.71,852,0.633,853,0.91,855,0.674,857,0.575,865,0.965,866,0.902,875,0.583,878,0.51,885,1.165,890,1.165,906,0.458,907,1.785,909,0.611,915,2.711,927,2.511,935,0.786,952,1.165,967,0.674,968,0.559,969,0.831,971,0.756,972,0.601,980,0.691,995,0.552,1011,0.674,1080,0.936,1081,1.376,1091,4.128,1103,0.546,1117,1.076,1119,0.486,1121,0.611,1139,0.567,1143,0.946,1144,0.331,1145,0.987,1152,0.575,1188,1.062,1194,0.601,1216,0.567,1217,1.076,1222,0.756,1231,0.646,1248,1.165,1256,1.472,1257,5.62,1258,2.612,1259,0.756,1261,0.66,1263,0.633,1274,3.575,1280,0.575,1283,0.633,1293,1.294,1311,1.294,1321,0.559,1329,0.691,1336,0.575,1339,0.646,1354,0.559,1364,1.369,1393,1.294,1411,0.691,1434,1.062,1442,0.646,1456,1.825,1459,0.71,1466,0.567,1470,0.66,1473,1.263,1482,0.646,1488,0.731,1493,1.21,1523,0.756,1549,0.731,1560,1.472,1659,0.731,1664,1.165,1703,0.894,1728,0.611,1765,0.66,1769,0.611,1771,0.756,1776,0.691,1787,0.691,1796,2.892,1814,0.71,1853,0.646,1854,1.263,1885,1.076,1903,0.824,1910,0.731,1911,2.241,1958,0.66,1996,1.781,2115,1.742,2138,1.048,2162,0.691,2164,1.998,2180,0.71,2185,3.436,2191,1.543,2192,2.176,2199,0.731,2200,0.731,2222,0.786,2287,0.691,2307,0.731,2397,0.756,2414,0.874,2643,0.824,2707,1.416,2711,0.824,2715,1.294,2781,0.874,2794,0.874,2811,0.786,2931,0.786,2937,0.824,2941,2.176,2955,0.786,2974,2.176,2975,1.126,3187,3.179,3196,3.909,3230,0.756,3256,0.756,3362,0.824,3474,0.756,3825,1.263,3986,0.874,4283,1.637,4302,0.874,4381,0.824,4455,2.612,4463,0.874,4466,1.637,4467,0.874,4468,0.874,4512,1.637,4515,1.637,4562,0.874,4564,2.612,4565,0.95,4566,3.158,4567,0.95,4568,0.874,4569,0.95,4570,0.95,4571,1.78,4572,1.637,4573,2.51,4574,1.78,4575,0.95,4576,1.78,4577,0.95,4578,1.637,4579,3.158,4580,2.51,4581,1.78,4582,1.78,4583,1.637,4584,0.95,4585,0.95,4586,0.95,4587,1.78,4588,0.95,4589,1.78,4590,1.78,4591,0.95,4592,1.78,4593,0.95,4594,0.95,4595,0.95,4596,0.95,4597,0.874,4598,0.874,4599,0.95,4600,0.95,4601,0.824,4602,1.329,4603,0.95,4604,0.824,4605,0.95,4606,0.95,4607,0.95,4608,1.78,4609,0.95,4610,0.95,4611,0.95,4612,0.95,4613,0.874,4614,0.874,4615,0.874,4616,0.95,4617,1.78,4618,0.95,4619,0.824,4620,0.95,4621,0.95,4622,0.824,4623,0.95,4624,0.95,4625,0.95,4626,0.95,4627,0.786]],["component/91",[22,0.319]],["keyword/91",[]],["title/92-1",[1141,36.563]],["name/92-1",[]],["text/92-1",[]],["component/92-1",[]],["keyword/92-1",[]],["title/92-2",[428,47.428,579,27.362]],["name/92-2",[]],["text/92-2",[]],["component/92-2",[]],["keyword/92-2",[]],["title/92-3",[22,12.915,428,47.428]],["name/92-3",[]],["text/92-3",[]],["component/92-3",[]],["keyword/92-3",[]],["title/92-4",[78,37.084,164,30.547]],["name/92-4",[]],["text/92-4",[]],["component/92-4",[]],["keyword/92-4",[]],["title/92-5",[506,42.817,802,36.363]],["name/92-5",[]],["text/92-5",[]],["component/92-5",[]],["keyword/92-5",[]],["title/92-6",[46,28.818,47,29.556,157,33.669]],["name/92-6",[]],["text/92-6",[]],["component/92-6",[]],["keyword/92-6",[]],["title/92",[42,14.533,158,21.344,428,35.102,579,20.251]],["name/92",[286,0.558]],["text/92",[5,0.605,8,2.756,9,1.483,22,1.293,24,2.164,25,0.597,27,1.97,28,0.726,29,2.015,42,1.18,43,0.726,44,1.332,45,0.693,52,1.86,53,0.791,55,0.726,59,0.821,61,1.684,65,2.572,67,1.618,68,1.634,73,0.928,77,0.87,78,3.713,80,0.885,89,0.815,94,0.697,105,1.304,109,1.52,118,0.885,122,1.934,129,1.123,135,0.731,138,0.919,155,1.546,158,1.283,159,3.119,162,1.143,164,2.224,167,0.855,169,0.938,170,1.143,180,1.776,189,0.597,198,0.791,206,1.088,207,0.797,209,0.947,212,0.77,215,1.964,221,3.384,232,0.958,234,1.143,244,0.77,247,2.035,248,1.164,253,1.105,256,0.938,259,1.239,260,0.877,266,0.815,279,1.143,281,1.852,297,0.614,308,0.754,374,1.761,379,1.015,380,1.997,382,1.105,385,1.964,386,1.765,387,0.958,396,0.919,398,1.533,399,1.449,405,3.658,420,3.387,426,3.713,428,6.942,432,2.069,442,1.765,450,1.606,471,0.855,472,1.015,478,0.764,505,2.572,508,2.35,509,2.35,522,0.991,523,0.828,569,1.224,574,1.449,578,1.344,579,3.083,586,1.124,605,2.378,606,2.501,625,1.164,626,0.834,636,1.27,680,2.856,743,1.015,746,0.958,765,1.445,768,1.212,786,0.735,803,1.015,807,4.642,812,2.106,813,0.938,817,1.472,842,1.905,843,2.909,845,1.212,849,1.212,860,1.042,861,1.39,865,0.947,866,0.885,874,1.304,885,1.143,890,1.143,899,1.105,906,0.841,907,1.483,909,1.997,915,0.803,921,1.042,936,3.159,950,1.187,952,1.143,960,1.123,961,0.749,965,2.975,980,1.27,981,1.239,996,1.964,1044,3.228,1084,1.056,1087,1.105,1093,0.834,1111,1.495,1113,1.056,1114,0.991,1133,1.546,1144,1.081,1146,1.445,1147,1.072,1148,1.212,1149,1.514,1150,1.514,1151,1.514,1152,1.056,1153,1.39,1154,1.39,1159,0.841,1166,1.164,1173,1.056,1192,1.39,1200,0.991,1211,1.344,1240,1.27,1252,1.304,1260,1.187,1282,1.015,1300,1.212,1321,1.028,1336,1.878,1408,1.072,1435,1.39,1467,1.445,1480,1.39,1495,1.39,1541,1.088,1765,1.212,1821,1.187,1885,1.056,1997,1.344,2006,1.606,2011,1.445,2116,1.344,2155,1.344,2295,1.514,2296,1.514,2380,1.445,2955,1.445,2960,1.123,2975,1.105,3184,1.606,3254,4.674,3387,1.606,3748,4.817,3945,1.445,4578,1.606,4628,1.747,4629,1.747,4630,3.105,4631,3.105,4632,1.747,4633,1.747,4634,1.514,4635,1.747,4636,1.747,4637,1.747,4638,1.606,4639,1.747,4640,1.747,4641,1.514,4642,1.606,4643,1.747,4644,3.105,4645,1.514,4646,1.606,4647,1.747,4648,1.747,4649,1.747,4650,1.747,4651,1.747,4652,1.514,4653,1.747,4654,1.606,4655,1.747,4656,2.691,4657,1.747,4658,1.747,4659,1.39,4660,1.747,4661,1.747,4662,1.606,4663,1.747,4664,1.747,4665,1.747,4666,1.747,4667,1.747,4668,1.747,4669,1.747,4670,1.747,4671,1.747,4672,1.747,4673,1.747,4674,1.747,4675,1.747,4676,1.747,4677,1.747,4678,1.747,4679,1.747,4680,1.747,4681,1.747,4682,1.606,4683,1.747,4684,1.747,4685,1.747,4686,1.747,4687,1.747,4688,1.747,4689,1.747,4690,1.747,4691,1.747,4692,1.606,4693,1.747,4694,1.747,4695,1.445]],["component/92",[22,0.319]],["keyword/92",[]],["title/93-1",[1141,36.563]],["name/93-1",[]],["text/93-1",[]],["component/93-1",[]],["keyword/93-1",[]],["title/93-2",[53,18.577,81,20.59,1093,19.583,1263,27.323,1473,29.093,2927,33.913]],["name/93-2",[]],["text/93-2",[]],["component/93-2",[]],["keyword/93-2",[]],["title/93-3",[81,14.577,112,9.433,131,12.704,785,10.51,801,18.361,1093,13.863,1263,19.343,1853,19.724,4564,24.009,4696,29.025]],["name/93-3",[]],["text/93-3",[]],["component/93-3",[]],["keyword/93-3",[]],["title/93-4",[81,13.585,167,13.239,430,15.525,470,18.382,509,10.913,627,18.027,781,18.769,1093,12.92,1263,18.027,4564,22.375,4697,27.05]],["name/93-4",[]],["text/93-4",[]],["component/93-4",[]],["keyword/93-4",[]],["title/93-5",[52,13.093,471,20.067,523,19.429,593,37.705,1262,22.476,1500,32.619]],["name/93-5",[]],["text/93-5",[]],["component/93-5",[]],["keyword/93-5",[]],["title/93-6",[1262,38.261,4698,64.185]],["name/93-6",[]],["text/93-6",[]],["component/93-6",[]],["keyword/93-6",[]],["title/93-7",[93,37.556,786,24.992,4699,59.37]],["name/93-7",[]],["text/93-7",[]],["component/93-7",[]],["keyword/93-7",[]],["title/93-8",[22,15.666]],["name/93-8",[]],["text/93-8",[]],["component/93-8",[]],["keyword/93-8",[]],["title/93-9",[553,42.515]],["name/93-9",[]],["text/93-9",[]],["component/93-9",[]],["keyword/93-9",[]],["title/93-10",[46,28.818,47,29.556,157,33.669]],["name/93-10",[]],["text/93-10",[]],["component/93-10",[]],["keyword/93-10",[]],["title/93",[52,14.599,509,18.444,1092,35.169,1093,21.835,4700,42.041]],["name/93",[286,0.558]],["text/93",[2,0.744,5,0.438,7,0.944,8,3.111,18,0.764,19,0.919,22,0.967,25,0.432,34,0.972,42,1.306,49,2.692,52,1.668,53,0.573,55,0.964,56,0.652,57,0.604,59,0.594,60,0.734,65,0.775,68,0.665,71,0.764,76,0.944,80,1.175,81,1.164,89,1.082,94,3.879,97,1.331,99,1.915,101,0.754,112,1.293,131,0.553,136,1.315,151,0.944,158,0.522,159,0.879,163,0.813,164,0.553,167,0.619,169,0.678,170,0.827,172,2.18,173,1.724,179,0.701,185,0.787,189,0.432,191,0.787,193,2.158,198,0.573,207,1.466,212,0.557,215,0.8,218,0.64,222,3.722,232,1.271,244,1.022,248,0.842,253,0.8,263,1.686,264,1.045,266,1.082,285,0.734,293,1.466,297,0.444,308,1.718,311,0.678,314,0.787,316,0.919,372,0.859,377,0.665,386,0.532,387,0.693,390,1.435,397,1.185,399,0.59,405,0.717,426,0.672,430,0.725,432,2.831,446,1.331,449,0.754,455,0.725,464,0.693,470,0.859,471,1.947,505,0.775,508,0.708,509,2.663,511,0.775,517,1.731,522,1.821,523,2.475,529,1.09,531,1.116,533,1.315,566,0.725,579,0.495,586,0.458,606,0.754,609,3.057,612,0.924,621,0.725,626,2.495,627,0.842,641,1.196,695,0.717,707,0.678,746,0.693,763,0.744,766,0.827,770,0.557,774,0.877,775,2.255,776,3.421,777,0.629,778,2.856,781,0.877,785,2.754,786,3.074,789,3.635,790,4.423,796,0.708,801,0.8,807,0.787,813,0.678,815,0.787,831,0.877,837,2.204,852,0.842,853,0.646,855,0.897,857,0.764,862,0.813,869,1.006,879,0.842,889,0.787,915,0.581,921,1.383,935,1.045,948,0.64,954,0.813,961,0.995,966,0.944,969,1.082,989,2.182,996,1.466,999,1.185,1011,2.822,1085,3.253,1092,3.06,1093,5.001,1109,0.693,1117,3.159,1125,3.753,1131,1.545,1144,0.44,1145,0.701,1159,0.609,1168,1.783,1178,1.915,1180,0.775,1183,1.402,1213,0.787,1247,0.734,1250,0.717,1255,2.228,1262,5.74,1263,2.65,1264,1.517,1282,3.035,1283,0.842,1307,1.866,1314,1.006,1321,0.744,1328,0.877,1333,0.919,1342,0.842,1354,1.89,1398,0.744,1409,1.006,1411,0.919,1434,1.383,1440,0.877,1452,2.132,1461,4.208,1493,1.575,1654,0.754,1703,0.635,1766,2.656,1773,4.745,1853,0.859,1870,0.744,1905,0.972,1958,0.877,2155,0.972,2162,0.919,2184,2.398,2210,1.006,2266,1.162,2272,0.972,2303,1.731,2307,1.783,2318,1.045,2423,0.877,2456,1.045,2463,0.944,2478,1.162,2498,2.009,2675,0.842,2688,1.045,2701,0.944,2707,1.844,2712,2.335,2715,0.919,2723,1.162,2724,1.162,2809,1.006,2927,1.045,3346,1.609,3807,0.859,3825,2.822,3846,1.095,4201,1.162,4240,1.162,4247,1.045,4261,1.162,4344,1.045,4558,1.162,4564,2.656,4568,1.162,4598,1.162,4698,4.268,4700,1.162,4701,1.264,4702,1.162,4703,2.318,4704,3.211,4705,3.211,4706,1.264,4707,1.264,4708,1.264,4709,1.264,4710,1.095,4711,1.006,4712,1.264,4713,1.264,4714,1.162,4715,1.264,4716,1.264,4717,1.162,4718,1.264,4719,1.264,4720,1.162,4721,1.264,4722,1.264,4723,2.132,4724,1.162,4725,1.264,4726,1.686,4727,1.264,4728,1.264,4729,1.264,4730,1.162,4731,1.264,4732,1.264,4733,1.095,4734,1.264,4735,1.264,4736,1.264]],["component/93",[22,0.319]],["keyword/93",[]],["title/94-1",[1141,36.563]],["name/94-1",[]],["text/94-1",[]],["component/94-1",[]],["keyword/94-1",[]],["title/94-2",[90,28.357,586,21.497,1155,47.234]],["name/94-2",[]],["text/94-2",[]],["component/94-2",[]],["keyword/94-2",[]],["title/94-3",[455,34.075,463,35.412,1084,35.904]],["name/94-3",[]],["text/94-3",[]],["component/94-3",[]],["keyword/94-3",[]],["title/94-4",[1471,53.693,2318,57.73]],["name/94-4",[]],["text/94-4",[]],["component/94-4",[]],["keyword/94-4",[]],["title/94-5",[497,38.684,1427,47.428]],["name/94-5",[]],["text/94-5",[]],["component/94-5",[]],["keyword/94-5",[]],["title/94-6",[90,24.672,515,34.424,586,18.703,1759,35.841]],["name/94-6",[]],["text/94-6",[]],["component/94-6",[]],["keyword/94-6",[]],["title/94-7",[90,28.357,456,36.972,1759,41.194]],["name/94-7",[]],["text/94-7",[]],["component/94-7",[]],["keyword/94-7",[]],["title/94-8",[49,30.343,780,52.121]],["name/94-8",[]],["text/94-8",[]],["component/94-8",[]],["keyword/94-8",[]],["title/94-9",[506,42.817,802,36.363]],["name/94-9",[]],["text/94-9",[]],["component/94-9",[]],["keyword/94-9",[]],["title/94-10",[46,28.818,47,29.556,157,33.669]],["name/94-10",[]],["text/94-10",[]],["component/94-10",[]],["keyword/94-10",[]],["title/94",[44,17.593,90,19.583,455,23.532,463,24.455,586,14.845,1084,24.794]],["name/94",[286,0.558]],["text/94",[4,2.949,5,0.32,9,0.441,18,1.047,22,1.373,25,0.315,26,0.438,27,0.672,29,0.366,36,1.229,37,0.735,42,1.027,44,0.396,46,0.841,48,0.627,49,2.518,52,2.765,53,1.397,55,0.72,56,0.476,59,0.434,61,0.939,63,0.472,64,1.44,71,0.558,80,0.878,81,0.464,84,0.441,89,0.431,90,5.387,93,0.584,94,1.229,101,1.033,118,0.468,122,0.575,127,0.491,129,1.114,130,0.431,131,0.758,132,1.769,135,1.289,136,0.524,139,1.078,140,1.764,142,0.878,147,1.154,152,0.501,158,1.509,167,0.452,170,0.604,180,0.734,182,0.491,187,3.198,188,1.428,189,0.315,190,0.604,193,1.721,198,0.418,207,0.791,212,1.835,222,0.452,228,0.627,232,0.506,234,0.604,244,0.407,256,0.93,260,0.87,266,0.431,273,0.512,276,1.229,279,0.604,281,0.551,284,1.007,289,0.543,290,0.604,293,2.31,295,0.575,297,0.325,308,1.799,311,0.496,314,0.575,315,0.93,317,0.615,318,1.229,374,0.524,377,0.486,378,0.735,382,0.584,383,0.808,386,1.949,387,1.341,388,0.627,390,0.774,399,0.808,401,0.982,405,0.524,406,2.752,408,1.114,430,1.404,432,2.285,438,0.543,442,0.729,452,1.433,455,4.13,456,5.918,463,1.839,472,0.536,474,0.735,476,0.604,497,4.113,509,0.699,510,1.404,515,2.054,517,0.689,522,0.982,523,1.461,529,0.814,531,0.834,553,0.87,566,0.53,569,1.992,574,0.431,576,0.641,586,4.084,591,0.655,594,0.506,604,0.438,610,2.955,616,0.584,618,0.849,621,0.994,641,0.476,695,0.524,696,0.543,700,0.584,723,0.524,725,0.518,742,0.551,768,0.641,770,0.763,777,1.218,779,1.125,780,0.689,785,1.676,786,1.537,791,0.849,796,2.334,799,0.627,801,1.096,804,0.627,805,0.518,812,1.834,842,0.566,844,0.627,851,0.689,853,1.251,855,1.229,857,0.558,865,1.327,868,2.934,870,0.566,878,0.496,879,0.615,900,0.655,906,3.09,907,0.441,915,0.424,928,0.575,929,0.551,932,0.641,936,3.318,938,0.558,944,0.481,948,0.468,960,0.594,961,1.567,963,2.25,964,1.047,965,0.655,966,0.689,969,0.431,976,0.627,989,0.627,1010,0.71,1038,0.849,1047,1.117,1067,0.472,1084,3.881,1089,0.655,1113,0.558,1133,1.218,1135,0.878,1142,0.671,1143,0.491,1144,0.603,1155,5.106,1156,2.371,1157,3.597,1158,0.627,1159,1.484,1161,0.971,1173,1.48,1178,2.484,1179,1.096,1180,0.566,1188,0.551,1190,0.501,1204,0.671,1205,2.89,1213,0.575,1217,0.558,1219,1.622,1221,1.177,1224,0.671,1235,1.177,1251,0.655,1262,0.95,1264,0.604,1267,0.558,1281,0.764,1293,0.671,1295,1.378,1307,1.007,1340,1.202,1342,1.154,1351,0.627,1353,0.641,1399,0.594,1403,1.294,1408,0.566,1416,0.584,1427,3.433,1434,0.551,1456,0.671,1457,0.615,1461,0.627,1468,2.655,1470,0.641,1471,1.332,1482,1.177,1510,0.735,1541,0.575,1645,0.689,1654,1.033,1674,1.332,1759,5.433,1765,0.641,1813,1.177,1870,1.019,1872,0.735,1885,0.558,1906,0.8,1910,0.71,1963,0.735,1988,0.604,1996,0.655,2170,0.764,2175,0.575,2272,1.332,2297,1.593,2507,0.764,2571,0.735,2640,1.946,2649,0.8,2694,0.71,2877,0.71,2929,0.849,2965,0.764,2976,0.849,2983,1.501,3002,1.779,3224,0.849,3225,0.8,3264,1.593,3350,2.12,3848,0.8,3855,1.593,4597,0.849,4726,1.259,4737,0.923,4738,0.923,4739,0.923,4740,0.923,4741,0.849,4742,0.923,4743,0.923,4744,0.923,4745,0.735,4746,0.923,4747,0.923,4748,0.71,4749,0.923,4750,0.923,4751,0.923,4752,0.923,4753,0.923,4754,0.849,4755,3.082,4756,1.501,4757,3.652,4758,0.923,4759,3.082,4760,0.923,4761,2.447,4762,0.923,4763,0.923,4764,0.8,4765,0.923,4766,0.923,4767,0.923,4768,0.923,4769,0.923,4770,0.849,4771,0.923,4772,0.923,4773,0.923,4774,0.923,4775,0.923,4776,0.923,4777,0.8,4778,0.8,4779,0.849]],["component/94",[22,0.319]],["keyword/94",[]],["title/95-1",[1141,36.563]],["name/95-1",[]],["text/95-1",[]],["component/95-1",[]],["keyword/95-1",[]],["title/95-2",[763,49.829]],["name/95-2",[]],["text/95-2",[]],["component/95-2",[]],["keyword/95-2",[]],["title/95-3",[565,30.754,1080,36.717]],["name/95-3",[]],["text/95-3",[]],["component/95-3",[]],["keyword/95-3",[]],["title/95-4",[371,51.936]],["name/95-4",[]],["text/95-4",[]],["component/95-4",[]],["keyword/95-4",[]],["title/95-5",[42,14.533,112,16.787,565,22.761,1080,27.175]],["name/95-5",[]],["text/95-5",[]],["component/95-5",[]],["keyword/95-5",[]],["title/95-6",[41,35.364,787,47.428]],["name/95-6",[]],["text/95-6",[]],["component/95-6",[]],["keyword/95-6",[]],["title/95-7",[41,35.364,1101,37.084]],["name/95-7",[]],["text/95-7",[]],["component/95-7",[]],["keyword/95-7",[]],["title/95-8",[473,43.464,1354,41.08]],["name/95-8",[]],["text/95-8",[]],["component/95-8",[]],["keyword/95-8",[]],["title/95-9",[42,19.637,43,29.017]],["name/95-9",[]],["text/95-9",[]],["component/95-9",[]],["keyword/95-9",[]],["title/95-10",[1161,47.455]],["name/95-10",[]],["text/95-10",[]],["component/95-10",[]],["keyword/95-10",[]],["title/95-11",[22,12.915,1141,30.144]],["name/95-11",[]],["text/95-11",[]],["component/95-11",[]],["keyword/95-11",[]],["title/95-12",[371,51.936]],["name/95-12",[]],["text/95-12",[]],["component/95-12",[]],["keyword/95-12",[]],["title/95-13",[398,41.785]],["name/95-13",[]],["text/95-13",[]],["component/95-13",[]],["keyword/95-13",[]],["title/95-14",[594,38.261,1080,36.717]],["name/95-14",[]],["text/95-14",[]],["component/95-14",[]],["keyword/95-14",[]],["title/95-15",[371,51.936]],["name/95-15",[]],["text/95-15",[]],["component/95-15",[]],["keyword/95-15",[]],["title/95-16",[49,36.806]],["name/95-16",[]],["text/95-16",[]],["component/95-16",[]],["keyword/95-16",[]],["title/95-17",[569,27.517,1047,31.853]],["name/95-17",[]],["text/95-17",[]],["component/95-17",[]],["keyword/95-17",[]],["title/95-18",[371,51.936]],["name/95-18",[]],["text/95-18",[]],["component/95-18",[]],["keyword/95-18",[]],["title/95-19",[139,30.754,586,25.271]],["name/95-19",[]],["text/95-19",[]],["component/95-19",[]],["keyword/95-19",[]],["title/95-20",[49,36.806]],["name/95-20",[]],["text/95-20",[]],["component/95-20",[]],["keyword/95-20",[]],["title/95-21",[569,23.407,1047,27.096,1100,24.094]],["name/95-21",[]],["text/95-21",[]],["component/95-21",[]],["keyword/95-21",[]],["title/95-22",[371,51.936]],["name/95-22",[]],["text/95-22",[]],["component/95-22",[]],["keyword/95-22",[]],["title/95-23",[49,36.806]],["name/95-23",[]],["text/95-23",[]],["component/95-23",[]],["keyword/95-23",[]],["title/95-24",[569,20.366,723,29.294,983,24.29,1047,23.575]],["name/95-24",[]],["text/95-24",[]],["component/95-24",[]],["keyword/95-24",[]],["title/95-25",[371,51.936]],["name/95-25",[]],["text/95-25",[]],["component/95-25",[]],["keyword/95-25",[]],["title/95-26",[49,36.806]],["name/95-26",[]],["text/95-26",[]],["component/95-26",[]],["keyword/95-26",[]],["title/95-27",[139,26.161,586,21.497,2175,36.972]],["name/95-27",[]],["text/95-27",[]],["component/95-27",[]],["keyword/95-27",[]],["title/95-28",[371,51.936]],["name/95-28",[]],["text/95-28",[]],["component/95-28",[]],["keyword/95-28",[]],["title/95-29",[49,36.806]],["name/95-29",[]],["text/95-29",[]],["component/95-29",[]],["keyword/95-29",[]],["title/95-30",[506,42.817,802,36.363]],["name/95-30",[]],["text/95-30",[]],["component/95-30",[]],["keyword/95-30",[]],["title/95-31",[46,28.818,47,29.556,157,33.669]],["name/95-31",[]],["text/95-31",[]],["component/95-31",[]],["keyword/95-31",[]],["title/95",[42,16.704,565,26.161,1080,31.234]],["name/95",[286,0.558]],["text/95",[2,0.536,4,0.255,5,0.163,6,0.32,7,0.351,8,0.717,9,0.816,10,1.835,17,0.351,18,0.285,22,0.447,24,0.882,25,0.161,26,0.223,27,0.937,28,0.711,29,0.678,41,2.088,42,1.942,43,0.711,44,0.391,45,0.361,46,0.442,47,0.453,48,0.619,49,1.191,52,2.749,53,0.775,54,0.558,55,0.196,56,0.682,57,0.435,58,0.558,59,0.622,60,0.529,61,0.927,63,0.241,64,0.536,67,0.689,68,0.248,73,0.25,77,0.234,78,0.484,80,0.67,81,0.236,84,0.225,85,0.607,89,0.425,90,1.455,93,0.298,94,2.939,97,0.522,109,0.446,112,2.843,117,1.572,118,1.388,121,0.68,123,0.293,124,0.334,126,0.619,130,0.22,131,0.398,137,0.326,138,0.479,139,2.374,140,0.878,141,0.298,144,0.408,147,0.881,152,1.125,155,0.234,157,0.267,158,0.376,159,0.178,160,0.682,161,0.32,164,0.907,165,0.789,166,0.342,167,1.183,168,0.646,169,0.253,173,0.253,177,0.489,179,0.261,180,1.53,184,0.362,187,1.894,188,0.612,189,0.161,191,0.293,193,1.982,195,0.768,197,0.374,198,0.213,199,0.298,205,0.326,207,1.103,212,0.583,215,0.298,218,0.67,222,1.015,229,0.362,230,0.228,232,0.258,242,0.326,243,0.585,244,2.019,247,0.228,251,0.27,256,0.917,260,0.236,266,1.279,269,0.264,270,0.27,271,0.236,287,0.374,288,0.374,289,0.277,293,0.576,294,0.433,297,0.165,304,0.433,308,1.78,310,0.499,311,0.253,315,0.71,371,0.289,373,0.267,376,0.293,377,1.9,378,0.374,379,0.993,380,0.303,383,1.557,386,1.153,390,1.224,396,0.248,397,0.241,398,0.449,400,0.389,401,0.516,405,0.267,406,1.371,408,0.303,409,1.688,419,1.501,420,0.314,423,1.213,432,0.844,442,1.153,445,0.646,455,0.522,456,0.293,464,0.937,472,0.529,473,1.291,476,0.308,480,0.646,481,0.408,496,0.433,497,1.849,502,0.962,505,0.558,506,0.558,507,0.824,508,2.171,509,1.457,510,0.522,511,0.289,518,1.091,520,0.596,522,0.516,523,0.431,524,0.479,529,0.622,531,0.227,533,0.75,535,0.824,537,1.149,553,0.858,565,3.793,566,0.27,569,3.242,571,1.897,574,0.968,586,3.143,589,0.308,594,3.567,605,0.267,606,0.789,609,2.262,610,0.334,611,0.362,612,0.527,621,0.981,626,0.435,637,0.261,641,0.243,658,0.351,676,0.433,695,0.516,696,0.536,704,0.753,707,0.71,723,2.048,742,0.281,743,0.768,758,0.342,759,0.334,763,0.277,766,1.118,770,0.583,772,0.258,773,0.585,775,0.267,778,0.851,785,0.751,786,0.198,787,0.32,790,0.209,792,0.717,796,0.958,802,2.018,805,0.264,811,2.215,812,1.041,816,0.314,817,1.145,818,0.326,821,0.374,827,0.607,828,0.362,837,0.733,842,0.289,845,0.326,846,0.314,852,0.607,853,0.465,863,0.351,864,0.362,865,0.494,868,1.962,873,1.297,878,0.253,884,0.576,885,0.308,888,1.213,890,0.308,899,0.576,907,1.968,911,0.51,921,0.789,927,0.412,928,0.824,932,0.326,936,1.311,938,0.285,941,1.36,944,0.474,947,0.71,954,0.303,959,0.576,960,0.585,961,0.567,964,0.551,965,0.334,966,0.68,967,0.646,968,1.006,969,0.798,976,0.32,980,0.342,981,0.646,982,0.408,983,2.993,988,0.529,989,0.899,994,0.314,995,0.273,999,0.241,1002,0.778,1012,1.992,1047,3.929,1053,0.264,1067,0.241,1080,4.236,1081,1.325,1086,0.8,1093,0.632,1097,0.567,1100,1.572,1101,3.6,1109,1.137,1111,0.438,1112,0.303,1119,2.107,1135,0.461,1141,0.203,1143,0.908,1144,0.164,1145,0.733,1148,0.326,1152,0.285,1157,0.264,1158,0.619,1159,1.467,1160,1.595,1161,2.31,1162,0.408,1163,0.374,1164,1.146,1165,0.408,1166,0.607,1167,0.308,1168,1.017,1169,0.32,1170,0.374,1171,0.408,1172,0.374,1173,1.034,1174,0.362,1175,0.326,1176,0.662,1177,0.607,1178,0.281,1182,0.632,1186,0.988,1194,0.298,1197,0.289,1198,0.362,1213,0.567,1216,0.789,1219,0.696,1220,0.389,1221,0.32,1226,0.261,1231,1.162,1242,0.551,1247,0.273,1248,0.308,1250,0.516,1261,0.326,1262,0.499,1267,0.285,1269,0.261,1271,1.017,1273,0.314,1275,0.543,1282,0.273,1283,0.314,1307,0.273,1321,0.536,1326,0.326,1328,0.326,1333,0.342,1336,0.285,1340,1.186,1345,0.374,1351,0.899,1354,1.22,1376,0.374,1393,2.215,1398,0.536,1400,0.362,1401,0.585,1407,0.662,1408,1.049,1411,0.342,1416,0.576,1420,0.362,1424,0.433,1427,0.619,1432,0.342,1434,1.237,1435,0.374,1438,0.308,1457,0.881,1461,1.642,1466,0.789,1467,0.389,1473,0.646,1482,0.619,1489,0.408,1493,0.619,1523,0.374,1541,0.293,1548,0.362,1583,0.68,1654,1.237,1664,0.865,1700,0.362,1703,0.236,1728,0.585,1732,0.389,1767,0.342,1768,0.724,1769,0.585,1772,0.408,1775,0.374,1776,0.342,1778,0.68,1782,0.646,1786,0.342,1789,0.314,1813,0.32,1817,0.374,1846,0.753,1848,0.326,1854,1.213,1870,0.778,1888,0.789,1905,1.017,1911,0.334,1913,0.334,1924,0.433,1988,0.308,2080,0.789,2118,0.68,2135,0.837,2153,1.642,2162,0.342,2164,0.576,2175,1.505,2203,1.36,2237,0.408,2248,0.408,2253,1.146,2257,1.922,2307,0.362,2320,0.837,2332,1.146,2346,2.363,2496,0.374,2539,0.389,2545,0.753,2546,0.433,2647,0.408,2649,0.408,2675,0.607,2676,0.408,2698,0.433,2704,0.789,2713,1.797,2833,0.899,2877,0.362,2920,1.216,2939,0.408,2960,0.585,2975,0.298,3035,0.408,3187,0.351,3196,0.753,3211,2.567,3236,0.408,3346,0.326,3488,0.408,3743,0.789,3808,0.389,3846,0.789,4020,0.789,4050,0.433,4163,1.216,4245,0.433,4259,0.433,4270,0.408,4386,0.433,4475,0.433,4551,0.408,4563,0.433,4572,0.433,4614,0.433,4622,0.408,4634,0.408,4652,0.789,4711,0.374,4726,0.662,4730,0.433,4748,0.362,4764,0.408,4777,0.408,4778,0.408,4780,0.47,4781,1.322,4782,0.47,4783,0.47,4784,0.433,4785,0.91,4786,0.91,4787,0.91,4788,0.433,4789,0.47,4790,0.47,4791,0.433,4792,0.433,4793,0.47,4794,0.47,4795,0.433,4796,0.47,4797,0.47,4798,0.47,4799,0.47,4800,0.47,4801,0.47,4802,0.47,4803,0.47,4804,1.322,4805,0.47,4806,0.47,4807,0.47,4808,0.47,4809,0.47,4810,0.47,4811,0.47,4812,0.374,4813,0.837,4814,0.47,4815,0.47,4816,0.47,4817,0.47,4818,0.433,4819,0.91,4820,2.64,4821,0.789,4822,0.433,4823,0.47,4824,0.47,4825,0.91,4826,0.47,4827,0.91,4828,0.433,4829,0.47,4830,0.47,4831,0.433,4832,0.47,4833,0.47,4834,0.91,4835,0.837,4836,0.433,4837,0.47,4838,0.47,4839,0.47,4840,0.47,4841,0.47,4842,0.47,4843,0.47,4844,0.47,4845,0.47,4846,0.433,4847,0.47,4848,0.47,4849,0.91,4850,0.47,4851,0.408,4852,0.91,4853,0.47,4854,0.68,4855,0.389,4856,0.47,4857,0.47,4858,0.47,4859,0.47,4860,0.47,4861,0.47,4862,0.47,4863,0.408,4864,0.47,4865,0.47,4866,0.47,4867,0.47,4868,0.47,4869,0.47,4870,1.322,4871,0.47,4872,0.47,4873,0.433,4874,0.433,4875,0.47,4876,0.91,4877,0.47,4878,0.47,4879,0.47,4880,0.47,4881,0.47,4882,0.47,4883,0.47,4884,0.47,4885,0.47,4886,0.47,4887,0.47,4888,1.322,4889,0.47,4890,0.47,4891,0.47,4892,0.47,4893,0.47,4894,0.408,4895,0.47,4896,0.91,4897,0.91]],["component/95",[22,0.319]],["keyword/95",[]],["title/96-1",[1141,36.563]],["name/96-1",[]],["text/96-1",[]],["component/96-1",[]],["keyword/96-1",[]],["title/96-2",[1183,51.196]],["name/96-2",[]],["text/96-2",[]],["component/96-2",[]],["keyword/96-2",[]],["title/96-3",[569,23.407,964,35.904,1047,27.096]],["name/96-3",[]],["text/96-3",[]],["component/96-3",[]],["keyword/96-3",[]],["title/96-4",[4,37.854,586,25.271]],["name/96-4",[]],["text/96-4",[]],["component/96-4",[]],["keyword/96-4",[]],["title/96-5",[377,36.717,506,42.817]],["name/96-5",[]],["text/96-5",[]],["component/96-5",[]],["keyword/96-5",[]],["title/96-6",[46,28.818,47,29.556,157,33.669]],["name/96-6",[]],["text/96-6",[]],["component/96-6",[]],["keyword/96-6",[]],["title/96",[4,32.201,586,21.497,1047,27.096]],["name/96",[286,0.558]],["text/96",[2,1.993,4,2.72,5,0.358,9,0.494,10,0.49,18,1.635,19,0.752,22,0.838,24,0.534,25,0.353,27,1.548,29,0.41,42,0.953,48,0.703,49,2.181,52,2.572,53,1.809,57,1.291,58,1.182,61,1.045,64,0.609,66,0.635,68,0.544,71,1.165,76,0.773,80,0.524,81,0.52,84,1.291,92,0.752,94,0.413,109,0.943,118,2.022,130,0.899,131,0.453,132,0.594,135,0.433,136,1.093,138,1.014,139,3.139,140,2.478,142,0.976,143,0.567,152,0.561,158,1.649,159,0.731,160,1.395,162,1.261,165,0.617,171,0.689,173,0.555,180,2.631,181,1.739,182,0.55,185,0.644,187,2.689,188,1.252,189,0.353,191,1.684,193,0.427,198,0.469,207,1.234,230,0.502,232,0.567,244,2.577,251,0.594,253,0.654,256,0.555,260,0.968,266,0.899,269,0.58,279,0.677,289,0.609,290,0.677,295,0.644,297,0.364,308,1.168,315,0.555,317,0.689,318,0.734,374,0.587,376,0.644,383,0.483,386,2.881,387,0.567,388,0.703,390,1.783,392,0.567,393,2.019,398,0.951,399,0.483,401,0.587,402,0.665,403,0.773,406,1.216,408,1.739,419,1.216,420,0.689,430,0.594,432,4.536,442,0.435,456,2.486,475,2.319,478,0.843,497,2.78,506,0.635,509,2.2,510,0.594,515,1.284,520,1.769,522,0.587,528,0.796,529,0.906,531,1.631,537,1.068,553,0.968,565,3.016,569,4.03,574,1.262,575,0.635,579,0.406,586,2.58,587,0.601,594,1.482,601,0.752,604,0.49,612,0.413,621,0.594,635,1.772,636,0.752,641,0.534,696,1.134,703,0.823,717,0.58,723,3.092,743,1.12,746,1.056,763,1.134,770,0.456,775,1.093,776,0.617,777,0.515,779,0.476,780,0.773,785,1.226,792,0.561,796,0.58,799,0.703,803,0.601,804,0.703,805,0.58,808,0.689,812,3.437,816,0.689,817,0.49,821,0.823,827,1.284,828,0.796,837,1.068,846,0.689,853,1.382,854,1.772,865,0.561,868,2.022,873,0.555,878,0.555,885,1.261,906,1.302,932,0.718,936,1.466,938,2.048,948,1.37,954,2.178,964,4.465,969,0.483,972,0.654,980,0.752,983,0.906,996,0.654,998,1.659,1047,4.801,1080,0.544,1081,1.056,1084,0.626,1089,0.734,1096,0.752,1100,1.839,1101,1.024,1109,0.567,1119,0.529,1126,0.654,1143,1.024,1144,0.36,1157,3.056,1158,1.309,1159,1.302,1160,0.796,1163,0.823,1167,0.677,1169,0.703,1173,0.626,1176,1.401,1177,0.689,1178,3.901,1179,2.142,1180,0.635,1181,0.897,1182,1.876,1183,2.048,1184,0.897,1185,0.796,1186,4.638,1187,1.533,1188,1.613,1199,0.734,1201,0.718,1204,0.752,1205,0.718,1213,1.2,1215,0.823,1217,0.626,1221,0.703,1232,0.677,1238,1.533,1250,0.587,1251,0.734,1269,0.573,1287,0.718,1293,0.752,1295,0.823,1321,0.609,1326,1.337,1336,0.626,1343,0.718,1354,0.609,1399,1.739,1416,0.654,1427,1.837,1429,0.897,1432,0.752,1434,0.617,1438,1.261,1440,0.718,1441,0.951,1442,0.703,1448,0.689,1468,0.752,1471,1.482,1482,0.703,1488,0.796,1495,0.823,1508,0.951,1522,1.552,1541,0.644,1654,1.149,1667,1.918,1678,0.752,1703,0.52,1759,1.337,1767,0.752,1870,1.134,1958,0.718,1988,1.261,2122,0.734,2153,2.301,2162,0.752,2180,0.773,2199,0.796,2247,1.594,2344,0.796,2345,0.796,2423,0.718,2453,1.594,2456,1.594,2460,0.856,2540,0.897,2543,1.772,2544,2.486,2545,0.856,2632,0.856,2639,0.897,2647,0.897,2784,0.951,2833,0.703,2877,0.796,2960,0.665,2984,1.772,3211,0.796,3476,0.951,3808,0.856,3860,0.897,4353,0.951,4378,0.897,4457,0.856,4556,0.856,4659,0.823,4726,1.401,4733,0.897,4754,1.772,4756,1.67,4777,0.897,4778,0.897,4779,0.951,4821,0.897,4898,1.035,4899,1.035,4900,1.927,4901,0.951,4902,1.035,4903,1.035,4904,1.035,4905,1.035,4906,1.035,4907,0.951,4908,0.897,4909,1.035,4910,0.856,4911,1.035,4912,1.67,4913,2.704,4914,1.927,4915,1.035,4916,1.035,4917,1.035,4918,1.035,4919,1.927,4920,1.035,4921,1.035,4922,1.035,4923,1.035,4924,0.951,4925,1.772]],["component/96",[22,0.319]],["keyword/96",[]],["title/97-1",[1141,36.563]],["name/97-1",[]],["text/97-1",[]],["component/97-1",[]],["keyword/97-1",[]],["title/97-2",[42,19.637,612,27.833]],["name/97-2",[]],["text/97-2",[]],["component/97-2",[]],["keyword/97-2",[]],["title/97-3",[42,16.704,612,23.676,964,35.904]],["name/97-3",[]],["text/97-3",[]],["component/97-3",[]],["keyword/97-3",[]],["title/97-4",[377,31.234,964,35.904,4926,49.108]],["name/97-4",[]],["text/97-4",[]],["component/97-4",[]],["keyword/97-4",[]],["title/97-5",[22,15.666]],["name/97-5",[]],["text/97-5",[]],["component/97-5",[]],["keyword/97-5",[]],["title/97-6",[46,28.818,47,29.556,157,33.669]],["name/97-6",[]],["text/97-6",[]],["component/97-6",[]],["keyword/97-6",[]],["title/97",[4,28.017,42,14.533,612,20.6,958,23.575]],["name/97",[286,0.558]],["text/97",[4,1.473,5,0.521,9,0.719,22,1.27,25,0.514,26,1.287,27,3.091,29,1.473,31,1.094,42,2.591,44,0.646,49,1.978,52,2.441,53,0.682,55,0.626,59,0.707,63,0.769,68,0.792,77,0.749,80,0.762,81,1.364,85,1.003,89,3.396,100,1.157,109,0.736,112,1.207,127,0.799,128,2.106,135,1.136,138,0.792,139,3.643,152,0.816,155,0.749,158,3.007,160,0.776,179,0.834,180,1.927,185,1.692,187,1.708,189,0.514,190,0.984,195,2.158,198,0.682,206,2.833,207,0.687,212,1.637,222,0.736,225,1.022,230,1.319,232,0.825,242,1.885,247,0.73,250,2.029,260,1.364,273,0.834,291,1.022,295,0.937,297,0.529,303,1.885,308,0.65,314,1.692,315,1.458,377,2.767,383,1.268,385,0.952,386,2.694,390,0.672,398,0.743,399,0.702,405,0.853,419,0.677,432,2.897,442,0.633,464,2.494,470,1.022,471,1.818,508,0.843,509,0.607,518,1.429,522,0.853,529,1.747,533,2.106,565,3.368,569,1.071,574,0.702,579,1.784,594,1.489,604,1.287,606,1.62,610,1.928,612,4.508,641,0.776,708,1.157,755,1.094,768,1.044,770,0.663,775,0.853,778,1.352,779,0.692,785,1.904,786,0.633,790,0.668,792,0.816,796,1.523,802,0.784,808,1.003,817,0.713,827,1.003,845,1.044,853,1.389,857,1.643,865,2.015,866,0.762,868,0.762,873,0.808,874,1.124,928,0.937,929,0.897,950,1.022,958,1.24,961,1.952,964,5.569,968,0.886,969,0.702,983,0.707,988,0.874,999,1.899,1047,1.24,1053,0.843,1067,2.689,1080,1.429,1081,1.489,1084,2.246,1093,2.173,1100,0.611,1109,0.825,1112,0.968,1115,0.799,1117,0.91,1119,0.769,1133,2.922,1134,0.923,1135,1.882,1137,0.984,1144,0.524,1145,1.506,1152,0.91,1157,0.843,1175,1.044,1179,2.35,1189,0.874,1190,0.816,1191,0.91,1194,0.952,1199,1.068,1200,2.106,1216,0.897,1217,0.91,1219,1.954,1223,1.022,1224,4.268,1225,2.029,1226,1.506,1227,1.124,1232,0.984,1247,0.874,1250,0.853,1292,1.044,1319,1.157,1328,4.441,1399,0.968,1401,1.747,1403,1.124,1407,1.094,1409,1.197,1468,3.824,1522,0.864,1539,3.219,1619,3.416,1680,1.975,1685,2.857,1703,2.285,1728,0.968,1782,1.068,1785,1.124,1870,0.886,1915,1.094,1957,2.09,1958,1.885,2119,2.029,2122,1.068,2264,1.304,2502,1.244,2539,2.247,2817,1.244,2975,0.952,3144,1.197,3258,1.304,3272,1.244,3705,1.304,3807,1.022,4356,1.304,4556,1.244,4602,1.124,4711,1.197,4726,1.975,4854,1.124,4863,1.304,4926,2.247,4927,1.505,4928,2.717,4929,2.498,4930,6.865,4931,2.717,4932,2.717,4933,1.505,4934,1.384,4935,1.505,4936,1.505,4937,2.498,4938,1.384,4939,1.384,4940,1.384,4941,1.384,4942,1.384,4943,1.505,4944,2.498,4945,1.384,4946,1.384,4947,1.244,4948,1.244,4949,2.498]],["component/97",[22,0.319]],["keyword/97",[]],["title/98-1",[1141,36.563]],["name/98-1",[]],["text/98-1",[]],["component/98-1",[]],["keyword/98-1",[]],["title/98-2",[159,22.523,575,36.423,906,28.585]],["name/98-2",[]],["text/98-2",[]],["component/98-2",[]],["keyword/98-2",[]],["title/98-3",[430,34.075,575,36.423,1282,34.5]],["name/98-3",[]],["text/98-3",[]],["component/98-3",[]],["keyword/98-3",[]],["title/98-4",[586,27.316,3807,35.102,4745,41.096]],["name/98-4",[]],["text/98-4",[]],["component/98-4",[]],["keyword/98-4",[]],["title/98-5",[22,15.666]],["name/98-5",[]],["text/98-5",[]],["component/98-5",[]],["keyword/98-5",[]],["title/98-6",[46,28.818,47,29.556,157,33.669]],["name/98-6",[]],["text/98-6",[]],["component/98-6",[]],["keyword/98-6",[]],["title/98",[42,10.457,159,14.1,380,23.901,426,19.748,575,22.801,906,17.895,958,16.962]],["name/98",[286,0.558]],["text/98",[5,0.457,9,0.629,10,0.624,18,2.011,19,2.418,22,0.994,24,1.243,25,0.45,26,0.624,27,2.083,29,0.522,42,1.346,44,0.565,47,0.656,49,2.08,52,2.028,53,1.862,55,0.548,57,1.15,59,0.62,60,1.399,63,0.674,65,0.808,68,1.267,71,0.797,74,0.766,81,2.959,84,1.15,89,1.124,92,0.958,129,0.847,130,1.917,131,0.577,134,0.82,135,1.007,136,0.747,138,1.75,140,0.558,143,1.32,148,0.797,158,3.322,159,3.639,160,1.243,164,0.577,165,0.786,169,0.707,170,0.862,177,2.205,180,1.74,181,0.847,182,0.7,188,0.61,189,0.45,206,0.82,212,1.061,222,0.645,228,0.895,232,0.722,243,0.847,244,1.465,247,0.64,253,2.104,260,1.67,266,0.615,269,0.739,270,1.382,273,0.73,284,0.766,286,0.426,289,0.775,293,0.833,295,2.979,296,2.33,297,0.463,307,3.269,308,1.04,311,0.707,315,0.707,383,0.615,386,1.4,398,1.189,399,0.615,408,0.847,426,2.855,430,3.881,432,3.135,438,0.775,442,1.014,445,0.935,464,1.32,470,0.895,475,2.388,507,0.82,508,0.739,509,2.728,519,1.014,522,0.747,529,1.932,533,1.886,553,1.209,569,1.311,579,0.517,586,3.234,587,0.766,589,0.862,604,1.141,616,1.523,621,0.756,637,2.277,641,1.716,701,1.335,717,0.739,742,0.786,743,0.766,746,0.722,755,1.751,770,0.581,772,0.722,779,1.107,785,0.477,796,1.35,805,0.739,808,1.605,813,1.293,816,0.878,826,2.751,827,4.233,832,0.878,842,1.477,845,2.308,848,0.878,853,1.231,856,0.914,862,0.847,865,0.715,878,0.707,879,0.878,906,2.587,907,1.588,944,1.255,948,1.22,950,0.895,961,0.565,983,0.62,988,0.766,998,0.808,1066,2.26,1087,0.833,1088,1.477,1089,2.915,1111,0.634,1135,0.668,1143,1.279,1144,0.459,1145,1.843,1152,0.797,1154,1.048,1157,3.303,1158,0.895,1169,1.636,1175,0.914,1183,0.797,1189,1.399,1190,1.306,1191,1.456,1197,2.04,1200,1.366,1207,2.688,1216,0.786,1217,0.797,1239,0.862,1242,1.456,1247,0.766,1250,0.747,1251,1.709,1255,2.308,1262,1.32,1269,0.73,1282,5.19,1305,2.484,1336,0.797,1343,0.914,1353,0.914,1399,0.847,1406,1.142,1416,2.104,1428,1.142,1434,1.436,1440,0.914,1448,0.878,1457,0.878,1580,0.862,1583,1.798,1654,0.786,1667,0.935,1703,0.662,1821,0.895,1850,0.984,1852,1.09,1870,0.775,1885,1.456,1913,0.935,1958,1.671,1959,1.014,1988,0.862,1995,1.09,2115,0.914,2122,0.935,2155,1.014,2272,1.014,2303,1.798,2423,3.728,2453,1.992,2463,0.984,2466,1.142,2572,1.09,2675,1.605,2788,1.09,2945,0.958,2960,0.847,2975,0.833,3214,2.915,3756,1.142,3807,4.595,3823,3.561,3825,0.935,4255,1.09,4531,1.142,4601,6.179,4602,3.068,4659,1.916,4726,3.479,4745,5.053,4812,1.048,4894,2.087,4910,1.992,4912,1.142,4947,1.09,4948,5.593,4950,6.556,4951,1.317,4952,2.408,4953,2.408,4954,1.317,4955,3.058,4956,2.215,4957,1.317,4958,1.142,4959,4.784,4960,4.784,4961,1.212,4962,1.212,4963,1.212,4964,1.212,4965,1.212,4966,1.212,4967,1.212,4968,2.215,4969,1.317,4970,1.048,4971,1.212,4972,1.212,4973,1.212]],["component/98",[22,0.319]],["keyword/98",[]],["title/99-1",[1141,36.563]],["name/99-1",[]],["text/99-1",[]],["component/99-1",[]],["keyword/99-1",[]],["title/99-2",[162,45.667,1044,38.684]],["name/99-2",[]],["text/99-2",[]],["component/99-2",[]],["keyword/99-2",[]],["title/99-3",[99,35.412,1044,32.906,1128,36.423]],["name/99-3",[]],["text/99-3",[]],["component/99-3",[]],["keyword/99-3",[]],["title/99-4",[206,36.972,406,26.71,1386,51.456]],["name/99-4",[]],["text/99-4",[]],["component/99-4",[]],["keyword/99-4",[]],["title/99-5",[206,43.464,807,43.464]],["name/99-5",[]],["text/99-5",[]],["component/99-5",[]],["keyword/99-5",[]],["title/99-6",[1192,67.352]],["name/99-6",[]],["text/99-6",[]],["component/99-6",[]],["keyword/99-6",[]],["title/99-7",[159,19.596,164,22.608,1044,28.63,1111,24.87]],["name/99-7",[]],["text/99-7",[]],["component/99-7",[]],["keyword/99-7",[]],["title/99-8",[159,22.523,295,36.972,1044,32.906]],["name/99-8",[]],["text/99-8",[]],["component/99-8",[]],["keyword/99-8",[]],["title/99-9",[159,22.523,275,45.674,1044,32.906]],["name/99-9",[]],["text/99-9",[]],["component/99-9",[]],["keyword/99-9",[]],["title/99-10",[1193,70.025]],["name/99-10",[]],["text/99-10",[]],["component/99-10",[]],["keyword/99-10",[]],["title/99-11",[164,22.608,1044,28.63,1087,32.676,1111,24.87]],["name/99-11",[]],["text/99-11",[]],["component/99-11",[]],["keyword/99-11",[]],["title/99-12",[295,36.972,1044,32.906,1087,37.556]],["name/99-12",[]],["text/99-12",[]],["component/99-12",[]],["keyword/99-12",[]],["title/99-13",[275,45.674,1044,32.906,1087,37.556]],["name/99-13",[]],["text/99-13",[]],["component/99-13",[]],["keyword/99-13",[]],["title/99-14",[99,30.81,606,30.81,1044,28.63,1128,31.69]],["name/99-14",[]],["text/99-14",[]],["component/99-14",[]],["keyword/99-14",[]],["title/99-15",[1383,56.418]],["name/99-15",[]],["text/99-15",[]],["component/99-15",[]],["keyword/99-15",[]],["title/99",[159,22.523,398,29.304,1044,32.906]],["name/99",[286,0.558]],["text/99",[5,0.325,22,1.343,23,1.854,24,0.484,25,0.321,27,0.364,28,0.39,29,1.239,31,0.682,42,1.646,45,1.857,49,1.833,52,2.241,53,2.799,56,0.908,61,0.509,63,0.899,65,0.576,68,1.644,81,0.883,84,0.448,94,3.991,97,1.01,99,4.817,116,1.151,118,1.258,126,1.195,129,0.604,132,2.42,135,1.307,136,0.998,138,0.494,140,1.052,147,1.172,148,0.568,158,1.742,159,3.251,162,2.759,164,2.236,167,0.861,169,0.504,172,0.515,173,1.333,177,1.333,180,1.052,187,1.141,189,0.321,193,1.529,196,0.863,198,0.797,205,0.651,206,2.626,207,0.428,212,1.377,218,1.583,221,2.15,223,1.01,230,0.456,234,0.614,237,0.666,244,0.414,248,0.626,250,1.314,256,0.504,257,0.776,258,0.813,260,0.471,266,0.438,271,1.247,275,1.91,276,0.666,279,0.614,288,0.747,295,1.946,297,0.33,308,0.405,311,0.504,314,0.585,315,0.504,319,0.701,376,0.585,379,0.545,383,1.158,387,0.515,389,0.722,390,0.419,392,0.515,393,0.701,398,1.542,399,0.438,401,1.408,406,2.107,409,0.52,426,2.24,428,2.124,432,0.868,442,2.15,451,0.722,476,0.614,505,1.917,509,1.002,510,0.539,512,2.421,519,1.353,524,0.494,529,0.827,531,0.847,553,0.883,566,1.01,569,1.232,571,1.546,574,0.438,575,0.576,579,2.294,586,0.34,605,0.532,606,1.864,609,1.225,626,0.84,666,0.964,701,0.52,703,1.975,707,0.944,742,0.56,770,1.63,772,1.361,777,1.842,785,0.34,786,0.741,792,0.509,799,0.638,802,0.489,804,0.638,807,2.917,811,0.682,812,0.471,816,0.626,832,0.626,834,1.353,837,0.975,838,0.666,843,1.221,849,0.651,851,0.701,853,0.899,860,0.56,865,0.954,866,1.875,870,0.576,884,0.594,890,0.614,899,0.594,906,0.452,907,1.493,909,0.604,914,0.638,915,0.432,927,0.797,928,1.095,934,0.863,936,0.954,944,1.928,947,0.504,948,0.476,950,0.638,961,1.341,970,0.651,972,0.594,977,0.722,981,0.666,988,0.545,990,1.455,1010,0.722,1012,0.682,1044,6.252,1066,0.638,1079,1.461,1080,0.494,1087,2.34,1097,0.585,1111,1.195,1113,0.568,1114,1.772,1128,4.955,1144,0.327,1145,0.52,1146,3.06,1152,1.89,1161,0.526,1188,1.049,1192,2.486,1193,2.585,1194,0.594,1247,0.545,1250,0.532,1263,1.172,1280,2.237,1283,1.654,1321,0.552,1342,0.626,1354,1.839,1386,2.152,1399,0.604,1459,1.854,1495,0.747,1499,0.701,1522,0.539,1580,0.614,1582,1.079,1633,0.813,1687,0.682,1767,0.682,1782,0.666,1812,0.776,1848,0.651,1885,0.568,1905,0.722,1911,0.666,1991,2.053,1996,0.666,2008,1.4,2011,1.455,2017,0.863,2133,0.776,2138,2.178,2161,0.747,2210,0.747,2346,1.151,2565,0.813,2715,0.682,2818,0.813,2943,0.813,2945,0.682,3002,1.279,3144,0.747,3236,0.813,3748,2.053,3825,2.992,4159,0.863,4230,2.283,4291,0.863,4550,0.863,4641,1.525,4682,1.618,4695,2.053,4733,0.813,4748,0.722,4828,0.863,4851,1.525,4907,0.863,4974,0.939,4975,0.939,4976,1.759,4977,0.939,4978,4.217,4979,1.759,4980,1.759,4981,0.939,4982,0.939,4983,1.759,4984,0.939,4985,0.939,4986,0.939,4987,0.939,4988,0.939,4989,0.939,4990,0.939,4991,0.939,4992,0.939,4993,0.939,4994,0.939,4995,0.939,4996,2.483,4997,5.109,4998,2.483,4999,1.759,5000,0.939,5001,4.217,5002,2.483,5003,2.483,5004,3.125,5005,0.939,5006,0.939,5007,0.939,5008,0.939,5009,0.939,5010,0.939,5011,1.759,5012,1.618,5013,0.939,5014,2.483,5015,0.939,5016,0.939,5017,0.939,5018,0.939,5019,0.939,5020,0.939,5021,0.939,5022,2.483,5023,2.483,5024,0.939,5025,1.759,5026,1.759,5027,1.759,5028,1.759,5029,1.759,5030,0.939,5031,0.939,5032,0.939,5033,0.939,5034,0.939,5035,0.939,5036,0.939,5037,0.939,5038,1.759,5039,0.939,5040,0.939,5041,1.759,5042,0.939,5043,0.939,5044,0.939,5045,0.939,5046,0.939,5047,1.759,5048,0.939,5049,0.939,5050,0.939,5051,0.939,5052,0.939,5053,0.939,5054,0.939,5055,0.939,5056,0.939,5057,0.939,5058,0.939,5059,0.939,5060,0.939,5061,0.939,5062,1.759,5063,1.759,5064,2.483,5065,0.939,5066,0.939,5067,0.939,5068,0.939,5069,0.939,5070,0.939,5071,0.939,5072,0.939,5073,0.939,5074,0.939,5075,1.759,5076,0.939,5077,0.939,5078,0.939,5079,0.939,5080,0.939,5081,0.939,5082,0.939,5083,0.939,5084,0.939,5085,0.863,5086,0.939]],["component/99",[22,0.319]],["keyword/99",[]],["title/100-1",[508,28.955,509,20.84,2802,36.655,5087,42.727]],["name/100-1",[]],["text/100-1",[]],["component/100-1",[]],["keyword/100-1",[]],["title/100-2",[22,15.666]],["name/100-2",[]],["text/100-2",[]],["component/100-2",[]],["keyword/100-2",[]],["title/100-3",[46,28.818,47,29.556,157,33.669]],["name/100-3",[]],["text/100-3",[]],["component/100-3",[]],["keyword/100-3",[]],["title/100",[1081,38.261,1082,48.427]],["name/100",[286,0.558]],["text/100",[4,0.951,5,0.608,9,0.838,18,1.884,22,0.943,24,0.905,25,0.599,28,0.729,29,1.668,42,0.877,47,0.873,49,2.811,52,3.048,53,1.906,58,1.912,61,0.951,63,0.897,67,0.914,68,2.213,71,1.06,73,0.932,77,1.551,94,0.699,109,0.858,112,1.013,115,1.192,118,0.888,122,1.092,131,1.841,136,2.385,138,0.922,140,0.743,141,1.109,143,0.961,148,1.06,152,1.69,155,0.873,158,0.725,159,3.88,167,1.525,180,0.743,182,1.656,187,0.806,188,0.812,189,0.599,191,1.092,193,0.725,198,0.795,208,1.192,212,0.773,221,1.019,223,3.351,232,0.961,251,1.006,253,1.109,256,4.01,262,1.147,266,0.818,269,1.747,285,1.019,296,1.767,297,0.616,308,2.201,315,0.941,319,1.309,381,1.309,383,1.454,390,0.783,392,0.961,399,0.818,405,0.994,406,1.892,409,0.972,419,0.789,426,0.932,432,2.076,437,1.52,442,0.738,476,2.039,508,1.747,509,2.056,510,2.414,518,0.922,520,1.147,522,2.89,529,0.825,565,1.853,569,1.229,578,1.349,586,2.536,602,1.52,611,1.349,612,1.677,626,1.488,636,1.275,763,1.834,766,1.147,768,1.217,770,0.773,772,0.961,773,2.705,782,2.162,785,2.705,786,2.145,789,0.873,790,0.778,792,1.69,796,1.747,801,4.091,802,0.914,807,4.027,817,0.831,832,2.077,833,2.266,841,1.613,842,1.076,843,2.162,848,2.077,853,1.593,856,3.536,857,1.06,860,1.859,865,0.951,866,2.958,878,0.941,906,0.844,930,5.349,932,2.162,938,1.06,961,0.752,969,1.454,972,1.109,988,1.019,998,1.076,999,0.897,1080,0.922,1081,5.339,1082,4.86,1085,1.941,1086,1.06,1114,1.767,1133,0.873,1135,0.888,1143,0.932,1144,0.61,1147,1.076,1152,1.06,1153,1.395,1159,0.844,1169,1.192,1175,1.217,1182,1.217,1188,1.046,1195,1.52,1196,1.52,1197,1.076,1198,1.349,1199,1.244,1200,0.994,1201,1.217,1202,1.52,1203,1.395,1204,2.266,1205,1.217,1230,1.395,1232,2.039,1243,1.275,1247,1.811,1250,2.385,1307,1.019,1328,2.162,1329,1.275,1401,2.004,1408,1.912,1435,4.055,1447,1.275,1482,1.192,1493,1.192,1541,1.092,1681,1.613,1682,2.578,1782,1.244,1850,2.327,1853,2.118,1896,2.327,1988,1.147,2003,2.701,2054,1.613,2250,1.395,2802,4.143,2833,2.858,2983,1.52,2985,1.52,3002,1.275,3214,1.244,3421,1.52,3807,1.192,3825,1.244,3857,1.613,4284,1.613,4559,1.613,4627,1.45,4702,1.613,5087,4.83,5088,1.753,5089,1.753,5090,1.753,5091,1.753,5092,7.47,5093,3.116,5094,1.753,5095,1.753,5096,4.206,5097,1.753,5098,1.52,5099,1.613,5100,1.753,5101,1.753,5102,3.116,5103,1.753,5104,1.753,5105,1.753,5106,1.52]],["component/100",[22,0.319]],["keyword/100",[]],["title/101-1",[866,35.364,1997,53.693]],["name/101-1",[]],["text/101-1",[]],["component/101-1",[]],["keyword/101-1",[]],["title/101-2",[1115,37.084,1997,53.693]],["name/101-2",[]],["text/101-2",[]],["component/101-2",[]],["keyword/101-2",[]],["title/101-3",[46,28.818,47,29.556,157,33.669]],["name/101-3",[]],["text/101-3",[]],["component/101-3",[]],["keyword/101-3",[]],["title/101",[1083,38.576,1206,39.739,1211,39.739,1212,42.727]],["name/101",[286,0.558]],["text/101",[5,0.263,8,0.412,9,0.688,13,0.698,18,0.459,22,1.657,23,0.567,24,0.392,25,0.259,26,0.682,27,0.294,29,1.589,35,0.552,42,0.877,44,0.326,46,0.368,47,1.3,49,1.743,52,2.541,53,1.994,56,2.069,57,0.688,58,0.883,61,2.766,63,1.594,64,0.447,66,1.602,73,1.657,80,0.73,81,0.723,84,0.981,93,0.48,94,3.611,97,1.499,112,0.849,117,0.392,118,1.041,121,0.567,122,0.897,129,0.926,131,0.332,135,0.318,140,1.321,142,1.58,143,1.709,148,0.459,152,0.412,159,1.807,160,1.849,164,1.365,167,0.372,170,0.942,172,0.416,180,1.864,181,0.488,182,0.403,185,0.897,188,2.038,189,0.259,190,0.497,193,1.079,198,0.344,199,0.48,205,0.999,206,0.897,207,1.192,208,0.516,212,1.151,218,0.385,223,5.138,244,0.635,256,3.915,260,0.381,297,0.267,302,1.279,303,0.527,308,1.347,311,1.103,314,0.473,374,1.481,380,0.488,383,0.354,386,0.32,387,0.416,389,1.108,396,0.399,401,0.817,406,2.803,409,0.421,420,1.74,426,0.765,430,0.436,432,0.375,442,0.865,452,2.16,463,0.453,471,0.705,472,0.441,475,0.441,476,0.942,478,0.332,497,0.798,506,0.466,507,0.473,508,0.425,509,0.829,510,1.499,522,2.701,523,0.36,524,1.081,526,0.567,529,0.677,534,0.628,535,0.473,553,0.381,565,0.334,569,0.81,579,1.223,586,1.593,604,0.682,605,0.43,611,0.584,612,0.574,616,0.48,621,0.826,625,0.506,641,0.392,666,1.126,695,0.43,742,0.859,743,0.837,758,0.552,759,0.539,766,0.497,770,2.247,774,0.527,775,0.817,777,0.378,785,1.297,786,2.147,789,1.023,790,1.158,792,0.412,796,2.67,801,1.652,802,1.866,803,3.89,807,4.543,808,0.96,811,0.552,812,1.032,815,0.473,817,0.973,819,0.698,820,0.658,823,0.604,827,0.96,830,1.248,832,0.96,835,0.628,837,1.728,838,0.539,840,0.628,845,0.527,849,0.527,851,1.075,852,0.506,853,1.594,860,0.453,862,0.926,865,1.416,866,4.176,885,0.497,889,0.473,894,0.604,899,0.48,906,0.365,907,2.275,909,0.488,915,0.349,921,0.453,928,1.942,932,0.527,944,0.395,947,0.407,948,1.323,952,0.942,960,0.926,977,1.108,988,0.441,996,0.48,998,0.883,1012,0.552,1066,0.516,1083,4.999,1084,0.459,1087,0.48,1093,0.981,1108,0.447,1109,0.416,1111,0.693,1114,3.796,1115,4.061,1118,0.999,1133,0.378,1135,0.385,1137,0.497,1139,1.86,1144,0.264,1145,1.139,1152,1.579,1159,0.693,1179,0.911,1188,1.225,1190,0.412,1205,0.527,1206,3.923,1207,0.497,1208,0.628,1209,0.658,1210,2.16,1211,6.34,1212,2.579,1213,0.473,1217,0.459,1218,0.628,1229,1.699,1230,1.634,1232,3.117,1240,1.494,1242,0.459,1250,1.768,1260,0.516,1263,0.96,1267,0.459,1275,1.225,1279,0.871,1282,0.837,1287,0.527,1295,0.604,1307,0.837,1321,0.447,1329,0.552,1333,0.552,1336,0.459,1351,0.516,1357,0.552,1364,1.58,1391,0.698,1401,0.488,1403,1.95,1407,1.047,1434,0.453,1457,1.74,1458,0.698,1470,0.527,1479,0.628,1482,0.516,1545,0.552,1654,0.453,1703,0.381,1728,0.488,1735,0.628,1817,0.604,1821,0.516,1870,0.447,1885,0.871,1892,0.604,1901,0.698,1913,3.123,1997,6.887,2027,0.658,2033,0.698,2080,0.658,2138,0.447,2164,0.48,2170,0.628,2281,0.698,2307,0.584,2463,0.567,2476,0.628,2493,0.628,2639,0.658,2648,0.604,2675,1.369,2712,0.552,2730,0.698,2787,0.698,2788,0.628,2809,0.604,2904,0.658,2943,1.78,2966,0.698,2975,1.299,3002,3.2,3039,0.628,3222,0.628,3550,0.658,3844,0.698,3918,0.658,4003,0.658,4336,0.698,4602,1.95,4619,0.658,4627,0.628,4645,0.658,4656,3.105,4662,0.698,4692,1.889,4724,0.698,4748,0.584,4756,0.658,4791,0.698,4792,0.698,4813,1.324,4820,0.658,4854,0.567,4855,1.191,4910,2.16,5085,0.698,5106,0.658,5107,5.975,5108,1.44,5109,0.759,5110,0.759,5111,0.759,5112,1.44,5113,0.759,5114,0.759,5115,0.759,5116,2.054,5117,2.579,5118,1.889,5119,1.248,5120,0.759,5121,0.759,5122,2.054,5123,0.759,5124,0.759,5125,0.759,5126,0.759,5127,0.759,5128,0.759,5129,2.054,5130,1.78,5131,1.44,5132,1.44,5133,1.44,5134,2.054,5135,0.759,5136,2.054,5137,0.759,5138,0.759,5139,0.698,5140,2.054,5141,0.759,5142,0.759,5143,0.759,5144,0.759,5145,0.759,5146,0.759,5147,1.44,5148,0.759,5149,0.759,5150,0.759,5151,0.759,5152,0.759,5153,0.759,5154,0.759,5155,0.759,5156,0.759,5157,0.759,5158,0.759,5159,0.759,5160,0.759,5161,0.759,5162,0.658,5163,0.658,5164,0.658,5165,0.698,5166,0.698,5167,0.759,5168,0.759,5169,0.759]],["component/101",[22,0.319]],["keyword/101",[]],["title/102-1",[28,24.683,187,27.294,868,30.083]],["name/102-1",[]],["text/102-1",[]],["component/102-1",[]],["keyword/102-1",[]],["title/102-2",[28,19.006,187,21.017,509,18.444,627,30.465,1157,25.625]],["name/102-2",[]],["text/102-2",[]],["component/102-2",[]],["keyword/102-2",[]],["title/102-3",[94,20.6,377,27.175,478,22.608,537,28.63]],["name/102-3",[]],["text/102-3",[]],["component/102-3",[]],["keyword/102-3",[]],["title/102",[463,27.267,509,18.444,785,16.553,868,23.164,1096,33.239]],["name/102",[286,0.558]],["text/102",[5,0.564,22,1.142,25,0.556,26,0.771,28,2.566,29,0.645,41,0.824,42,0.82,44,0.698,49,1.267,52,2.422,55,0.676,57,0.777,59,0.765,60,0.945,67,0.848,73,0.864,90,3.796,94,3.299,99,0.97,109,2.361,112,1.568,115,2.69,117,3.185,118,3.127,135,2.322,140,3.504,141,2.504,142,0.824,143,0.892,164,1.276,166,1.183,170,1.064,179,1.615,180,0.689,185,1.815,187,4.593,188,1.834,189,0.556,190,1.064,193,1.204,209,0.882,212,1.745,230,2.694,244,1.745,260,1.464,269,0.912,270,0.934,271,1.988,297,0.572,311,1.564,316,1.183,317,1.084,377,2.538,398,0.803,408,1.874,423,2.809,432,1.954,442,2.031,463,0.97,478,2.111,509,3.561,518,0.856,523,0.771,529,0.765,533,0.923,569,1.902,574,1.36,576,2.747,579,0.638,586,3.561,591,1.154,594,1.598,606,0.97,609,2.381,626,1.891,632,2.242,691,3.431,700,4.242,772,0.892,773,1.046,778,2.763,784,0.945,785,2.428,815,1.815,817,1.381,837,0.902,848,2.638,853,1.49,868,4.897,870,0.998,873,4.44,875,3.405,890,1.064,899,1.029,906,1.403,911,2.219,927,0.737,944,1.518,948,1.477,961,1.699,969,0.759,983,2.268,998,0.998,1047,1.807,1080,0.856,1093,2.304,1096,3.507,1111,1.403,1119,2.024,1126,3.051,1144,0.566,1157,3.112,1161,4.251,1167,1.064,1179,1.029,1197,0.998,1205,2.747,1217,0.984,1219,1.533,1235,2.69,1261,1.129,1265,1.41,1266,3.15,1279,1.763,1301,1.154,1340,2.022,1398,0.958,1408,2.429,1432,1.183,1438,1.064,1470,1.129,1481,1.41,1522,0.934,1648,1.294,1654,3.311,1786,1.183,1813,1.981,1817,1.294,1897,2.68,2077,2.177,2108,1.215,2153,2.69,2166,1.496,2175,4.722,2250,1.294,2276,1.41,2294,2.177,2332,1.41,2343,1.294,2476,1.346,2802,1.154,2902,1.41,2904,1.41,3211,1.251,3963,1.496,4873,1.496,4874,1.496,5170,1.627,5171,1.627,5172,5.551,5173,1.627,5174,1.627,5175,1.627,5176,1.496,5177,1.627,5178,1.627,5179,2.915,5180,1.627,5181,1.627,5182,1.627,5183,1.627,5184,1.627,5185,3.959,5186,1.627,5187,1.627,5188,1.627,5189,2.915,5190,1.627]],["component/102",[22,0.319]],["keyword/102",[]],["title/103-1",[1141,36.563]],["name/103-1",[]],["text/103-1",[]],["component/103-1",[]],["keyword/103-1",[]],["title/103-2",[52,16.496,523,24.479,785,18.703,786,21.744]],["name/103-2",[]],["text/103-2",[]],["component/103-2",[]],["keyword/103-2",[]],["title/103-3",[22,8.46,455,26.238,463,27.267,785,16.553,786,19.244]],["name/103-3",[]],["text/103-3",[]],["component/103-3",[]],["keyword/103-3",[]],["title/103-4",[387,46.409]],["name/103-4",[]],["text/103-4",[]],["component/103-4",[]],["keyword/103-4",[]],["title/103-5",[506,42.817,802,36.363]],["name/103-5",[]],["text/103-5",[]],["component/103-5",[]],["keyword/103-5",[]],["title/103-6",[46,28.818,47,29.556,157,33.669]],["name/103-6",[]],["text/103-6",[]],["component/103-6",[]],["keyword/103-6",[]],["title/103",[455,23.532,463,24.455,523,19.429,785,14.845,786,17.259,1084,24.794]],["name/103",[286,0.558]],["text/103",[5,0.594,22,1.279,25,0.585,27,0.664,28,0.712,29,0.679,31,1.246,36,1.216,42,0.482,44,0.735,49,3.005,52,3.33,53,1.383,56,0.884,57,0.818,63,1.561,64,1.797,81,0.86,84,1.458,89,0.8,90,4.183,97,0.983,101,1.821,109,0.839,112,0.557,118,2.539,122,1.067,127,0.91,135,1.277,140,2.435,142,2.539,143,0.939,147,1.142,151,1.28,152,0.929,167,1.494,182,0.91,187,0.788,188,2.321,189,0.585,191,1.901,193,2.376,198,1.383,205,1.189,207,2.287,218,0.868,222,2.021,244,1.819,256,0.92,266,1.927,284,0.996,293,1.084,296,0.972,297,0.602,308,2.164,311,1.639,314,1.067,373,0.972,377,0.901,383,2.975,386,3.278,387,2.263,390,0.765,392,0.939,399,1.425,401,0.972,408,1.102,419,0.771,432,3.412,437,2.646,438,3.752,449,1.022,455,6.12,463,4.645,474,1.363,476,1.121,506,1.051,508,0.96,509,0.691,510,0.983,518,1.606,520,1.121,523,2.375,529,1.941,531,0.825,576,1.189,579,1.197,582,1.051,586,2.95,587,2.399,606,1.821,610,1.216,625,1.142,707,0.92,723,0.972,742,1.022,770,0.755,785,3.427,786,4.142,790,1.354,796,1.711,817,0.812,837,1.692,845,1.189,849,1.189,855,1.216,857,1.036,865,1.656,868,0.868,878,0.92,890,1.121,907,1.458,928,1.067,948,2.539,954,1.963,961,0.735,969,3.443,972,1.084,1047,0.782,1084,5.122,1109,0.939,1115,1.622,1124,1.216,1131,3.34,1144,0.597,1155,3.285,1157,3.223,1159,1.47,1161,1.711,1178,1.022,1188,1.821,1200,0.972,1213,1.067,1214,1.189,1215,1.363,1216,1.022,1217,1.036,1219,0.901,1226,0.95,1262,0.939,1264,2.701,1275,1.022,1283,2.034,1287,1.189,1398,1.797,1408,1.051,1420,1.318,1434,2.462,1457,1.142,1461,2.074,1470,1.189,1482,1.164,1522,0.983,1703,2.073,1765,2.118,1778,1.28,1870,1.009,1970,1.363,1988,1.121,2118,1.28,2122,1.216,2164,1.084,2345,2.349,2640,2.429,2975,1.084,3002,1.246,3225,1.485,3346,2.865,3848,1.485,3914,1.576,4604,1.485,4717,3.797,4741,1.576,4764,1.485,4846,1.576,4908,2.646,4925,2.807,4970,1.363,5098,1.485,5191,1.713,5192,1.713,5193,1.713,5194,1.713,5195,1.713,5196,1.713,5197,1.713,5198,3.053,5199,1.713,5200,1.713,5201,1.713,5202,3.053,5203,1.713,5204,1.713,5205,1.713]],["component/103",[22,0.319]],["keyword/103",[]],["title/104-1",[1141,36.563]],["name/104-1",[]],["text/104-1",[]],["component/104-1",[]],["keyword/104-1",[]],["title/104-2",[131,25.985,785,21.497,801,37.556]],["name/104-2",[]],["text/104-2",[]],["component/104-2",[]],["keyword/104-2",[]],["title/104-3",[518,31.234,575,36.423,612,23.676]],["name/104-3",[]],["text/104-3",[]],["component/104-3",[]],["keyword/104-3",[]],["title/104-4",[22,15.666]],["name/104-4",[]],["text/104-4",[]],["component/104-4",[]],["keyword/104-4",[]],["title/104-5",[46,28.818,47,29.556,157,33.669]],["name/104-5",[]],["text/104-5",[]],["component/104-5",[]],["keyword/104-5",[]],["title/104",[52,16.496,510,29.647,612,20.6,1085,32.168]],["name/104",[286,0.558]],["text/104",[2,0.618,4,0.57,5,0.364,9,0.933,18,2.073,19,0.764,22,0.938,25,0.359,28,0.437,29,1.359,37,1.554,41,1.388,42,1.289,49,1.491,52,2.452,53,2.296,57,0.502,59,1.288,60,0.61,65,1.199,67,1.786,68,0.553,76,0.784,77,0.523,80,0.532,81,2.028,84,1.929,89,1.278,90,1.929,94,3.685,102,0.654,112,1.114,121,0.784,122,0.654,131,2.005,136,0.596,137,0.729,140,2.655,143,0.576,148,0.635,152,0.57,155,0.523,158,1.132,159,1.532,162,1.278,163,1.256,167,0.956,172,2.214,173,1.049,177,1.049,178,0.869,179,1.083,180,2.147,187,0.898,188,0.486,189,0.359,190,1.792,192,0.836,193,1.417,207,0.892,212,0.861,216,0.869,218,2.79,222,3.067,232,0.576,244,2.233,251,1.121,253,0.664,256,1.47,266,0.912,285,0.61,297,0.369,308,1.744,314,0.654,374,0.596,377,1.804,379,0.61,380,1.256,383,0.49,386,1.443,390,0.469,398,0.518,399,0.49,406,2.061,419,0.472,423,0.745,430,0.603,432,0.964,438,2.018,445,0.745,449,0.626,470,0.714,473,0.654,480,0.745,505,0.644,506,0.644,507,0.654,508,1.922,509,3.492,510,1.968,511,0.644,512,0.687,517,1.459,518,2.41,520,0.687,522,0.596,523,0.926,524,1.028,529,2.383,531,0.506,533,1.108,537,1.9,566,1.121,569,1.592,582,3.622,586,0.992,587,0.61,589,0.687,591,0.745,604,0.498,612,3.575,636,1.421,700,1.236,763,0.618,766,0.687,770,0.463,772,0.576,773,0.675,776,1.165,777,1.364,778,2.281,781,1.901,784,0.61,785,3.346,786,3.326,789,2.939,790,3.764,801,3.735,802,1.427,807,0.654,812,0.981,813,0.564,817,0.498,820,0.91,832,0.7,833,0.764,842,1.199,844,0.714,846,0.7,847,0.745,849,0.729,860,0.626,865,1.06,868,0.532,870,1.199,877,1.901,878,0.564,914,0.714,944,1.427,948,1.388,952,0.687,954,0.675,959,0.664,964,0.635,965,1.386,968,0.618,969,1.884,971,0.836,976,0.714,981,0.745,1009,0.714,1084,1.657,1085,5.489,1086,0.635,1088,0.644,1114,0.596,1115,0.558,1135,1.737,1137,0.687,1139,2.409,1141,0.454,1143,0.558,1144,0.366,1147,2.103,1148,0.729,1157,1.535,1168,0.808,1173,1.181,1175,0.729,1178,0.626,1182,0.729,1186,0.784,1188,1.165,1200,1.108,1207,0.687,1216,1.165,1217,0.635,1218,1.616,1219,2.41,1220,0.869,1221,0.714,1222,0.836,1224,0.764,1226,1.518,1227,0.784,1232,1.278,1239,0.687,1247,0.61,1251,0.745,1262,1.502,1264,2.243,1268,0.764,1269,0.582,1279,0.635,1286,0.869,1287,0.729,1305,0.784,1336,0.635,1354,1.15,1355,0.784,1393,0.764,1415,0.966,1418,2.374,1430,0.966,1434,1.634,1440,0.729,1447,0.764,1465,0.966,1466,0.626,1482,0.714,1483,0.966,1484,0.966,1489,0.91,1491,0.91,1498,0.869,1500,2.179,1654,0.626,1659,0.808,1667,0.745,1703,1.376,1761,1.386,1773,1.616,1782,1.386,1786,0.764,1797,0.91,1813,0.714,1853,1.861,1870,1.15,1885,0.635,2108,0.784,2116,0.808,2161,0.836,2200,0.808,2208,0.869,2250,0.836,2303,0.784,2344,0.808,2397,0.836,2423,0.729,2454,0.869,2501,0.91,2627,2.971,2694,0.808,2712,1.421,2809,0.836,2881,0.966,2934,0.966,2960,0.675,3002,0.764,3214,0.745,3230,0.836,3405,0.966,3748,0.869,3808,0.869,3825,1.386,4020,0.91,4248,0.966,4256,0.966,4260,1.797,4341,0.966,4344,0.869,4619,0.91,4710,0.91,4711,0.836,4720,0.966,4723,1.797,4784,0.966,4812,0.836,4901,0.966,5098,0.91,5099,0.966,5206,1.05,5207,1.05,5208,3.428,5209,1.05,5210,1.05,5211,1.05,5212,1.05,5213,1.05,5214,3.428,5215,2.739,5216,3.428,5217,2.739,5218,1.954,5219,1.05,5220,1.954,5221,1.954,5222,1.954,5223,1.05,5224,1.05,5225,1.05,5226,0.966,5227,2.739,5228,2.739,5229,1.954,5230,1.05,5231,1.05,5232,1.05]],["component/104",[22,0.319]],["keyword/104",[]],["title/105-1",[1141,36.563]],["name/105-1",[]],["text/105-1",[]],["component/105-1",[]],["keyword/105-1",[]],["title/105-2",[42,19.637,612,27.833]],["name/105-2",[]],["text/105-2",[]],["component/105-2",[]],["keyword/105-2",[]],["title/105-3",[42,16.704,612,23.676,964,35.904]],["name/105-3",[]],["text/105-3",[]],["component/105-3",[]],["keyword/105-3",[]],["title/105-4",[377,31.234,964,35.904,4926,49.108]],["name/105-4",[]],["text/105-4",[]],["component/105-4",[]],["keyword/105-4",[]],["title/105-5",[22,15.666]],["name/105-5",[]],["text/105-5",[]],["component/105-5",[]],["keyword/105-5",[]],["title/105-6",[46,28.818,47,29.556,157,33.669]],["name/105-6",[]],["text/105-6",[]],["component/105-6",[]],["keyword/105-6",[]],["title/105",[4,37.854,612,27.833]],["name/105",[286,0.558]],["text/105",[4,1.517,5,0.538,9,0.742,22,1.208,25,0.531,26,1.325,27,3.139,29,1.512,31,1.13,42,2.436,49,1.658,52,2.233,53,0.704,55,0.646,59,0.731,63,0.795,68,0.817,77,0.774,80,0.787,81,1.405,85,1.036,89,3.455,100,1.195,109,0.761,112,1.239,127,0.826,128,2.163,135,0.65,138,0.817,139,3.697,152,0.843,155,0.774,158,3.059,160,0.802,179,0.861,180,1.975,185,1.742,187,1.753,189,0.531,190,1.017,195,2.216,198,0.704,206,2.903,207,0.709,212,1.681,222,0.761,225,1.056,230,1.358,232,0.852,242,1.941,250,2.089,260,1.405,291,1.056,295,0.968,297,0.546,303,1.941,308,0.671,314,1.742,315,1.501,377,2.83,383,1.305,385,0.983,386,2.747,390,0.694,398,0.767,399,0.725,405,0.881,419,0.699,432,2.958,442,0.654,464,2.555,470,1.056,471,1.867,508,0.871,509,0.627,518,1.471,522,0.881,529,1.793,533,2.163,565,3.423,569,1.103,574,0.725,579,1.827,594,1.533,604,1.325,606,1.668,610,1.985,612,4.514,641,0.802,708,1.195,755,1.13,768,1.078,770,0.685,775,0.881,778,1.392,779,0.714,785,1.947,786,0.654,790,0.689,792,0.843,796,1.568,802,0.81,808,1.036,817,0.736,827,1.036,845,1.078,853,1.43,857,1.691,865,2.069,866,0.787,868,0.787,873,0.834,874,1.16,928,0.968,929,0.927,950,1.056,961,2,964,5.515,968,0.915,969,0.725,988,0.903,999,1.95,1047,1.276,1053,0.871,1067,2.75,1077,1.195,1080,1.471,1081,1.533,1084,2.306,1093,2.226,1100,0.631,1109,0.852,1112,0.999,1115,0.826,1117,0.94,1119,0.795,1133,2.984,1134,0.953,1135,1.932,1137,1.017,1144,0.541,1145,1.55,1152,0.94,1157,0.871,1175,1.078,1179,2.413,1194,0.983,1199,1.103,1200,2.163,1216,0.927,1217,0.94,1219,2.006,1223,1.056,1224,4.358,1225,2.089,1226,1.55,1227,1.16,1232,1.017,1247,0.903,1250,0.881,1292,1.078,1319,1.195,1328,4.528,1399,0.999,1401,1.799,1403,1.16,1407,1.13,1409,1.236,1468,3.911,1522,0.892,1539,3.305,1604,3.507,1680,2.034,1685,2.934,1703,2.341,1728,0.999,1782,1.103,1785,1.16,1870,0.915,1915,1.13,1957,2.152,1958,1.941,2119,2.089,2122,1.103,2264,1.347,2502,1.285,2539,2.313,2817,1.285,2975,0.983,2985,1.347,3144,1.236,3258,1.347,3272,1.285,3705,1.347,3807,1.056,4356,1.347,4556,1.285,4602,1.16,4711,1.236,4726,2.034,4836,2.572,4854,1.16,4863,1.347,4926,2.313,4929,2.572,4934,1.429,4937,2.572,4938,1.429,4939,1.429,4940,1.429,4941,1.429,4942,1.429,4944,2.572,4945,1.429,4946,1.429,4947,1.285,4948,1.285,4949,2.572,5233,6.992,5234,3.507,5235,3.814,5236,1.554]],["component/105",[22,0.319]],["keyword/105",[]],["title/106-1",[1141,36.563]],["name/106-1",[]],["text/106-1",[]],["component/106-1",[]],["keyword/106-1",[]],["title/106-2",[223,29.647,779,23.748,866,26.174,1135,26.174]],["name/106-2",[]],["text/106-2",[]],["component/106-2",[]],["keyword/106-2",[]],["title/106-3",[160,26.659,223,29.647,1115,27.446,1135,26.174]],["name/106-3",[]],["text/106-3",[]],["component/106-3",[]],["keyword/106-3",[]],["title/106-4",[961,29.948,5237,64.185]],["name/106-4",[]],["text/106-4",[]],["component/106-4",[]],["keyword/106-4",[]],["title/106-5",[44,25.475,159,22.523,1115,31.545]],["name/106-5",[]],["text/106-5",[]],["component/106-5",[]],["keyword/106-5",[]],["title/106-6",[785,21.497,3228,49.108,5238,51.456]],["name/106-6",[]],["text/106-6",[]],["component/106-6",[]],["keyword/106-6",[]],["title/106-7",[46,28.818,47,29.556,157,33.669]],["name/106-7",[]],["text/106-7",[]],["component/106-7",[]],["keyword/106-7",[]],["title/106",[52,14.599,223,26.238,234,29.912,785,16.553,786,19.244]],["name/106",[286,0.558]],["text/106",[5,0.386,8,1.119,9,1.377,22,0.884,25,0.381,27,0.432,28,0.463,29,0.442,31,0.81,37,1.642,42,0.811,43,0.858,44,1.237,49,1.253,52,3.253,53,1.306,55,0.463,56,0.575,60,1.199,61,0.604,63,0.57,65,1.266,66,1.266,67,0.58,73,1.096,76,1.541,80,0.564,90,0.532,93,0.705,94,4.302,107,0.742,109,0.545,112,0.671,115,0.757,118,1.045,122,1.795,131,0.488,135,0.466,136,1.635,140,0.874,143,0.611,147,1.375,158,0.46,159,2.001,160,2.18,168,0.79,169,0.598,171,0.742,177,0.598,180,2.594,188,0.956,189,0.381,193,0.853,206,0.694,207,0.508,215,0.705,223,5.087,230,0.541,232,0.611,244,0.491,253,0.705,256,2.267,262,0.729,266,0.52,285,0.647,287,0.886,296,0.632,297,0.392,302,0.694,303,2.931,308,1.553,314,0.694,317,0.742,374,0.632,380,0.716,383,2.23,386,0.469,391,0.921,399,0.52,401,0.632,406,2.574,409,0.617,419,0.501,423,1.464,426,0.592,428,0.757,432,1.423,438,2.117,441,1.788,442,0.469,464,1.131,472,0.647,475,1.199,480,0.79,497,0.617,509,1.451,522,0.632,523,1.704,529,1.355,535,1.285,569,2.256,575,1.266,579,0.437,604,0.528,621,0.639,626,0.532,666,0.611,692,0.857,696,0.656,707,0.598,717,0.624,725,0.624,758,0.81,763,2.486,766,0.729,770,1.585,772,0.611,773,0.716,775,0.632,779,1.942,782,1.432,785,3.779,786,3.973,789,0.555,790,1.279,792,1.119,796,0.624,801,2.275,802,2.201,803,1.199,805,0.624,807,2.239,809,0.79,811,0.81,812,1.036,814,1.024,815,1.285,818,0.773,827,1.375,834,1.587,837,1.144,842,0.683,846,0.742,853,0.57,857,0.674,860,2.851,865,1.119,866,2.14,868,1.045,878,1.547,879,1.375,884,0.705,907,1.377,909,0.716,910,0.79,911,1.157,915,0.949,928,0.694,936,1.119,938,2.175,947,1.93,952,1.35,961,1.237,965,1.464,972,0.705,976,0.757,977,0.857,1044,0.617,1053,0.624,1066,0.757,1067,1.055,1080,0.586,1114,0.632,1115,2.54,1133,0.555,1135,2.422,1144,0.388,1147,0.683,1159,0.536,1166,0.742,1173,0.674,1174,0.857,1200,0.632,1221,0.757,1226,1.993,1227,0.832,1228,3.117,1229,4.732,1230,2.293,1239,0.729,1242,0.674,1248,0.729,1264,0.729,1275,0.664,1282,0.647,1293,0.81,1328,0.773,1336,0.674,1337,1.675,1342,0.742,1407,1.5,1420,0.857,1427,0.757,1435,2.861,1440,0.773,1442,0.757,1461,0.757,1479,0.921,1631,0.716,1687,0.81,1728,0.716,1769,0.716,1825,0.81,1850,0.832,1898,0.921,1911,0.79,2003,0.965,2008,0.886,2267,0.965,2294,0.832,2345,1.587,2368,0.832,2396,0.965,2445,3.307,2447,2.217,2449,2.293,2460,7.045,2480,2.651,2493,1.707,2501,1.788,2510,1.024,2572,0.921,2975,1.823,2978,2.651,3228,3.494,4270,0.965,4551,0.965,4602,1.541,4645,0.965,4654,1.024,4656,3.117,4659,0.886,4695,1.707,4714,1.024,4748,0.857,4818,1.898,4855,0.921,5087,0.921,5117,0.921,5118,1.024,5119,2.498,5130,0.965,5162,3.661,5163,1.788,5164,2.498,5165,3.884,5166,2.651,5237,2.651,5238,3.117,5239,1.114,5240,1.114,5241,1.114,5242,1.114,5243,1.114,5244,1.114,5245,1.114,5246,1.114,5247,1.114,5248,1.114,5249,1.114,5250,1.114,5251,1.114,5252,1.114,5253,1.114,5254,1.114,5255,1.114,5256,1.024,5257,1.114,5258,1.114,5259,1.114,5260,1.114,5261,1.114,5262,1.114,5263,1.114,5264,1.114,5265,1.114,5266,1.114,5267,1.114,5268,1.114,5269,1.114,5270,1.114,5271,1.114,5272,2.882,5273,1.114,5274,1.114,5275,2.063,5276,2.063,5277,1.114,5278,1.114,5279,1.114,5280,1.114,5281,2.063,5282,2.063,5283,1.898,5284,1.898,5285,1.114,5286,1.114,5287,1.114,5288,2.063,5289,2.063,5290,2.063,5291,2.063,5292,1.114,5293,1.114,5294,1.114]],["component/106",[22,0.319]],["keyword/106",[]],["title/107-1",[1141,36.563]],["name/107-1",[]],["text/107-1",[]],["component/107-1",[]],["keyword/107-1",[]],["title/107-2",[139,20.144,586,16.553,1080,24.05,1086,27.646,1101,24.29]],["name/107-2",[]],["text/107-2",[]],["component/107-2",[]],["keyword/107-2",[]],["title/107-3",[22,10.986,1080,31.234,1086,35.904]],["name/107-3",[]],["text/107-3",[]],["component/107-3",[]],["keyword/107-3",[]],["title/107-4",[46,28.818,47,29.556,157,33.669]],["name/107-4",[]],["text/107-4",[]],["component/107-4",[]],["keyword/107-4",[]],["title/107",[587,34.5,1080,31.234,1086,35.904]],["name/107",[286,0.558]],["text/107",[5,0.653,8,1.023,9,1.587,10,3.202,22,1.436,25,0.644,29,1.767,42,0.935,46,0.915,49,3.961,52,3.128,53,0.854,59,1.563,63,2.278,77,1.654,81,0.947,84,0.901,89,2.079,112,3.441,118,0.955,135,2.246,139,0.831,140,1.408,143,1.822,148,1.14,152,1.023,155,0.939,158,0.779,177,1.012,180,0.799,185,2.069,189,0.644,191,2.069,193,0.779,195,5.691,207,0.861,212,2.366,232,1.034,244,1.963,266,0.88,269,1.057,270,1.082,297,0.663,308,1.435,383,1.551,386,2.845,391,1.56,398,3.335,399,0.88,401,1.885,438,1.956,478,1.454,508,3.01,509,1.341,510,1.082,529,0.887,531,0.908,569,2.415,574,1.551,586,0.683,587,1.096,594,1.822,605,1.069,612,1.325,632,1.451,700,2.102,706,1.5,707,1.012,770,0.831,772,1.034,775,1.069,776,1.125,785,0.683,787,2.258,790,1.977,792,1.023,796,3.433,809,2.358,813,1.012,817,1.575,818,1.308,837,1.045,853,2.278,865,2.416,906,2.949,907,3.706,932,5.062,965,3.161,969,1.551,972,1.193,989,1.281,1067,1.699,1080,4.926,1086,5.662,1091,2.102,1101,1.766,1143,1.002,1144,0.656,1145,1.045,1161,1.863,1169,1.281,1177,1.257,1178,1.125,1183,1.14,1188,1.125,1219,2.344,1223,1.281,1226,2.976,1231,6.192,1251,1.338,1279,1.14,1289,1.5,1321,1.11,1333,1.371,1336,1.14,1354,1.956,1399,1.213,1401,1.213,1432,2.416,1438,2.915,1442,1.281,1461,4.592,1684,2.749,1730,4.574,1765,1.308,1769,1.213,1778,1.408,1785,1.408,1877,1.338,1893,2.644,1906,1.634,2122,1.338,2458,1.734,2833,3.027,2865,3.861,2975,1.193,3346,1.308,3858,1.734,3920,1.634,4212,4.097,4251,3.861,4652,5.308,4820,2.88,4854,1.408,5139,1.734,5234,1.734,5295,3.323,5296,5.37,5297,1.886,5298,1.734,5299,1.734,5300,1.886,5301,1.734,5302,1.886,5303,6.757,5304,3.323,5305,4.455,5306,1.886]],["component/107",[22,0.319]],["keyword/107",[]],["title/108-1",[1141,36.563]],["name/108-1",[]],["text/108-1",[]],["component/108-1",[]],["keyword/108-1",[]],["title/108-2",[785,25.271,1853,47.428]],["name/108-2",[]],["text/108-2",[]],["component/108-2",[]],["keyword/108-2",[]],["title/108-3",[312,70.025]],["name/108-3",[]],["text/108-3",[]],["component/108-3",[]],["keyword/108-3",[]],["title/108-4",[223,40.058,5117,57.73]],["name/108-4",[]],["text/108-4",[]],["component/108-4",[]],["keyword/108-4",[]],["title/108-5",[506,42.817,802,36.363]],["name/108-5",[]],["text/108-5",[]],["component/108-5",[]],["keyword/108-5",[]],["title/108-6",[392,46.409]],["name/108-6",[]],["text/108-6",[]],["component/108-6",[]],["keyword/108-6",[]],["title/108-7",[46,28.818,47,29.556,157,33.669]],["name/108-7",[]],["text/108-7",[]],["component/108-7",[]],["keyword/108-7",[]],["title/108",[1232,55.392]],["name/108",[286,0.558]],["text/108",[5,0.345,8,0.54,9,1.567,18,1.124,22,0.815,25,0.34,28,1.364,29,1.536,31,0.724,42,1.09,44,0.427,46,1.269,47,1.302,49,1.685,51,0.724,52,3.011,53,0.451,56,0.959,58,1.14,61,1.008,63,0.951,66,0.611,67,0.969,68,0.978,71,0.602,78,0.529,84,0.476,89,0.867,94,3.613,97,0.571,112,0.324,122,2.413,131,0.814,135,0.778,136,1.054,142,0.505,143,0.546,159,1.671,160,2,161,0.677,167,0.91,171,0.664,173,0.534,177,0.534,179,0.552,180,2.71,188,1.52,189,0.34,193,0.768,206,1.158,207,0.454,212,0.439,214,0.744,218,0.505,223,3.483,230,1.593,232,1.019,244,1.152,248,0.664,256,1.761,266,1.808,269,1.466,275,0.766,276,0.707,280,0.863,288,0.792,296,0.565,297,0.35,308,2.109,312,5.019,315,0.998,374,0.565,378,0.792,380,0.64,383,0.867,384,1.388,386,0.783,390,0.445,392,0.546,396,0.524,397,0.509,399,0.465,401,1.054,405,1.861,406,3.257,409,1.449,419,0.448,432,0.491,438,2.281,441,0.863,442,0.783,455,0.571,464,1.019,472,0.579,474,0.792,476,2.883,478,0.436,497,0.552,505,1.14,508,1.84,509,2.448,518,0.524,520,1.216,523,1.239,529,2.072,533,0.565,565,1.941,569,0.393,574,0.465,576,0.691,586,2.936,589,0.651,604,1.555,609,0.491,617,0.916,626,0.476,627,0.664,636,4.872,637,1.03,641,0.514,701,2.148,758,1.352,772,1.019,777,0.925,779,0.855,783,0.766,784,1.519,785,3.231,786,3.868,787,1.263,789,1.634,790,1.456,792,0.54,796,1.466,801,5.644,802,1.362,803,2.56,807,2.413,812,1.648,813,0.998,816,0.664,817,1.239,826,0.824,827,0.664,843,1.29,848,1.239,849,1.29,853,0.509,855,0.707,860,1.109,865,0.54,866,1.963,870,1.14,876,1.216,878,0.534,894,0.792,906,2.559,907,1.567,915,1.781,921,0.594,927,0.451,928,1.158,936,0.54,938,0.602,947,0.534,952,1.216,954,1.195,959,0.63,969,3.257,995,1.08,999,0.509,1081,1.019,1114,1.861,1115,2.595,1118,1.29,1133,0.496,1134,0.611,1144,0.347,1152,1.581,1159,0.479,1160,0.766,1161,0.558,1166,0.664,1167,0.651,1169,1.263,1194,2.451,1211,0.766,1213,3.779,1226,0.552,1232,5.928,1233,0.863,1234,0.863,1235,1.263,1236,1.611,1237,0.824,1238,0.792,1239,0.651,1240,1.352,1242,2.664,1252,1.388,1259,0.792,1269,0.552,1275,1.109,1307,1.08,1321,0.586,1336,0.602,1357,0.724,1398,0.586,1401,0.64,1403,0.744,1405,0.863,1408,0.611,1459,0.744,1466,0.594,1473,0.707,1482,0.677,1488,0.766,1495,0.792,1545,0.724,1664,1.216,1687,0.724,1691,0.792,1703,1.648,1705,0.824,1761,0.707,1769,0.64,1821,0.677,1853,1.263,1854,1.855,1892,0.792,1910,0.766,1960,1.611,1988,0.651,1996,0.707,2164,1.654,2169,0.824,2243,0.863,2250,0.792,2257,0.792,2368,0.744,2447,0.766,2449,0.792,2460,1.538,2694,0.766,2704,0.863,2706,0.863,2713,2.266,2802,0.707,2865,1.611,2905,0.916,2960,0.64,2975,2.076,3187,0.744,3214,1.319,3222,0.824,3256,0.792,3346,3.388,3807,1.263,3845,0.792,3918,0.863,3919,2.405,3945,0.824,4003,0.863,4583,1.71,4615,0.916,4634,0.863,4710,0.863,4854,1.388,4855,0.824,4924,0.916,4970,0.792,5087,0.824,5117,1.538,5119,1.611,5130,1.611,5162,0.863,5163,0.863,5164,0.863,5176,0.916,5256,1.71,5307,0.996,5308,0.996,5309,0.996,5310,1.859,5311,0.996,5312,0.996,5313,0.996,5314,1.859,5315,1.859,5316,0.996,5317,0.996,5318,0.996,5319,0.996,5320,0.996,5321,0.996,5322,0.996,5323,0.996,5324,1.859,5325,0.996,5326,0.996,5327,0.996,5328,0.996,5329,0.996,5330,0.996,5331,0.996,5332,3.875,5333,0.996,5334,1.859,5335,0.996,5336,0.996,5337,1.859,5338,0.996,5339,0.996,5340,0.996,5341,0.996,5342,0.996,5343,0.996,5344,0.996,5345,0.996,5346,0.996,5347,0.996,5348,0.996,5349,0.996,5350,1.859,5351,0.996]],["component/108",[22,0.319]],["keyword/108",[]],["title/109-1",[1141,36.563]],["name/109-1",[]],["text/109-1",[]],["component/109-1",[]],["keyword/109-1",[]],["title/109-2",[85,46.512,889,43.464]],["name/109-2",[]],["text/109-2",[]],["component/109-2",[]],["keyword/109-2",[]],["title/109-3",[158,28.84,5352,69.794]],["name/109-3",[]],["text/109-3",[]],["component/109-3",[]],["keyword/109-3",[]],["title/109-4",[284,40.557,889,43.464]],["name/109-4",[]],["text/109-4",[]],["component/109-4",[]],["keyword/109-4",[]],["title/109-5",[426,31.545,1067,30.357,1179,37.556]],["name/109-5",[]],["text/109-5",[]],["component/109-5",[]],["keyword/109-5",[]],["title/109-6",[118,35.364,889,43.464]],["name/109-6",[]],["text/109-6",[]],["component/109-6",[]],["keyword/109-6",[]],["title/109-7",[49,30.343,865,37.854]],["name/109-7",[]],["text/109-7",[]],["component/109-7",[]],["keyword/109-7",[]],["title/109-8",[46,28.818,47,29.556,157,33.669]],["name/109-8",[]],["text/109-8",[]],["component/109-8",[]],["keyword/109-8",[]],["title/109",[52,16.496,234,33.799,889,32.168,1087,32.676]],["name/109",[286,0.558]],["text/109",[5,0.26,8,1.104,10,0.356,22,0.808,25,0.257,27,1.694,28,0.593,29,1.226,33,0.622,42,1.671,43,0.593,48,0.511,49,1.545,52,2.48,53,1.401,54,1.588,56,0.388,59,1.217,61,1.104,62,0.622,63,1.581,65,0.875,68,0.395,73,1.888,77,1.013,80,0.381,81,1.3,84,0.359,85,4.711,89,0.666,90,0.359,94,4.429,99,0.448,102,0.468,112,0.662,117,0.736,118,2.213,122,0.888,126,0.511,130,1.443,132,1.168,135,0.597,138,1.627,142,0.381,144,0.651,155,0.374,158,2.222,159,0.772,160,0.388,162,0.492,163,0.483,164,1.741,165,1.845,167,1.514,169,0.403,170,1.332,172,1.116,173,0.403,177,0.403,179,0.417,180,1.097,185,0.468,187,0.656,189,0.257,193,1.07,198,0.646,206,0.468,207,0.343,209,0.774,212,0.628,221,0.437,222,0.368,225,1.383,230,0.365,232,0.412,237,0.533,247,0.365,256,1.093,260,0.377,266,0.666,271,0.377,281,2.12,284,2.943,289,0.442,296,0.426,297,0.264,302,0.888,308,1.336,314,0.468,315,1.093,316,0.546,318,0.533,382,0.475,383,0.666,386,0.316,387,0.412,389,0.578,390,0.336,391,0.622,398,0.371,399,0.351,401,0.809,402,0.483,403,0.561,405,0.426,406,2.419,419,0.338,426,3.537,430,2.04,432,0.371,438,0.84,442,2.132,445,0.533,475,0.437,476,1.332,478,0.329,481,0.651,502,0.546,508,0.8,509,2.169,510,0.819,522,1.154,529,0.671,531,0.362,534,1.18,537,0.417,553,0.377,565,0.331,566,0.431,569,0.296,574,0.95,576,0.521,579,1.212,594,0.412,595,0.691,599,0.691,604,0.356,605,2.872,606,1.214,609,1.005,610,0.533,621,0.819,625,1.725,626,0.359,630,0.533,640,0.651,658,0.561,696,3.165,700,0.475,701,0.417,707,1.093,710,0.533,717,0.421,723,1.754,728,2.945,743,0.437,758,0.546,759,0.533,763,0.84,768,0.521,770,0.331,772,0.782,778,0.71,779,0.656,784,0.829,785,1.44,786,0.857,792,0.408,796,1.451,802,1.061,803,0.437,804,0.511,805,0.421,807,1.268,812,0.377,817,0.676,821,1.135,831,0.99,837,0.417,842,0.461,845,1.412,851,0.561,856,0.521,860,2.606,865,0.774,875,0.461,879,0.501,889,6.406,890,1.332,899,0.902,905,0.533,907,1.477,909,0.483,910,1.012,911,0.421,914,0.969,922,0.598,928,1.612,929,1.845,935,0.622,940,0.622,948,0.381,952,0.492,961,0.612,969,0.95,983,0.353,995,0.437,999,0.384,1002,1.524,1012,0.546,1044,0.417,1081,0.412,1087,2.763,1093,0.359,1101,0.399,1112,0.483,1113,1.231,1128,0.461,1134,0.875,1135,0.381,1143,0.399,1144,0.497,1145,0.417,1148,0.521,1152,0.454,1159,0.98,1161,0.421,1175,0.521,1179,2.763,1199,0.533,1200,0.426,1217,0.863,1222,0.598,1226,0.791,1239,0.492,1241,4.928,1242,1.565,1243,3.176,1244,0.651,1245,0.533,1246,0.651,1247,1.797,1248,1.694,1249,1.684,1250,2.015,1252,0.561,1255,2.146,1278,2.46,1279,0.454,1282,2.065,1329,1.037,1336,0.863,1337,0.437,1339,0.511,1354,2.092,1358,1.012,1387,0.691,1398,0.442,1400,0.578,1407,1.48,1427,0.969,1438,0.492,1448,0.951,1456,1.037,1461,0.511,1480,0.598,1509,0.651,1648,0.598,1664,0.492,1667,3.594,1680,0.546,1687,0.546,1732,0.622,1789,0.951,1825,0.546,1848,0.521,1854,0.533,1885,0.454,1895,0.691,1905,1.566,1915,0.546,1957,1.566,1958,1.796,1995,0.622,2037,4.017,2115,0.99,2164,0.475,2170,0.622,2203,0.598,2210,2.059,2257,1.135,2276,0.651,2335,0.691,2348,0.651,2368,0.561,2383,1.236,2423,0.99,2447,1.566,2449,2.827,2454,1.18,2571,1.135,2632,0.622,2715,1.037,2941,0.651,2960,1.309,2961,0.691,2965,1.18,2975,0.475,3002,0.546,3013,0.691,3102,0.651,3171,0.691,3187,1.065,3196,0.622,3211,2.734,3214,0.533,3385,0.622,3438,0.651,3474,0.598,3845,4.509,3937,0.691,4029,0.691,4164,0.691,4185,0.651,4300,2.381,4457,2.141,4604,0.651,4613,0.691,4622,0.651,4627,1.18,4748,0.578,4770,0.691,4788,1.872,4812,1.135,4821,1.764,4958,0.651,4970,0.598,5106,0.651,5226,0.691,5283,0.691,5284,0.691,5301,0.691,5353,0.751,5354,0.751,5355,2.589,5356,3.978,5357,0.751,5358,0.751,5359,3.093,5360,1.426,5361,1.312,5362,3.093,5363,1.312,5364,0.751,5365,0.751,5366,0.751,5367,0.751,5368,0.751,5369,0.751,5370,0.751,5371,3.093,5372,0.751,5373,0.751,5374,0.751,5375,0.751,5376,0.751,5377,0.751,5378,0.751,5379,0.751,5380,0.751,5381,0.751,5382,0.751,5383,0.751,5384,0.751,5385,0.751,5386,1.312,5387,0.751,5388,0.751,5389,0.751,5390,0.751,5391,2.589,5392,0.751,5393,0.751,5394,1.426,5395,0.751,5396,0.751,5397,1.426,5398,0.751,5399,0.751,5400,1.426,5401,0.751,5402,0.751,5403,0.751,5404,0.751,5405,0.751,5406,0.751,5407,0.751,5408,0.751,5409,0.751,5410,0.751,5411,0.751,5412,0.751,5413,0.751,5414,1.426,5415,1.426,5416,0.751,5417,0.751,5418,0.751,5419,2.589,5420,0.751,5421,2.589,5422,0.751,5423,0.751,5424,2.036,5425,2.036,5426,0.751,5427,0.751,5428,0.751,5429,0.751,5430,0.751,5431,0.751,5432,0.751,5433,0.751,5434,1.426,5435,1.426,5436,0.751,5437,0.751,5438,0.751,5439,0.751,5440,0.751,5441,0.751,5442,0.751,5443,0.751,5444,0.751,5445,0.751,5446,0.751,5447,0.751,5448,0.751,5449,0.751,5450,0.751,5451,0.751,5452,0.751]],["component/109",[22,0.319]],["keyword/109",[]],["title/110-1",[1141,36.563]],["name/110-1",[]],["text/110-1",[]],["component/110-1",[]],["keyword/110-1",[]],["title/110-2",[159,22.523,575,36.423,906,28.585]],["name/110-2",[]],["text/110-2",[]],["component/110-2",[]],["keyword/110-2",[]],["title/110-3",[430,34.075,575,36.423,1282,34.5]],["name/110-3",[]],["text/110-3",[]],["component/110-3",[]],["keyword/110-3",[]],["title/110-4",[586,27.316,3807,35.102,4745,41.096]],["name/110-4",[]],["text/110-4",[]],["component/110-4",[]],["keyword/110-4",[]],["title/110-5",[22,15.666]],["name/110-5",[]],["text/110-5",[]],["component/110-5",[]],["keyword/110-5",[]],["title/110-6",[46,28.818,47,29.556,157,33.669]],["name/110-6",[]],["text/110-6",[]],["component/110-6",[]],["keyword/110-6",[]],["title/110",[159,17.343,380,29.398,426,24.29,575,28.045,906,22.01]],["name/110",[286,0.558]],["text/110",[5,0.472,9,0.65,18,2.067,19,2.485,22,0.907,24,1.28,25,0.465,26,0.645,27,2.13,29,0.54,42,1.186,47,0.678,49,1.832,52,2.068,53,1.91,55,0.566,57,1.185,59,0.64,60,1.442,63,0.696,65,0.835,68,1.305,71,0.823,74,0.791,81,3.021,84,1.185,89,1.158,92,0.99,129,0.875,130,1.967,131,0.596,135,0.569,136,0.772,138,1.798,140,0.577,143,1.36,148,0.823,158,3.373,159,3.565,160,1.28,164,0.596,165,0.812,169,0.731,170,0.891,177,2.262,180,1.785,181,0.875,182,0.723,188,0.63,189,0.465,206,0.848,212,1.093,222,0.666,228,0.925,232,0.746,243,0.875,244,1.506,253,2.162,260,1.717,266,0.635,269,0.763,270,1.424,284,0.791,289,0.801,293,0.861,295,3.051,296,2.39,297,0.479,307,3.353,308,1.072,311,0.731,315,0.731,383,0.635,386,1.439,398,1.225,399,0.635,408,0.875,426,2.239,427,1.252,430,3.953,432,3.197,438,0.801,442,1.044,445,0.966,464,1.36,470,0.925,475,2.449,507,0.848,508,0.763,509,2.779,519,1.047,522,0.772,529,1.982,533,1.939,553,1.246,569,1.348,579,0.534,586,3.276,587,0.791,589,0.891,604,1.176,616,1.569,621,0.781,637,2.336,641,1.764,701,1.375,717,0.763,742,0.812,743,0.791,746,0.746,755,1.804,770,0.6,772,0.746,779,1.141,785,0.493,796,1.391,805,0.763,808,1.653,813,1.332,816,0.907,826,2.827,827,4.316,832,0.907,842,1.522,845,2.372,848,0.907,853,1.269,856,0.945,862,0.875,865,0.738,878,0.731,879,0.907,906,2.645,907,1.633,944,1.293,948,1.257,950,0.925,988,0.791,998,0.835,1066,2.323,1087,0.861,1088,1.522,1089,2.99,1111,0.655,1135,0.69,1143,1.318,1144,0.474,1145,1.895,1154,1.083,1157,3.372,1158,0.925,1169,1.686,1175,0.945,1183,0.823,1190,0.738,1197,2.097,1200,1.407,1207,2.758,1216,0.812,1217,0.823,1239,0.891,1242,1.5,1247,0.791,1250,0.772,1251,1.761,1255,2.372,1262,1.36,1269,0.754,1282,5.258,1305,2.553,1336,0.823,1343,0.945,1353,0.945,1399,0.875,1406,1.18,1416,2.162,1428,1.18,1434,1.48,1440,0.945,1448,0.907,1457,0.907,1580,0.891,1583,1.853,1654,0.812,1667,0.966,1703,0.684,1821,0.925,1850,1.017,1852,1.126,1870,0.801,1885,1.5,1913,0.966,1958,1.721,1959,1.047,1988,0.891,1995,1.126,2115,0.945,2122,0.966,2155,1.047,2272,1.047,2303,1.853,2423,3.812,2453,2.052,2463,1.017,2466,1.18,2572,1.126,2675,1.653,2788,1.126,2945,0.99,2960,0.875,2975,0.861,3214,2.99,3756,1.18,3807,4.68,3823,3.653,3825,0.966,4255,1.126,4531,1.18,4601,6.289,4602,3.147,4659,1.974,4726,3.562,4745,5.153,4812,1.083,4894,2.15,4910,2.052,4912,1.18,4947,1.126,4948,5.697,4950,6.673,4955,3.144,4956,2.282,4958,1.18,4961,1.252,4962,1.252,4963,1.252,4964,1.252,4965,1.252,4966,1.252,4967,1.252,4968,2.282,4970,1.083,4971,1.252,4972,1.252,4973,1.252,5361,2.282,5363,1.252,5453,1.361,5454,2.481,5455,1.361,5456,2.481,5457,3.418,5458,3.418,5459,2.481]],["component/110",[22,0.319]],["keyword/110",[]],["title/111-1",[1141,36.563]],["name/111-1",[]],["text/111-1",[]],["component/111-1",[]],["keyword/111-1",[]],["title/111-2",[78,37.084,5460,64.185]],["name/111-2",[]],["text/111-2",[]],["component/111-2",[]],["keyword/111-2",[]],["title/111-3",[259,49.526,1094,49.526]],["name/111-3",[]],["text/111-3",[]],["component/111-3",[]],["keyword/111-3",[]],["title/111-4",[123,28.469,128,25.925,214,34.139,477,36.37,779,21.017]],["name/111-4",[]],["text/111-4",[]],["component/111-4",[]],["keyword/111-4",[]],["title/111-5",[78,24.29,285,26.565,509,18.444,666,25.061,1248,29.912]],["name/111-5",[]],["text/111-5",[]],["component/111-5",[]],["keyword/111-5",[]],["title/111-6",[128,29.294,214,38.576,477,41.096,779,23.748]],["name/111-6",[]],["text/111-6",[]],["component/111-6",[]],["keyword/111-6",[]],["title/111-7",[128,33.669,779,27.294,1685,45.674]],["name/111-7",[]],["text/111-7",[]],["component/111-7",[]],["keyword/111-7",[]],["title/111-8",[78,31.545,1189,34.5,1248,38.847]],["name/111-8",[]],["text/111-8",[]],["component/111-8",[]],["keyword/111-8",[]],["title/111-9",[478,25.985,565,26.161,1679,44.337]],["name/111-9",[]],["text/111-9",[]],["component/111-9",[]],["keyword/111-9",[]],["title/111-10",[22,15.666]],["name/111-10",[]],["text/111-10",[]],["component/111-10",[]],["keyword/111-10",[]],["title/111",[42,9.563,52,10.854,259,24.118,453,31.257,478,14.876,509,13.713,1094,24.118,1095,26.148]],["name/111",[286,0.558]],["text/111",[5,0.705,10,0.52,22,1.049,24,1.05,25,1.214,27,1.103,41,0.556,42,1.331,45,0.435,46,0.533,49,0.477,52,2.429,53,0.497,54,0.673,55,0.456,56,1.05,57,0.524,59,0.516,77,1.013,78,5.056,84,0.972,85,0.731,89,0.512,90,0.524,92,0.798,94,4.839,99,0.655,102,0.684,109,1.393,123,1.268,124,0.779,127,1.512,128,4.313,131,0.48,132,0.63,134,1.268,135,0.459,138,0.577,139,0.897,140,0.465,148,0.664,149,0.731,152,0.595,158,0.841,159,1.584,160,1.834,164,1.828,167,0.537,173,1.093,176,0.951,177,0.589,180,2.213,181,0.706,185,1.268,187,0.936,189,0.695,191,0.684,193,0.841,198,0.497,207,0.501,212,0.484,214,5.278,218,0.556,222,0.996,230,0.533,247,0.988,248,0.731,251,1.168,257,1.684,259,4.8,266,0.512,285,4.27,289,1.198,291,0.746,295,0.684,296,2.369,297,0.386,308,0.879,311,1.093,318,0.779,373,0.622,379,0.638,385,0.694,390,0.49,392,0.602,396,1.497,399,0.512,406,0.494,419,0.494,420,0.731,442,0.857,464,1.116,477,6.733,478,4.11,509,3.068,516,0.762,518,0.577,530,1.764,535,0.684,565,3.115,569,0.433,586,1.287,591,0.779,609,1.754,626,1.359,666,2.29,695,1.154,696,0.646,710,0.779,724,0.873,725,0.615,743,0.638,770,1.566,779,2.401,782,0.762,805,0.615,818,0.762,837,0.608,857,0.664,862,0.706,878,0.589,889,0.684,896,1.009,915,0.505,944,1.483,948,0.556,961,0.873,999,0.561,1002,1.198,1009,1.383,1043,1.009,1044,3.918,1053,1.141,1079,0.646,1094,4.8,1095,2.189,1108,0.646,1144,0.991,1189,5.38,1203,0.873,1214,0.762,1216,0.655,1247,1.183,1248,4.209,1250,0.622,1262,0.602,1278,0.873,1303,1.444,1321,0.646,1331,0.746,1354,1.198,1466,0.655,1510,1.619,1541,0.684,1542,0.779,1582,0.673,1634,1.619,1679,1.52,1685,0.844,1686,0.951,1703,0.551,1707,0.951,1709,0.951,1711,1.764,1717,0.951,1728,0.706,1767,0.798,1778,0.82,1793,1.684,1796,1.383,1854,0.779,2008,0.873,2009,1.009,2010,1.009,2011,0.908,2012,1.009,2013,1.009,2022,1.009,2023,1.009,2024,1.009,2026,1.009,2027,0.951,2030,1.872,2115,0.762,2116,0.844,2119,0.82,2132,1.009,2134,1.009,2153,0.746,2208,0.908,2240,0.908,2346,0.718,2675,0.731,3194,1.009,3346,0.762,3495,1.009,3725,0.951,3838,1.009,4210,1.009,4378,0.951,4638,1.009,4641,0.951,4642,1.872,4646,1.009,4695,2.354,4795,1.009,4822,1.009,4831,1.009,4835,1.009,4851,0.951,5012,1.009,5298,1.009,5460,1.009,5461,1.098,5462,4.177,5463,3.554,5464,2.846,5465,1.098,5466,1.098,5467,1.098,5468,2.035,5469,1.098,5470,1.098,5471,4.729,5472,1.098,5473,1.098,5474,1.098,5475,1.098,5476,1.098,5477,1.098,5478,1.098,5479,1.098,5480,1.098,5481,1.098,5482,1.098,5483,1.098,5484,1.098,5485,1.098,5486,1.098,5487,1.098,5488,1.098,5489,1.098,5490,1.098,5491,1.098,5492,1.098,5493,1.098,5494,1.098,5495,1.098,5496,1.098,5497,1.098,5498,3.554,5499,1.098,5500,2.035,5501,1.098,5502,1.098,5503,1.098,5504,1.098,5505,1.098,5506,1.098,5507,1.098,5508,1.098,5509,1.098,5510,1.098,5511,3.554,5512,4.177,5513,4.177,5514,1.098,5515,1.098,5516,1.098,5517,1.098,5518,2.035,5519,2.035,5520,1.098,5521,1.098,5522,1.098,5523,1.098,5524,1.098,5525,1.098,5526,1.098,5527,1.098,5528,1.098,5529,1.098,5530,2.035,5531,1.098,5532,1.098,5533,2.035,5534,1.098,5535,1.098,5536,1.098,5537,1.098,5538,3.554,5539,1.098,5540,1.098,5541,1.098,5542,1.098,5543,1.098,5544,1.098,5545,1.098,5546,1.098,5547,1.098,5548,1.098,5549,1.098,5550,1.098,5551,1.098,5552,1.098,5553,1.098,5554,1.098,5555,1.098,5556,1.098,5557,1.098,5558,1.098,5559,1.098]],["component/111",[22,0.319]],["keyword/111",[]],["title/112",[478,25.985,1044,32.906,1097,36.972]],["name/112",[286,0.558]],["text/112",[5,2.952,22,2.132,25,2.91,41,4.316,42,2.979,52,2.72,55,3.542,140,3.609,158,3.52,189,2.91,193,3.52,297,2.995,383,3.975,386,3.586,478,3.728,509,3.437,1044,4.722,1144,2.966,1194,5.389]],["component/112",[22,0.319]],["keyword/112",[]],["title/113-1",[1141,36.563]],["name/113-1",[]],["text/113-1",[]],["component/113-1",[]],["keyword/113-1",[]],["title/113-2",[1253,57.73,1254,52.121]],["name/113-2",[]],["text/113-2",[]],["component/113-2",[]],["keyword/113-2",[]],["title/113-3",[22,10.986,1088,36.423,1089,42.129]],["name/113-3",[]],["text/113-3",[]],["component/113-3",[]],["keyword/113-3",[]],["title/113-4",[46,28.818,47,29.556,157,33.669]],["name/113-4",[]],["text/113-4",[]],["component/113-4",[]],["keyword/113-4",[]],["title/113",[509,23.953,582,36.423,1157,33.28]],["name/113",[286,0.558]],["text/113",[2,1.26,4,2.014,5,0.742,9,1.774,22,1.445,25,0.731,27,0.83,29,0.849,42,1.045,46,1.039,49,1.614,52,3.201,55,1.544,59,1.007,63,1.899,68,1.126,75,1.647,89,0.999,90,1.774,135,0.896,139,0.943,140,1.573,142,1.085,143,2.036,167,1.048,185,2.313,187,2.261,188,2.277,189,0.731,212,2.586,218,1.882,222,4.046,230,1.039,232,2.036,244,0.943,253,1.354,260,1.075,293,1.354,297,0.753,308,0.925,377,1.126,383,2.739,386,2.47,399,0.999,401,1.214,432,4.842,433,1.771,442,0.901,445,1.519,475,1.244,505,2.278,507,1.333,508,2.082,509,4.419,510,1.229,517,1.599,518,1.126,522,2.789,529,2.312,533,2.106,553,1.075,565,1.636,566,1.229,567,1.771,579,0.839,582,3.6,586,0.775,591,1.519,604,1.76,612,2.34,666,2.036,706,1.703,707,1.149,770,2.586,776,2.215,778,1.066,780,1.599,790,0.95,792,1.161,796,2.082,802,1.115,803,1.244,842,2.278,851,1.599,856,1.486,861,2.954,865,2.014,870,2.278,878,1.149,879,1.427,904,1.969,928,1.333,938,1.295,948,1.882,961,0.919,965,2.635,969,1.733,972,1.354,996,2.349,1067,1.095,1088,3.6,1089,2.635,1093,1.023,1144,0.745,1148,1.486,1157,5.365,1159,1.031,1161,3.29,1173,1.295,1179,1.354,1180,1.313,1200,1.214,1204,1.557,1217,1.295,1219,3.087,1226,1.187,1251,1.519,1253,6.461,1254,6.468,1255,3.412,1262,2.696,1264,3.217,1306,4.267,1336,1.295,1354,2.186,1393,1.557,1394,1.771,1399,1.377,1416,2.349,1418,1.856,1461,2.523,1500,2.954,1774,4.383,1960,3.218,2122,1.519,2208,1.771,2247,1.771,2252,1.599,2507,3.072,2694,2.857,2931,1.771,2945,1.557,2975,1.354,3255,3.415,3385,1.771,3555,1.969,4247,1.771,4253,5.086,4344,4.854,4345,4.522,4854,1.599,4908,1.856,5238,1.856,5299,1.969,5386,1.969,5560,2.141,5561,2.141,5562,2.141,5563,2.141,5564,2.141,5565,2.141,5566,2.141,5567,2.141]],["component/113",[22,0.319]],["keyword/113",[]],["title/114-1",[260,35.051,387,38.261]],["name/114-1",[]],["text/114-1",[]],["component/114-1",[]],["keyword/114-1",[]],["title/114-2",[387,46.409]],["name/114-2",[]],["text/114-2",[]],["component/114-2",[]],["keyword/114-2",[]],["title/114",[42,16.704,52,18.959,387,32.547]],["name/114",[286,0.558]],["text/114",[5,0.682,10,1.635,22,1.165,24,1.781,25,0.672,27,2.441,29,2.961,42,1.771,43,0.818,44,0.844,45,3.145,48,2.345,52,2.661,53,0.892,55,0.818,56,1.016,73,1.046,77,0.98,80,1.748,93,2.183,94,4.935,123,4.651,140,0.834,149,1.311,158,0.813,164,3.033,165,1.174,180,0.834,189,0.672,193,0.813,199,1.245,207,1.575,244,2.03,247,0.955,260,0.988,266,2.15,270,1.98,271,2.78,281,1.174,282,1.47,292,1.365,296,1.116,297,0.692,303,1.365,308,1.49,315,1.056,382,1.245,383,0.918,387,5.548,405,1.116,442,3.901,471,0.963,511,1.207,524,2.424,531,0.948,569,0.776,579,2.717,666,3.034,770,2.439,781,1.365,799,1.337,873,2.971,909,1.266,927,4.311,967,1.396,968,1.158,995,1.144,999,1.006,1007,3.131,1009,2.345,1047,2.873,1053,1.103,1067,3.219,1079,2.031,1097,1.226,1132,1.431,1142,1.431,1143,1.046,1144,0.685,1173,1.19,1242,2.786,1245,1.396,1267,1.19,1280,2.786,1292,1.365,1374,1.566,1466,2.058,1493,1.337,1667,1.396,1704,2.577,1787,1.431,1789,1.311,1814,1.47,1988,2.258,1991,1.628,2077,1.47,2133,3.811,2138,2.712,2175,1.226,2277,1.706,2286,1.47,2381,1.566,2410,1.706,2411,1.81,2412,1.81,2426,2.654,2455,1.706,2715,1.431,2829,1.81,3179,1.514,3182,1.628,3840,1.81,4042,3.173,5568,3.45,5569,1.968,5570,1.968,5571,3.45,5572,3.45,5573,1.968,5574,1.968,5575,1.968,5576,1.968,5577,3.45,5578,1.968,5579,1.968,5580,1.968,5581,3.45,5582,1.968,5583,4.607,5584,1.968,5585,1.968,5586,1.968,5587,1.968,5588,1.968,5589,1.968,5590,1.968,5591,1.968,5592,1.968,5593,1.968,5594,1.968,5595,1.968,5596,6.296,5597,1.968,5598,1.968,5599,6.931,5600,1.968,5601,3.45,5602,1.968,5603,1.968,5604,1.968,5605,1.968,5606,1.968,5607,1.968,5608,1.968,5609,1.968,5610,1.968,5611,1.968,5612,1.968,5613,1.968,5614,1.968,5615,1.968,5616,1.968,5617,3.45,5618,1.968,5619,1.968,5620,1.968,5621,1.968,5622,1.968,5623,1.968,5624,1.968,5625,1.968,5626,1.968]],["component/114",[22,0.319]],["keyword/114",[]]],"invertedIndex":[["",{"_index":94,"title":{"50-3":{},"90-7":{},"102-3":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"19":{},"26":{},"31":{},"34":{},"37":{},"38":{},"42":{},"43":{},"46":{},"47":{},"49":{},"52":{},"54":{},"55":{},"56":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"78":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"102":{},"104":{},"106":{},"108":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["0",{"_index":609,"title":{},"name":{},"text":{"7":{},"34":{},"37":{},"38":{},"40":{},"42":{},"46":{},"47":{},"49":{},"52":{},"54":{},"55":{},"56":{},"58":{},"61":{},"62":{},"66":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"78":{},"83":{},"84":{},"85":{},"88":{},"89":{},"91":{},"93":{},"95":{},"99":{},"102":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["0,1",{"_index":5312,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["0.0",{"_index":1893,"title":{},"name":{},"text":{"40":{},"41":{},"56":{},"59":{},"107":{}},"component":{},"keyword":{}}],["0.0f",{"_index":3102,"title":{},"name":{},"text":{"61":{},"71":{},"109":{}},"component":{},"keyword":{}}],["0.2",{"_index":1899,"title":{},"name":{},"text":{"41":{},"82":{}},"component":{},"keyword":{}}],["0.27f",{"_index":2485,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["0.3",{"_index":5305,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["0.34f",{"_index":2482,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["0.43",{"_index":1847,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["0.45",{"_index":4768,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["0.498487",{"_index":4991,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["0.4f",{"_index":2483,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["0.5",{"_index":2865,"title":{},"name":{},"text":{"56":{},"107":{},"108":{}},"component":{},"keyword":{}}],["0.5f",{"_index":2480,"title":{},"name":{},"text":{"54":{},"106":{}},"component":{},"keyword":{}}],["0.61f",{"_index":2484,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["0.76f",{"_index":2481,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["0.9",{"_index":4504,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["0.95",{"_index":4485,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["0.95hf",{"_index":4522,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["0.9hf",{"_index":4537,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["087",{"_index":4771,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["0].gl_posit",{"_index":3512,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["0s",{"_index":5326,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["0u",{"_index":2577,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["0x4",{"_index":2858,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x510000000051",{"_index":2860,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x520000000052",{"_index":2859,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x55625acf5600",{"_index":2853,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x55625b184d60",{"_index":2869,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x55625b187090",{"_index":2857,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x55625b1893c0",{"_index":2872,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["0x893513c7",{"_index":2856,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["1",{"_index":626,"title":{},"name":{},"text":{"7":{},"11":{},"26":{},"31":{},"34":{},"37":{},"38":{},"42":{},"46":{},"47":{},"52":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"64":{},"65":{},"66":{},"69":{},"71":{},"74":{},"77":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"91":{},"92":{},"93":{},"95":{},"99":{},"100":{},"102":{},"106":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["1,1",{"_index":5311,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["1.0",{"_index":995,"title":{},"name":{},"text":{"11":{},"26":{},"31":{},"38":{},"40":{},"41":{},"47":{},"56":{},"59":{},"60":{},"61":{},"69":{},"77":{},"88":{},"89":{},"90":{},"91":{},"95":{},"108":{},"109":{},"114":{}},"component":{},"keyword":{}}],["1.05",{"_index":4488,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["1.05hf",{"_index":4526,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["1.08",{"_index":839,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["1.0f",{"_index":2368,"title":{},"name":{},"text":{"52":{},"54":{},"61":{},"71":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["1.0hf",{"_index":4521,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["1.1",{"_index":1814,"title":{},"name":{},"text":{"38":{},"47":{},"49":{},"67":{},"90":{},"91":{},"114":{}},"component":{},"keyword":{}}],["1.11",{"_index":4605,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["1.16",{"_index":4597,"title":{},"name":{},"text":{"91":{},"94":{}},"component":{},"keyword":{}}],["1.1hf",{"_index":4525,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["1.2",{"_index":1817,"title":{},"name":{},"text":{"38":{},"47":{},"95":{},"101":{},"102":{}},"component":{},"keyword":{}}],["1.2.197",{"_index":3036,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["1.3",{"_index":3176,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["1.3.278",{"_index":675,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1.4",{"_index":3372,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["1.57",{"_index":5202,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["1.67",{"_index":4596,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["1.75f",{"_index":3482,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["1.f",{"_index":4172,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["1/128",{"_index":3260,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["10",{"_index":437,"title":{},"name":{},"text":{"4":{},"100":{},"103":{}},"component":{},"keyword":{}}],["10.4",{"_index":5268,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["10.8",{"_index":829,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["10.f",{"_index":3901,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["100",{"_index":835,"title":{},"name":{},"text":{"8":{},"26":{},"31":{},"101":{}},"component":{},"keyword":{}}],["1000000.0f",{"_index":1868,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["1024.0",{"_index":2736,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["1080",{"_index":5130,"title":{},"name":{},"text":{"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["1080p",{"_index":5167,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["10m",{"_index":5195,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["11",{"_index":3264,"title":{},"name":{},"text":{"65":{},"94":{}},"component":{},"keyword":{}}],["113/",{"_index":5344,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["12",{"_index":4770,"title":{},"name":{},"text":{"94":{},"109":{}},"component":{},"keyword":{}}],["123",{"_index":4850,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["1250",{"_index":4014,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["126",{"_index":3359,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["128",{"_index":2713,"title":{},"name":{},"text":{"56":{},"95":{},"108":{}},"component":{},"keyword":{}}],["128/256",{"_index":4830,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["1280",{"_index":2451,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["1281",{"_index":2448,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["13",{"_index":5226,"title":{},"name":{},"text":{"104":{},"109":{}},"component":{},"keyword":{}}],["131",{"_index":2871,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["134",{"_index":4275,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["140.29",{"_index":4769,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["15",{"_index":618,"title":{},"name":{},"text":{"7":{},"94":{}},"component":{},"keyword":{}}],["15.7",{"_index":5201,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["153",{"_index":4587,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["1533.9",{"_index":5251,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["16",{"_index":637,"title":{"90":{},"91":{},"12-20":{},"12-21":{},"20-19":{},"20-20":{},"90-2":{},"90-4":{},"90-5":{},"90-6":{},"90-7":{},"91-2":{},"91-4":{}},"name":{},"text":{"7":{},"12":{},"20":{},"41":{},"55":{},"74":{},"90":{},"91":{},"95":{},"98":{},"108":{},"110":{}},"component":{},"keyword":{}}],["16.7",{"_index":4856,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["16.7m",{"_index":4847,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["16/32",{"_index":1272,"title":{},"name":{},"text":{"12":{},"17":{},"24":{}},"component":{},"keyword":{}}],["162",{"_index":2197,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["164",{"_index":2196,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["1685",{"_index":5156,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["16x16",{"_index":2250,"title":{},"name":{},"text":{"49":{},"100":{},"102":{},"104":{},"108":{}},"component":{},"keyword":{}}],["17",{"_index":640,"title":{},"name":{},"text":{"7":{},"91":{},"109":{}},"component":{},"keyword":{}}],["18",{"_index":4608,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["18.1",{"_index":5269,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["180",{"_index":794,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["1800",{"_index":4751,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["1856",{"_index":4814,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["1993010233",{"_index":2851,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["1:1",{"_index":4259,"title":{},"name":{},"text":{"88":{},"95":{}},"component":{},"keyword":{}}],["1].gl_posit",{"_index":3518,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["1st",{"_index":3089,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["1x",{"_index":5131,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["1x2",{"_index":3238,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["2",{"_index":641,"title":{"61":{},"12-79":{},"19-27":{}},"name":{},"text":{"7":{},"8":{},"9":{},"38":{},"47":{},"54":{},"55":{},"56":{},"61":{},"65":{},"66":{},"69":{},"71":{},"77":{},"83":{},"85":{},"88":{},"89":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"101":{},"105":{},"108":{},"110":{}},"component":{},"keyword":{}}],["2.0",{"_index":214,"title":{"111-4":{},"111-6":{}},"name":{},"text":{"2":{},"4":{},"48":{},"108":{},"111":{}},"component":{},"keyword":{}}],["2.0f",{"_index":3484,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["2.5",{"_index":5138,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["2/3",{"_index":4606,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["20",{"_index":2788,"title":{},"name":{},"text":{"56":{},"98":{},"101":{},"110":{}},"component":{},"keyword":{}}],["20.9",{"_index":4857,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["2000",{"_index":4028,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["2017",{"_index":617,"title":{},"name":{},"text":{"7":{},"108":{}},"component":{},"keyword":{}}],["2019",{"_index":635,"title":{},"name":{},"text":{"7":{},"96":{}},"component":{},"keyword":{}}],["202",{"_index":2814,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["2022",{"_index":619,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["21",{"_index":5385,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["21.5",{"_index":4609,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["21.5m",{"_index":4603,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["21.8",{"_index":4725,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["2168",{"_index":5129,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["22",{"_index":5386,"title":{},"name":{},"text":{"109":{},"113":{}},"component":{},"keyword":{}}],["22.9",{"_index":4727,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["2220",{"_index":5256,"title":{},"name":{},"text":{"106":{},"108":{}},"component":{},"keyword":{}}],["2247",{"_index":5134,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["2280x1080",{"_index":953,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["23",{"_index":4903,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["2366",{"_index":5153,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["24",{"_index":2789,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["24.4",{"_index":4945,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["25",{"_index":2787,"title":{},"name":{},"text":{"56":{},"101":{}},"component":{},"keyword":{}}],["25.1.8937393",{"_index":734,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["256",{"_index":2704,"title":{},"name":{},"text":{"56":{},"95":{},"108":{}},"component":{},"keyword":{}}],["257",{"_index":2503,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["259/260",{"_index":2504,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["26",{"_index":2785,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["262.2k/",{"_index":5335,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["266",{"_index":4848,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["27",{"_index":2784,"title":{},"name":{},"text":{"56":{},"96":{}},"component":{},"keyword":{}}],["27.4",{"_index":2918,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["270k/",{"_index":5338,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["28.8",{"_index":4774,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["2].gl_posit",{"_index":3520,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["2^16",{"_index":5175,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["2bpc",{"_index":4980,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["2d",{"_index":1278,"title":{},"name":{},"text":{"12":{},"17":{},"45":{},"109":{},"111":{}},"component":{},"keyword":{}}],["2f",{"_index":3445,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["2nd",{"_index":3090,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["3",{"_index":616,"title":{},"name":{},"text":{"7":{},"54":{},"56":{},"60":{},"65":{},"66":{},"71":{},"83":{},"86":{},"88":{},"91":{},"94":{},"98":{},"101":{},"110":{}},"component":{},"keyword":{}}],["3.19.2",{"_index":662,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3.22.1",{"_index":733,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3.28",{"_index":674,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3.6",{"_index":5327,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["3.7",{"_index":5328,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["3.9gb/",{"_index":5168,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["3.x",{"_index":933,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["30",{"_index":826,"title":{},"name":{},"text":{"8":{},"98":{},"108":{},"110":{}},"component":{},"keyword":{}}],["302",{"_index":5160,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["31",{"_index":2795,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["319.25",{"_index":4772,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["32",{"_index":1260,"title":{},"name":{},"text":{"12":{},"20":{},"38":{},"47":{},"49":{},"52":{},"55":{},"56":{},"90":{},"92":{},"101":{}},"component":{},"keyword":{}}],["32/8",{"_index":5257,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["32bpp",{"_index":5155,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["33",{"_index":4658,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["337.7m",{"_index":5205,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["358k",{"_index":4600,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["36",{"_index":4283,"title":{},"name":{},"text":{"88":{},"91":{}},"component":{},"keyword":{}}],["360",{"_index":824,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["37",{"_index":4906,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["38",{"_index":4907,"title":{},"name":{},"text":{"96":{},"99":{}},"component":{},"keyword":{}}],["387",{"_index":4611,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["39",{"_index":4282,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["3951",{"_index":5154,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["3].gl_posit",{"_index":3522,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["3d",{"_index":564,"title":{"7-12":{}},"name":{},"text":{"7":{},"13":{},"48":{},"59":{}},"component":{},"keyword":{}}],["3rd",{"_index":3096,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["4",{"_index":1913,"title":{},"name":{},"text":{"41":{},"54":{},"56":{},"65":{},"71":{},"95":{},"98":{},"101":{},"110":{}},"component":{},"keyword":{}}],["4.4",{"_index":5300,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["40",{"_index":3261,"title":{},"name":{},"text":{"64":{},"88":{}},"component":{},"keyword":{}}],["409.6k/",{"_index":5342,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["42.0",{"_index":2219,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["431.5",{"_index":5266,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["44",{"_index":4902,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["450",{"_index":2726,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["4689",{"_index":4589,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["475",{"_index":4815,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["49.8487",{"_index":4990,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["49.8db",{"_index":4984,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["4>1)|(rate_i",{"_index":3248,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["4>>1",{"_index":3247,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["4k",{"_index":4719,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["4x",{"_index":5107,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["4x2",{"_index":3239,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["4x4",{"_index":3236,"title":{},"name":{},"text":{"64":{},"95":{},"99":{}},"component":{},"keyword":{}}],["5",{"_index":2730,"title":{},"name":{},"text":{"56":{},"101":{}},"component":{},"keyword":{}}],["5.7",{"_index":5200,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["50",{"_index":1154,"title":{},"name":{},"text":{"12":{},"20":{},"92":{},"98":{},"110":{}},"component":{},"keyword":{}}],["50.4",{"_index":4946,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["500",{"_index":5137,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["5000",{"_index":431,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["500k",{"_index":2674,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["500mb/",{"_index":5169,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["51",{"_index":4578,"title":{},"name":{},"text":{"91":{},"92":{}},"component":{},"keyword":{}}],["513",{"_index":4773,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["52",{"_index":4579,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["528.6",{"_index":4657,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["53.3",{"_index":4766,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["531.1m",{"_index":5204,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["54",{"_index":4585,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["55",{"_index":4583,"title":{},"name":{},"text":{"91":{},"108":{}},"component":{},"keyword":{}}],["554.8",{"_index":5267,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["56",{"_index":2195,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["56/",{"_index":5343,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["562",{"_index":5132,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["56m",{"_index":5564,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["57",{"_index":2193,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["575",{"_index":5258,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["59",{"_index":2861,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["6",{"_index":692,"title":{},"name":{},"text":{"7":{},"38":{},"47":{},"59":{},"66":{},"106":{}},"component":{},"keyword":{}}],["6.3gb/",{"_index":5159,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["60",{"_index":4602,"title":{},"name":{},"text":{"91":{},"97":{},"98":{},"101":{},"105":{},"106":{},"110":{}},"component":{},"keyword":{}}],["600.2",{"_index":5253,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["614.7k/",{"_index":5336,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["630",{"_index":5161,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["64",{"_index":810,"title":{},"name":{},"text":{"8":{},"10":{},"38":{},"41":{},"47":{},"49":{},"56":{},"67":{},"83":{},"88":{}},"component":{},"keyword":{}}],["64x64",{"_index":4335,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["65",{"_index":4992,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["67",{"_index":2868,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["7",{"_index":1895,"title":{},"name":{},"text":{"40":{},"109":{}},"component":{},"keyword":{}}],["717417",{"_index":4599,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["720",{"_index":2452,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["721",{"_index":2450,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["72m",{"_index":5563,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["788.0",{"_index":4655,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["8",{"_index":276,"title":{"90-3":{}},"name":{},"text":{"2":{},"7":{},"49":{},"64":{},"90":{},"94":{},"99":{},"108":{}},"component":{},"keyword":{}}],["877",{"_index":4767,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["8k",{"_index":4718,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["9",{"_index":620,"title":{},"name":{},"text":{"7":{},"91":{}},"component":{},"keyword":{}}],["9.92",{"_index":5199,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["9.94",{"_index":5197,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["90",{"_index":5418,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["9128",{"_index":4588,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["930.5",{"_index":2864,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["933.7",{"_index":5252,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["944.5",{"_index":2870,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["986.3",{"_index":5265,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["9k",{"_index":5337,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["_combined_imag",{"_index":1675,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["_ptr_physicalstoragebuffer_posit",{"_index":2194,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["_sampler",{"_index":1662,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["_scene_desc",{"_index":3923,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["_textur",{"_index":1661,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["_win32",{"_index":3610,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["abba",{"_index":366,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["aberr",{"_index":4975,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["abil",{"_index":1223,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"48":{},"58":{},"64":{},"82":{},"83":{},"97":{},"105":{},"107":{}},"component":{},"keyword":{}}],["abov",{"_index":56,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"14":{},"34":{},"37":{},"38":{},"42":{},"43":{},"46":{},"47":{},"52":{},"54":{},"59":{},"61":{},"66":{},"74":{},"77":{},"84":{},"85":{},"91":{},"93":{},"94":{},"95":{},"99":{},"101":{},"103":{},"106":{},"108":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["absolut",{"_index":3385,"title":{},"name":{},"text":{"68":{},"72":{},"109":{},"113":{}},"component":{},"keyword":{}}],["abstract",{"_index":970,"title":{"13-7":{}},"name":{},"text":{"11":{},"12":{},"13":{},"17":{},"19":{},"49":{},"55":{},"85":{},"99":{}},"component":{},"keyword":{}}],["acceler",{"_index":1121,"title":{"81":{},"12-61":{},"12-62":{},"19-9":{},"19-10":{},"82-1":{},"83-2":{}},"name":{},"text":{"12":{},"19":{},"80":{},"81":{},"82":{},"83":{},"91":{}},"component":{},"keyword":{}}],["acceleration_structure_geometri",{"_index":3871,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["acceleration_structure_geometry.geometry.triangles.indexdata",{"_index":3881,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["acceleration_structure_geometry.geometry.triangles.indextyp",{"_index":3879,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["acceleration_structure_geometry.geometry.triangles.maxvertex",{"_index":3875,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["acceleration_structure_geometry.geometry.triangles.transformdata",{"_index":3883,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["acceleration_structure_geometry.geometry.triangles.vertexdata",{"_index":3873,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["acceleration_structure_geometry.geometry.triangles.vertexstrid",{"_index":3877,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["accept",{"_index":4547,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["access",{"_index":537,"title":{"102-3":{}},"name":{},"text":{"5":{},"12":{},"13":{},"19":{},"20":{},"34":{},"38":{},"42":{},"47":{},"49":{},"55":{},"56":{},"62":{},"64":{},"67":{},"71":{},"74":{},"82":{},"83":{},"85":{},"95":{},"96":{},"104":{},"109":{}},"component":{},"keyword":{}}],["accident",{"_index":5082,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["accommod",{"_index":5109,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["accompani",{"_index":1542,"title":{},"name":{},"text":{"26":{},"31":{},"34":{},"38":{},"42":{},"47":{},"54":{},"78":{},"111":{}},"component":{},"keyword":{}}],["accomplish",{"_index":4031,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["accord",{"_index":4743,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["accordingli",{"_index":2170,"title":{},"name":{},"text":{"49":{},"94":{},"101":{},"109":{}},"component":{},"keyword":{}}],["account",{"_index":4604,"title":{},"name":{},"text":{"91":{},"103":{},"109":{}},"component":{},"keyword":{}}],["accumul",{"_index":2001,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["accur",{"_index":4616,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["achiev",{"_index":1145,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"48":{},"49":{},"60":{},"64":{},"67":{},"69":{},"75":{},"82":{},"85":{},"90":{},"91":{},"93":{},"95":{},"97":{},"98":{},"99":{},"101":{},"105":{},"107":{},"109":{},"110":{}},"component":{},"keyword":{}}],["acquir",{"_index":1959,"title":{},"name":{},"text":{"43":{},"65":{},"74":{},"88":{},"98":{},"110":{}},"component":{},"keyword":{}}],["acquisit",{"_index":1995,"title":{},"name":{},"text":{"43":{},"98":{},"109":{},"110":{}},"component":{},"keyword":{}}],["act",{"_index":514,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["action",{"_index":883,"title":{},"name":{},"text":{"9":{},"54":{},"57":{}},"component":{},"keyword":{}}],["activ",{"_index":445,"title":{},"name":{},"text":{"4":{},"7":{},"65":{},"95":{},"98":{},"104":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["activity’",{"_index":5368,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["actual",{"_index":878,"title":{},"name":{},"text":{"8":{},"37":{},"43":{},"46":{},"49":{},"52":{},"54":{},"55":{},"56":{},"60":{},"71":{},"74":{},"86":{},"88":{},"90":{},"91":{},"94":{},"95":{},"96":{},"98":{},"100":{},"103":{},"104":{},"106":{},"108":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["ad",{"_index":102,"title":{"54-5":{}},"name":{},"text":{"2":{},"8":{},"54":{},"55":{},"56":{},"59":{},"64":{},"67":{},"69":{},"78":{},"84":{},"85":{},"104":{},"109":{},"111":{}},"component":{},"keyword":{}}],["adam",{"_index":321,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{},"keyword":{}}],["adapt",{"_index":4822,"title":{},"name":{},"text":{"95":{},"111":{}},"component":{},"keyword":{}}],["adb",{"_index":443,"title":{},"name":{},"text":{"4":{},"7":{},"10":{}},"component":{},"keyword":{}}],["add",{"_index":173,"title":{"5-3":{},"5-4":{}},"name":{},"text":{"2":{},"5":{},"7":{},"10":{},"11":{},"13":{},"15":{},"26":{},"31":{},"38":{},"47":{},"54":{},"56":{},"83":{},"85":{},"88":{},"90":{},"91":{},"93":{},"95":{},"96":{},"99":{},"104":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_descriptor_indexing_extension_nam",{"_index":5573,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_extended_dynamic_state_2_extension_nam",{"_index":3180,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_host_query_reset_extension_nam",{"_index":1816,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_memory_budget_extension_nam",{"_index":3423,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_mesh_shader_extension_nam",{"_index":3374,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_shader_object_extension_nam",{"_index":4036,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["add_device_extension(vk_ext_vertex_input_dynamic_state_extension_nam",{"_index":4452,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["add_device_extension(vk_khr_maintenance3_extension_nam",{"_index":5575,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["add_device_extension(vk_khr_shader_float_controls_extension_nam",{"_index":3376,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["add_device_extension(vk_khr_spirv_1_4_extension_nam",{"_index":3375,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["add_device_extension(vk_some_device_extension_nam",{"_index":993,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["add_instance_extension(vk_khr_get_physical_device_properties_2_extension_nam",{"_index":3179,"title":{},"name":{},"text":{"61":{},"69":{},"70":{},"77":{},"89":{},"114":{}},"component":{},"keyword":{}}],["add_instance_extension(vk_some_instance_extension_nam",{"_index":992,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["addit",{"_index":73,"title":{"66-7":{},"85-11":{}},"name":{},"text":{"2":{},"10":{},"11":{},"38":{},"47":{},"51":{},"54":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{},"70":{},"74":{},"83":{},"84":{},"89":{},"92":{},"95":{},"100":{},"101":{},"102":{},"106":{},"109":{},"114":{}},"component":{},"keyword":{}}],["addition",{"_index":381,"title":{},"name":{},"text":{"4":{},"13":{},"55":{},"59":{},"74":{},"86":{},"100":{}},"component":{},"keyword":{}}],["addr_info",{"_index":2592,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["addr_info.address",{"_index":2594,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["addr_info.format",{"_index":2599,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["addr_info.rang",{"_index":2597,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["address",{"_index":1126,"title":{"49":{},"12-69":{},"19-17":{},"49-6":{}},"name":{},"text":{"12":{},"13":{},"17":{},"19":{},"23":{},"49":{},"55":{},"56":{},"83":{},"96":{},"102":{}},"component":{},"keyword":{}}],["address_info",{"_index":2152,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["address_info.buff",{"_index":2148,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["address_info{vk_structure_type_buffer_device_address_info_khr",{"_index":2147,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["adher",{"_index":4643,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["adjac",{"_index":3135,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["adjust",{"_index":2571,"title":{},"name":{},"text":{"55":{},"71":{},"82":{},"94":{},"109":{}},"component":{},"keyword":{}}],["administr",{"_index":624,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["advanc",{"_index":388,"title":{"56-6":{}},"name":{},"text":{"4":{},"11":{},"37":{},"46":{},"56":{},"57":{},"71":{},"88":{},"94":{},"96":{}},"component":{},"keyword":{}}],["advantag",{"_index":1235,"title":{"13-12":{}},"name":{},"text":{"12":{},"13":{},"20":{},"59":{},"85":{},"88":{},"90":{},"94":{},"102":{},"108":{}},"component":{},"keyword":{}}],["advic",{"_index":5294,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["advis",{"_index":1510,"title":{},"name":{},"text":{"14":{},"67":{},"74":{},"94":{},"111":{}},"component":{},"keyword":{}}],["afbc",{"_index":428,"title":{"92":{},"12-3":{},"20-2":{},"92-2":{},"92-3":{}},"name":{},"text":{"4":{},"12":{},"20":{},"92":{},"99":{},"106":{}},"component":{},"keyword":{}}],["affect",{"_index":1221,"title":{},"name":{},"text":{"12":{},"20":{},"37":{},"46":{},"57":{},"58":{},"94":{},"95":{},"96":{},"104":{},"106":{}},"component":{},"keyword":{}}],["afford",{"_index":3245,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["aforement",{"_index":2306,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["afrc",{"_index":4976,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["afterward",{"_index":1827,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["again",{"_index":1066,"title":{},"name":{},"text":{"11":{},"38":{},"47":{},"56":{},"74":{},"88":{},"98":{},"99":{},"101":{},"106":{},"110":{}},"component":{},"keyword":{}}],["against",{"_index":287,"title":{},"name":{},"text":{"2":{},"59":{},"88":{},"95":{},"106":{}},"component":{},"keyword":{}}],["aggress",{"_index":14,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["agnost",{"_index":5514,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["agp",{"_index":732,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["agre",{"_index":255,"title":{},"name":{},"text":{"2":{},"7":{},"88":{}},"component":{},"keyword":{}}],["agreement",{"_index":210,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["ahardwarebuff",{"_index":3746,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["ahead",{"_index":1405,"title":{},"name":{},"text":{"13":{},"88":{},"108":{}},"component":{},"keyword":{}}],["aid",{"_index":2497,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["aim",{"_index":1168,"title":{},"name":{},"text":{"12":{},"20":{},"90":{},"93":{},"95":{},"104":{}},"component":{},"keyword":{}}],["albedo",{"_index":3919,"title":{},"name":{},"text":{"83":{},"108":{}},"component":{},"keyword":{}}],["alexand",{"_index":4890,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["algorithm",{"_index":1147,"title":{"40-2":{},"41-2":{},"56-6":{}},"name":{},"text":{"12":{},"17":{},"20":{},"40":{},"41":{},"48":{},"56":{},"58":{},"59":{},"90":{},"92":{},"100":{},"104":{},"106":{}},"component":{},"keyword":{}}],["alia",{"_index":1469,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["alias",{"_index":1206,"title":{"101":{}},"name":{},"text":{"12":{},"13":{},"20":{},"49":{},"101":{}},"component":{},"keyword":{}}],["align",{"_index":1419,"title":{"49-7":{}},"name":{},"text":{"13":{},"49":{},"52":{},"55":{}},"component":{},"keyword":{}}],["aligned_size(image_binding_descriptor.s",{"_index":2575,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["aligned_size(uniform_binding_descriptor.s",{"_index":2573,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["alignedvertex",{"_index":3366,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["aliv",{"_index":4363,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["all_commands_bit",{"_index":5215,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["all_graphics_bit",{"_index":5214,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["allevi",{"_index":4346,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["alloc",{"_index":497,"title":{"13-8":{},"94-5":{}},"name":{},"text":{"4":{},"8":{},"12":{},"13":{},"19":{},"37":{},"46":{},"49":{},"55":{},"56":{},"60":{},"74":{},"75":{},"83":{},"84":{},"86":{},"88":{},"94":{},"95":{},"96":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["allocations",{"_index":3771,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["allow",{"_index":212,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"12":{},"13":{},"19":{},"34":{},"37":{},"38":{},"42":{},"46":{},"47":{},"49":{},"51":{},"52":{},"54":{},"56":{},"60":{},"61":{},"63":{},"66":{},"69":{},"71":{},"74":{},"75":{},"77":{},"82":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"104":{},"105":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["allowprovisioningupd",{"_index":694,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["alon",{"_index":323,"title":{},"name":{},"text":{"3":{},"55":{},"65":{},"85":{}},"component":{},"keyword":{}}],["along",{"_index":1541,"title":{},"name":{},"text":{"26":{},"31":{},"34":{},"38":{},"42":{},"47":{},"54":{},"74":{},"78":{},"86":{},"92":{},"94":{},"95":{},"96":{},"100":{},"111":{}},"component":{},"keyword":{}}],["alpha",{"_index":1894,"title":{},"name":{},"text":{"40":{},"41":{},"57":{}},"component":{},"keyword":{}}],["alphabet",{"_index":320,"title":{"3":{}},"name":{},"text":{},"component":{},"keyword":{}}],["alreadi",{"_index":181,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"11":{},"13":{},"74":{},"85":{},"88":{},"90":{},"96":{},"98":{},"101":{},"110":{},"111":{}},"component":{},"keyword":{}}],["alter",{"_index":1518,"title":{},"name":{},"text":{"14":{},"86":{}},"component":{},"keyword":{}}],["altern",{"_index":185,"title":{"91-5":{}},"name":{},"text":{"2":{},"13":{},"38":{},"47":{},"82":{},"93":{},"96":{},"97":{},"101":{},"102":{},"105":{},"107":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["although",{"_index":2706,"title":{},"name":{},"text":{"56":{},"84":{},"108":{}},"component":{},"keyword":{}}],["altogeth",{"_index":798,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["alway",{"_index":1247,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"34":{},"37":{},"42":{},"46":{},"85":{},"88":{},"90":{},"93":{},"95":{},"97":{},"98":{},"99":{},"100":{},"104":{},"105":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["amaz",{"_index":2111,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["ambient",{"_index":1308,"title":{"82-5":{}},"name":{},"text":{"12":{},"19":{},"82":{}},"component":{},"keyword":{}}],["amd",{"_index":1916,"title":{},"name":{},"text":{"41":{},"71":{}},"component":{},"keyword":{}}],["amount",{"_index":520,"title":{},"name":{},"text":{"5":{},"8":{},"12":{},"20":{},"37":{},"46":{},"85":{},"95":{},"96":{},"100":{},"103":{},"104":{},"108":{}},"component":{},"keyword":{}}],["analog",{"_index":4382,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["analys",{"_index":5353,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["analysi",{"_index":391,"title":{},"name":{},"text":{"4":{},"106":{},"107":{},"109":{}},"component":{},"keyword":{}}],["analyz",{"_index":1251,"title":{},"name":{},"text":{"12":{},"20":{},"94":{},"96":{},"98":{},"104":{},"107":{},"110":{},"113":{}},"component":{},"keyword":{}}],["anativewindow_getheight(app",{"_index":5378,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["and/or",{"_index":48,"title":{},"name":{},"text":{"2":{},"13":{},"52":{},"74":{},"84":{},"89":{},"94":{},"95":{},"96":{},"109":{},"114":{}},"component":{},"keyword":{}}],["android",{"_index":284,"title":{"7-28":{},"7-35":{},"10-3":{},"14-4":{},"75-3":{},"109-4":{}},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{},"19":{},"75":{},"94":{},"98":{},"103":{},"109":{},"110":{}},"component":{},"keyword":{}}],["android_app",{"_index":5392,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["android_home=/android",{"_index":713,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["android_ndk_home=/android",{"_index":716,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["android’",{"_index":4958,"title":{},"name":{},"text":{"98":{},"109":{},"110":{}},"component":{},"keyword":{}}],["angl",{"_index":3899,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["ani",{"_index":1968,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["anim",{"_index":1314,"title":{},"name":{},"text":{"12":{},"19":{},"82":{},"90":{},"93":{}},"component":{},"keyword":{}}],["anisotrop",{"_index":1695,"title":{},"name":{},"text":{"37":{},"46":{},"56":{}},"component":{},"keyword":{}}],["annot",{"_index":2692,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["anoth",{"_index":954,"title":{},"name":{},"text":{"10":{},"38":{},"47":{},"49":{},"56":{},"58":{},"75":{},"88":{},"93":{},"95":{},"96":{},"103":{},"104":{},"108":{}},"component":{},"keyword":{}}],["answer",{"_index":1165,"title":{},"name":{},"text":{"12":{},"20":{},"95":{}},"component":{},"keyword":{}}],["anti",{"_index":1212,"title":{"101":{}},"name":{},"text":{"12":{},"20":{},"101":{}},"component":{},"keyword":{}}],["antonio",{"_index":325,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["anymor",{"_index":2644,"title":{},"name":{},"text":{"56":{},"88":{}},"component":{},"keyword":{}}],["anyth",{"_index":184,"title":{},"name":{},"text":{"2":{},"49":{},"83":{},"85":{},"88":{},"95":{}},"component":{},"keyword":{}}],["anytim",{"_index":3493,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["anyway",{"_index":2222,"title":{},"name":{},"text":{"49":{},"56":{},"88":{},"91":{}},"component":{},"keyword":{}}],["apach",{"_index":213,"title":{},"name":{},"text":{"2":{},"48":{}},"component":{},"keyword":{}}],["apart",{"_index":5190,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["api",{"_index":43,"title":{"11-3":{},"11-7":{},"12-26":{},"13-4":{},"13-5":{},"13-6":{},"14-3":{},"17-1":{},"74-8":{},"75-4":{},"75-5":{},"75-6":{},"88-17":{},"95-9":{}},"name":{},"text":{"2":{},"4":{},"8":{},"11":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"47":{},"49":{},"55":{},"56":{},"59":{},"60":{},"61":{},"62":{},"69":{},"71":{},"74":{},"75":{},"76":{},"77":{},"85":{},"87":{},"88":{},"89":{},"90":{},"92":{},"95":{},"106":{},"109":{},"114":{}},"component":{},"keyword":{}}],["api_vulkan_sample.cpp",{"_index":979,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["api_vulkan_sample.h",{"_index":978,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["apivulkansampl",{"_index":1029,"title":{},"name":{},"text":{"11":{},"14":{},"69":{}},"component":{},"keyword":{}}],["apivulkansample::submit_fram",{"_index":4383,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["apk",{"_index":573,"title":{"7-34":{}},"name":{},"text":{"7":{},"10":{}},"component":{},"keyword":{}}],["app",{"_index":1667,"title":{},"name":{},"text":{"34":{},"42":{},"54":{},"96":{},"98":{},"104":{},"109":{},"110":{},"114":{}},"component":{},"keyword":{}}],["app.build.gradle.in",{"_index":722,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["app/build/outputs/apk/debug/vulkan_sampl",{"_index":751,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["app/build/outputs/apk/release/vulkan_sampl",{"_index":749,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["app_cmd_content_rect_chang",{"_index":5371,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["app_cmd_init_window",{"_index":5376,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["app_terminate(\"th",{"_index":5601,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["app_terminate('could",{"_index":5593,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["app_terminate('extens",{"_index":5570,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["app_terminate('runtim",{"_index":5587,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["appear",{"_index":1371,"title":{},"name":{},"text":{"12":{},"19":{},"58":{},"59":{},"90":{}},"component":{},"keyword":{}}],["append",{"_index":4195,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["appl",{"_index":660,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["appli",{"_index":221,"title":{"59-4":{},"59-5":{}},"name":{},"text":{"2":{},"12":{},"13":{},"19":{},"20":{},"37":{},"46":{},"59":{},"62":{},"69":{},"74":{},"79":{},"84":{},"85":{},"88":{},"92":{},"99":{},"100":{},"109":{}},"component":{},"keyword":{}}],["applic",{"_index":158,"title":{"90":{},"92":{},"34-1":{},"42-1":{},"59-6":{},"84-4":{},"109-3":{}},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"15":{},"17":{},"20":{},"34":{},"38":{},"42":{},"43":{},"47":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"65":{},"66":{},"69":{},"71":{},"75":{},"82":{},"84":{},"85":{},"86":{},"88":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"112":{},"114":{}},"component":{},"keyword":{}}],["application’",{"_index":847,"title":{},"name":{},"text":{"8":{},"12":{},"20":{},"34":{},"42":{},"54":{},"70":{},"85":{},"104":{}},"component":{},"keyword":{}}],["approach",{"_index":1178,"title":{},"name":{},"text":{"12":{},"20":{},"38":{},"47":{},"48":{},"49":{},"55":{},"58":{},"61":{},"75":{},"77":{},"88":{},"93":{},"94":{},"95":{},"96":{},"103":{},"104":{},"107":{}},"component":{},"keyword":{}}],["appropri",{"_index":234,"title":{"106":{},"109":{}},"name":{},"text":{"2":{},"55":{},"60":{},"61":{},"69":{},"77":{},"82":{},"89":{},"92":{},"94":{},"99":{}},"component":{},"keyword":{}}],["approv",{"_index":69,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["approxim",{"_index":849,"title":{},"name":{},"text":{"8":{},"38":{},"47":{},"91":{},"92":{},"99":{},"101":{},"103":{},"104":{},"108":{}},"component":{},"keyword":{}}],["apt",{"_index":647,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ar",{"_index":3741,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["arbitrari",{"_index":1625,"title":{},"name":{},"text":{"34":{},"42":{},"54":{},"56":{},"85":{},"90":{}},"component":{},"keyword":{}}],["arbitrarili",{"_index":2464,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["architectur",{"_index":2712,"title":{"91":{}},"name":{},"text":{"56":{},"85":{},"89":{},"90":{},"93":{},"101":{},"104":{}},"component":{},"keyword":{}}],["archiv",{"_index":241,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["area",{"_index":3228,"title":{"106-6":{}},"name":{},"text":{"64":{},"86":{},"106":{}},"component":{},"keyword":{}}],["arect",{"_index":5390,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["aren’t",{"_index":3035,"title":{},"name":{},"text":{"60":{},"78":{},"95":{}},"component":{},"keyword":{}}],["argument",{"_index":460,"title":{},"name":{},"text":{"4":{},"7":{},"38":{},"47":{},"56":{}},"component":{},"keyword":{}}],["aris",{"_index":2970,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["arithmet",{"_index":1091,"title":{"90":{},"12-21":{},"20-20":{},"49-9":{},"90-2":{},"90-3":{},"90-6":{},"90-7":{},"91-3":{}},"name":{},"text":{"12":{},"20":{},"49":{},"90":{},"91":{},"107":{}},"component":{},"keyword":{}}],["arm",{"_index":505,"title":{"12-67":{},"19-15":{}},"name":{},"text":{"4":{},"9":{},"12":{},"13":{},"19":{},"20":{},"75":{},"91":{},"92":{},"93":{},"95":{},"99":{},"104":{},"108":{},"113":{}},"component":{},"keyword":{}}],["around",{"_index":885,"title":{},"name":{},"text":{"9":{},"13":{},"56":{},"71":{},"74":{},"85":{},"86":{},"90":{},"91":{},"92":{},"95":{},"96":{},"101":{}},"component":{},"keyword":{}}],["arrang",{"_index":4663,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["array",{"_index":2175,"title":{"56-11":{},"95-27":{}},"name":{},"text":{"49":{},"51":{},"56":{},"57":{},"59":{},"62":{},"75":{},"82":{},"83":{},"85":{},"94":{},"95":{},"102":{},"114":{}},"component":{},"keyword":{}}],["arrow",{"_index":3436,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["arseni",{"_index":4777,"title":{},"name":{},"text":{"94":{},"95":{},"96":{}},"component":{},"keyword":{}}],["articl",{"_index":765,"title":{},"name":{},"text":{"8":{},"13":{},"71":{},"92":{}},"component":{},"keyword":{}}],["artifact",{"_index":1208,"title":{},"name":{},"text":{"12":{},"20":{},"41":{},"101":{}},"component":{},"keyword":{}}],["artifici",{"_index":4817,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["asid",{"_index":2459,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["ask",{"_index":3823,"title":{"78-3":{}},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["asliceofrendering.com",{"_index":2908,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["aspect",{"_index":2200,"title":{},"name":{},"text":{"49":{},"56":{},"85":{},"88":{},"91":{},"104":{}},"component":{},"keyword":{}}],["assembl",{"_index":3272,"title":{},"name":{},"text":{"66":{},"71":{},"97":{},"105":{}},"component":{},"keyword":{}}],["assembledebug",{"_index":745,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["assemblereleas",{"_index":744,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["assert(!!inst",{"_index":3047,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["assert(platform",{"_index":5375,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["assert(result",{"_index":1862,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["asset",{"_index":113,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"11":{},"89":{}},"component":{},"keyword":{}}],["asset’",{"_index":2536,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["assign",{"_index":2252,"title":{},"name":{},"text":{"49":{},"56":{},"70":{},"71":{},"75":{},"88":{},"113":{}},"component":{},"keyword":{}}],["assist",{"_index":300,"title":{"56-22":{}},"name":{},"text":{"2":{},"7":{},"56":{}},"component":{},"keyword":{}}],["associ",{"_index":126,"title":{},"name":{},"text":{"2":{},"41":{},"43":{},"49":{},"50":{},"71":{},"82":{},"88":{},"95":{},"99":{},"109":{}},"component":{},"keyword":{}}],["assum",{"_index":163,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"20":{},"43":{},"56":{},"74":{},"75":{},"83":{},"88":{},"91":{},"93":{},"104":{},"109":{}},"component":{},"keyword":{}}],["assumpt",{"_index":4783,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["assur",{"_index":563,"title":{"7-11":{}},"name":{},"text":{},"component":{},"keyword":{}}],["astc",{"_index":450,"title":{},"name":{},"text":{"4":{},"92":{}},"component":{},"keyword":{}}],["asuint(a.x",{"_index":2772,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["async",{"_index":1092,"title":{"93":{},"12-22":{},"20-21":{},"88-10":{}},"name":{},"text":{"88":{},"93":{}},"component":{},"keyword":{}}],["async_compute_worker.al",{"_index":4364,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["async_compute_worker.thread.join",{"_index":4368,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["asynchron",{"_index":1394,"title":{},"name":{},"text":{"13":{},"37":{},"46":{},"113":{}},"component":{},"keyword":{}}],["atkinson",{"_index":364,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["atla",{"_index":2633,"title":{"56-11":{}},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["atlas",{"_index":2705,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["attach",{"_index":223,"title":{"106":{},"60-2":{},"106-2":{},"106-3":{},"108-4":{}},"name":{},"text":{"2":{},"11":{},"12":{},"13":{},"19":{},"20":{},"51":{},"57":{},"60":{},"63":{},"64":{},"71":{},"99":{},"100":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["attempt",{"_index":4565,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["attenu",{"_index":3956,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["attilio",{"_index":327,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["attract",{"_index":2178,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["attribut",{"_index":910,"title":{},"name":{},"text":{"9":{},"12":{},"19":{},"20":{},"49":{},"62":{},"89":{},"106":{},"109":{}},"component":{},"keyword":{}}],["augment",{"_index":4203,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["author",{"_index":313,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["auto",{"_index":728,"title":{},"name":{},"text":{"7":{},"11":{},"38":{},"40":{},"41":{},"47":{},"52":{},"54":{},"56":{},"60":{},"67":{},"69":{},"74":{},"78":{},"85":{},"109":{}},"component":{},"keyword":{}}],["automat",{"_index":129,"title":{},"name":{},"text":{"2":{},"7":{},"11":{},"13":{},"40":{},"41":{},"65":{},"85":{},"92":{},"94":{},"98":{},"99":{},"101":{},"110":{}},"component":{},"keyword":{}}],["auxillari",{"_index":4302,"title":{},"name":{},"text":{"88":{},"91":{}},"component":{},"keyword":{}}],["avail",{"_index":177,"title":{},"name":{},"text":{"2":{},"4":{},"8":{},"12":{},"13":{},"19":{},"20":{},"38":{},"47":{},"56":{},"60":{},"62":{},"69":{},"74":{},"82":{},"86":{},"89":{},"91":{},"95":{},"98":{},"99":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["available_extens",{"_index":2391,"title":{},"name":{},"text":{"54":{},"56":{},"78":{}},"component":{},"keyword":{}}],["available_instance_extens",{"_index":2392,"title":{},"name":{},"text":{"54":{},"78":{}},"component":{},"keyword":{}}],["available_instance_extensions(instance_extension_count",{"_index":2388,"title":{},"name":{},"text":{"54":{},"78":{}},"component":{},"keyword":{}}],["available_instance_extensions.data",{"_index":2389,"title":{},"name":{},"text":{"54":{},"78":{}},"component":{},"keyword":{}}],["available_layer_instance_extens",{"_index":2825,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["available_layer_instance_extensions(layer_instance_extension_count",{"_index":2823,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["available_layer_instance_extensions.data",{"_index":2824,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["available_target_formats.clear",{"_index":5494,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["available_target_formats.push_back(ktx_ttf_bc7_rgba",{"_index":5501,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["available_target_formats.push_back(ktx_ttf_rgba32",{"_index":5507,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["available_target_formats_names.push_back(\"ktx_ttf_rgba32",{"_index":5508,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["averag",{"_index":851,"title":{},"name":{},"text":{"8":{},"91":{},"94":{},"99":{},"101":{},"109":{},"113":{}},"component":{},"keyword":{}}],["avoid",{"_index":522,"title":{"88-12":{},"88-13":{}},"name":{},"text":{"5":{},"12":{},"13":{},"20":{},"56":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"100":{},"101":{},"104":{},"105":{},"106":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["awar",{"_index":2971,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["away",{"_index":971,"title":{},"name":{},"text":{"11":{},"56":{},"86":{},"91":{},"104":{}},"component":{},"keyword":{}}],["awkward",{"_index":2244,"title":{},"name":{},"text":{"49":{},"56":{},"88":{},"90":{}},"component":{},"keyword":{}}],["axi",{"_index":4231,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["b",{"_index":697,"title":{},"name":{},"text":{"7":{},"10":{},"51":{},"56":{},"91":{}},"component":{},"keyword":{}}],["b.i",{"_index":2745,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["b_dot",{"_index":4493,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["b_offset",{"_index":4487,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["bach",{"_index":324,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["back",{"_index":803,"title":{"88-15":{}},"name":{},"text":{"8":{},"12":{},"13":{},"19":{},"38":{},"40":{},"47":{},"49":{},"74":{},"75":{},"76":{},"88":{},"91":{},"92":{},"96":{},"101":{},"106":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["backbuff",{"_index":1902,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["backend",{"_index":2693,"title":{},"name":{},"text":{"56":{},"88":{}},"component":{},"keyword":{}}],["background",{"_index":1690,"title":{"74-1":{}},"name":{},"text":{"37":{},"40":{},"41":{},"46":{},"51":{},"61":{},"66":{},"69":{}},"component":{},"keyword":{}}],["backmost",{"_index":1887,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["backward",{"_index":5229,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["bad",{"_index":4724,"title":{},"name":{},"text":{"93":{},"101":{}},"component":{},"keyword":{}}],["bake",{"_index":4937,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["balanc",{"_index":4746,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["bandwidth",{"_index":807,"title":{"91":{},"99-5":{}},"name":{},"text":{"8":{},"12":{},"20":{},"90":{},"91":{},"92":{},"93":{},"99":{},"100":{},"101":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["bandwith",{"_index":3383,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["bare",{"_index":4715,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["barrier",{"_index":1085,"title":{"104":{},"12-12":{},"20-11":{}},"name":{},"text":{"12":{},"19":{},"20":{},"37":{},"38":{},"46":{},"47":{},"76":{},"87":{},"88":{},"93":{},"100":{},"104":{}},"component":{},"keyword":{}}],["barycentr",{"_index":1136,"title":{"62":{},"12-82":{},"19-30":{}},"name":{},"text":{"12":{},"19":{},"62":{}},"component":{},"keyword":{}}],["barycoord",{"_index":3199,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["barycoordkhr",{"_index":3189,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["barycoordnoperspkhr",{"_index":3191,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["base",{"_index":131,"title":{"91":{},"11-1":{},"11-2":{},"11-3":{},"37-6":{},"37-7":{},"46-6":{},"46-7":{},"93-3":{},"104-2":{}},"name":{},"text":{"2":{},"8":{},"11":{},"12":{},"13":{},"18":{},"19":{},"20":{},"26":{},"31":{},"37":{},"38":{},"40":{},"42":{},"46":{},"47":{},"48":{},"49":{},"52":{},"54":{},"56":{},"58":{},"59":{},"62":{},"71":{},"74":{},"75":{},"84":{},"85":{},"87":{},"91":{},"93":{},"94":{},"95":{},"96":{},"98":{},"100":{},"101":{},"104":{},"106":{},"108":{},"110":{},"111":{}},"component":{},"keyword":{}}],["base_color_factor.rgb",{"_index":2367,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["base_descriptor_set",{"_index":1640,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["baseheight",{"_index":5540,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["baselin",{"_index":1374,"title":{},"name":{},"text":{"12":{},"21":{},"61":{},"69":{},"114":{}},"component":{},"keyword":{}}],["basemiplevel",{"_index":1740,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["basewidth",{"_index":5539,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["bash_profil",{"_index":677,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["basi",{"_index":259,"title":{"111":{},"12-23":{},"20-22":{},"111-3":{}},"name":{},"text":{"2":{},"12":{},"20":{},"92":{},"111":{}},"component":{},"keyword":{}}],["basic",{"_index":397,"title":{"80":{},"81":{},"12-60":{},"12-61":{},"12-83":{},"19-8":{},"19-9":{},"19-31":{}},"name":{},"text":{"4":{},"7":{},"11":{},"12":{},"13":{},"19":{},"26":{},"31":{},"38":{},"47":{},"49":{},"52":{},"54":{},"56":{},"68":{},"71":{},"72":{},"74":{},"81":{},"83":{},"84":{},"86":{},"93":{},"95":{},"108":{}},"component":{},"keyword":{}}],["basist::ktx2_transcod",{"_index":5491,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["basisu",{"_index":5490,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["batch",{"_index":439,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["batteri",{"_index":4627,"title":{},"name":{},"text":{"91":{},"100":{},"101":{},"109":{}},"component":{},"keyword":{}}],["bbuild/linux",{"_index":654,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bbuild/mac",{"_index":668,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bbuild/window",{"_index":631,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{},"keyword":{}}],["bc3",{"_index":5470,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["bc7",{"_index":5498,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["bcn",{"_index":5468,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["be",{"_index":68,"title":{},"name":{},"text":{"2":{},"12":{},"19":{},"20":{},"37":{},"43":{},"46":{},"50":{},"52":{},"56":{},"58":{},"75":{},"80":{},"84":{},"90":{},"91":{},"92":{},"93":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"104":{},"105":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["becom",{"_index":71,"title":{},"name":{},"text":{"2":{},"37":{},"38":{},"46":{},"47":{},"54":{},"55":{},"56":{},"75":{},"88":{},"90":{},"93":{},"94":{},"96":{},"98":{},"100":{},"108":{},"110":{}},"component":{},"keyword":{}}],["befor",{"_index":59,"title":{},"name":{},"text":{"2":{},"9":{},"10":{},"11":{},"12":{},"13":{},"19":{},"37":{},"38":{},"43":{},"46":{},"47":{},"49":{},"54":{},"56":{},"59":{},"60":{},"61":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"78":{},"84":{},"85":{},"88":{},"89":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"102":{},"104":{},"105":{},"107":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["begin",{"_index":938,"title":{},"name":{},"text":{"10":{},"12":{},"20":{},"37":{},"46":{},"52":{},"54":{},"55":{},"56":{},"60":{},"75":{},"94":{},"95":{},"96":{},"100":{},"106":{},"108":{},"113":{}},"component":{},"keyword":{}}],["begin.clearvaluecount",{"_index":5249,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["begin.pclearvalu",{"_index":5250,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["behav",{"_index":1409,"title":{},"name":{},"text":{"13":{},"71":{},"93":{},"97":{},"105":{}},"component":{},"keyword":{}}],["behavior",{"_index":2423,"title":{},"name":{},"text":{"54":{},"59":{},"83":{},"88":{},"93":{},"96":{},"98":{},"104":{},"109":{},"110":{}},"component":{},"keyword":{}}],["behaviour",{"_index":4944,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["behind",{"_index":800,"title":{},"name":{},"text":{"8":{},"49":{},"59":{}},"component":{},"keyword":{}}],["below",{"_index":63,"title":{},"name":{},"text":{"2":{},"4":{},"8":{},"13":{},"38":{},"43":{},"47":{},"59":{},"60":{},"61":{},"64":{},"75":{},"77":{},"78":{},"82":{},"83":{},"89":{},"91":{},"94":{},"95":{},"97":{},"98":{},"99":{},"100":{},"101":{},"103":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["benchmark",{"_index":429,"title":{},"name":{},"text":{"4":{},"90":{}},"component":{},"keyword":{}}],["beneath",{"_index":1392,"title":{},"name":{},"text":{"13":{},"58":{}},"component":{},"keyword":{}}],["benefici",{"_index":5088,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["benefit",{"_index":1194,"title":{"90-8":{}},"name":{},"text":{"12":{},"13":{},"20":{},"37":{},"46":{},"71":{},"90":{},"91":{},"95":{},"97":{},"99":{},"105":{},"108":{},"112":{}},"component":{},"keyword":{}}],["best",{"_index":46,"title":{"90-9":{},"91-7":{},"92-6":{},"93-10":{},"94-10":{},"95-31":{},"96-6":{},"97-6":{},"98-6":{},"100-3":{},"101-3":{},"103-6":{},"104-5":{},"105-6":{},"106-7":{},"107-4":{},"108-7":{},"109-8":{},"110-6":{},"113-4":{}},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"12":{},"17":{},"20":{},"41":{},"43":{},"71":{},"75":{},"85":{},"94":{},"95":{},"101":{},"107":{},"108":{},"111":{},"113":{}},"component":{},"keyword":{}}],["beta",{"_index":1350,"title":{},"name":{},"text":{"12":{},"19":{},"78":{}},"component":{},"keyword":{}}],["better",{"_index":742,"title":{},"name":{},"text":{"7":{},"12":{},"13":{},"20":{},"37":{},"46":{},"52":{},"59":{},"67":{},"83":{},"85":{},"91":{},"94":{},"95":{},"98":{},"99":{},"101":{},"103":{},"110":{}},"component":{},"keyword":{}}],["between",{"_index":529,"title":{"74-8":{},"91-3":{}},"name":{},"text":{"5":{},"8":{},"11":{},"12":{},"13":{},"15":{},"19":{},"20":{},"34":{},"41":{},"42":{},"49":{},"54":{},"62":{},"74":{},"75":{},"83":{},"85":{},"86":{},"88":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["bewar",{"_index":2269,"title":{},"name":{},"text":{"49":{},"59":{}},"component":{},"keyword":{}}],["beyond",{"_index":5273,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["bi",{"_index":4618,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["bia",{"_index":1361,"title":{},"name":{},"text":{"12":{},"19":{},"61":{}},"component":{},"keyword":{}}],["bifrost",{"_index":923,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["big",{"_index":1423,"title":{},"name":{},"text":{"13":{},"88":{}},"component":{},"keyword":{}}],["big.littl",{"_index":1422,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["bigger",{"_index":4863,"title":{},"name":{},"text":{"95":{},"97":{},"105":{}},"component":{},"keyword":{}}],["biggest",{"_index":1481,"title":{},"name":{},"text":{"13":{},"83":{},"102":{}},"component":{},"keyword":{}}],["bilinear",{"_index":1694,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["billboard",{"_index":3849,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["billboard’",{"_index":3850,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["bin",{"_index":4703,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["binari",{"_index":2119,"title":{"88-2":{}},"name":{},"text":{"48":{},"54":{},"88":{},"97":{},"105":{},"111":{}},"component":{},"keyword":{}}],["bind",{"_index":983,"title":{"55-2":{},"55-6":{},"56-3":{},"82-4":{},"85-6":{},"95-24":{}},"name":{},"text":{"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"42":{},"49":{},"55":{},"56":{},"61":{},"68":{},"77":{},"81":{},"82":{},"83":{},"85":{},"86":{},"89":{},"95":{},"96":{},"97":{},"98":{},"102":{},"109":{}},"component":{},"keyword":{}}],["bind_material_shader(draw_cmd_buff",{"_index":4180,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["bind_shad",{"_index":4135,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["bind_shader(cmd_buff",{"_index":4147,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["bind_shader(draw_cmd_buff",{"_index":4137,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["binding_flag",{"_index":2665,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["binding_flags.bindingcount",{"_index":2668,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["binding_flags.pbindingflag",{"_index":2669,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["binding_flags.styp",{"_index":2666,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["bindless",{"_index":2638,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["binomial’",{"_index":5492,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["bit",{"_index":915,"title":{"90":{},"91":{},"12-20":{},"12-21":{},"20-19":{},"20-20":{},"90-2":{},"90-3":{},"90-4":{},"90-5":{},"90-6":{},"90-7":{},"91-2":{},"91-4":{}},"name":{},"text":{"9":{},"10":{},"12":{},"17":{},"20":{},"24":{},"26":{},"31":{},"38":{},"47":{},"49":{},"51":{},"52":{},"56":{},"57":{},"58":{},"64":{},"71":{},"82":{},"84":{},"85":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"99":{},"101":{},"106":{},"108":{},"111":{}},"component":{},"keyword":{}}],["bitfield",{"_index":4940,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["bitrat",{"_index":4978,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["bitwis",{"_index":2886,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["bla",{"_index":1318,"title":{},"name":{},"text":{"12":{},"19":{},"82":{},"83":{}},"component":{},"keyword":{}}],["blah",{"_index":4574,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["bldsys/cmake/template/gradle/app.build.gradle.in",{"_index":730,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["blend",{"_index":1137,"title":{"57":{},"12-87":{},"19-35":{}},"name":{},"text":{"12":{},"19":{},"41":{},"51":{},"57":{},"69":{},"97":{},"101":{},"104":{},"105":{}},"component":{},"keyword":{}}],["blend_attachment_st",{"_index":3398,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["blit",{"_index":1682,"title":{},"name":{},"text":{"37":{},"46":{},"88":{},"100":{}},"component":{},"keyword":{}}],["blit_command",{"_index":2051,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["blit_command.blitimage(texture.imag",{"_index":1742,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["blit_dst_bit",{"_index":2005,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["blit_src_bit",{"_index":2004,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["bloat",{"_index":4267,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["blob",{"_index":2646,"title":{},"name":{},"text":{"56":{},"90":{}},"component":{},"keyword":{}}],["blob.w",{"_index":4499,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["blob.xi",{"_index":4482,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["block",{"_index":1354,"title":{"95-8":{}},"name":{},"text":{"12":{},"13":{},"19":{},"49":{},"50":{},"52":{},"83":{},"86":{},"88":{},"91":{},"93":{},"95":{},"96":{},"99":{},"104":{},"107":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["blog",{"_index":1289,"title":{},"name":{},"text":{"12":{},"19":{},"58":{},"71":{},"107":{}},"component":{},"keyword":{}}],["bloom",{"_index":2478,"title":{},"name":{},"text":{"54":{},"93":{}},"component":{},"keyword":{}}],["bloomi",{"_index":4721,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["bodi",{"_index":1098,"title":{"22":{},"27":{},"12-27":{},"12-31":{},"17-2":{},"17-6":{}},"name":{},"text":{"12":{},"17":{},"19":{},"22":{},"27":{},"87":{}},"component":{},"keyword":{}}],["boiler",{"_index":5624,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["boilerpl",{"_index":224,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["bolz",{"_index":335,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["bone",{"_index":4716,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["bonu",{"_index":2508,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["bonza",{"_index":434,"title":{},"name":{},"text":{"4":{},"10":{}},"component":{},"keyword":{}}],["bool",{"_index":1022,"title":{},"name":{},"text":{"11":{},"54":{},"56":{},"67":{},"74":{},"78":{},"88":{}},"component":{},"keyword":{}}],["boolean",{"_index":2290,"title":{},"name":{},"text":{"51":{},"57":{},"83":{}},"component":{},"keyword":{}}],["boost",{"_index":1215,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"96":{},"103":{}},"component":{},"keyword":{}}],["borderless",{"_index":3265,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["both",{"_index":948,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"17":{},"19":{},"20":{},"34":{},"37":{},"41":{},"42":{},"43":{},"46":{},"55":{},"59":{},"64":{},"69":{},"74":{},"75":{},"76":{},"82":{},"85":{},"93":{},"94":{},"96":{},"98":{},"99":{},"101":{},"102":{},"103":{},"104":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["bottleneck",{"_index":1872,"title":{},"name":{},"text":{"38":{},"47":{},"86":{},"90":{},"94":{}},"component":{},"keyword":{}}],["bottom",{"_index":1300,"title":{"83-2":{}},"name":{},"text":{"12":{},"19":{},"38":{},"47":{},"80":{},"81":{},"82":{},"85":{},"92":{}},"component":{},"keyword":{}}],["bottom_of_pipe_bit",{"_index":5220,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["bounc",{"_index":3962,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["bound",{"_index":1654,"title":{},"name":{},"text":{"34":{},"42":{},"49":{},"54":{},"55":{},"56":{},"75":{},"82":{},"85":{},"86":{},"93":{},"94":{},"95":{},"96":{},"98":{},"101":{},"102":{},"104":{},"110":{}},"component":{},"keyword":{}}],["boundari",{"_index":4531,"title":{},"name":{},"text":{"90":{},"98":{},"110":{}},"component":{},"keyword":{}}],["box",{"_index":4654,"title":{},"name":{},"text":{"92":{},"106":{}},"component":{},"keyword":{}}],["bpc",{"_index":4996,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["bpp/8",{"_index":5255,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["bracket",{"_index":227,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["break",{"_index":4812,"title":{},"name":{},"text":{"95":{},"98":{},"104":{},"109":{},"110":{}},"component":{},"keyword":{}}],["bridg",{"_index":748,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bright",{"_index":4782,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["bring",{"_index":828,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"95":{},"96":{}},"component":{},"keyword":{}}],["broader",{"_index":3545,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["broken",{"_index":4542,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["browser",{"_index":2495,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["brute",{"_index":4471,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["bs_dot",{"_index":4528,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["bs_dot.xi",{"_index":4534,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["bs_dot.zw",{"_index":4535,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["bs_offset",{"_index":4523,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["btw",{"_index":3740,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["bu",{"_index":5446,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["bubbl",{"_index":1500,"title":{"93-5":{}},"name":{},"text":{"13":{},"90":{},"104":{},"113":{}},"component":{},"keyword":{}}],["budget",{"_index":1118,"title":{"70":{},"12-58":{},"19-6":{},"70-1":{}},"name":{},"text":{"12":{},"13":{},"19":{},"70":{},"101":{},"108":{}},"component":{},"keyword":{}}],["buffer",{"_index":586,"title":{"23":{},"28":{},"49":{},"55":{},"94":{},"96":{},"12-4":{},"12-28":{},"12-32":{},"12-69":{},"12-83":{},"17-3":{},"17-7":{},"19-17":{},"19-31":{},"20-3":{},"49-2":{},"52-2":{},"55-4":{},"55-5":{},"55-6":{},"69-4":{},"75-3":{},"84-5":{},"94-2":{},"94-6":{},"95-19":{},"95-27":{},"96-4":{},"98-4":{},"107-2":{},"110-4":{}},"name":{},"text":{"7":{},"12":{},"13":{},"17":{},"19":{},"20":{},"23":{},"28":{},"34":{},"37":{},"38":{},"39":{},"41":{},"46":{},"47":{},"48":{},"49":{},"52":{},"54":{},"55":{},"56":{},"59":{},"60":{},"61":{},"65":{},"66":{},"67":{},"71":{},"74":{},"75":{},"79":{},"82":{},"83":{},"84":{},"85":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"107":{},"108":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["buffer.buff",{"_index":2149,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["buffer.gpu_address",{"_index":2150,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["buffer_array_descriptor_set",{"_index":4878,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["buffer_copy_region",{"_index":1717,"title":{},"name":{},"text":{"37":{},"46":{},"111":{}},"component":{},"keyword":{}}],["buffer_copy_region.bufferoffset",{"_index":5541,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["buffer_copy_region.imageextent.depth",{"_index":2024,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["buffer_copy_region.imageextent.height",{"_index":2023,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["buffer_copy_region.imageextent.width",{"_index":2021,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["buffer_copy_region.imagesubresource.aspectmask",{"_index":2016,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["buffer_copy_region.imagesubresource.basearraylay",{"_index":2019,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["buffer_copy_region.imagesubresource.layercount",{"_index":2020,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["buffer_copy_region.imagesubresource.miplevel",{"_index":2018,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["buffer_copy_regions.data",{"_index":5555,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["buffer_copy_regions.push_back(buffer_copy_region",{"_index":5542,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["buffer_create_info",{"_index":5528,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["buffer_create_info.s",{"_index":5529,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["buffer_descriptor",{"_index":1642,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["buffer_descriptor_info",{"_index":2607,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_descriptor_info.data.puniformbuff",{"_index":2605,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_descriptor_info.typ",{"_index":2603,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_descriptor_info{vk_structure_type_descriptor_get_info_ext",{"_index":2602,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_index_imag",{"_index":2623,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_index_ubo",{"_index":2622,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_offset",{"_index":2625,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["buffer_properti",{"_index":3790,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["buffer_properties.pnext",{"_index":3793,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["buffer_properties.styp",{"_index":3791,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["buffer_refer",{"_index":2166,"title":{},"name":{},"text":{"49":{},"102":{}},"component":{},"keyword":{}}],["buffer_reference_align",{"_index":2167,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["buffer_s",{"_index":4918,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["bufferdeviceaddress",{"_index":2268,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bufferdeviceaddresscapturereplay",{"_index":2265,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bug",{"_index":2422,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["buggi",{"_index":2777,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["build",{"_index":127,"title":{"7":{},"4-6":{},"7-17":{},"7-20":{},"7-23":{},"7-27":{},"7-30":{},"7-33":{},"7-35":{}},"name":{"7":{}},"text":{"2":{},"4":{},"7":{},"10":{},"12":{},"13":{},"14":{},"19":{},"56":{},"66":{},"78":{},"82":{},"83":{},"85":{},"94":{},"97":{},"103":{},"105":{},"111":{}},"component":{},"keyword":{}}],["build.gradle.in",{"_index":721,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/android",{"_index":756,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/android_gradl",{"_index":741,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/android_gradle/app/build.gradl",{"_index":729,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/android_gradle/build.gradl",{"_index":753,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/app/bin///vulkan_sampl",{"_index":422,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["build/instal",{"_index":699,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/linux",{"_index":656,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/linux/app/bin/release/x86_64/vulkan_sampl",{"_index":659,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/mac",{"_index":669,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/mac/app/bin/release/x86_64/vulkan_sampl",{"_index":671,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build/window",{"_index":642,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build\\android_gradl",{"_index":727,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build\\windows\\app\\bin\\release\\amd64\\vulkan_samples.ex",{"_index":644,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["build_command_buff",{"_index":2278,"title":{},"name":{},"text":{"50":{},"69":{}},"component":{},"keyword":{}}],["build_linked_shad",{"_index":4098,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["build_linked_shaders(devic",{"_index":4099,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["build_shad",{"_index":4097,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["build_shader(devic",{"_index":4129,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["built",{"_index":291,"title":{},"name":{},"text":{"2":{},"10":{},"13":{},"50":{},"56":{},"62":{},"66":{},"82":{},"97":{},"105":{},"111":{}},"component":{},"keyword":{}}],["builtin",{"_index":2916,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["bump",{"_index":4278,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["bunch",{"_index":2239,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bundl",{"_index":702,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["burden",{"_index":4280,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["busi",{"_index":4749,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["button",{"_index":706,"title":{},"name":{},"text":{"7":{},"9":{},"11":{},"107":{},"113":{}},"component":{},"keyword":{}}],["bw",{"_index":4896,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["bypass",{"_index":3312,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["byte",{"_index":811,"title":{},"name":{},"text":{"8":{},"49":{},"55":{},"91":{},"95":{},"99":{},"101":{},"106":{}},"component":{},"keyword":{}}],["bytecod",{"_index":1603,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["bytes/",{"_index":5133,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["c",{"_index":273,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"11":{},"12":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"56":{},"68":{},"94":{},"97":{},"98":{}},"component":{},"keyword":{}}],["c++11",{"_index":458,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["c++17",{"_index":645,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["c.z",{"_index":2746,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["c/c",{"_index":2310,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["cach",{"_index":964,"title":{"12-13":{},"20-12":{},"96-3":{},"97-3":{},"97-4":{},"105-3":{},"105-4":{}},"name":{},"text":{"11":{},"12":{},"20":{},"37":{},"46":{},"94":{},"95":{},"96":{},"97":{},"104":{},"105":{}},"component":{},"keyword":{}}],["cad",{"_index":2892,"title":{},"name":{},"text":{"58":{},"59":{}},"component":{},"keyword":{}}],["caggiano",{"_index":326,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["calcul",{"_index":1275,"title":{"64-4":{},"86-5":{}},"name":{},"text":{"12":{},"17":{},"24":{},"37":{},"46":{},"52":{},"55":{},"59":{},"62":{},"64":{},"82":{},"86":{},"95":{},"101":{},"103":{},"106":{},"108":{}},"component":{},"keyword":{}}],["calibr",{"_index":2274,"title":{"50":{}},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["call",{"_index":187,"title":{"102-1":{},"102-2":{}},"name":{},"text":{"2":{},"8":{},"9":{},"11":{},"12":{},"13":{},"14":{},"20":{},"26":{},"31":{},"38":{},"43":{},"47":{},"51":{},"54":{},"55":{},"56":{},"59":{},"61":{},"65":{},"69":{},"70":{},"71":{},"74":{},"77":{},"78":{},"83":{},"84":{},"85":{},"88":{},"89":{},"94":{},"95":{},"96":{},"97":{},"99":{},"100":{},"102":{},"103":{},"104":{},"105":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["callback",{"_index":2383,"title":{},"name":{},"text":{"54":{},"84":{},"109":{}},"component":{},"keyword":{}}],["callback_data",{"_index":2433,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["came",{"_index":4274,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["camera",{"_index":890,"title":{},"name":{},"text":{"9":{},"11":{},"40":{},"41":{},"83":{},"86":{},"91":{},"92":{},"95":{},"99":{},"102":{},"103":{},"109":{}},"component":{},"keyword":{}}],["camera.get_pre_rot",{"_index":5437,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["camera.get_view",{"_index":5439,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["camera_posit",{"_index":4622,"title":{},"name":{},"text":{"91":{},"95":{},"109":{}},"component":{},"keyword":{}}],["can’t",{"_index":1214,"title":{},"name":{},"text":{"12":{},"20":{},"37":{},"38":{},"46":{},"47":{},"55":{},"85":{},"103":{},"111":{}},"component":{},"keyword":{}}],["cap",{"_index":4968,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["capabl",{"_index":2115,"title":{},"name":{},"text":{"48":{},"49":{},"64":{},"88":{},"90":{},"91":{},"98":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["captur",{"_index":610,"title":{},"name":{},"text":{"7":{},"49":{},"54":{},"94":{},"95":{},"97":{},"103":{},"105":{},"109":{}},"component":{},"keyword":{}}],["care",{"_index":2715,"title":{},"name":{},"text":{"56":{},"86":{},"88":{},"91":{},"93":{},"99":{},"109":{},"114":{}},"component":{},"keyword":{}}],["carefulli",{"_index":4333,"title":{},"name":{},"text":{"88":{},"90":{}},"component":{},"keyword":{}}],["carri",{"_index":534,"title":{},"name":{},"text":{"5":{},"49":{},"101":{},"109":{}},"component":{},"keyword":{}}],["case",{"_index":53,"title":{"56-2":{},"93-2":{}},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"19":{},"20":{},"38":{},"47":{},"49":{},"52":{},"54":{},"56":{},"59":{},"61":{},"62":{},"67":{},"74":{},"75":{},"77":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["cass",{"_index":1881,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["cast",{"_index":1303,"title":{"49-8":{},"49-9":{}},"name":{},"text":{"12":{},"19":{},"49":{},"80":{},"83":{},"90":{},"111":{}},"component":{},"keyword":{}}],["catch",{"_index":1903,"title":{},"name":{},"text":{"41":{},"54":{},"91":{}},"component":{},"keyword":{}}],["categori",{"_index":440,"title":{},"name":{},"text":{"4":{},"12":{},"14":{},"18":{},"82":{}},"component":{},"keyword":{}}],["caus",{"_index":842,"title":{},"name":{},"text":{"8":{},"13":{},"54":{},"56":{},"59":{},"86":{},"90":{},"92":{},"94":{},"95":{},"98":{},"100":{},"104":{},"106":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["cautiou",{"_index":4860,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["caveat",{"_index":2781,"title":{},"name":{},"text":{"56":{},"91":{}},"component":{},"keyword":{}}],["cbuffer",{"_index":1567,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["cbv",{"_index":2754,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["cbv[nonuniformresourceindex(index)].v",{"_index":2768,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["cd",{"_index":417,"title":{},"name":{},"text":{"4":{},"7":{},"10":{}},"component":{},"keyword":{}}],["center",{"_index":1311,"title":{},"name":{},"text":{"12":{},"19":{},"62":{},"64":{},"71":{},"82":{},"90":{},"91":{}},"component":{},"keyword":{}}],["centr",{"_index":5108,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["certain",{"_index":171,"title":{},"name":{},"text":{"2":{},"12":{},"20":{},"38":{},"47":{},"75":{},"83":{},"84":{},"88":{},"96":{},"106":{},"108":{}},"component":{},"keyword":{}}],["certainli",{"_index":2711,"title":{},"name":{},"text":{"56":{},"88":{},"91":{}},"component":{},"keyword":{}}],["chain",{"_index":1280,"title":{"37-8":{},"46-8":{}},"name":{},"text":{"12":{},"17":{},"37":{},"46":{},"54":{},"59":{},"61":{},"66":{},"67":{},"70":{},"77":{},"84":{},"85":{},"91":{},"99":{},"114":{}},"component":{},"keyword":{}}],["challeng",{"_index":4696,"title":{"93-3":{}},"name":{},"text":{},"component":{},"keyword":{}}],["chanc",{"_index":4963,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["chang",{"_index":574,"title":{"11-7":{},"82-2":{}},"name":{},"text":{"7":{},"12":{},"13":{},"17":{},"19":{},"20":{},"34":{},"42":{},"43":{},"48":{},"49":{},"52":{},"53":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"66":{},"69":{},"75":{},"77":{},"82":{},"83":{},"84":{},"85":{},"86":{},"89":{},"90":{},"91":{},"92":{},"94":{},"95":{},"96":{},"97":{},"99":{},"102":{},"105":{},"107":{},"108":{},"109":{}},"component":{},"keyword":{}}],["channel",{"_index":2296,"title":{},"name":{},"text":{"51":{},"57":{},"92":{}},"component":{},"keyword":{}}],["channel=3",{"_index":739,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["chapter",{"_index":1548,"title":{},"name":{},"text":{"26":{},"31":{},"54":{},"59":{},"74":{},"95":{}},"component":{},"keyword":{}}],["char",{"_index":2587,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["character",{"_index":2235,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["chart",{"_index":4764,"title":{},"name":{},"text":{"94":{},"95":{},"103":{}},"component":{},"keyword":{}}],["check",{"_index":24,"title":{"2-1":{},"13-6":{},"38-3":{},"47-3":{}},"name":{},"text":{"2":{},"7":{},"11":{},"13":{},"14":{},"37":{},"38":{},"46":{},"47":{},"49":{},"54":{},"69":{},"74":{},"78":{},"83":{},"86":{},"90":{},"91":{},"92":{},"95":{},"96":{},"98":{},"99":{},"100":{},"101":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["checkbox",{"_index":2295,"title":{},"name":{},"text":{"51":{},"59":{},"92":{}},"component":{},"keyword":{}}],["cherri",{"_index":4708,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["chip",{"_index":1236,"title":{},"name":{},"text":{"12":{},"20":{},"108":{}},"component":{},"keyword":{}}],["choic",{"_index":1174,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"54":{},"95":{},"106":{}},"component":{},"keyword":{}}],["choos",{"_index":575,"title":{"98":{},"110":{},"98-2":{},"98-3":{},"104-3":{},"110-2":{},"110-3":{}},"name":{},"text":{"7":{},"11":{},"12":{},"20":{},"37":{},"46":{},"58":{},"96":{},"99":{},"106":{}},"component":{},"keyword":{}}],["chop",{"_index":2236,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["chosen",{"_index":3213,"title":{},"name":{},"text":{"62":{},"69":{}},"component":{},"keyword":{}}],["chromat",{"_index":4974,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["chunk",{"_index":2237,"title":{},"name":{},"text":{"49":{},"86":{},"95":{}},"component":{},"keyword":{}}],["ci",{"_index":592,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{},"keyword":{}}],["ci/cd",{"_index":590,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["circl",{"_index":3538,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["circular",{"_index":521,"title":{},"name":{},"text":{"5":{},"71":{}},"component":{},"keyword":{}}],["circumv",{"_index":4899,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["civil",{"_index":21,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["cl",{"_index":3694,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_arm_import_memori",{"_index":3795,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_check(cl_result",{"_index":3658,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_check(clenqueueacquireexternalmemobjectskhr(opencl_objects.command_queu",{"_index":3724,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_check(clenqueuendrangekernel(opencl_objects.command_queu",{"_index":3731,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_check(clenqueuereleaseexternalmemobjectskhr(opencl_objects.command_queu",{"_index":3737,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_check(clenqueuesignalsemaphoreskhr(opencl_objects.command_queu",{"_index":3738,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_check(clenqueuewaitsemaphoreskhr(opencl_objects.command_queu",{"_index":3722,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_check(clsetkernelarg(opencl_objects.kernel",{"_index":3728,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_device_id",{"_index":3586,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_device_type_al",{"_index":3591,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_device_uuid_khr",{"_index":3599,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_external_memory_handle_opaque_fd_khr",{"_index":3630,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_external_memory_handle_opaque_win32_khr",{"_index":3628,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_image_desc",{"_index":3641,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_image_format",{"_index":3635,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc",{"_index":3642,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.buff",{"_index":3652,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.image_height",{"_index":3645,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.image_row_pitch",{"_index":3650,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.image_slice_pitch",{"_index":3649,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.image_typ",{"_index":3647,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.image_width",{"_index":3643,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_desc.num_mip_level",{"_index":3651,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_fmt",{"_index":3636,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_fmt.image_channel_data_typ",{"_index":3639,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_img_fmt.image_channel_ord",{"_index":3637,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_import_memory_whole_allocation_arm",{"_index":3806,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_import_properties_arm",{"_index":3798,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_import_type_android_hardware_buffer_arm",{"_index":3801,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_import_type_arm",{"_index":3800,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_int",{"_index":3700,"title":{},"name":{},"text":{"74":{},"75":{}},"component":{},"keyword":{}}],["cl_khr_device_uuid",{"_index":3565,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_khr_external_memori",{"_index":3556,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_khr_external_memory_opaque_fd",{"_index":3558,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_khr_external_memory_win32",{"_index":3557,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_khr_external_semaphor",{"_index":3562,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_khr_external_semaphore_opaque_fd",{"_index":3564,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_khr_external_semaphore_win32",{"_index":3563,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_mem",{"_index":3796,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_mem_device_handle_list_end_khr",{"_index":3633,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_mem_device_handle_list_khr",{"_index":3631,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_mem_object_image2d",{"_index":3648,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_mem_read_writ",{"_index":3657,"title":{},"name":{},"text":{"74":{},"75":{}},"component":{},"keyword":{}}],["cl_platform_id",{"_index":3584,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_result",{"_index":3653,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_rgba",{"_index":3638,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_device_handle_list_end_khr",{"_index":3693,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_device_handle_list_khr",{"_index":3692,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_handle_opaque_fd_khr",{"_index":3698,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_handle_opaque_win32_khr",{"_index":3696,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_properties_khr",{"_index":3689,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_type_binary_khr",{"_index":3691,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_semaphore_type_khr",{"_index":3690,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_success",{"_index":3802,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["cl_uchar",{"_index":3596,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_uint",{"_index":3578,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_unsigned_int8",{"_index":3640,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cl_update_vk_semaphor",{"_index":3681,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["cla",{"_index":211,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["clamp",{"_index":2932,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["clamp_to_edg",{"_index":2703,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["clang",{"_index":95,"title":{"7-16":{},"14-5":{}},"name":{},"text":{"2":{},"7":{},"14":{}},"component":{},"keyword":{}}],["class",{"_index":134,"title":{"11-1":{},"11-2":{},"11-3":{}},"name":{},"text":{"2":{},"11":{},"14":{},"49":{},"54":{},"61":{},"69":{},"70":{},"71":{},"78":{},"85":{},"98":{},"111":{}},"component":{},"keyword":{}}],["clcreateimagewithproperti",{"_index":3659,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["clcreateimagewithproperties(opencl_objects.context",{"_index":3655,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["clcreatesemaphorewithpropertieskhr(opencl_objects.context",{"_index":3702,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["clean",{"_index":1992,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["clear",{"_index":2460,"title":{},"name":{},"text":{"54":{},"96":{},"106":{},"108":{}},"component":{},"keyword":{}}],["clear.color",{"_index":5248,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["clear_values.data",{"_index":2997,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["clearli",{"_index":2507,"title":{},"name":{},"text":{"54":{},"59":{},"94":{},"113":{}},"component":{},"keyword":{}}],["clever",{"_index":2202,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["clgetdeviceids_ptr(platform_id",{"_index":3590,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["clgetdeviceinfo_ptr(device_id",{"_index":3598,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["clgetplatformids_ptr(0",{"_index":3580,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["clgetplatformids_ptr(num_platform",{"_index":3582,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["click",{"_index":704,"title":{},"name":{},"text":{"7":{},"9":{},"84":{},"95":{}},"component":{},"keyword":{}}],["client",{"_index":1396,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["cliff",{"_index":4706,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["climportmemoryarm(context",{"_index":3804,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["clip",{"_index":876,"title":{"59":{},"12-90":{},"19-38":{},"59-2":{},"59-3":{},"59-4":{},"59-5":{}},"name":{},"text":{"8":{},"12":{},"19":{},"56":{},"59":{},"108":{}},"component":{},"keyword":{}}],["clone",{"_index":411,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{},"keyword":{}}],["close",{"_index":2463,"title":{},"name":{},"text":{"54":{},"55":{},"83":{},"93":{},"98":{},"101":{},"110":{}},"component":{},"keyword":{}}],["closer",{"_index":2937,"title":{},"name":{},"text":{"59":{},"88":{},"91":{}},"component":{},"keyword":{}}],["closest",{"_index":3843,"title":{"82-3":{}},"name":{},"text":{"82":{},"83":{}},"component":{},"keyword":{}}],["clt",{"_index":665,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cluster",{"_index":3894,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["cmake",{"_index":516,"title":{"7-1":{},"7-17":{},"7-20":{},"7-23":{},"7-27":{}},"name":{},"text":{"5":{},"7":{},"10":{},"56":{},"111":{}},"component":{},"keyword":{}}],["cmake;3.22.1",{"_index":740,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cmake_current_source_dir}/ktx",{"_index":5473,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["cmakelists.txt",{"_index":176,"title":{},"name":{},"text":{"2":{},"5":{},"111":{}},"component":{},"keyword":{}}],["cmd",{"_index":4300,"title":{},"name":{},"text":{"88":{},"109":{}},"component":{},"keyword":{}}],["cmd_begin_label(draw_cmd_buffers[i",{"_index":2479,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["cmd_buffer",{"_index":4139,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["cmd_end_label(draw_cmd_buffers[i",{"_index":2492,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["cmd_insert_label(draw_cmd_buffers[i",{"_index":2494,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["coars",{"_index":5561,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["code",{"_index":10,"title":{"2-6":{},"2-8":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"12":{},"15":{},"20":{},"26":{},"31":{},"34":{},"38":{},"41":{},"42":{},"47":{},"48":{},"49":{},"50":{},"54":{},"55":{},"56":{},"58":{},"60":{},"64":{},"65":{},"68":{},"71":{},"72":{},"74":{},"78":{},"82":{},"85":{},"89":{},"90":{},"95":{},"96":{},"98":{},"107":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["code_of_conduct",{"_index":0,"title":{},"name":{"1":{}},"text":{},"component":{},"keyword":{}}],["codebas",{"_index":4827,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["codec",{"_index":453,"title":{"111":{}},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["coher",{"_index":1455,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["collat",{"_index":4898,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["collect",{"_index":378,"title":{},"name":{},"text":{"4":{},"15":{},"94":{},"95":{},"108":{}},"component":{},"keyword":{}}],["color",{"_index":866,"title":{"51":{},"12-84":{},"19-32":{},"101-1":{},"106-2":{}},"name":{},"text":{"8":{},"12":{},"19":{},"20":{},"34":{},"40":{},"41":{},"42":{},"48":{},"51":{},"54":{},"57":{},"58":{},"59":{},"60":{},"62":{},"71":{},"85":{},"86":{},"90":{},"91":{},"92":{},"97":{},"99":{},"100":{},"101":{},"105":{},"106":{},"108":{}},"component":{},"keyword":{}}],["color.rgb",{"_index":3892,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["color/depth/stencil",{"_index":5285,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["color_attachment.image_view",{"_index":3007,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["color_attachment_bit",{"_index":5089,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["color_attachment_info",{"_index":3003,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["color_attachment_info.imageview",{"_index":3005,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["color_attachment_optim",{"_index":5093,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["color_attachment_output_bit",{"_index":5217,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["color_blend_st",{"_index":3396,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["color_blend_state.logicopen",{"_index":3399,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["color_desc",{"_index":5244,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["color_desc.loadop",{"_index":5245,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["color_rendering_format",{"_index":3027,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["column",{"_index":4241,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["com.khronos.vulkan_samples/com.khronos.vulkan_samples.samplelauncheract",{"_index":447,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["combin",{"_index":725,"title":{"34-3":{},"42-3":{}},"name":{},"text":{"7":{},"12":{},"13":{},"19":{},"20":{},"34":{},"38":{},"40":{},"41":{},"42":{},"47":{},"51":{},"54":{},"55":{},"56":{},"57":{},"75":{},"84":{},"85":{},"94":{},"106":{},"111":{}},"component":{},"keyword":{}}],["combinatori",{"_index":4557,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["combine.frag",{"_index":1909,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["come",{"_index":981,"title":{},"name":{},"text":{"11":{},"12":{},"56":{},"59":{},"88":{},"92":{},"95":{},"99":{},"104":{}},"component":{},"keyword":{}}],["comfort",{"_index":4971,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["command",{"_index":90,"title":{"94":{},"12-4":{},"20-3":{},"69-4":{},"94-2":{},"94-6":{},"94-7":{}},"name":{},"text":{"2":{},"4":{},"7":{},"12":{},"13":{},"14":{},"19":{},"20":{},"37":{},"38":{},"46":{},"47":{},"52":{},"54":{},"55":{},"56":{},"59":{},"60":{},"61":{},"66":{},"74":{},"79":{},"84":{},"85":{},"88":{},"94":{},"95":{},"102":{},"103":{},"104":{},"106":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["command_begin",{"_index":3146,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["command_buff",{"_index":3171,"title":{},"name":{},"text":{"61":{},"109":{}},"component":{},"keyword":{}}],["command_buffer.begin(command_buffer_begin_info",{"_index":1823,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["command_buffer.end",{"_index":1858,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["command_buffer.resetquerypool(time_stamps_query_pool",{"_index":1824,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["command_buffer.writetimestamp(vk::pipelinestageflagbits::etopofpip",{"_index":1833,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["command_buffer_begin_info",{"_index":2094,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["commandbuff",{"_index":2320,"title":{},"name":{},"text":{"52":{},"95":{}},"component":{},"keyword":{}}],["comment",{"_index":235,"title":{},"name":{},"text":{"2":{},"40":{},"41":{},"48":{},"56":{}},"component":{},"keyword":{}}],["commit",{"_index":86,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["common",{"_index":270,"title":{"73":{}},"name":{},"text":{"2":{},"5":{},"8":{},"11":{},"12":{},"21":{},"56":{},"60":{},"61":{},"66":{},"77":{},"82":{},"85":{},"89":{},"90":{},"95":{},"98":{},"102":{},"107":{},"110":{},"114":{}},"component":{},"keyword":{}}],["commonli",{"_index":121,"title":{"11-5":{}},"name":{},"text":{"2":{},"12":{},"20":{},"95":{},"101":{},"104":{}},"component":{},"keyword":{}}],["commun",{"_index":5364,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["community.arm.com",{"_index":5345,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["compact",{"_index":3940,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["compar",{"_index":401,"title":{},"name":{},"text":{"4":{},"12":{},"13":{},"19":{},"20":{},"34":{},"38":{},"42":{},"47":{},"51":{},"64":{},"66":{},"94":{},"95":{},"96":{},"99":{},"101":{},"103":{},"106":{},"107":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["compare.png",{"_index":4989,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["comparison",{"_index":1097,"title":{"112":{},"12-25":{},"20-24":{},"34-3":{},"37-2":{},"42-3":{},"46-2":{}},"name":{},"text":{"54":{},"60":{},"61":{},"77":{},"86":{},"89":{},"95":{},"99":{},"114":{}},"component":{},"keyword":{}}],["compat",{"_index":219,"title":{},"name":{},"text":{"2":{},"7":{},"12":{},"17":{},"85":{}},"component":{},"keyword":{}}],["compet",{"_index":4731,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["compil",{"_index":195,"title":{"5-3":{},"5-5":{}},"name":{},"text":{"2":{},"5":{},"7":{},"11":{},"13":{},"26":{},"31":{},"49":{},"54":{},"56":{},"66":{},"74":{},"78":{},"85":{},"90":{},"95":{},"97":{},"105":{},"107":{}},"component":{},"keyword":{}}],["complementari",{"_index":4915,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["complet",{"_index":1279,"title":{},"name":{},"text":{"12":{},"17":{},"26":{},"31":{},"37":{},"43":{},"46":{},"49":{},"56":{},"64":{},"74":{},"88":{},"90":{},"101":{},"102":{},"104":{},"107":{},"109":{}},"component":{},"keyword":{}}],["complex",{"_index":191,"title":{},"name":{},"text":{"2":{},"12":{},"18":{},"20":{},"52":{},"54":{},"55":{},"57":{},"74":{},"93":{},"95":{},"96":{},"100":{},"103":{},"107":{},"111":{}},"component":{},"keyword":{}}],["complianc",{"_index":249,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["complic",{"_index":2803,"title":{},"name":{},"text":{"56":{},"90":{}},"component":{},"keyword":{}}],["compon",{"_index":512,"title":{"5":{},"5-1":{},"5-2":{},"5-3":{},"5-5":{}},"name":{},"text":{"5":{},"15":{},"37":{},"46":{},"51":{},"62":{},"99":{},"104":{}},"component":{},"keyword":{}}],["components/cor",{"_index":525,"title":{},"name":{},"text":{"5":{},"15":{}},"component":{},"keyword":{}}],["compos",{"_index":5176,"title":{},"name":{},"text":{"102":{},"108":{}},"component":{},"keyword":{}}],["composit",{"_index":2210,"title":{},"name":{},"text":{"49":{},"54":{},"93":{},"99":{},"109":{}},"component":{},"keyword":{}}],["compositor",{"_index":5356,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["compress",{"_index":1044,"title":{"99":{},"112":{},"12-8":{},"12-25":{},"20-7":{},"20-24":{},"99-2":{},"99-3":{},"99-7":{},"99-8":{},"99-9":{},"99-11":{},"99-12":{},"99-13":{},"99-14":{}},"name":{},"text":{"11":{},"12":{},"13":{},"20":{},"92":{},"99":{},"106":{},"109":{},"111":{},"112":{}},"component":{},"keyword":{}}],["compression_control",{"_index":5014,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_control.compressioncontrolplanecount",{"_index":5027,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_control.flag",{"_index":5003,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_control.pfixedrateflag",{"_index":5028,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_control{vk_structure_type_image_compression_control_ext",{"_index":5002,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_properti",{"_index":5047,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_properties.resize(surface_format_count",{"_index":5068,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_properties[i",{"_index":5071,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["compression_properties{vk_structure_type_image_compression_properties_ext",{"_index":5043,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["comput",{"_index":1093,"title":{"22":{},"27":{},"93":{},"12-22":{},"12-27":{},"12-31":{},"17-2":{},"17-6":{},"20-21":{},"93-2":{},"93-3":{},"93-4":{}},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"22":{},"27":{},"38":{},"47":{},"48":{},"49":{},"52":{},"56":{},"64":{},"71":{},"74":{},"75":{},"82":{},"87":{},"88":{},"90":{},"92":{},"93":{},"95":{},"97":{},"101":{},"102":{},"105":{},"109":{},"113":{}},"component":{},"keyword":{}}],["compute_blob",{"_index":4509,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["compute_blob(f16vec2",{"_index":4516,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["compute_blob(vec2",{"_index":4480,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["con",{"_index":3349,"title":{"67-4":{}},"name":{},"text":{},"component":{},"keyword":{}}],["concept",{"_index":959,"title":{"11-5":{}},"name":{},"text":{"11":{},"12":{},"13":{},"19":{},"20":{},"54":{},"55":{},"56":{},"74":{},"79":{},"88":{},"95":{},"104":{},"108":{}},"component":{},"keyword":{}}],["concern",{"_index":2643,"title":{},"name":{},"text":{"56":{},"90":{},"91":{}},"component":{},"keyword":{}}],["conclus",{"_index":1383,"title":{"13-14":{},"49-12":{},"56-23":{},"56-24":{},"66-8":{},"74-9":{},"75-9":{},"84-8":{},"85-12":{},"86-7":{},"88-18":{},"99-15":{}},"name":{},"text":{},"component":{},"keyword":{}}],["concurr",{"_index":1156,"title":{"56-3":{},"56-4":{}},"name":{},"text":{"12":{},"20":{},"90":{},"94":{}},"component":{},"keyword":{}}],["condit",{"_index":262,"title":{"52":{},"12-77":{},"19-25":{},"52-2":{},"52-3":{}},"name":{},"text":{"2":{},"8":{},"12":{},"19":{},"52":{},"88":{},"100":{},"106":{}},"component":{},"keyword":{}}],["condition",{"_index":2304,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_buffer.buff",{"_index":2328,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_rendering_info",{"_index":2324,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_rendering_info.buff",{"_index":2327,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_rendering_info.offset",{"_index":2329,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_rendering_info.styp",{"_index":2325,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_visibility_buff",{"_index":2312,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_visibility_list",{"_index":2311,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_visibility_list.end",{"_index":2339,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_visibility_list.resize(linear_scene_nodes.s",{"_index":2337,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conditional_visibility_list.s",{"_index":2315,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["conduct",{"_index":11,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["confid",{"_index":4205,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["config",{"_index":643,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["configchang",{"_index":5369,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["configur",{"_index":420,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"19":{},"59":{},"65":{},"85":{},"92":{},"95":{},"96":{},"101":{},"111":{}},"component":{},"keyword":{}}],["confirm",{"_index":4659,"title":{},"name":{},"text":{"92":{},"96":{},"98":{},"106":{},"110":{}},"component":{},"keyword":{}}],["conflict",{"_index":1454,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["conform",{"_index":1348,"title":{},"name":{},"text":{"12":{},"19":{},"78":{}},"component":{},"keyword":{}}],["confus",{"_index":4810,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["conjunct",{"_index":4016,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["connect",{"_index":747,"title":{},"name":{},"text":{"7":{},"54":{},"71":{}},"component":{},"keyword":{}}],["consecut",{"_index":2309,"title":{},"name":{},"text":{"52":{},"58":{},"74":{}},"component":{},"keyword":{}}],["consequ",{"_index":2905,"title":{},"name":{},"text":{"58":{},"108":{}},"component":{},"keyword":{}}],["conserv",{"_index":877,"title":{"53":{},"12-54":{},"19-2":{}},"name":{},"text":{"8":{},"12":{},"13":{},"19":{},"53":{},"56":{},"104":{}},"component":{},"keyword":{}}],["consid",{"_index":58,"title":{"91-6":{}},"name":{},"text":{"2":{},"8":{},"11":{},"13":{},"49":{},"56":{},"78":{},"82":{},"88":{},"90":{},"91":{},"95":{},"96":{},"100":{},"101":{},"108":{}},"component":{},"keyword":{}}],["consider",{"_index":1240,"title":{"84-6":{}},"name":{},"text":{"12":{},"20":{},"56":{},"90":{},"92":{},"101":{},"108":{}},"component":{},"keyword":{}}],["consist",{"_index":76,"title":{},"name":{},"text":{"2":{},"40":{},"41":{},"93":{},"96":{},"104":{},"106":{}},"component":{},"keyword":{}}],["consol",{"_index":4823,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["const",{"_index":1789,"title":{},"name":{},"text":{"38":{},"52":{},"54":{},"56":{},"61":{},"75":{},"84":{},"85":{},"88":{},"95":{},"109":{},"114":{}},"component":{},"keyword":{}}],["constant",{"_index":1080,"title":{"95":{},"107":{},"12-5":{},"12-15":{},"20-4":{},"20-14":{},"56-8":{},"95-3":{},"95-5":{},"95-14":{},"107-2":{},"107-3":{}},"name":{},"text":{"12":{},"19":{},"20":{},"49":{},"56":{},"79":{},"85":{},"90":{},"91":{},"95":{},"96":{},"97":{},"99":{},"100":{},"102":{},"105":{},"106":{},"107":{}},"component":{},"keyword":{}}],["constant_data",{"_index":4787,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["constantbuff",{"_index":2753,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["constantdata",{"_index":4786,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["constantli",{"_index":2000,"title":{},"name":{},"text":{"43":{},"86":{}},"component":{},"keyword":{}}],["constrain",{"_index":4624,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["constraint",{"_index":3954,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["construct",{"_index":1674,"title":{},"name":{},"text":{"34":{},"42":{},"60":{},"82":{},"83":{},"94":{}},"component":{},"keyword":{}}],["constructor",{"_index":990,"title":{},"name":{},"text":{"11":{},"70":{},"85":{},"99":{}},"component":{},"keyword":{}}],["consum",{"_index":838,"title":{"88-5":{}},"name":{},"text":{"8":{},"26":{},"31":{},"84":{},"88":{},"91":{},"99":{},"101":{}},"component":{},"keyword":{}}],["consumpt",{"_index":833,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"70":{},"91":{},"100":{},"104":{}},"component":{},"keyword":{}}],["contain",{"_index":109,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"8":{},"11":{},"12":{},"17":{},"20":{},"25":{},"34":{},"38":{},"42":{},"47":{},"49":{},"51":{},"52":{},"55":{},"58":{},"59":{},"60":{},"62":{},"67":{},"73":{},"82":{},"83":{},"85":{},"86":{},"92":{},"95":{},"96":{},"97":{},"100":{},"102":{},"103":{},"105":{},"106":{},"111":{}},"component":{},"keyword":{}}],["content",{"_index":763,"title":{"8-1":{},"10-1":{},"71-2":{},"95-2":{}},"name":{},"text":{"8":{},"10":{},"12":{},"19":{},"20":{},"64":{},"74":{},"76":{},"85":{},"93":{},"95":{},"96":{},"100":{},"104":{},"106":{},"109":{}},"component":{},"keyword":{}}],["content/uploads/2016/03/vulkanfastpaths.pdf",{"_index":4893,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["content_rect_chang",{"_index":5399,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["contentrect",{"_index":5394,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["contentrect.bottom",{"_index":5382,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["contentrect.left",{"_index":5381,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["contentrect.right",{"_index":5380,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["contentrect.top",{"_index":5383,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["context",{"_index":1535,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["context.argu",{"_index":1532,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["context.external_storage_directori",{"_index":1533,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["context.temp_directori",{"_index":1534,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["contigu",{"_index":4208,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["continu",{"_index":861,"title":{},"name":{},"text":{"8":{},"13":{},"54":{},"92":{},"113":{}},"component":{},"keyword":{}}],["contrari",{"_index":4472,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["contrast",{"_index":3844,"title":{},"name":{},"text":{"82":{},"101":{}},"component":{},"keyword":{}}],["contribut",{"_index":36,"title":{"2":{},"2-7":{},"4-12":{}},"name":{"2":{}},"text":{"2":{},"4":{},"8":{},"94":{},"103":{}},"component":{},"keyword":{}}],["contributor",{"_index":83,"title":{"3":{}},"name":{"3":{}},"text":{"2":{},"4":{},"91":{}},"component":{},"keyword":{}}],["contriv",{"_index":4594,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["control",{"_index":398,"title":{"77":{},"99":{},"9-1":{},"12-8":{},"12-81":{},"19-29":{},"20-7":{},"95-13":{}},"name":{},"text":{"4":{},"11":{},"12":{},"13":{},"19":{},"20":{},"40":{},"52":{},"61":{},"63":{},"64":{},"69":{},"71":{},"77":{},"85":{},"88":{},"91":{},"92":{},"95":{},"96":{},"97":{},"98":{},"99":{},"102":{},"104":{},"105":{},"107":{},"109":{},"110":{}},"component":{},"keyword":{}}],["conveni",{"_index":137,"title":{},"name":{},"text":{"2":{},"7":{},"12":{},"20":{},"52":{},"54":{},"74":{},"85":{},"95":{},"104":{}},"component":{},"keyword":{}}],["convent",{"_index":4026,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["convert",{"_index":484,"title":{"26-3":{},"31-3":{}},"name":{},"text":{"4":{},"12":{},"17":{},"26":{},"31":{},"48":{},"70":{},"90":{}},"component":{},"keyword":{}}],["converted_memori",{"_index":3442,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["converted_memory.data",{"_index":3446,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["converted_memory.units.c_str",{"_index":3447,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["coord",{"_index":2862,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["coordin",{"_index":1364,"title":{},"name":{},"text":{"12":{},"19":{},"62":{},"82":{},"91":{},"101":{}},"component":{},"keyword":{}}],["copi",{"_index":251,"title":{},"name":{},"text":{"2":{},"12":{},"19":{},"37":{},"38":{},"46":{},"47":{},"52":{},"55":{},"56":{},"64":{},"66":{},"74":{},"75":{},"81":{},"82":{},"85":{},"95":{},"96":{},"100":{},"104":{},"111":{}},"component":{},"keyword":{}}],["copy_command",{"_index":2030,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["copy_command.copybuffertoimage(staging_buff",{"_index":1719,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["copy_command.pipelinebarrier(vk::pipelinestageflagbits::etransf",{"_index":1726,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["copyright",{"_index":30,"title":{"2-5":{},"14-6":{}},"name":{},"text":{"2":{},"14":{}},"component":{},"keyword":{}}],["core",{"_index":511,"title":{"15":{},"5-1":{}},"name":{},"text":{"5":{},"13":{},"15":{},"38":{},"47":{},"49":{},"56":{},"58":{},"88":{},"90":{},"91":{},"93":{},"95":{},"104":{},"114":{}},"component":{},"keyword":{}}],["core::imag",{"_index":5040,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["core::image::query_applied_compress",{"_index":5056,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["corevalid",{"_index":2442,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["corner",{"_index":3233,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["correct",{"_index":773,"title":{},"name":{},"text":{"8":{},"12":{},"14":{},"20":{},"37":{},"41":{},"46":{},"54":{},"56":{},"95":{},"100":{},"102":{},"104":{},"106":{}},"component":{},"keyword":{}}],["correctli",{"_index":1252,"title":{},"name":{},"text":{"12":{},"20":{},"65":{},"90":{},"92":{},"108":{},"109":{}},"component":{},"keyword":{}}],["correl",{"_index":806,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["correspond",{"_index":998,"title":{},"name":{},"text":{"11":{},"43":{},"48":{},"51":{},"56":{},"61":{},"62":{},"75":{},"77":{},"83":{},"88":{},"96":{},"98":{},"100":{},"101":{},"102":{},"110":{}},"component":{},"keyword":{}}],["corrupt",{"_index":1415,"title":{},"name":{},"text":{"13":{},"104":{}},"component":{},"keyword":{}}],["cost",{"_index":1407,"title":{},"name":{},"text":{"13":{},"66":{},"95":{},"97":{},"101":{},"105":{},"106":{},"109":{}},"component":{},"keyword":{}}],["costli",{"_index":4938,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["count",{"_index":848,"title":{},"name":{},"text":{"8":{},"38":{},"43":{},"47":{},"70":{},"84":{},"88":{},"98":{},"100":{},"102":{},"108":{},"110":{}},"component":{},"keyword":{}}],["counter",{"_index":476,"title":{"88-3":{}},"name":{},"text":{"4":{},"38":{},"47":{},"88":{},"94":{},"95":{},"99":{},"100":{},"101":{},"103":{},"108":{},"109":{}},"component":{},"keyword":{}}],["counterpart",{"_index":3780,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["coupl",{"_index":1465,"title":{},"name":{},"text":{"13":{},"104":{}},"component":{},"keyword":{}}],["cours",{"_index":2245,"title":{},"name":{},"text":{"49":{},"88":{}},"component":{},"keyword":{}}],["cover",{"_index":766,"title":{},"name":{},"text":{"8":{},"12":{},"19":{},"20":{},"53":{},"63":{},"75":{},"93":{},"95":{},"100":{},"101":{},"104":{},"106":{}},"component":{},"keyword":{}}],["coverag",{"_index":1901,"title":{},"name":{},"text":{"41":{},"101":{}},"component":{},"keyword":{}}],["cpp",{"_index":3830,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["cpu",{"_index":1157,"title":{"113":{},"102-2":{}},"name":{},"text":{"12":{},"13":{},"20":{},"38":{},"43":{},"47":{},"82":{},"84":{},"85":{},"86":{},"88":{},"94":{},"95":{},"96":{},"97":{},"98":{},"102":{},"103":{},"104":{},"105":{},"110":{},"113":{}},"component":{},"keyword":{}}],["cpu/gpu",{"_index":1781,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["cpu_commands.s",{"_index":5184,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["crash",{"_index":1436,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["crc",{"_index":5103,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["creat",{"_index":27,"title":{"2-3":{},"5-2":{},"26-4":{},"31-4":{},"38-4":{},"47-4":{},"49-2":{},"55-4":{},"66-3":{},"74-6":{},"74-7":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"11":{},"12":{},"15":{},"19":{},"20":{},"26":{},"31":{},"34":{},"37":{},"38":{},"42":{},"43":{},"46":{},"47":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"65":{},"66":{},"67":{},"68":{},"69":{},"71":{},"72":{},"74":{},"75":{},"77":{},"79":{},"82":{},"83":{},"85":{},"86":{},"88":{},"89":{},"90":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"101":{},"103":{},"105":{},"106":{},"109":{},"110":{},"111":{},"113":{},"114":{}},"component":{},"keyword":{}}],["create_bottom_level_acceleration_structur",{"_index":3912,"title":{"83-5":{}},"name":{},"text":{},"component":{},"keyword":{}}],["create_buffer_refer",{"_index":3911,"title":{"83-4":{}},"name":{},"text":{},"component":{},"keyword":{}}],["create_command_buffer(vk_command_buffer_level_primari",{"_index":5552,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["create_descriptor(textur",{"_index":1050,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["create_info",{"_index":2133,"title":{},"name":{},"text":{"49":{},"88":{},"99":{},"114":{}},"component":{},"keyword":{}}],["create_info.enabledextensioncount",{"_index":5605,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["create_info.pnext",{"_index":4291,"title":{},"name":{},"text":{"88":{},"99":{}},"component":{},"keyword":{}}],["create_info.ppenabledextensionnam",{"_index":5603,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["create_info.styp",{"_index":5602,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["create_info.surfac",{"_index":5077,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["create_info{vk_structure_type_swapchain_create_info_khr",{"_index":5076,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["create_model",{"_index":3910,"title":{"83-3":{}},"name":{},"text":{},"component":{},"keyword":{}}],["create_pipelin",{"_index":3395,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["create_render_context",{"_index":3388,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["create_scen",{"_index":3943,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["create_top_level_acceleration_structur",{"_index":3913,"title":{"83-6":{}},"name":{},"text":{},"component":{},"keyword":{}}],["createinfo",{"_index":4939,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["createinfocount",{"_index":4043,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["creation",{"_index":1067,"title":{"37-10":{},"46-10":{},"69-3":{},"69-4":{},"71-4":{},"85-3":{},"109-5":{}},"name":{},"text":{"11":{},"12":{},"19":{},"20":{},"49":{},"54":{},"59":{},"60":{},"61":{},"66":{},"69":{},"77":{},"78":{},"79":{},"83":{},"84":{},"85":{},"89":{},"94":{},"95":{},"97":{},"105":{},"106":{},"107":{},"113":{},"114":{}},"component":{},"keyword":{}}],["credit",{"_index":2891,"title":{"58-3":{}},"name":{},"text":{},"component":{},"keyword":{}}],["creleas",{"_index":945,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["cristian",{"_index":332,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["critic",{"_index":1440,"title":{},"name":{},"text":{"13":{},"49":{},"56":{},"90":{},"93":{},"96":{},"98":{},"104":{},"106":{},"110":{}},"component":{},"keyword":{}}],["cross",{"_index":483,"title":{"74":{}},"name":{},"text":{"4":{},"12":{},"15":{},"19":{},"59":{},"74":{},"81":{},"85":{}},"component":{},"keyword":{}}],["ctpl",{"_index":454,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["ctrl",{"_index":898,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["cube",{"_index":1344,"title":{},"name":{},"text":{"12":{},"19":{},"55":{},"58":{},"62":{},"64":{},"69":{},"83":{},"85":{}},"component":{},"keyword":{}}],["cube_addr_info",{"_index":2612,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["cube_addr_info.format",{"_index":2611,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["cube_addr_info.rang",{"_index":2609,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["cubemap",{"_index":1686,"title":{},"name":{},"text":{"37":{},"46":{},"111":{}},"component":{},"keyword":{}}],["cubes.s",{"_index":2626,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["cubes[i].uniform_buff",{"_index":2610,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["cube’",{"_index":2630,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["cull",{"_index":875,"title":{"71":{},"12-59":{},"19-7":{},"71-8":{}},"name":{},"text":{"8":{},"12":{},"17":{},"19":{},"20":{},"44":{},"49":{},"59":{},"71":{},"85":{},"91":{},"102":{},"109":{}},"component":{},"keyword":{}}],["cull_center_i",{"_index":3480,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["cull_center_x",{"_index":3479,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["cull_radiu",{"_index":3481,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["cull_radiusdefin",{"_index":3486,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["cullradiu",{"_index":3502,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["current",{"_index":209,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"8":{},"9":{},"10":{},"12":{},"19":{},"34":{},"37":{},"38":{},"42":{},"46":{},"47":{},"52":{},"54":{},"74":{},"75":{},"78":{},"83":{},"84":{},"85":{},"86":{},"88":{},"92":{},"102":{},"109":{}},"component":{},"keyword":{}}],["current_material_shaders[shader_index",{"_index":4146,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["current_mesh_index",{"_index":2330,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["currentshad",{"_index":4145,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["currenttransform",{"_index":5362,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["custom",{"_index":1370,"title":{},"name":{},"text":{"12":{},"19":{},"37":{},"46":{},"66":{},"82":{}},"component":{},"keyword":{}}],["custom_main(context",{"_index":1531,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["custom_main(context_nam",{"_index":1530,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["cut",{"_index":4002,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["cycl",{"_index":1461,"title":{},"name":{},"text":{"13":{},"86":{},"90":{},"93":{},"94":{},"95":{},"103":{},"106":{},"107":{},"109":{},"113":{}},"component":{},"keyword":{}}],["d",{"_index":946,"title":{},"name":{},"text":{"10":{},"56":{},"85":{},"90":{}},"component":{},"keyword":{}}],["d.w",{"_index":2747,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["d32_sfloat",{"_index":5308,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["d3d12",{"_index":4258,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["danc",{"_index":2654,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["dash",{"_index":4965,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["data",{"_index":565,"title":{"95":{},"7-13":{},"12-5":{},"20-4":{},"74-8":{},"75-2":{},"82-3":{},"88-11":{},"95-3":{},"95-5":{},"111-9":{}},"name":{},"text":{"7":{},"8":{},"12":{},"13":{},"19":{},"20":{},"37":{},"38":{},"41":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"64":{},"67":{},"71":{},"75":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"89":{},"91":{},"95":{},"96":{},"97":{},"100":{},"101":{},"105":{},"108":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["datas",{"_index":5530,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["date",{"_index":595,"title":{},"name":{},"text":{"7":{},"109":{}},"component":{},"keyword":{}}],["dcmake_build_type=releas",{"_index":655,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_ios_install_combined=no",{"_index":686,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_osx_architectures=arm64",{"_index":685,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_osx_deployment_target=13.0",{"_index":683,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_osx_sysroot=iphoneo",{"_index":682,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_system_name=io",{"_index":681,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_xcode_attribute_development_team=\"xxxx",{"_index":687,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dcmake_xcode_attribute_only_active_arch=y",{"_index":684,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ddr",{"_index":5135,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["de",{"_index":3908,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["deadlock",{"_index":4252,"title":{"88-12":{},"88-13":{}},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["deal",{"_index":2209,"title":{},"name":{},"text":{"49":{},"56":{},"88":{}},"component":{},"keyword":{}}],["debug",{"_index":399,"title":{"54":{},"84":{},"9-2":{},"12-57":{},"12-89":{},"19-5":{},"19-37":{},"49-11":{},"54-5":{},"56-20":{},"84-2":{},"84-4":{}},"name":{},"text":{"4":{},"7":{},"9":{},"12":{},"13":{},"19":{},"49":{},"54":{},"56":{},"70":{},"84":{},"85":{},"90":{},"91":{},"92":{},"93":{},"94":{},"96":{},"97":{},"98":{},"99":{},"100":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["debug.apk",{"_index":752,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["debug_output.append(shader_messag",{"_index":4010,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debug_util",{"_index":2390,"title":{},"name":{},"text":{"54":{},"78":{}},"component":{},"keyword":{}}],["debug_utils_create_info",{"_index":2401,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["debug_utils_create_info.messagesever",{"_index":2403,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["debug_utils_create_info.messagetyp",{"_index":2406,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["debug_utils_create_info.pfnusercallback",{"_index":2408,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["debug_utils_message_callback",{"_index":3994,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debug_utils_messeng",{"_index":2416,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["debug_utils_messenger_callback",{"_index":2409,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["debug_utils_messenger_create_info",{"_index":3996,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debug_utils_messenger_create_info.messagesever",{"_index":3991,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debug_utils_messenger_create_info.messagetyp",{"_index":3992,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debug_utils_messenger_create_info.pfnusercallback",{"_index":3993,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debug_utils_messenger_create_info{vk_structure_type_debug_utils_messenger_create_info_ext",{"_index":3990,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debugg",{"_index":2381,"title":{"54-8":{},"84-7":{}},"name":{},"text":{"54":{},"84":{},"114":{}},"component":{},"keyword":{}}],["debugprintfext(\"posit",{"_index":4005,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["debugprintfext(\"transform",{"_index":3969,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["decid",{"_index":3488,"title":{},"name":{},"text":{"71":{},"86":{},"95":{}},"component":{},"keyword":{}}],["decis",{"_index":1237,"title":{},"name":{},"text":{"12":{},"20":{},"59":{},"108":{}},"component":{},"keyword":{}}],["declar",{"_index":1026,"title":{},"name":{},"text":{"11":{},"49":{},"62":{},"83":{}},"component":{},"keyword":{}}],["decompress",{"_index":4691,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["decor",{"_index":2198,"title":{},"name":{},"text":{"49":{},"56":{},"62":{},"90":{}},"component":{},"keyword":{}}],["decoupl",{"_index":2631,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["decreas",{"_index":4908,"title":{},"name":{},"text":{"96":{},"103":{},"113":{}},"component":{},"keyword":{}}],["dedic",{"_index":1358,"title":{},"name":{},"text":{"12":{},"19":{},"52":{},"54":{},"55":{},"75":{},"86":{},"88":{},"109":{}},"component":{},"keyword":{}}],["dedicated_allocate_info",{"_index":3758,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["dedicated_allocate_info.buff",{"_index":3762,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["dedicated_allocate_info.imag",{"_index":3763,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["dedicated_allocate_info.pnext",{"_index":3761,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["dedicated_allocate_info.styp",{"_index":3759,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["deduc",{"_index":4842,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["deem",{"_index":2246,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["default",{"_index":162,"title":{"99-2":{}},"name":{},"text":{"2":{},"7":{},"11":{},"59":{},"67":{},"84":{},"85":{},"92":{},"96":{},"99":{},"104":{},"109":{}},"component":{},"keyword":{}}],["default.png",{"_index":4987,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["defer",{"_index":1853,"title":{"93-3":{},"108-2":{}},"name":{},"text":{"38":{},"43":{},"47":{},"88":{},"91":{},"93":{},"100":{},"104":{},"108":{}},"component":{},"keyword":{}}],["defin",{"_index":524,"title":{},"name":{},"text":{"5":{},"12":{},"15":{},"21":{},"34":{},"38":{},"42":{},"47":{},"50":{},"51":{},"55":{},"56":{},"57":{},"58":{},"59":{},"62":{},"66":{},"69":{},"70":{},"71":{},"77":{},"78":{},"82":{},"83":{},"86":{},"95":{},"99":{},"101":{},"104":{},"114":{}},"component":{},"keyword":{}}],["defining/cr",{"_index":3475,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["definit",{"_index":2939,"title":{},"name":{},"text":{"59":{},"78":{},"95":{}},"component":{},"keyword":{}}],["deform",{"_index":1317,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["defragment",{"_index":4237,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["degre",{"_index":1387,"title":{},"name":{},"text":{"13":{},"109":{}},"component":{},"keyword":{}}],["deleg",{"_index":5194,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["delet",{"_index":4754,"title":{},"name":{},"text":{"94":{},"96":{}},"component":{},"keyword":{}}],["delta",{"_index":4818,"title":{},"name":{},"text":{"95":{},"106":{}},"component":{},"keyword":{}}],["delta_in_m",{"_index":1865,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["delta_po",{"_index":4620,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["demand",{"_index":1151,"title":{},"name":{},"text":{"12":{},"20":{},"92":{}},"component":{},"keyword":{}}],["demarc",{"_index":1446,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["demo",{"_index":5352,"title":{"109-3":{}},"name":{},"text":{},"component":{},"keyword":{}}],["demonstr",{"_index":55,"title":{},"name":{},"text":{"2":{},"4":{},"12":{},"17":{},"18":{},"19":{},"20":{},"21":{},"37":{},"41":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"102":{},"105":{},"106":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["deni",{"_index":5340,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["denot",{"_index":4791,"title":{},"name":{},"text":{"95":{},"101":{}},"component":{},"keyword":{}}],["densiti",{"_index":2966,"title":{},"name":{},"text":{"59":{},"101":{}},"component":{},"keyword":{}}],["depend",{"_index":218,"title":{"7-15":{},"7-19":{},"7-22":{},"7-25":{},"7-29":{},"7-32":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"12":{},"13":{},"20":{},"38":{},"43":{},"47":{},"48":{},"52":{},"54":{},"56":{},"61":{},"62":{},"85":{},"88":{},"90":{},"93":{},"95":{},"99":{},"101":{},"103":{},"104":{},"108":{},"111":{},"113":{}},"component":{},"keyword":{}}],["deploy",{"_index":2117,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["deprec",{"_index":2538,"title":{"55-2":{},"66-4":{}},"name":{},"text":{"55":{},"66":{}},"component":{},"keyword":{}}],["depth",{"_index":1115,"title":{"40":{},"59":{},"12-52":{},"12-90":{},"17-27":{},"19-38":{},"59-3":{},"59-5":{},"101-2":{},"106-3":{},"106-5":{}},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"40":{},"41":{},"59":{},"60":{},"61":{},"83":{},"85":{},"97":{},"101":{},"103":{},"104":{},"105":{},"106":{},"108":{}},"component":{},"keyword":{}}],["depth/stencil",{"_index":5334,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["depth_alloc",{"_index":5262,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_alloc.preferredflag",{"_index":5263,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_attachment_info",{"_index":3008,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["depth_attachment_info.imageview",{"_index":3009,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["depth_desc",{"_index":5259,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_desc.storeop",{"_index":5260,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_format",{"_index":3029,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["depth_info",{"_index":5277,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_info.usag",{"_index":5279,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_stencil.view",{"_index":3010,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["depth_stencil_attach",{"_index":5274,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["depth_stencil_read_onli",{"_index":5350,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["depth_stencil_st",{"_index":3105,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["depthbiasboolparam",{"_index":3075,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["depthresolvemod",{"_index":5146,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["depthtesten",{"_index":3107,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["depthwriteen",{"_index":3108,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["deriv",{"_index":850,"title":{},"name":{},"text":{"8":{},"56":{},"62":{},"64":{},"69":{}},"component":{},"keyword":{}}],["derogatori",{"_index":15,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["desc",{"_index":5239,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["desc.loadop",{"_index":5240,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["desc.storeop",{"_index":5242,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["describ",{"_index":147,"title":{},"name":{},"text":{"2":{},"12":{},"20":{},"59":{},"62":{},"83":{},"86":{},"94":{},"95":{},"99":{},"103":{},"106":{}},"component":{},"keyword":{}}],["descript",{"_index":107,"title":{"48-1":{}},"name":{},"text":{"2":{},"12":{},"19":{},"40":{},"41":{},"59":{},"61":{},"77":{},"85":{},"89":{},"106":{}},"component":{},"keyword":{}}],["descriptor",{"_index":1047,"title":{"55":{},"56":{},"79":{},"96":{},"12-6":{},"12-56":{},"12-71":{},"12-83":{},"19-4":{},"19-19":{},"19-31":{},"20-5":{},"55-2":{},"55-4":{},"55-5":{},"56-3":{},"56-5":{},"56-20":{},"95-17":{},"95-21":{},"95-24":{},"96-3":{}},"name":{},"text":{"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"34":{},"42":{},"49":{},"55":{},"56":{},"61":{},"77":{},"79":{},"83":{},"84":{},"85":{},"94":{},"95":{},"96":{},"97":{},"102":{},"103":{},"105":{},"114":{}},"component":{},"keyword":{}}],["descriptor_buffer_binding_info",{"_index":2621,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_binding_info[0].usag",{"_index":2614,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_binding_info[1].address",{"_index":2617,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_binding_info[1].styp",{"_index":2615,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_binding_info[1].usag",{"_index":2619,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_properti",{"_index":2555,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_properties.descriptorbufferoffsetalign",{"_index":2574,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_properties.styp",{"_index":2558,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_buffer_properties.uniformbufferdescriptors",{"_index":2608,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["descriptor_indexing_featur",{"_index":5577,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["descriptor_indexing_features.descriptorbindingvariabledescriptorcount",{"_index":5582,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["descriptor_indexing_features.runtimedescriptorarray",{"_index":5581,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["descriptor_indexing_features.shadersampledimagearraynonuniformindex",{"_index":5580,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["descriptor_indexing_features.styp",{"_index":5578,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["descriptor_set",{"_index":1954,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["descriptor_set_alloc_info",{"_index":1937,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["descriptor_set_alloc_info.psetlayout",{"_index":1646,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["descriptor_set_layouts[shadertypebas",{"_index":4060,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["descriptor_set_layouts[shadertypemateri",{"_index":4127,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["descriptor_sets.background",{"_index":3163,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["descriptor_sets.baselin",{"_index":3149,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["descriptor_sets.dynamically_tessel",{"_index":3821,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["descriptor_sets.tessel",{"_index":3157,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["descriptor_sets[shadertypebas",{"_index":4166,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["descriptors.set_layout",{"_index":2673,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["descriptorset",{"_index":4922,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["deserialis",{"_index":4942,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["design",{"_index":1148,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"85":{},"88":{},"92":{},"95":{},"104":{},"109":{},"113":{}},"component":{},"keyword":{}}],["desir",{"_index":710,"title":{},"name":{},"text":{"7":{},"12":{},"20":{},"37":{},"46":{},"57":{},"71":{},"109":{},"111":{}},"component":{},"keyword":{}}],["desktop",{"_index":781,"title":{"93-4":{}},"name":{},"text":{"8":{},"9":{},"10":{},"56":{},"74":{},"90":{},"93":{},"104":{},"114":{}},"component":{},"keyword":{}}],["despit",{"_index":5271,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["destin",{"_index":1735,"title":{},"name":{},"text":{"37":{},"41":{},"46":{},"101":{}},"component":{},"keyword":{}}],["destroy",{"_index":1957,"title":{},"name":{},"text":{"43":{},"56":{},"88":{},"97":{},"105":{},"109":{}},"component":{},"keyword":{}}],["destroyrequest",{"_index":5379,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["destruct",{"_index":1998,"title":{},"name":{},"text":{"43":{},"54":{}},"component":{},"keyword":{}}],["desynchron",{"_index":5097,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["detail",{"_index":155,"title":{"64-3":{}},"name":{},"text":{"2":{},"4":{},"7":{},"12":{},"13":{},"17":{},"20":{},"26":{},"31":{},"44":{},"49":{},"54":{},"55":{},"56":{},"60":{},"61":{},"65":{},"69":{},"70":{},"71":{},"77":{},"78":{},"84":{},"85":{},"86":{},"89":{},"91":{},"92":{},"95":{},"97":{},"100":{},"104":{},"105":{},"107":{},"109":{}},"component":{},"keyword":{}}],["detect",{"_index":1691,"title":{},"name":{},"text":{"37":{},"46":{},"83":{},"86":{},"108":{}},"component":{},"keyword":{}}],["determin",{"_index":1408,"title":{},"name":{},"text":{"13":{},"43":{},"52":{},"54":{},"57":{},"58":{},"64":{},"71":{},"83":{},"85":{},"92":{},"94":{},"95":{},"100":{},"102":{},"103":{},"108":{}},"component":{},"keyword":{}}],["dev",{"_index":649,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["develop",{"_index":379,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"12":{},"13":{},"20":{},"41":{},"48":{},"58":{},"60":{},"61":{},"75":{},"77":{},"82":{},"89":{},"90":{},"92":{},"95":{},"99":{},"104":{},"111":{}},"component":{},"keyword":{}}],["developer.arm.com",{"_index":4689,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["deviat",{"_index":2273,"title":{"50-3":{}},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["devic",{"_index":442,"title":{"49":{},"7-34":{},"12-69":{},"19-17":{},"74-4":{},"78-3":{}},"name":{},"text":{"4":{},"7":{},"10":{},"11":{},"12":{},"13":{},"19":{},"20":{},"21":{},"38":{},"47":{},"49":{},"51":{},"52":{},"55":{},"56":{},"57":{},"60":{},"61":{},"64":{},"67":{},"69":{},"70":{},"74":{},"75":{},"77":{},"78":{},"82":{},"83":{},"84":{},"85":{},"86":{},"89":{},"90":{},"91":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"105":{},"106":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{}},"component":{},"keyword":{}}],["device.get_resource_cache().clear_framebuff",{"_index":5413,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["device.getquerypoolresults(time_stamps_query_pool",{"_index":1860,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["device_create_info",{"_index":5588,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["device_create_info.pnext",{"_index":5591,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["device_create_info.styp",{"_index":5589,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["device_extension_supported(vk_ext_descriptor_indexing_extension_nam",{"_index":5569,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["device_featur",{"_index":3838,"title":{},"name":{},"text":{"78":{},"111":{}},"component":{},"keyword":{}}],["device_features.pnext",{"_index":3841,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["device_features.styp",{"_index":3839,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["device_features.texturecompressionastc_ldr",{"_index":5502,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["device_features.texturecompressionbc",{"_index":5497,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["device_features.texturecompressionetc2",{"_index":5504,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["device_id",{"_index":3595,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["device_ids(num_devic",{"_index":3592,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["device_ids.data",{"_index":3593,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["device_limit",{"_index":1790,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["device_limits.timestampcomputeandgraph",{"_index":1798,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["device_limits.timestampperiod",{"_index":1792,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["device_lost",{"_index":771,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["device_memory_heap_count",{"_index":3450,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_memory_properti",{"_index":3427,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_memory_properties.memoryproperties.memoryheapcount",{"_index":3466,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_memory_properties.pnext",{"_index":3435,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_memory_properties.styp",{"_index":3433,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_memory_total_budget",{"_index":3463,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_memory_total_usag",{"_index":3462,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["device_properti",{"_index":2557,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["device_properties.pnext",{"_index":2562,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["device_properties.styp",{"_index":2560,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["device_uuid_match",{"_index":3601,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["devicecreateinfo",{"_index":5617,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["devicecreateinfo.flag",{"_index":5620,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["devicecreateinfo.pcreateinfo",{"_index":5618,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["devicecreateinfo.pprofil",{"_index":5619,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["device’",{"_index":4210,"title":{},"name":{},"text":{"86":{},"111":{}},"component":{},"keyword":{}}],["dfdi",{"_index":3243,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["dfdx",{"_index":3242,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["diagnost",{"_index":2419,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["diagram",{"_index":3914,"title":{"83-10":{}},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["dictat",{"_index":4549,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["didn’t",{"_index":2541,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["diff",{"_index":1519,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["differ",{"_index":193,"title":{"56-7":{},"91-3":{}},"name":{},"text":{"2":{},"5":{},"11":{},"12":{},"13":{},"15":{},"17":{},"18":{},"19":{},"20":{},"26":{},"31":{},"34":{},"37":{},"38":{},"42":{},"43":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"54":{},"55":{},"56":{},"58":{},"59":{},"61":{},"62":{},"63":{},"64":{},"66":{},"74":{},"75":{},"77":{},"82":{},"83":{},"85":{},"86":{},"89":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"111":{},"112":{},"114":{}},"component":{},"keyword":{}}],["difficult",{"_index":1402,"title":{},"name":{},"text":{"13":{},"56":{},"88":{},"90":{}},"component":{},"keyword":{}}],["dimens",{"_index":2037,"title":{},"name":{},"text":{"46":{},"109":{}},"component":{},"keyword":{}}],["diminish",{"_index":3893,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["dir",{"_index":1511,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["dir/cmake/$cmak",{"_index":761,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dir/ndk/$ndkvers",{"_index":760,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["direct",{"_index":831,"title":{},"name":{},"text":{"8":{},"13":{},"48":{},"49":{},"64":{},"75":{},"82":{},"83":{},"93":{},"109":{}},"component":{},"keyword":{}}],["directli",{"_index":805,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"21":{},"26":{},"31":{},"38":{},"47":{},"49":{},"55":{},"56":{},"60":{},"64":{},"84":{},"89":{},"90":{},"94":{},"95":{},"96":{},"98":{},"106":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["directori",{"_index":421,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"14":{},"54":{},"85":{}},"component":{},"keyword":{}}],["directx",{"_index":1547,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["disabl",{"_index":606,"title":{"99-14":{}},"name":{},"text":{"7":{},"41":{},"51":{},"59":{},"61":{},"64":{},"69":{},"71":{},"85":{},"92":{},"93":{},"95":{},"97":{},"99":{},"102":{},"103":{},"105":{},"109":{}},"component":{},"keyword":{}}],["disadvantag",{"_index":1382,"title":{"13-13":{}},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["disappear",{"_index":5225,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["discard",{"_index":1357,"title":{},"name":{},"text":{"12":{},"19":{},"52":{},"59":{},"61":{},"86":{},"101":{},"108":{}},"component":{},"keyword":{}}],["discourag",{"_index":3541,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["discuss",{"_index":19,"title":{},"name":{},"text":{"1":{},"12":{},"19":{},"93":{},"96":{},"98":{},"104":{},"110":{}},"component":{},"keyword":{}}],["disk",{"_index":1685,"title":{"111-7":{}},"name":{},"text":{"37":{},"46":{},"97":{},"105":{},"111":{}},"component":{},"keyword":{}}],["dispatch",{"_index":1306,"title":{},"name":{},"text":{"12":{},"19":{},"38":{},"47":{},"49":{},"52":{},"81":{},"113":{}},"component":{},"keyword":{}}],["displac",{"_index":3517,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["display",{"_index":605,"title":{"84-4":{}},"name":{},"text":{"7":{},"11":{},"12":{},"19":{},"20":{},"38":{},"47":{},"54":{},"55":{},"65":{},"66":{},"70":{},"74":{},"75":{},"84":{},"85":{},"92":{},"95":{},"99":{},"101":{},"107":{},"109":{}},"component":{},"keyword":{}}],["dist",{"_index":3889,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["distanc",{"_index":2925,"title":{},"name":{},"text":{"59":{},"82":{},"90":{}},"component":{},"keyword":{}}],["distance(object_pt",{"_index":3891,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["distil",{"_index":2231,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["distinct",{"_index":1659,"title":{},"name":{},"text":{"34":{},"42":{},"54":{},"66":{},"91":{},"104":{}},"component":{},"keyword":{}}],["distribut",{"_index":258,"title":{},"name":{},"text":{"2":{},"82":{},"99":{}},"component":{},"keyword":{}}],["divid",{"_index":3350,"title":{},"name":{},"text":{"67":{},"86":{},"94":{}},"component":{},"keyword":{}}],["divis",{"_index":4747,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["dma_buf",{"_index":3745,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["do",{"_index":1180,"title":{},"name":{},"text":{"12":{},"19":{},"20":{},"37":{},"46":{},"49":{},"59":{},"71":{},"74":{},"83":{},"84":{},"88":{},"90":{},"93":{},"94":{},"96":{},"113":{}},"component":{},"keyword":{}}],["doabl",{"_index":4268,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["docopt",{"_index":457,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["document",{"_index":149,"title":{"6":{},"51-4":{},"57-4":{},"58-4":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"33":{},"111":{},"114":{}},"component":{},"keyword":{}}],["doesn’t",{"_index":967,"title":{},"name":{},"text":{"11":{},"12":{},"18":{},"34":{},"42":{},"67":{},"91":{},"95":{},"114":{}},"component":{},"keyword":{}}],["domain",{"_index":489,"title":{"50-3":{},"50-4":{}},"name":{},"text":{"4":{},"50":{}},"component":{},"keyword":{}}],["don't",{"_index":4529,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["donat",{"_index":504,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["done",{"_index":999,"title":{},"name":{},"text":{"11":{},"12":{},"19":{},"20":{},"34":{},"37":{},"38":{},"42":{},"43":{},"46":{},"47":{},"48":{},"52":{},"54":{},"55":{},"56":{},"62":{},"69":{},"71":{},"74":{},"75":{},"78":{},"83":{},"88":{},"93":{},"95":{},"97":{},"100":{},"105":{},"108":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["dont_car",{"_index":5104,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["don’t",{"_index":232,"title":{},"name":{},"text":{"2":{},"8":{},"38":{},"47":{},"55":{},"74":{},"85":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"100":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["dot",{"_index":4497,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["dot(b_offset",{"_index":4494,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["dot(g_offset",{"_index":4492,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["dot(r_offset",{"_index":4490,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["dot(s_offset",{"_index":4496,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["doubl",{"_index":3807,"title":{"98-4":{},"110-4":{}},"name":{},"text":{"75":{},"88":{},"93":{},"97":{},"98":{},"100":{},"105":{},"108":{},"110":{}},"component":{},"keyword":{}}],["down",{"_index":1728,"title":{"88-13":{}},"name":{},"text":{"37":{},"46":{},"49":{},"56":{},"70":{},"88":{},"91":{},"95":{},"97":{},"101":{},"105":{},"106":{},"111":{}},"component":{},"keyword":{}}],["download",{"_index":600,"title":{},"name":{},"text":{"7":{},"54":{}},"component":{},"keyword":{}}],["downsampl",{"_index":1696,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["downsid",{"_index":4245,"title":{},"name":{},"text":{"86":{},"95":{}},"component":{},"keyword":{}}],["doxygen",{"_index":596,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dpu",{"_index":5355,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["drag",{"_index":892,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["drain",{"_index":4344,"title":{},"name":{},"text":{"88":{},"93":{},"104":{},"113":{}},"component":{},"keyword":{}}],["dramat",{"_index":4905,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["draw",{"_index":868,"title":{"102":{},"12-24":{},"20-23":{},"85-8":{},"102-1":{}},"name":{},"text":{"8":{},"11":{},"12":{},"13":{},"20":{},"34":{},"38":{},"42":{},"47":{},"49":{},"52":{},"54":{},"56":{},"61":{},"66":{},"69":{},"77":{},"84":{},"85":{},"89":{},"94":{},"95":{},"96":{},"97":{},"102":{},"103":{},"104":{},"105":{},"106":{}},"component":{},"keyword":{}}],["draw(model",{"_index":3814,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["draw(model1",{"_index":3064,"title":{},"name":{},"text":{"61":{},"89":{}},"component":{},"keyword":{}}],["draw(model2",{"_index":3066,"title":{},"name":{},"text":{"61":{},"89":{}},"component":{},"keyword":{}}],["draw(model3",{"_index":3068,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["draw(model4",{"_index":3070,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["draw_cmd_buff",{"_index":3166,"title":{},"name":{},"text":{"61":{},"69":{},"77":{},"85":{}},"component":{},"keyword":{}}],["draw_cmd_buffers[i",{"_index":1040,"title":{},"name":{},"text":{"11":{},"55":{}},"component":{},"keyword":{}}],["draw_cmd_buffers[i].binddescriptorsets(vk::pipelinebindpoint::egraph",{"_index":1655,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["draw_cmd_buffers[i].drawindexed(index_count",{"_index":1658,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["draw_created_model(draw_cmd_buff",{"_index":3156,"title":{},"name":{},"text":{"61":{},"69":{}},"component":{},"keyword":{}}],["draw_from_scen",{"_index":3168,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["draw_from_scene(draw_cmd_buff",{"_index":3153,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["draw_gui",{"_index":1013,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["draw_model",{"_index":3133,"title":{},"name":{},"text":{"61":{},"77":{},"89":{}},"component":{},"keyword":{}}],["draw_model(background_model",{"_index":3165,"title":{},"name":{},"text":{"61":{},"69":{}},"component":{},"keyword":{}}],["draw_model(cub",{"_index":4181,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["draw_model(model",{"_index":3822,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["draw_model(model1",{"_index":4428,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["draw_model(model2",{"_index":4429,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["draw_model(modela",{"_index":1039,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["draw_model(modelb",{"_index":1041,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["draw_model(models.cub",{"_index":2628,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["draw_model(skybox",{"_index":4169,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["draw_scen",{"_index":3000,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["drawer",{"_index":1019,"title":{},"name":{},"text":{"11":{},"70":{}},"component":{},"keyword":{}}],["drawer.checkbox(\"en",{"_index":1020,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["drawer.header(\"memori",{"_index":3449,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["drawer.header(header.c_str",{"_index":3453,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["drawer.text(\"budget",{"_index":3457,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["drawer.text(\"heap",{"_index":3458,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["drawer.text(\"tot",{"_index":3444,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["drawer.text(\"usag",{"_index":3455,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["drawfram",{"_index":1857,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["drawn",{"_index":2294,"title":{},"name":{},"text":{"51":{},"52":{},"58":{},"69":{},"85":{},"102":{},"106":{}},"component":{},"keyword":{}}],["drawstat",{"_index":2443,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["driven",{"_index":2238,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["driver",{"_index":405,"title":{"9-3":{}},"name":{},"text":{"4":{},"9":{},"13":{},"49":{},"51":{},"54":{},"55":{},"56":{},"85":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"97":{},"100":{},"105":{},"108":{},"109":{},"114":{}},"component":{},"keyword":{}}],["driver’",{"_index":5295,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["drop",{"_index":845,"title":{},"name":{},"text":{"8":{},"92":{},"95":{},"97":{},"98":{},"101":{},"103":{},"105":{},"109":{},"110":{}},"component":{},"keyword":{}}],["dropdown",{"_index":1008,"title":{},"name":{},"text":{"11":{},"64":{}},"component":{},"keyword":{}}],["dstoffsets[1",{"_index":2042,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["dststagemask",{"_index":5228,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["dt",{"_index":4235,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["due",{"_index":775,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"17":{},"37":{},"38":{},"41":{},"43":{},"46":{},"47":{},"56":{},"71":{},"74":{},"88":{},"91":{},"93":{},"95":{},"96":{},"97":{},"101":{},"105":{},"106":{},"107":{}},"component":{},"keyword":{}}],["dummi",{"_index":125,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["duplic",{"_index":3549,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["durat",{"_index":441,"title":{},"name":{},"text":{"4":{},"106":{},"108":{}},"component":{},"keyword":{}}],["dure",{"_index":1226,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"37":{},"41":{},"46":{},"59":{},"60":{},"61":{},"64":{},"69":{},"75":{},"77":{},"82":{},"89":{},"95":{},"97":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["dx",{"_index":4234,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["dxc",{"_index":2748,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["dxgi_shared_resource_read",{"_index":3618,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["dxgi_shared_resource_writ",{"_index":3619,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["dy",{"_index":4236,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["dynam",{"_index":1100,"title":{"23":{},"24":{},"28":{},"29":{},"57":{},"58":{},"59":{},"60":{},"61":{},"69":{},"82":{},"89":{},"12-28":{},"12-29":{},"12-32":{},"12-33":{},"12-55":{},"12-78":{},"12-79":{},"12-80":{},"12-87":{},"12-88":{},"12-90":{},"17-3":{},"17-4":{},"17-7":{},"17-8":{},"19-3":{},"19-26":{},"19-27":{},"19-28":{},"19-35":{},"19-36":{},"19-38":{},"56-9":{},"69-4":{},"95-21":{}},"name":{},"text":{"12":{},"17":{},"19":{},"23":{},"24":{},"28":{},"29":{},"37":{},"44":{},"46":{},"51":{},"56":{},"58":{},"59":{},"60":{},"61":{},"64":{},"69":{},"77":{},"80":{},"82":{},"85":{},"86":{},"89":{},"95":{},"96":{},"97":{},"105":{}},"component":{},"keyword":{}}],["dynamic_cast(node.sub_mesh",{"_index":2361,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["dynamic_st",{"_index":3053,"title":{},"name":{},"text":{"61":{},"69":{},"77":{},"89":{}},"component":{},"keyword":{}}],["dynamic_state_en",{"_index":3137,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["dynamic_state_enables.data",{"_index":3140,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["dynamic_state_enables_background",{"_index":3402,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["dynamically_tessel",{"_index":3820,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["dynamicrend",{"_index":3042,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["e",{"_index":448,"title":{},"name":{},"text":{"4":{},"49":{}},"component":{},"keyword":{}}],["e.g",{"_index":944,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"13":{},"19":{},"26":{},"31":{},"37":{},"38":{},"41":{},"46":{},"47":{},"49":{},"54":{},"56":{},"59":{},"62":{},"63":{},"66":{},"69":{},"74":{},"84":{},"94":{},"95":{},"98":{},"99":{},"101":{},"102":{},"104":{},"110":{},"111":{}},"component":{},"keyword":{}}],["e.g.,kilobyt",{"_index":3439,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["each",{"_index":140,"title":{},"name":{},"text":{"2":{},"4":{},"8":{},"12":{},"13":{},"19":{},"20":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"67":{},"70":{},"71":{},"75":{},"77":{},"82":{},"83":{},"85":{},"88":{},"89":{},"91":{},"94":{},"95":{},"96":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["earli",{"_index":4711,"title":{},"name":{},"text":{"93":{},"95":{},"97":{},"104":{},"105":{}},"component":{},"keyword":{}}],["earlier",{"_index":862,"title":{},"name":{},"text":{"8":{},"13":{},"38":{},"47":{},"55":{},"56":{},"59":{},"74":{},"85":{},"93":{},"98":{},"101":{},"110":{},"111":{}},"component":{},"keyword":{}}],["eas",{"_index":4809,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["easi",{"_index":1201,"title":{},"name":{},"text":{"12":{},"20":{},"52":{},"54":{},"56":{},"59":{},"88":{},"90":{},"96":{},"100":{}},"component":{},"keyword":{}}],["easier",{"_index":194,"title":{},"name":{},"text":{"2":{},"12":{},"14":{},"19":{},"54":{},"55":{}},"component":{},"keyword":{}}],["easili",{"_index":3920,"title":{},"name":{},"text":{"83":{},"90":{},"107":{}},"component":{},"keyword":{}}],["ecosystem",{"_index":1170,"title":{},"name":{},"text":{"12":{},"20":{},"26":{},"31":{},"95":{}},"component":{},"keyword":{}}],["edg",{"_index":1210,"title":{},"name":{},"text":{"12":{},"20":{},"58":{},"101":{}},"component":{},"keyword":{}}],["edit",{"_index":676,"title":{},"name":{},"text":{"7":{},"95":{}},"component":{},"keyword":{}}],["effect",{"_index":1250,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"37":{},"46":{},"59":{},"62":{},"69":{},"82":{},"85":{},"90":{},"93":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"105":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["effici",{"_index":510,"title":{"104":{}},"name":{},"text":{"4":{},"5":{},"12":{},"13":{},"20":{},"48":{},"56":{},"74":{},"75":{},"90":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"103":{},"104":{},"107":{},"109":{},"113":{}},"component":{},"keyword":{}}],["effort",{"_index":1904,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["eg",{"_index":3497,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["elabor",{"_index":1412,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["elaps",{"_index":2279,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["elapsed_tim",{"_index":4174,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["eleas",{"_index":5559,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["electron",{"_index":298,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["element",{"_index":1010,"title":{},"name":{},"text":{"11":{},"61":{},"62":{},"82":{},"94":{},"99":{}},"component":{},"keyword":{}}],["elimin",{"_index":2802,"title":{"100-1":{}},"name":{},"text":{"56":{},"60":{},"61":{},"77":{},"89":{},"100":{},"102":{},"108":{}},"component":{},"keyword":{}}],["emb",{"_index":3942,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["embark",{"_index":1474,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["emilio",{"_index":337,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["emit",{"_index":2181,"title":{},"name":{},"text":{"49":{},"56":{},"71":{}},"component":{},"keyword":{}}],["emitmeshtasksext",{"_index":3492,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["employ",{"_index":4702,"title":{},"name":{},"text":{"93":{},"100":{}},"component":{},"keyword":{}}],["empti",{"_index":4949,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["emul",{"_index":4019,"title":{"85-10":{}},"name":{},"text":{"85":{},"88":{}},"component":{},"keyword":{}}],["enabl",{"_index":579,"title":{"51":{},"92":{},"11-6":{},"12-84":{},"19-32":{},"56-6":{},"60-4":{},"61-3":{},"62-2":{},"67-3":{},"69-3":{},"69-5":{},"71-3":{},"77-3":{},"85-2":{},"86-3":{},"86-4":{},"89-3":{},"90-2":{},"90-5":{},"91-2":{},"92-2":{}},"name":{},"text":{"7":{},"11":{},"12":{},"13":{},"19":{},"20":{},"38":{},"40":{},"41":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"54":{},"56":{},"57":{},"60":{},"61":{},"62":{},"64":{},"69":{},"70":{},"71":{},"74":{},"77":{},"78":{},"84":{},"85":{},"86":{},"89":{},"90":{},"91":{},"92":{},"93":{},"96":{},"97":{},"98":{},"99":{},"101":{},"102":{},"103":{},"105":{},"106":{},"109":{},"110":{},"113":{},"114":{}},"component":{},"keyword":{}}],["enable_featur",{"_index":2840,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["enable_features[2",{"_index":2835,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["enable_geometry_pass",{"_index":4149,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["enabled/dis",{"_index":5449,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["enabled_extensions.data",{"_index":5604,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["enabled_extensions.push_back(vk_ext_validation_features_extension_nam",{"_index":2828,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["encapsul",{"_index":513,"title":{},"name":{},"text":{"5":{},"11":{},"54":{}},"component":{},"keyword":{}}],["enclos",{"_index":226,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["encod",{"_index":451,"title":{"64-2":{}},"name":{},"text":{"4":{},"13":{},"64":{},"82":{},"99":{}},"component":{},"keyword":{}}],["encourag",{"_index":39,"title":{},"name":{},"text":{"2":{},"71":{}},"component":{},"keyword":{}}],["end",{"_index":66,"title":{},"name":{},"text":{"2":{},"4":{},"13":{},"38":{},"47":{},"52":{},"54":{},"55":{},"56":{},"61":{},"75":{},"88":{},"90":{},"96":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["endif",{"_index":3621,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["energi",{"_index":1483,"title":{},"name":{},"text":{"13":{},"104":{}},"component":{},"keyword":{}}],["engin",{"_index":1958,"title":{},"name":{},"text":{"43":{},"88":{},"91":{},"93":{},"96":{},"97":{},"98":{},"105":{},"109":{},"110":{}},"component":{},"keyword":{}}],["engine’",{"_index":5452,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["enough",{"_index":816,"title":{},"name":{},"text":{"8":{},"12":{},"20":{},"41":{},"56":{},"91":{},"95":{},"96":{},"98":{},"99":{},"108":{},"110":{}},"component":{},"keyword":{}}],["ensur",{"_index":65,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"13":{},"14":{},"49":{},"74":{},"88":{},"91":{},"92":{},"93":{},"98":{},"99":{},"104":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["entir",{"_index":423,"title":{},"name":{},"text":{"4":{},"13":{},"50":{},"85":{},"90":{},"95":{},"102":{},"104":{},"106":{}},"component":{},"keyword":{}}],["entireti",{"_index":527,"title":{},"name":{},"text":{"5":{},"15":{}},"component":{},"keyword":{}}],["entri",{"_index":2341,"title":{},"name":{},"text":{"52":{},"56":{},"74":{}},"component":{},"keyword":{}}],["entrypoint",{"_index":1529,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["enum",{"_index":2281,"title":{},"name":{},"text":{"50":{},"101":{}},"component":{},"keyword":{}}],["enumer",{"_index":3405,"title":{},"name":{},"text":{"69":{},"104":{}},"component":{},"keyword":{}}],["environ",{"_index":570,"title":{"7-26":{}},"name":{},"text":{"7":{},"26":{},"31":{},"85":{}},"component":{},"keyword":{}}],["equal",{"_index":2345,"title":{},"name":{},"text":{"52":{},"59":{},"85":{},"96":{},"103":{},"106":{}},"component":{},"keyword":{}}],["equat",{"_index":2881,"title":{},"name":{},"text":{"57":{},"104":{}},"component":{},"keyword":{}}],["equip",{"_index":1171,"title":{},"name":{},"text":{"12":{},"20":{},"95":{}},"component":{},"keyword":{}}],["equival",{"_index":3555,"title":{},"name":{},"text":{"74":{},"113":{}},"component":{},"keyword":{}}],["ericsson",{"_index":5503,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["error",{"_index":199,"title":{"13-6":{}},"name":{},"text":{"2":{},"7":{},"8":{},"12":{},"13":{},"15":{},"20":{},"54":{},"56":{},"85":{},"91":{},"95":{},"101":{},"114":{}},"component":{},"keyword":{}}],["es",{"_index":403,"title":{"13-2":{}},"name":{},"text":{"4":{},"13":{},"75":{},"90":{},"96":{},"109":{}},"component":{},"keyword":{}}],["eshlanguag",{"_index":1587,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["eshlangvertex",{"_index":1588,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["eshmessag",{"_index":1585,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["eshmsgreadhlsl",{"_index":1584,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["esoter",{"_index":1330,"title":{},"name":{},"text":{"12":{},"19":{},"88":{}},"component":{},"keyword":{}}],["esp",{"_index":2455,"title":{},"name":{},"text":{"54":{},"74":{},"114":{}},"component":{},"keyword":{}}],["especi",{"_index":1182,"title":{},"name":{},"text":{"12":{},"20":{},"37":{},"46":{},"56":{},"90":{},"95":{},"96":{},"100":{},"104":{}},"component":{},"keyword":{}}],["essenti",{"_index":400,"title":{"13":{}},"name":{},"text":{"4":{},"49":{},"95":{}},"component":{},"keyword":{}}],["establish",{"_index":3470,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["estim",{"_index":834,"title":{},"name":{},"text":{"8":{},"64":{},"82":{},"91":{},"99":{},"106":{}},"component":{},"keyword":{}}],["etc",{"_index":1009,"title":{},"name":{},"text":{"11":{},"12":{},"19":{},"21":{},"40":{},"70":{},"71":{},"82":{},"104":{},"111":{},"114":{}},"component":{},"keyword":{}}],["etc1",{"_index":5463,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["etc1s/uastc",{"_index":5557,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["etc2",{"_index":5469,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["etcs1/uastc",{"_index":5520,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["evalu",{"_index":452,"title":{},"name":{},"text":{"4":{},"70":{},"94":{},"101":{}},"component":{},"keyword":{}}],["even",{"_index":772,"title":{},"name":{},"text":{"8":{},"13":{},"37":{},"38":{},"40":{},"41":{},"46":{},"47":{},"48":{},"56":{},"71":{},"74":{},"88":{},"90":{},"91":{},"95":{},"98":{},"99":{},"100":{},"102":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["evenli",{"_index":3224,"title":{},"name":{},"text":{"64":{},"94":{}},"component":{},"keyword":{}}],["event",{"_index":2454,"title":{},"name":{},"text":{"54":{},"84":{},"104":{},"109":{}},"component":{},"keyword":{}}],["eventu",{"_index":1993,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["everitt",{"_index":1882,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["everyth",{"_index":2184,"title":{},"name":{},"text":{"49":{},"70":{},"71":{},"84":{},"88":{},"90":{},"93":{}},"component":{},"keyword":{}}],["everywher",{"_index":4546,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["evid",{"_index":2510,"title":{},"name":{},"text":{"54":{},"106":{}},"component":{},"keyword":{}}],["exact",{"_index":2466,"title":{},"name":{},"text":{"54":{},"98":{},"110":{}},"component":{},"keyword":{}}],["exactli",{"_index":1846,"title":{},"name":{},"text":{"38":{},"47":{},"55":{},"95":{}},"component":{},"keyword":{}}],["exagger",{"_index":4475,"title":{},"name":{},"text":{"90":{},"95":{}},"component":{},"keyword":{}}],["exampl",{"_index":419,"title":{"56-16":{},"56-17":{}},"name":{},"text":{"4":{},"7":{},"12":{},"13":{},"17":{},"19":{},"20":{},"22":{},"26":{},"31":{},"34":{},"37":{},"38":{},"42":{},"43":{},"46":{},"47":{},"52":{},"54":{},"55":{},"56":{},"59":{},"64":{},"68":{},"71":{},"72":{},"74":{},"75":{},"78":{},"79":{},"82":{},"83":{},"84":{},"85":{},"89":{},"91":{},"95":{},"96":{},"97":{},"100":{},"103":{},"104":{},"105":{},"106":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["exce",{"_index":3963,"title":{},"name":{},"text":{"83":{},"102":{}},"component":{},"keyword":{}}],["exceed",{"_index":791,"title":{},"name":{},"text":{"8":{},"94":{}},"component":{},"keyword":{}}],["except",{"_index":248,"title":{},"name":{},"text":{"2":{},"14":{},"49":{},"56":{},"61":{},"85":{},"88":{},"92":{},"93":{},"99":{},"108":{},"111":{}},"component":{},"keyword":{}}],["exception",{"_index":4619,"title":{},"name":{},"text":{"91":{},"101":{},"104":{}},"component":{},"keyword":{}}],["exclud",{"_index":577,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["exclus",{"_index":3262,"title":{"65":{}},"name":{},"text":{"65":{},"82":{}},"component":{},"keyword":{}}],["execut",{"_index":1219,"title":{"13-4":{},"52-3":{},"66-5":{}},"name":{},"text":{"12":{},"13":{},"15":{},"20":{},"38":{},"47":{},"48":{},"52":{},"54":{},"56":{},"65":{},"66":{},"71":{},"75":{},"83":{},"84":{},"85":{},"90":{},"94":{},"95":{},"97":{},"102":{},"103":{},"104":{},"105":{},"107":{},"113":{}},"component":{},"keyword":{}}],["executable_pipeline_create_info",{"_index":3339,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["executable_pipeline_create_info.flag",{"_index":3342,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["executable_pipeline_create_info.pnext",{"_index":3341,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["executable_pipeline_create_info.styp",{"_index":3340,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["exemplari",{"_index":3353,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["exercis",{"_index":1390,"title":{},"name":{},"text":{"13":{},"90":{}},"component":{},"keyword":{}}],["exist",{"_index":242,"title":{},"name":{},"text":{"2":{},"71":{},"74":{},"83":{},"84":{},"85":{},"88":{},"95":{},"97":{},"105":{}},"component":{},"keyword":{}}],["exit",{"_index":4356,"title":{},"name":{},"text":{"88":{},"97":{},"105":{}},"component":{},"keyword":{}}],["expand",{"_index":3362,"title":{},"name":{},"text":{"67":{},"70":{},"91":{}},"component":{},"keyword":{}}],["expect",{"_index":314,"title":{"13-10":{}},"name":{},"text":{"2":{},"4":{},"8":{},"13":{},"57":{},"93":{},"94":{},"97":{},"99":{},"101":{},"103":{},"104":{},"105":{},"106":{},"109":{}},"component":{},"keyword":{}}],["expend",{"_index":4474,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["expens",{"_index":1403,"title":{},"name":{},"text":{"13":{},"82":{},"94":{},"97":{},"101":{},"105":{},"108":{}},"component":{},"keyword":{}}],["experi",{"_index":3550,"title":{},"name":{},"text":{"74":{},"85":{},"101":{}},"component":{},"keyword":{}}],["experiment",{"_index":395,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["expert",{"_index":1478,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["explain",{"_index":389,"title":{},"name":{},"text":{"4":{},"56":{},"85":{},"99":{},"101":{},"109":{}},"component":{},"keyword":{}}],["explan",{"_index":156,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{},"keyword":{}}],["explicit",{"_index":1339,"title":{"90":{},"90-7":{}},"name":{},"text":{"12":{},"13":{},"19":{},"49":{},"63":{},"74":{},"90":{},"91":{},"109":{}},"component":{},"keyword":{}}],["explicitli",{"_index":977,"title":{},"name":{},"text":{"11":{},"13":{},"90":{},"99":{},"101":{},"106":{}},"component":{},"keyword":{}}],["explict",{"_index":1417,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["exploit",{"_index":1452,"title":{},"name":{},"text":{"13":{},"93":{}},"component":{},"keyword":{}}],["explor",{"_index":1187,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"82":{},"96":{}},"component":{},"keyword":{}}],["explos",{"_index":4343,"title":{},"name":{},"text":{"88":{},"90":{}},"component":{},"keyword":{}}],["export",{"_index":678,"title":{"75-5":{}},"name":{},"text":{"7":{},"75":{}},"component":{},"keyword":{}}],["export_memory_allocate_info",{"_index":3766,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["export_memory_allocate_info.handletyp",{"_index":3769,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["export_memory_allocate_info.pnext",{"_index":3620,"title":{},"name":{},"text":{"74":{},"75":{}},"component":{},"keyword":{}}],["export_memory_allocate_info.styp",{"_index":3767,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["export_memory_win32_handle_info",{"_index":3613,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_memory_win32_handle_info.dwaccess",{"_index":3617,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_memory_win32_handle_info.pattribut",{"_index":3616,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_memory_win32_handle_info.styp",{"_index":3614,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_create_info",{"_index":3662,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_create_info.handletyp",{"_index":3672,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_create_info.pnext",{"_index":3671,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_create_info.styp",{"_index":3663,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_handle_info",{"_index":3666,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_handle_info.dwaccess",{"_index":3670,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_handle_info.pattribut",{"_index":3669,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["export_semaphore_handle_info.styp",{"_index":3667,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["expos",{"_index":989,"title":{},"name":{},"text":{"11":{},"12":{},"13":{},"20":{},"49":{},"56":{},"74":{},"93":{},"94":{},"95":{},"107":{}},"component":{},"keyword":{}}],["express",{"_index":264,"title":{},"name":{},"text":{"2":{},"56":{},"90":{},"93":{}},"component":{},"keyword":{}}],["ext",{"_index":3268,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["extend",{"_index":183,"title":{"61":{},"70":{},"82":{},"11-9":{},"12-62":{},"12-79":{},"19-10":{},"19-27":{}},"name":{},"text":{"2":{},"51":{},"61":{},"69":{},"77":{},"83":{},"89":{},"91":{}},"component":{},"keyword":{}}],["extendeddynamicst",{"_index":3413,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["extendeddynamicstate2",{"_index":3409,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["extendeddynamicstate2::draw_from_scene(vkcommandbuff",{"_index":3170,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["extendeddynamicstate2logicop",{"_index":3410,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["extendeddynamicstate2patchcontrolpoint",{"_index":3411,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["extens",{"_index":45,"title":{"54":{},"78":{},"11-6":{},"12-53":{},"19-1":{},"60-4":{},"61-3":{},"62-2":{},"67-3":{},"69-5":{},"70-1":{},"74-3":{},"77-3":{},"85-2":{},"86-4":{},"89-3":{},"91-2":{}},"name":{},"text":{"2":{},"11":{},"12":{},"13":{},"19":{},"20":{},"21":{},"38":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"84":{},"85":{},"86":{},"87":{},"89":{},"90":{},"91":{},"92":{},"95":{},"99":{},"111":{},"114":{}},"component":{},"keyword":{}}],["extensions.push_back(vk_ext_debug_utils_extension_nam",{"_index":2395,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["extensions.push_back(vk_khr_portability_subset_extension_nam",{"_index":3833,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["extensions/man/html/vk_ext_color_write_enable.html",{"_index":2299,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["extensions/man/html/vk_ext_descriptor_indexing.html#_extension_and_version_depend",{"_index":5572,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetcolorblendadvancedext.html",{"_index":2890,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetcolorblendenableext.html",{"_index":2888,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetcolorblendequationext.html",{"_index":2889,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetcolorwritemaskext.html",{"_index":2302,"title":{},"name":{},"text":{"51":{},"57":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetlinerasterizationmodeext.html",{"_index":2911,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetlinestippleenableext.html",{"_index":2912,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetlinestippleext.html",{"_index":2909,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetlinewidth.html",{"_index":2913,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["extensions/man/html/vkcmdsetpolygonmodeext.html",{"_index":2910,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["extensions/man/html/vkframebuffercreateinfo.html",{"_index":2301,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["extensions/man/html/vksubpassdescription.html",{"_index":2300,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["extent",{"_index":1706,"title":{},"name":{},"text":{"37":{},"46":{},"84":{}},"component":{},"keyword":{}}],["extent.height",{"_index":5284,"title":{},"name":{},"text":{"106":{},"109":{}},"component":{},"keyword":{}}],["extent.width",{"_index":5283,"title":{},"name":{},"text":{"106":{},"109":{}},"component":{},"keyword":{}}],["extern",{"_index":122,"title":{},"name":{},"text":{"2":{},"12":{},"20":{},"59":{},"74":{},"88":{},"91":{},"92":{},"94":{},"100":{},"101":{},"103":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["external_memory_image_create_info",{"_index":3750,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["external_memory_image_create_info.handletyp",{"_index":3754,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["external_memory_image_create_info.pnext",{"_index":3753,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["external_memory_image_create_info.styp",{"_index":3751,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["extra",{"_index":1905,"title":{},"name":{},"text":{"41":{},"56":{},"93":{},"95":{},"99":{},"109":{}},"component":{},"keyword":{}}],["extract",{"_index":913,"title":{},"name":{},"text":{"9":{},"50":{}},"component":{},"keyword":{}}],["extrem",{"_index":1333,"title":{},"name":{},"text":{"12":{},"19":{},"49":{},"88":{},"93":{},"95":{},"101":{},"107":{}},"component":{},"keyword":{}}],["ey",{"_index":4982,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["f12",{"_index":2537,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["f16vec2",{"_index":4517,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["f16vec3(world_posit",{"_index":4621,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["f16vec4",{"_index":4515,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["f16vec4(0.0hf",{"_index":4538,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["f16vec4(0.95hf",{"_index":4520,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["f16vec4(1.05hf",{"_index":4524,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["f16vec4(arithmet",{"_index":4575,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["f16vec4(rg_dot.xi",{"_index":4532,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["f16x2",{"_index":4560,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["f2",{"_index":1987,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["face",{"_index":3230,"title":{},"name":{},"text":{"64":{},"82":{},"83":{},"91":{},"104":{}},"component":{},"keyword":{}}],["facilit",{"_index":306,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["fact",{"_index":2639,"title":{},"name":{},"text":{"56":{},"96":{},"101":{}},"component":{},"keyword":{}}],["factor",{"_index":2877,"title":{},"name":{},"text":{"57":{},"58":{},"90":{},"94":{},"95":{},"96":{}},"component":{},"keyword":{}}],["fail",{"_index":758,"title":{},"name":{},"text":{"7":{},"10":{},"85":{},"95":{},"101":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["failed\\n",{"_index":4116,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["fallback",{"_index":4185,"title":{"88-14":{}},"name":{},"text":{"85":{},"109":{}},"component":{},"keyword":{}}],["fals",{"_index":1594,"title":{},"name":{},"text":{"26":{},"31":{},"54":{},"56":{},"67":{},"74":{},"78":{},"83":{},"88":{}},"component":{},"keyword":{}}],["famili",{"_index":1692,"title":{},"name":{},"text":{"37":{},"38":{},"46":{},"47":{}},"component":{},"keyword":{}}],["familiar",{"_index":4539,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["fanci",{"_index":2681,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["far",{"_index":2931,"title":{},"name":{},"text":{"59":{},"86":{},"91":{},"113":{}},"component":{},"keyword":{}}],["fargnoli",{"_index":370,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["fashion",{"_index":2961,"title":{},"name":{},"text":{"59":{},"109":{}},"component":{},"keyword":{}}],["fast",{"_index":480,"title":{},"name":{},"text":{"4":{},"12":{},"19":{},"49":{},"82":{},"83":{},"95":{},"104":{},"106":{}},"component":{},"keyword":{}}],["faster",{"_index":1238,"title":{},"name":{},"text":{"12":{},"20":{},"66":{},"96":{},"108":{}},"component":{},"keyword":{}}],["fastest",{"_index":1164,"title":{},"name":{},"text":{"12":{},"20":{},"95":{}},"component":{},"keyword":{}}],["faux",{"_index":2160,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["favour",{"_index":4840,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["fb0",{"_index":4967,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["fb1",{"_index":4966,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["fd",{"_index":3629,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["feasibl",{"_index":854,"title":{},"name":{},"text":{"8":{},"96":{}},"component":{},"keyword":{}}],["featur",{"_index":927,"title":{"70":{},"82":{},"91":{},"11-8":{},"78-3":{},"86-3":{}},"name":{},"text":{"9":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"21":{},"26":{},"31":{},"38":{},"39":{},"41":{},"47":{},"48":{},"49":{},"51":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"64":{},"69":{},"70":{},"71":{},"74":{},"77":{},"78":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"95":{},"99":{},"102":{},"108":{},"114":{}},"component":{},"keyword":{}}],["fed",{"_index":2641,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["feed",{"_index":4789,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["feedback",{"_index":104,"title":{},"name":{},"text":{"2":{},"54":{},"64":{},"71":{}},"component":{},"keyword":{}}],["fell",{"_index":4347,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["fenc",{"_index":1254,"title":{"113-2":{}},"name":{},"text":{"12":{},"20":{},"43":{},"74":{},"88":{},"113":{}},"component":{},"keyword":{}}],["fetch",{"_index":1768,"title":{},"name":{},"text":{"38":{},"47":{},"49":{},"55":{},"95":{}},"component":{},"keyword":{}}],["few",{"_index":1158,"title":{"38-2":{},"47-2":{}},"name":{},"text":{"12":{},"20":{},"59":{},"83":{},"94":{},"95":{},"96":{},"98":{},"110":{}},"component":{},"keyword":{}}],["fewer",{"_index":1503,"title":{},"name":{},"text":{"13":{},"71":{},"90":{}},"component":{},"keyword":{}}],["fhd",{"_index":951,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["fiddl",{"_index":4709,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["field",{"_index":225,"title":{},"name":{},"text":{"2":{},"8":{},"12":{},"18":{},"37":{},"46":{},"48":{},"75":{},"97":{},"105":{},"109":{}},"component":{},"keyword":{}}],["fifo",{"_index":5458,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["figur",{"_index":4910,"title":{},"name":{},"text":{"96":{},"98":{},"101":{},"110":{}},"component":{},"keyword":{}}],["file",{"_index":128,"title":{"16":{},"73":{},"111-4":{},"111-6":{},"111-7":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"12":{},"14":{},"17":{},"19":{},"37":{},"45":{},"46":{},"48":{},"67":{},"85":{},"86":{},"97":{},"105":{},"111":{}},"component":{},"keyword":{}}],["filesystem",{"_index":1536,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["filesystem::from_context(context",{"_index":1538,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["fill",{"_index":1326,"title":{},"name":{},"text":{"12":{},"19":{},"56":{},"58":{},"61":{},"75":{},"77":{},"85":{},"95":{},"96":{}},"component":{},"keyword":{}}],["filter",{"_index":1645,"title":{},"name":{},"text":{"34":{},"37":{},"42":{},"46":{},"54":{},"56":{},"94":{}},"component":{},"keyword":{}}],["final",{"_index":1307,"title":{"37-9":{},"46-9":{}},"name":{},"text":{"12":{},"19":{},"40":{},"41":{},"48":{},"49":{},"51":{},"56":{},"81":{},"85":{},"86":{},"88":{},"90":{},"93":{},"94":{},"95":{},"100":{},"101":{},"108":{}},"component":{},"keyword":{}}],["finallayout",{"_index":1196,"title":{},"name":{},"text":{"12":{},"20":{},"100":{}},"component":{},"keyword":{}}],["find",{"_index":382,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"19":{},"38":{},"47":{},"54":{},"56":{},"74":{},"75":{},"84":{},"92":{},"94":{},"109":{},"114":{}},"component":{},"keyword":{}}],["fine",{"_index":1490,"title":{},"name":{},"text":{"13":{},"38":{},"47":{},"56":{},"88":{}},"component":{},"keyword":{}}],["finger",{"_index":902,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["finish",{"_index":1774,"title":{},"name":{},"text":{"38":{},"43":{},"47":{},"74":{},"75":{},"88":{},"113":{}},"component":{},"keyword":{}}],["finit",{"_index":4367,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["fire",{"_index":1312,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["first",{"_index":1703,"title":{},"name":{},"text":{"37":{},"38":{},"40":{},"43":{},"46":{},"47":{},"49":{},"51":{},"52":{},"55":{},"56":{},"59":{},"61":{},"67":{},"74":{},"75":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"91":{},"93":{},"95":{},"96":{},"97":{},"98":{},"101":{},"103":{},"104":{},"105":{},"108":{},"110":{},"111":{}},"component":{},"keyword":{}}],["first_submit",{"_index":3712,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["firstindex",{"_index":4873,"title":{},"name":{},"text":{"95":{},"102":{}},"component":{},"keyword":{}}],["firstinst",{"_index":4870,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["firstli",{"_index":1449,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["fit",{"_index":1167,"title":{},"name":{},"text":{"12":{},"18":{},"20":{},"26":{},"31":{},"49":{},"66":{},"74":{},"84":{},"95":{},"96":{},"102":{},"108":{}},"component":{},"keyword":{}}],["fix",{"_index":99,"title":{"99-3":{},"99-14":{}},"name":{},"text":{"2":{},"8":{},"12":{},"14":{},"20":{},"41":{},"49":{},"52":{},"59":{},"64":{},"84":{},"88":{},"93":{},"99":{},"102":{},"109":{},"111":{}},"component":{},"keyword":{}}],["fixed_rate_2bpc.png",{"_index":4988,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["fixed_rate_flags_array[0",{"_index":5029,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["fixed_rate_flags_array[1",{"_index":5026,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["flag",{"_index":936,"title":{"56-5":{}},"name":{},"text":{"10":{},"11":{},"14":{},"37":{},"38":{},"46":{},"47":{},"49":{},"55":{},"56":{},"57":{},"64":{},"66":{},"70":{},"71":{},"82":{},"83":{},"84":{},"85":{},"92":{},"94":{},"95":{},"96":{},"99":{},"106":{},"108":{}},"component":{},"keyword":{}}],["flags_info",{"_index":2145,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["flags_info.flag",{"_index":2142,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["flags_info{vk_structure_type_memory_allocate_flags_info_khr",{"_index":2141,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["flame",{"_index":3848,"title":{},"name":{},"text":{"82":{},"94":{},"103":{}},"component":{},"keyword":{}}],["flare",{"_index":4479,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["flatten",{"_index":2680,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["flexibl",{"_index":1177,"title":{},"name":{},"text":{"12":{},"19":{},"20":{},"49":{},"56":{},"60":{},"67":{},"82":{},"88":{},"95":{},"96":{},"107":{}},"component":{},"keyword":{}}],["fli",{"_index":1441,"title":{},"name":{},"text":{"13":{},"96":{}},"component":{},"keyword":{}}],["flicker",{"_index":1890,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["flight",{"_index":2456,"title":{},"name":{},"text":{"54":{},"88":{},"93":{},"96":{}},"component":{},"keyword":{}}],["float",{"_index":1273,"title":{"90-2":{}},"name":{},"text":{"12":{},"17":{},"24":{},"38":{},"47":{},"49":{},"59":{},"62":{},"71":{},"90":{},"95":{}},"component":{},"keyword":{}}],["float(time_stamps[1",{"_index":1866,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["float16",{"_index":4463,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["float16_t",{"_index":4511,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["float2",{"_index":1559,"title":{},"name":{},"text":{"26":{},"31":{},"56":{}},"component":{},"keyword":{}}],["float2(thr.yz",{"_index":2766,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["float3",{"_index":1555,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["float4",{"_index":1565,"title":{},"name":{},"text":{"26":{},"31":{},"56":{},"84":{}},"component":{},"keyword":{}}],["float4(input.pos.xyz",{"_index":1579,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["float4x4",{"_index":1564,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["floatbitstouint(a.x",{"_index":2744,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["flow",{"_index":4251,"title":{"88-11":{}},"name":{},"text":{"88":{},"107":{}},"component":{},"keyword":{}}],["fluctuat",{"_index":4734,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["flush",{"_index":3808,"title":{},"name":{},"text":{"75":{},"95":{},"96":{},"104":{}},"component":{},"keyword":{}}],["flush_command_buffer(copy_command",{"_index":5556,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["fma",{"_index":4501,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["fn",{"_index":1976,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["fo",{"_index":4013,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["focu",{"_index":1222,"title":{},"name":{},"text":{"12":{},"20":{},"91":{},"104":{},"109":{}},"component":{},"keyword":{}}],["focus",{"_index":2955,"title":{},"name":{},"text":{"59":{},"86":{},"91":{},"92":{}},"component":{},"keyword":{}}],["folder",{"_index":106,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"11":{},"12":{},"73":{}},"component":{},"keyword":{}}],["follow",{"_index":9,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"7":{},"9":{},"14":{},"15":{},"37":{},"40":{},"43":{},"46":{},"55":{},"57":{},"60":{},"61":{},"62":{},"65":{},"70":{},"71":{},"74":{},"75":{},"77":{},"83":{},"89":{},"91":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"100":{},"101":{},"104":{},"105":{},"106":{},"107":{},"108":{},"110":{},"113":{}},"component":{},"keyword":{}}],["font",{"_index":119,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["foo",{"_index":4573,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["footprint",{"_index":1386,"title":{"99-4":{}},"name":{},"text":{"13":{},"99":{}},"component":{},"keyword":{}}],["for(auto",{"_index":4879,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["forc",{"_index":2694,"title":{},"name":{},"text":{"56":{},"90":{},"94":{},"104":{},"108":{},"113":{}},"component":{},"keyword":{}}],["forget",{"_index":4586,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["forgot",{"_index":2847,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["fork",{"_index":277,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["form",{"_index":863,"title":{},"name":{},"text":{"8":{},"13":{},"49":{},"59":{},"83":{},"84":{},"95":{}},"component":{},"keyword":{}}],["formal",{"_index":501,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["format",{"_index":78,"title":{"7-16":{},"14-5":{},"69-2":{},"92-4":{},"111-2":{},"111-5":{},"111-8":{}},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"14":{},"20":{},"26":{},"31":{},"37":{},"46":{},"52":{},"56":{},"60":{},"64":{},"69":{},"75":{},"83":{},"85":{},"92":{},"95":{},"108":{},"111":{}},"component":{},"keyword":{}}],["format.pi",{"_index":1521,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["format_supported(vk_format_bc7_srgb_block",{"_index":5499,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["formula",{"_index":1705,"title":{},"name":{},"text":{"37":{},"46":{},"86":{},"108":{}},"component":{},"keyword":{}}],["forth",{"_index":4650,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["fortnit",{"_index":4923,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["forward",{"_index":2161,"title":{},"name":{},"text":{"49":{},"56":{},"88":{},"99":{},"104":{}},"component":{},"keyword":{}}],["found",{"_index":1144,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["foundat",{"_index":4277,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["four",{"_index":3918,"title":{},"name":{},"text":{"83":{},"101":{},"108":{}},"component":{},"keyword":{}}],["fourth",{"_index":3118,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["foveat",{"_index":1341,"title":{},"name":{},"text":{"12":{},"19":{},"63":{}},"component":{},"keyword":{}}],["fp",{"_index":827,"title":{},"name":{},"text":{"8":{},"48":{},"91":{},"95":{},"96":{},"97":{},"98":{},"101":{},"105":{},"106":{},"108":{},"110":{}},"component":{},"keyword":{}}],["fp16",{"_index":1257,"title":{"90-8":{}},"name":{},"text":{"12":{},"20":{},"90":{},"91":{}},"component":{},"keyword":{}}],["fp32",{"_index":1256,"title":{},"name":{},"text":{"12":{},"20":{},"90":{},"91":{}},"component":{},"keyword":{}}],["fract_tim",{"_index":2249,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["fraction",{"_index":4209,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["frag",{"_index":4064,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["frag_shader(\"fs.frag",{"_index":1057,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["frag_shader_data",{"_index":4065,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["frag_suffix_s",{"_index":4125,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["fragment",{"_index":790,"title":{"62":{},"63":{},"64":{},"12-72":{},"12-73":{},"12-82":{},"19-20":{},"19-21":{},"19-30":{},"62-5":{}},"name":{},"text":{"8":{},"12":{},"19":{},"34":{},"38":{},"40":{},"41":{},"42":{},"47":{},"48":{},"51":{},"53":{},"55":{},"56":{},"58":{},"59":{},"62":{},"63":{},"64":{},"66":{},"68":{},"71":{},"72":{},"80":{},"84":{},"85":{},"86":{},"90":{},"91":{},"93":{},"95":{},"97":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"113":{}},"component":{},"keyword":{}}],["fragment_shad",{"_index":3329,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["fragment_shader_bit",{"_index":5218,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["fragment_shading_bit",{"_index":5230,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["fragmentshaderbarycentr",{"_index":3202,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["fragmentshaderbarycentric::request_gpu_featur",{"_index":3207,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["fragtexcoord",{"_index":4229,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["frame",{"_index":432,"title":{},"name":{},"text":{"4":{},"12":{},"13":{},"19":{},"20":{},"37":{},"38":{},"46":{},"47":{},"48":{},"54":{},"64":{},"65":{},"74":{},"75":{},"82":{},"85":{},"88":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["framebuff",{"_index":860,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"19":{},"20":{},"51":{},"54":{},"60":{},"63":{},"69":{},"75":{},"92":{},"99":{},"100":{},"101":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["framebuffers[i",{"_index":2992,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["framer",{"_index":4948,"title":{},"name":{},"text":{"97":{},"98":{},"105":{},"110":{}},"component":{},"keyword":{}}],["frametim",{"_index":4846,"title":{},"name":{},"text":{"95":{},"103":{}},"component":{},"keyword":{}}],["framework",{"_index":132,"title":{"11":{},"11-5":{}},"name":{},"text":{"2":{},"4":{},"7":{},"9":{},"11":{},"12":{},"13":{},"17":{},"25":{},"50":{},"54":{},"62":{},"78":{},"85":{},"89":{},"94":{},"96":{},"99":{},"109":{},"111":{}},"component":{},"keyword":{}}],["framework/core/instance.cpp:41",{"_index":2850,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["frame’",{"_index":3255,"title":{},"name":{},"text":{"64":{},"113":{}},"component":{},"keyword":{}}],["free",{"_index":1427,"title":{"94-5":{}},"name":{},"text":{"13":{},"43":{},"56":{},"88":{},"90":{},"94":{},"95":{},"96":{},"106":{},"109":{}},"component":{},"keyword":{}}],["freed",{"_index":1964,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["freeli",{"_index":1623,"title":{},"name":{},"text":{"34":{},"42":{},"49":{},"56":{}},"component":{},"keyword":{}}],["frequenc",{"_index":844,"title":{"64-4":{}},"name":{},"text":{"8":{},"12":{},"13":{},"19":{},"37":{},"46":{},"64":{},"84":{},"94":{},"104":{}},"component":{},"keyword":{}}],["frequent",{"_index":963,"title":{},"name":{},"text":{"11":{},"94":{}},"component":{},"keyword":{}}],["frick",{"_index":358,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["friendli",{"_index":20,"title":{},"name":{},"text":{"1":{},"91":{}},"component":{},"keyword":{}}],["front",{"_index":468,"title":{},"name":{},"text":{"4":{},"13":{},"40":{},"59":{},"66":{}},"component":{},"keyword":{}}],["frustum",{"_index":1266,"title":{},"name":{},"text":{"12":{},"17":{},"20":{},"44":{},"102":{}},"component":{},"keyword":{}}],["fs",{"_index":1537,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["full",{"_index":507,"title":{"65":{}},"name":{},"text":{"4":{},"12":{},"19":{},"49":{},"54":{},"64":{},"65":{},"84":{},"88":{},"95":{},"98":{},"101":{},"104":{},"110":{},"113":{}},"component":{},"keyword":{}}],["fulli",{"_index":1287,"title":{},"name":{},"text":{"12":{},"19":{},"53":{},"56":{},"74":{},"78":{},"96":{},"101":{},"103":{},"104":{}},"component":{},"keyword":{}}],["fullscreen",{"_index":3266,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["fun",{"_index":2128,"title":{},"name":{},"text":{"49":{},"88":{}},"component":{},"keyword":{}}],["function",{"_index":961,"title":{"106-4":{}},"name":{},"text":{"11":{},"12":{},"13":{},"15":{},"19":{},"20":{},"21":{},"26":{},"31":{},"34":{},"38":{},"41":{},"42":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"65":{},"66":{},"67":{},"70":{},"71":{},"74":{},"77":{},"78":{},"83":{},"84":{},"85":{},"89":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"99":{},"100":{},"102":{},"103":{},"105":{},"106":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["further",{"_index":506,"title":{"92-5":{},"94-9":{},"95-30":{},"96-5":{},"103-5":{},"108-5":{}},"name":{},"text":{"4":{},"8":{},"13":{},"59":{},"71":{},"82":{},"95":{},"96":{},"101":{},"103":{},"104":{}},"component":{},"keyword":{}}],["furthermor",{"_index":4919,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["futur",{"_index":100,"title":{},"name":{},"text":{"2":{},"8":{},"43":{},"88":{},"97":{},"105":{}},"component":{},"keyword":{}}],["g",{"_index":636,"title":{},"name":{},"text":{"7":{},"51":{},"88":{},"92":{},"96":{},"100":{},"104":{},"108":{}},"component":{},"keyword":{}}],["g\"visual",{"_index":628,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["g51",{"_index":5091,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["g72",{"_index":4970,"title":{},"name":{},"text":{"98":{},"103":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["g76",{"_index":4854,"title":{},"name":{},"text":{"95":{},"97":{},"101":{},"105":{},"107":{},"108":{},"113":{}},"component":{},"keyword":{}}],["g77",{"_index":4660,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["g_dot",{"_index":4491,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["g_offset",{"_index":4486,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["gain",{"_index":2201,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["galaxi",{"_index":4633,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["game",{"_index":1328,"title":{},"name":{},"text":{"12":{},"19":{},"66":{},"88":{},"93":{},"95":{},"97":{},"100":{},"105":{},"106":{}},"component":{},"keyword":{}}],["gari",{"_index":329,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["gather",{"_index":1883,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["gb/",{"_index":830,"title":{},"name":{},"text":{"8":{},"91":{},"101":{}},"component":{},"keyword":{}}],["gdc",{"_index":4924,"title":{},"name":{},"text":{"96":{},"108":{}},"component":{},"keyword":{}}],["gear",{"_index":4628,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["gener",{"_index":28,"title":{"6":{},"37":{},"46":{},"2-4":{},"4-4":{},"7-31":{},"10-4":{},"12-41":{},"12-47":{},"12-93":{},"14-1":{},"14-2":{},"14-3":{},"14-4":{},"17-16":{},"17-22":{},"18-1":{},"37-8":{},"46-8":{},"102-1":{},"102-2":{}},"name":{},"text":{"4":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"26":{},"31":{},"37":{},"41":{},"46":{},"49":{},"50":{},"53":{},"54":{},"56":{},"71":{},"75":{},"78":{},"81":{},"82":{},"83":{},"86":{},"88":{},"91":{},"92":{},"95":{},"99":{},"100":{},"102":{},"103":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["generate_sampl",{"_index":955,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["generate_sample_test.pi",{"_index":957,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["geo_stag",{"_index":4154,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["geometri",{"_index":784,"title":{"67":{},"12-85":{},"19-33":{},"83-2":{}},"name":{},"text":{"8":{},"12":{},"19":{},"40":{},"41":{},"67":{},"71":{},"80":{},"81":{},"82":{},"83":{},"85":{},"91":{},"102":{},"104":{},"108":{},"109":{}},"component":{},"keyword":{}}],["geometrysubpass::update_uniform(commandbuff",{"_index":5431,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["geospher",{"_index":3169,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["get",{"_index":1761,"title":{"38-7":{},"47-7":{}},"name":{},"text":{"38":{},"47":{},"49":{},"71":{},"74":{},"104":{},"108":{}},"component":{},"keyword":{}}],["get_create_info",{"_index":4106,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["get_data",{"_index":2590,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["get_devic",{"_index":1620,"title":{},"name":{},"text":{"31":{},"34":{},"37":{},"38":{}},"component":{},"keyword":{}}],["get_device().get_gpu().get_featur",{"_index":5496,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["get_device().get_gpu().get_features().fillmodenonsolid",{"_index":3126,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["get_device().get_gpu().get_instance().get_handl",{"_index":3046,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["get_device().is_extension_supported(vk_img_format_pvrtc_extension_nam",{"_index":5506,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["get_device().wait_idl",{"_index":5408,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["get_device_address",{"_index":2596,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["get_gpu().get_handl",{"_index":3577,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["get_gpu().get_properties().limit",{"_index":1791,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["get_handl",{"_index":2077,"title":{},"name":{},"text":{"46":{},"47":{},"52":{},"74":{},"88":{},"102":{},"114":{}},"component":{},"keyword":{}}],["get_handle().allocatedescriptorsets(descriptor_set_alloc_info).front",{"_index":1649,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["get_handle().createimageview(image_view_create_info",{"_index":1758,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["get_handle().createquerypool(query_pool_create_info",{"_index":1809,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["get_handle().createshadermodule(module_create_info",{"_index":1621,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["get_handle().getquerypoolresults(time_stamps_query_pool",{"_index":1835,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["get_handle().updatedescriptorsets(sampler_write_descriptor_set",{"_index":1653,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["get_handle().updatedescriptorsets(write_descriptor_set",{"_index":1644,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["get_materi",{"_index":2362,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_memory_type(memory_requirements.memorytypebit",{"_index":3602,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["get_render_context().get_surface_ext",{"_index":5410,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["get_render_context().get_swapchain",{"_index":5423,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["get_render_context().update_swapchain(surface_ext",{"_index":5411,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["get_shad",{"_index":4142,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["get_siz",{"_index":2598,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["get_stag",{"_index":4141,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["get_suitable_graphics_queue().get_properti",{"_index":1801,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["get_surfac",{"_index":5402,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["get_transform().get_world_matrix",{"_index":2351,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_vk_image_view().get_handl",{"_index":1635,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["get_vulkan_memory_handl",{"_index":3623,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["get_vulkan_memory_handle(shared_image.memori",{"_index":3626,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["get_vulkan_semaphore_handl",{"_index":3684,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["get_vulkan_semaphore_handle(cl_update_vk_semaphor",{"_index":3697,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["get_window().resize(anativewindow_getwidth(app",{"_index":5377,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["giant",{"_index":4852,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["gist",{"_index":2126,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["git",{"_index":114,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"14":{}},"component":{},"keyword":{}}],["github",{"_index":297,"title":{},"name":{},"text":{"2":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["give",{"_index":1216,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"38":{},"47":{},"56":{},"82":{},"83":{},"88":{},"90":{},"91":{},"95":{},"97":{},"98":{},"103":{},"104":{},"105":{},"110":{},"111":{}},"component":{},"keyword":{}}],["given",{"_index":1267,"title":{},"name":{},"text":{"12":{},"15":{},"17":{},"38":{},"43":{},"47":{},"49":{},"50":{},"51":{},"52":{},"64":{},"82":{},"84":{},"85":{},"94":{},"95":{},"101":{},"114":{}},"component":{},"keyword":{}}],["gl_arb_sparse_texture2",{"_index":4223,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gl_barycoordext",{"_index":3188,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["gl_barycoordext.i",{"_index":3219,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["gl_barycoordext.x",{"_index":3217,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["gl_barycoordext.z",{"_index":3221,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["gl_barycoordnoperspext",{"_index":3190,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["gl_clipdist",{"_index":2915,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["gl_clipdistance[1",{"_index":2942,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["gl_drawid",{"_index":2255,"title":{},"name":{},"text":{"49":{},"56":{}},"component":{},"keyword":{}}],["gl_ext_16bit_storag",{"_index":4571,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["gl_ext_buffer_refer",{"_index":2159,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["gl_ext_buffer_reference_uvec2",{"_index":2223,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["gl_ext_fragment_shader_barycentr",{"_index":3210,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["gl_ext_nonuniform_qualifi",{"_index":2690,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["gl_ext_shader_16bit_storag",{"_index":4514,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["gl_ext_shader_explicit_arithmetic_types_float16",{"_index":4512,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["gl_globalinvocationid.x",{"_index":2734,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["gl_instancecustomindexext",{"_index":3935,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["gl_instanceindex",{"_index":2253,"title":{},"name":{},"text":{"49":{},"56":{},"95":{}},"component":{},"keyword":{}}],["gl_meshverticesext[k",{"_index":3511,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["gl_pervertex",{"_index":2940,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["gl_posit",{"_index":2941,"title":{},"name":{},"text":{"59":{},"91":{},"109":{}},"component":{},"keyword":{}}],["gl_primitivetriangleindicesext[k",{"_index":3524,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["gl_rayflagsopaqueext",{"_index":3949,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["gl_rayflagsskipclosesthitshaderext",{"_index":3950,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["gl_rayflagsterminateonfirsthitext",{"_index":3948,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["gl_vertexindex",{"_index":2262,"title":{},"name":{},"text":{"49":{},"84":{}},"component":{},"keyword":{}}],["glclipplan",{"_index":2928,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["glfw",{"_index":462,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["glm",{"_index":465,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["glm::mat4",{"_index":2348,"title":{},"name":{},"text":{"52":{},"85":{},"109":{}},"component":{},"keyword":{}}],["glm::mat4(1.0f",{"_index":4164,"title":{},"name":{},"text":{"85":{},"109":{}},"component":{},"keyword":{}}],["glm::radians(180.0f",{"_index":5429,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glm::radians(270.0f",{"_index":5427,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glm::radians(90.0f",{"_index":5426,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glm::rotate((float",{"_index":4173,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["glm::rotate(pre_rotate_mat",{"_index":5425,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glm::scale(glm::vec3(0.05f",{"_index":4176,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["glm::translate(glm::vec3(1.2f",{"_index":4171,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["glm::vec3",{"_index":5420,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glm::vec3(0",{"_index":4175,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["glm::vec3(0.0f",{"_index":5422,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glm::vec4(mat",{"_index":2366,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["global",{"_index":1393,"title":{},"name":{},"text":{"13":{},"55":{},"56":{},"78":{},"91":{},"95":{},"104":{},"113":{}},"component":{},"keyword":{}}],["global_s",{"_index":3726,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["global_size.data",{"_index":3734,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["global_size.s",{"_index":3733,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["global_uniform",{"_index":5435,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["global_uniform.camera_view_proj",{"_index":5436,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["global_uniform.model",{"_index":5442,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["global_uniform.view_proj",{"_index":5444,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["globaluniform",{"_index":5434,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["glsl",{"_index":1052,"title":{"49-3":{},"56-16":{}},"name":{},"text":{"11":{},"26":{},"31":{},"49":{},"62":{},"71":{},"84":{},"85":{},"90":{}},"component":{},"keyword":{}}],["glsl/c",{"_index":4799,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["glsl450",{"_index":2190,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["glsl_compiler.compile_to_spirv(stag",{"_index":4075,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["glslang",{"_index":467,"title":{"26-2":{},"31-2":{}},"name":{},"text":{"4":{},"26":{},"31":{},"91":{}},"component":{},"keyword":{}}],["glslang::eshclientvulkan",{"_index":1592,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["glslang::eshtargetspv_1_4",{"_index":3378,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["glslang::glslangtospv",{"_index":1602,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["glslang::glslangtospv(*intermedi",{"_index":1600,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["glslang::tintermedi",{"_index":1598,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["glslang::tprogram",{"_index":1595,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["glslang::tshad",{"_index":1589,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["glslangvalid",{"_index":2791,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["gltf",{"_index":492,"title":{},"name":{},"text":{"4":{},"11":{},"52":{}},"component":{},"keyword":{}}],["glue",{"_index":5398,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["go",{"_index":621,"title":{},"name":{},"text":{"7":{},"12":{},"13":{},"19":{},"26":{},"31":{},"37":{},"46":{},"56":{},"74":{},"86":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"98":{},"101":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["goal",{"_index":372,"title":{"4-2":{}},"name":{},"text":{"5":{},"12":{},"17":{},"18":{},"19":{},"20":{},"21":{},"56":{},"91":{},"93":{}},"component":{},"keyword":{}}],["goe",{"_index":2649,"title":{},"name":{},"text":{"56":{},"94":{},"95":{}},"component":{},"keyword":{}}],["good",{"_index":2675,"title":{"88-6":{}},"name":{},"text":{"56":{},"66":{},"85":{},"88":{},"90":{},"93":{},"95":{},"98":{},"101":{},"110":{},"111":{}},"component":{},"keyword":{}}],["googl",{"_index":272,"title":{},"name":{},"text":{"2":{},"48":{}},"component":{},"keyword":{}}],["gotta",{"_index":4500,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["govern",{"_index":267,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["gpu",{"_index":509,"title":{"93":{},"102":{},"111":{},"113":{},"8-2":{},"11-8":{},"12-23":{},"12-24":{},"20-22":{},"20-23":{},"56-22":{},"93-4":{},"100-1":{},"102-2":{},"111-5":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"37":{},"38":{},"41":{},"43":{},"46":{},"47":{},"48":{},"49":{},"51":{},"55":{},"56":{},"71":{},"82":{},"83":{},"85":{},"86":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{}},"component":{},"keyword":{}}],["gpu.get_features().shaderresourceresid",{"_index":4219,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gpu.get_features().sparsebind",{"_index":4217,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gpu.get_features().sparseresidencyimage2d",{"_index":4218,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gpu.get_handl",{"_index":5615,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["gpu.get_mutable_requested_features().shaderresourceresid",{"_index":4222,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gpu.get_mutable_requested_features().sparsebind",{"_index":4220,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gpu.get_mutable_requested_features().sparseresidencyimage2d",{"_index":4221,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["gpu.request_extension_featur",{"_index":1819,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["gpu.request_extension_features(vk_structure_type_physical_device_extended_dynamic_state_2_features_ext",{"_index":3415,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["gpu.request_extension_features(vk_structure_type_physical_device_extended_dynamic_state_features_ext",{"_index":3419,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["gpu.request_extension_features(vk_structure_type_physical_device_host_query_reset_features_ext",{"_index":2091,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["gpu.request_extension_features(vk_structure_type_physical_device_mesh_shader_features_ext",{"_index":3381,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["gpu.request_extension_features(vk_structure_type_physical_device_shader_object_features_ext",{"_index":4038,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["gpu_assisted_ext",{"_index":2843,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["gpu’",{"_index":1772,"title":{},"name":{},"text":{"38":{},"47":{},"95":{}},"component":{},"keyword":{}}],["grab",{"_index":2130,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["gradl",{"_index":572,"title":{"7-30":{},"7-31":{}},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gradle/build.gradl",{"_index":757,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["grant",{"_index":4385,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["granular",{"_index":5238,"title":{"106-6":{}},"name":{},"text":{"106":{},"113":{}},"component":{},"keyword":{}}],["graph",{"_index":965,"title":{},"name":{},"text":{"11":{},"88":{},"92":{},"94":{},"95":{},"104":{},"106":{},"107":{},"113":{}},"component":{},"keyword":{}}],["graphic",{"_index":471,"title":{"66":{},"11-9":{},"12-76":{},"13-1":{},"19-24":{},"84-7":{},"93-5":{}},"name":{},"text":{"4":{},"11":{},"12":{},"13":{},"19":{},"20":{},"38":{},"47":{},"48":{},"49":{},"50":{},"54":{},"56":{},"59":{},"60":{},"66":{},"69":{},"71":{},"74":{},"75":{},"84":{},"85":{},"87":{},"88":{},"90":{},"92":{},"93":{},"97":{},"101":{},"105":{},"114":{}},"component":{},"keyword":{}}],["graphics_cr",{"_index":3114,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["graphics_create.layout",{"_index":3122,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["graphics_create.pcolorblendst",{"_index":3401,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["graphics_create.pdepthstencilst",{"_index":3112,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["graphics_create.pdynamicst",{"_index":3142,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["graphics_create.pinputassemblyst",{"_index":3110,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["graphics_create.pnext",{"_index":3032,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["graphics_create.prasterizationst",{"_index":3111,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["graphics_create.ptessellationst",{"_index":3113,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["graphics_create.renderpass",{"_index":3034,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["graphics_create_info",{"_index":4415,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["graphics_create_info.pvertexinputst",{"_index":4441,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["graphics_create_info_1.pvertexinputst",{"_index":4414,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["graphics_create_info_2",{"_index":4427,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["graphics_create_info_2.pvertexinputst",{"_index":4426,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["graphics_create{vk_structure_type_graphics_pipeline_create_info",{"_index":3031,"title":{},"name":{},"text":{"60":{},"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["graphics_queue_family_properti",{"_index":1800,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["graphics_queue_family_properties.timestampvalidbit",{"_index":1802,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["grayscal",{"_index":1891,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["great",{"_index":2676,"title":{},"name":{},"text":{"56":{},"84":{},"95":{}},"component":{},"keyword":{}}],["greater",{"_index":1785,"title":{},"name":{},"text":{"38":{},"47":{},"61":{},"64":{},"97":{},"105":{},"107":{}},"component":{},"keyword":{}}],["greatli",{"_index":1770,"title":{},"name":{},"text":{"38":{},"47":{},"56":{},"74":{}},"component":{},"keyword":{}}],["grid",{"_index":2904,"title":{},"name":{},"text":{"58":{},"101":{},"102":{}},"component":{},"keyword":{}}],["gridlin",{"_index":2906,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["group",{"_index":6,"title":{"56-14":{}},"name":{},"text":{"1":{},"4":{},"12":{},"13":{},"19":{},"49":{},"56":{},"71":{},"81":{},"95":{}},"component":{},"keyword":{}}],["grow",{"_index":1150,"title":{},"name":{},"text":{"12":{},"20":{},"92":{}},"component":{},"keyword":{}}],["guarante",{"_index":1848,"title":{},"name":{},"text":{"38":{},"47":{},"55":{},"56":{},"83":{},"88":{},"90":{},"95":{},"99":{},"109":{}},"component":{},"keyword":{}}],["guess",{"_index":1506,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["guesswork",{"_index":4543,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["gui",{"_index":900,"title":{},"name":{},"text":{"9":{},"61":{},"62":{},"64":{},"69":{},"71":{},"85":{},"86":{},"94":{}},"component":{},"keyword":{}}],["guid",{"_index":124,"title":{"7":{},"10":{}},"name":{},"text":{"2":{},"4":{},"10":{},"26":{},"31":{},"95":{},"111":{}},"component":{},"keyword":{}}],["guidanc",{"_index":50,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["guidelin",{"_index":62,"title":{},"name":{},"text":{"2":{},"4":{},"11":{},"109":{}},"component":{},"keyword":{}}],["hairi",{"_index":2207,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["half",{"_index":2811,"title":{},"name":{},"text":{"56":{},"59":{},"64":{},"91":{}},"component":{},"keyword":{}}],["hammer",{"_index":4469,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["hand",{"_index":1499,"title":{},"name":{},"text":{"13":{},"15":{},"43":{},"67":{},"85":{},"88":{},"99":{}},"component":{},"keyword":{}}],["handi",{"_index":4568,"title":{},"name":{},"text":{"91":{},"93":{}},"component":{},"keyword":{}}],["handl",{"_index":696,"title":{},"name":{},"text":{"7":{},"12":{},"13":{},"15":{},"17":{},"43":{},"54":{},"56":{},"74":{},"75":{},"85":{},"86":{},"88":{},"90":{},"94":{},"95":{},"96":{},"106":{},"109":{},"111":{}},"component":{},"keyword":{}}],["happen",{"_index":3825,"title":{},"name":{},"text":{"78":{},"88":{},"91":{},"93":{},"98":{},"99":{},"100":{},"104":{},"110":{}},"component":{},"keyword":{}}],["happi",{"_index":4973,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["hard",{"_index":2701,"title":{},"name":{},"text":{"56":{},"74":{},"82":{},"84":{},"88":{},"90":{},"93":{}},"component":{},"keyword":{}}],["hard_threshold",{"_index":3900,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["hardcod",{"_index":3946,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["harder",{"_index":4556,"title":{},"name":{},"text":{"90":{},"96":{},"97":{},"105":{}},"component":{},"keyword":{}}],["hardwar",{"_index":172,"title":{"81":{},"12-61":{},"12-62":{},"19-9":{},"19-10":{},"75-3":{}},"name":{},"text":{"2":{},"4":{},"12":{},"13":{},"15":{},"19":{},"20":{},"38":{},"47":{},"48":{},"55":{},"56":{},"59":{},"71":{},"75":{},"93":{},"99":{},"101":{},"104":{},"109":{}},"component":{},"keyword":{}}],["hardware_buff",{"_index":3779,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["harri",{"_index":352,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["hash",{"_index":1539,"title":{},"name":{},"text":{"15":{},"97":{},"105":{}},"component":{},"keyword":{}}],["hashmap",{"_index":4904,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["have",{"_index":1173,"title":{},"name":{},"text":{"12":{},"19":{},"20":{},"37":{},"46":{},"52":{},"55":{},"56":{},"75":{},"83":{},"92":{},"94":{},"95":{},"96":{},"104":{},"106":{},"113":{},"114":{}},"component":{},"keyword":{}}],["hazard",{"_index":4341,"title":{},"name":{},"text":{"88":{},"104":{}},"component":{},"keyword":{}}],["hdr",{"_index":1766,"title":{},"name":{},"text":{"38":{},"47":{},"50":{},"93":{}},"component":{},"keyword":{}}],["head",{"_index":1900,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["headach",{"_index":4541,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["header",{"_index":491,"title":{"14-6":{}},"name":{},"text":{"4":{},"5":{},"14":{},"15":{},"60":{},"61":{},"69":{},"70":{},"77":{},"89":{}},"component":{},"keyword":{}}],["headless",{"_index":436,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["heap",{"_index":2982,"title":{},"name":{},"text":{"60":{},"70":{}},"component":{},"keyword":{}}],["heavi",{"_index":821,"title":{},"name":{},"text":{"8":{},"11":{},"95":{},"96":{},"109":{}},"component":{},"keyword":{}}],["heavili",{"_index":1464,"title":{},"name":{},"text":{"13":{},"88":{},"90":{}},"component":{},"keyword":{}}],["hector",{"_index":362,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["height",{"_index":2449,"title":{},"name":{},"text":{"54":{},"60":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["held",{"_index":939,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["hello",{"_index":1102,"title":{"25":{},"30":{},"12-30":{},"12-34":{},"17-5":{},"17-9":{}},"name":{},"text":{"12":{},"17":{},"30":{}},"component":{},"keyword":{}}],["hello_triangl",{"_index":709,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["help",{"_index":64,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"12":{},"13":{},"14":{},"19":{},"20":{},"52":{},"54":{},"56":{},"69":{},"70":{},"84":{},"90":{},"94":{},"95":{},"96":{},"101":{},"103":{}},"component":{},"keyword":{}}],["helper",{"_index":1509,"title":{},"name":{},"text":{"14":{},"83":{},"109":{}},"component":{},"keyword":{}}],["hemispher",{"_index":3895,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["hemisphere_pt(object_pt",{"_index":3902,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["here",{"_index":8,"title":{"56-15":{}},"name":{},"text":{"1":{},"7":{},"12":{},"19":{},"26":{},"31":{},"38":{},"47":{},"49":{},"54":{},"56":{},"71":{},"74":{},"83":{},"84":{},"88":{},"90":{},"91":{},"92":{},"93":{},"95":{},"101":{},"106":{},"107":{},"108":{},"109":{}},"component":{},"keyword":{}}],["here'",{"_index":4351,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["heterogen",{"_index":1421,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["heurist",{"_index":1443,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["hey",{"_index":4340,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["hi",{"_index":2228,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hidden",{"_index":2650,"title":{"90-8":{}},"name":{},"text":{"56":{},"90":{}},"component":{},"keyword":{}}],["hide",{"_index":1498,"title":{},"name":{},"text":{"13":{},"59":{},"90":{},"104":{}},"component":{},"keyword":{}}],["high",{"_index":777,"title":{"24":{},"29":{},"11-2":{},"12-29":{},"12-33":{},"17-4":{},"17-8":{}},"name":{},"text":{"8":{},"11":{},"12":{},"13":{},"17":{},"19":{},"24":{},"26":{},"29":{},"31":{},"37":{},"38":{},"41":{},"43":{},"46":{},"47":{},"64":{},"67":{},"85":{},"86":{},"90":{},"91":{},"93":{},"94":{},"96":{},"99":{},"101":{},"104":{},"108":{}},"component":{},"keyword":{}}],["higher",{"_index":996,"title":{},"name":{},"text":{"11":{},"12":{},"13":{},"20":{},"37":{},"46":{},"55":{},"64":{},"86":{},"90":{},"92":{},"93":{},"96":{},"101":{},"113":{}},"component":{},"keyword":{}}],["highest",{"_index":196,"title":{},"name":{},"text":{"2":{},"99":{}},"component":{},"keyword":{}}],["highli",{"_index":204,"title":{},"name":{},"text":{"2":{},"7":{},"56":{},"85":{}},"component":{},"keyword":{}}],["highlight",{"_index":1169,"title":{},"name":{},"text":{"12":{},"20":{},"41":{},"86":{},"95":{},"96":{},"98":{},"100":{},"107":{},"108":{},"110":{}},"component":{},"keyword":{}}],["hint",{"_index":2421,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["histor",{"_index":2926,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["histori",{"_index":1990,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["hit",{"_index":774,"title":{"82-3":{}},"name":{},"text":{"8":{},"12":{},"19":{},"81":{},"82":{},"83":{},"88":{},"93":{},"101":{}},"component":{},"keyword":{}}],["hitch",{"_index":1504,"title":{},"name":{},"text":{"13":{},"66":{}},"component":{},"keyword":{}}],["hitpayload",{"_index":3955,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["hlsl",{"_index":1104,"title":{"26":{},"31":{},"12-35":{},"12-48":{},"17-10":{},"17-23":{},"26-1":{},"26-3":{},"31-1":{},"31-3":{},"56-17":{}},"name":{},"text":{"12":{},"17":{},"26":{},"31":{},"84":{}},"component":{},"keyword":{}}],["hlslshaders::load_hlsl_shad",{"_index":1581,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["hold",{"_index":888,"title":{"88-15":{}},"name":{},"text":{"9":{},"43":{},"52":{},"56":{},"62":{},"85":{},"88":{},"95":{}},"component":{},"keyword":{}}],["holder{lock.lock",{"_index":4372,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["hole",{"_index":2962,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["hook",{"_index":88,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["horizont",{"_index":2493,"title":{},"name":{},"text":{"54":{},"86":{},"101":{},"106":{}},"component":{},"keyword":{}}],["host",{"_index":1331,"title":{"88-6":{}},"name":{},"text":{"12":{},"19":{},"38":{},"47":{},"49":{},"52":{},"75":{},"82":{},"88":{},"111":{}},"component":{},"keyword":{}}],["hostqueryreset",{"_index":1818,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["hpp",{"_index":958,"title":{"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"97":{},"98":{},"11-4":{},"12-7":{},"12-31":{},"12-32":{},"12-33":{},"12-34":{},"12-35":{},"12-36":{},"12-37":{},"12-38":{},"12-39":{},"12-40":{},"12-41":{},"12-42":{},"12-64":{},"17-6":{},"17-7":{},"17-8":{},"17-9":{},"17-10":{},"17-11":{},"17-12":{},"17-13":{},"17-14":{},"17-15":{},"17-16":{},"17-17":{},"19-12":{},"20-6":{}},"name":{},"text":{"11":{},"31":{},"68":{},"97":{}},"component":{},"keyword":{}}],["hpp_api_vulkan_sample.cpp",{"_index":987,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["hpp_api_vulkan_sample.h",{"_index":986,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["hpp_pipeline_cach",{"_index":4943,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["hpp_swapchain_imag",{"_index":4969,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["hpp_vulkan_sample.cpp",{"_index":985,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["hpp_vulkan_sample.h",{"_index":984,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["http://www.apache.org/licenses/licens",{"_index":252,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["https://github.com/arm",{"_index":613,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://github.com/khronosgroup/vulkan",{"_index":415,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{},"keyword":{}}],["https://gpuopen.com/wp",{"_index":4892,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["https://registry.khronos.org/vulkan/specs/1.3",{"_index":2298,"title":{},"name":{},"text":{"51":{},"57":{},"58":{}},"component":{},"keyword":{}}],["https://vulkan",{"_index":4804,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["https://www.khronos.org/blog/streamlin",{"_index":1290,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["https://www.khronos.org/developers/cod",{"_index":12,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["https://www.khronos.org/opengl/wiki/interface_block(glsl)[here]._",{"_index":4801,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["https://www.khronos.org/opengl/wiki/type_qualifier(glsl)#shader_stage_inputs_and_outputs[here]._",{"_index":4790,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["https://www.khronos.org/registry/vulkan/specs/1.3",{"_index":5571,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["https://zeux.io/2020/02/27/writ",{"_index":4889,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["huawei",{"_index":4635,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["huge",{"_index":2642,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["human",{"_index":1543,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["hung",{"_index":4263,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["hungri",{"_index":5207,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["hurt",{"_index":2778,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["hwcpipe",{"_index":474,"title":{},"name":{},"text":{"4":{},"7":{},"94":{},"103":{},"108":{}},"component":{},"keyword":{}}],["i.",{"_index":170,"title":{},"name":{},"text":{"2":{},"40":{},"82":{},"88":{},"90":{},"92":{},"93":{},"94":{},"98":{},"101":{},"102":{},"109":{},"110":{}},"component":{},"keyword":{}}],["id",{"_index":3861,"title":{},"name":{},"text":{"82":{},"83":{}},"component":{},"keyword":{}}],["idea",{"_index":2171,"title":{},"name":{},"text":{"49":{},"59":{},"86":{}},"component":{},"keyword":{}}],["ideal",{"_index":151,"title":{},"name":{},"text":{"2":{},"12":{},"20":{},"71":{},"88":{},"93":{},"103":{}},"component":{},"keyword":{}}],["ident",{"_index":1480,"title":{},"name":{},"text":{"13":{},"64":{},"85":{},"92":{},"109":{}},"component":{},"keyword":{}}],["identif",{"_index":240,"title":{},"name":{},"text":{"2":{},"54":{}},"component":{},"keyword":{}}],["identifi",{"_index":229,"title":{},"name":{},"text":{"2":{},"15":{},"74":{},"78":{},"83":{},"95":{}},"component":{},"keyword":{}}],["idl",{"_index":1089,"title":{"12-19":{},"20-18":{},"113-3":{}},"name":{},"text":{"13":{},"94":{},"96":{},"98":{},"110":{},"113":{}},"component":{},"keyword":{}}],["ifdef",{"_index":3609,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["ignor",{"_index":3474,"title":{},"name":{},"text":{"71":{},"88":{},"90":{},"91":{},"109":{}},"component":{},"keyword":{}}],["ihv",{"_index":2724,"title":{},"name":{},"text":{"56":{},"93":{}},"component":{},"keyword":{}}],["illus",{"_index":1413,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["illustr",{"_index":1190,"title":{},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"60":{},"61":{},"68":{},"77":{},"89":{},"94":{},"97":{},"98":{},"101":{},"110":{}},"component":{},"keyword":{}}],["imag",{"_index":159,"title":{"34":{},"42":{},"98":{},"99":{},"110":{},"11-11":{},"12-7":{},"12-8":{},"12-18":{},"12-38":{},"12-44":{},"17-13":{},"17-19":{},"20-6":{},"20-7":{},"20-17":{},"34-3":{},"37-5":{},"37-9":{},"37-10":{},"42-3":{},"46-5":{},"46-9":{},"46-10":{},"64-1":{},"74-6":{},"86-1":{},"98-2":{},"99-7":{},"99-8":{},"99-9":{},"106-5":{},"110-2":{}},"name":{},"text":{"2":{},"4":{},"8":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"34":{},"37":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"51":{},"55":{},"56":{},"60":{},"64":{},"74":{},"75":{},"76":{},"81":{},"82":{},"85":{},"86":{},"88":{},"92":{},"93":{},"95":{},"96":{},"98":{},"99":{},"100":{},"101":{},"104":{},"106":{},"108":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["image/sampl",{"_index":1677,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["image::./images/prerotate_streamline.png[streamlin",{"_index":5448,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["image_binding_descriptor.buff",{"_index":2585,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["image_binding_descriptor.layout",{"_index":2569,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["image_binding_descriptor.offset",{"_index":2579,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["image_binding_descriptor.s",{"_index":2570,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["image_blit",{"_index":1743,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["image_blit.dstoffsets[1].i",{"_index":2048,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.dstoffsets[1].x",{"_index":2046,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.dstoffsets[1].z",{"_index":2049,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.dstsubresource.aspectmask",{"_index":2043,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.dstsubresource.layercount",{"_index":2044,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.dstsubresource.miplevel",{"_index":2045,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.srcoffsets[1].i",{"_index":2039,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_blit.srcoffsets[1].z",{"_index":2041,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["image_create_info",{"_index":1711,"title":{},"name":{},"text":{"37":{},"46":{},"111":{}},"component":{},"keyword":{}}],["image_create_info.arraylay",{"_index":5543,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_create_info.ext",{"_index":5549,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_create_info.format",{"_index":2012,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["image_create_info.imagetyp",{"_index":2010,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["image_create_info.initiallayout",{"_index":5548,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_create_info.miplevel",{"_index":2013,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["image_create_info.sampl",{"_index":5544,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_create_info.sharingmod",{"_index":5546,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_create_info.til",{"_index":5545,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_create_info.usag",{"_index":5550,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["image_descriptor",{"_index":1049,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["image_descriptor_buf_ptr",{"_index":2613,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["image_descriptor_buff",{"_index":2618,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["image_format_info",{"_index":5019,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_info.format",{"_index":5007,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_info.pnext",{"_index":5013,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_info.til",{"_index":5009,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_info.typ",{"_index":5008,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_info.usag",{"_index":5010,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_info{vk_structure_type_physical_device_image_format_info_2",{"_index":5006,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_properti",{"_index":5020,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_properties.pnext",{"_index":5016,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_format_properties{vk_structure_type_image_format_properties_2",{"_index":5015,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_index",{"_index":3865,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["image_info",{"_index":1633,"title":{},"name":{},"text":{"34":{},"42":{},"99":{}},"component":{},"keyword":{}}],["image_info(texture.sampl",{"_index":1669,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["image_info.format",{"_index":5031,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_info.imagelayout",{"_index":1922,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_info.imagetyp",{"_index":5032,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_info.imageview",{"_index":1921,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_info.pnext",{"_index":5035,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_info.sampl",{"_index":1952,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_info.til",{"_index":5033,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_info.usag",{"_index":5034,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_info{vk_structure_type_image_create_info",{"_index":5030,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_memory_barri",{"_index":1722,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["image_subresourc",{"_index":5053,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_subresource.imagesubresource.arraylay",{"_index":5051,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_subresource.imagesubresource.aspectmask",{"_index":5049,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_subresource.imagesubresource.miplevel",{"_index":5050,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_subresource{vk_structure_type_image_subresource_2_khr",{"_index":5048,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["image_view_create_info",{"_index":1752,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["image_write_descriptor_set",{"_index":1643,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["image_write_descriptor_set(base_descriptor_set",{"_index":1638,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["image_write_descriptor_set(descriptor_set",{"_index":1672,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["image_write_descriptor_set.descriptorcount",{"_index":1929,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_write_descriptor_set.descriptortyp",{"_index":1930,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_write_descriptor_set.dstbind",{"_index":1928,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_write_descriptor_set.dstset",{"_index":1927,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_write_descriptor_set.pimageinfo",{"_index":1931,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["image_write_descriptor_set.styp",{"_index":1925,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["imageatomicadd(img[nonuniformext(index",{"_index":2742,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["imagecompressioncontrol",{"_index":4995,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["imagecompressioncontrolswapchain",{"_index":5057,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["imagecompressionfixedrateflag",{"_index":5022,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["imagecompressionflag",{"_index":5055,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["imagemagick",{"_index":934,"title":{},"name":{},"text":{"10":{},"99":{}},"component":{},"keyword":{}}],["image’",{"_index":1626,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["imagin",{"_index":2499,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["img",{"_index":2733,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["imgui",{"_index":469,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{},"keyword":{}}],["imgui::checkbox(\"en",{"_index":1015,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["immedi",{"_index":470,"title":{"93-4":{}},"name":{},"text":{"4":{},"13":{},"38":{},"47":{},"93":{},"97":{},"98":{},"104":{},"105":{},"110":{}},"component":{},"keyword":{}}],["immens",{"_index":4729,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["immutablesampl",{"_index":2798,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["impact",{"_index":865,"title":{"109-7":{}},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"83":{},"85":{},"90":{},"91":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["implement",{"_index":390,"title":{"64-3":{},"88-14":{},"91-5":{}},"name":{},"text":{"4":{},"5":{},"9":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"24":{},"37":{},"38":{},"40":{},"41":{},"43":{},"46":{},"47":{},"49":{},"54":{},"55":{},"56":{},"59":{},"61":{},"62":{},"66":{},"67":{},"69":{},"74":{},"78":{},"82":{},"85":{},"88":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"99":{},"100":{},"103":{},"104":{},"105":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["impli",{"_index":265,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["implic",{"_index":1175,"title":{},"name":{},"text":{"12":{},"20":{},"95":{},"97":{},"98":{},"100":{},"104":{},"105":{},"109":{},"110":{}},"component":{},"keyword":{}}],["implicit",{"_index":1550,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["implicitli",{"_index":3491,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["import",{"_index":921,"title":{"38-2":{},"47-2":{},"75-6":{}},"name":{},"text":{"9":{},"13":{},"38":{},"47":{},"52":{},"54":{},"56":{},"59":{},"74":{},"75":{},"88":{},"92":{},"93":{},"95":{},"101":{},"108":{}},"component":{},"keyword":{}}],["import_info",{"_index":3782,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["import_info.buff",{"_index":3786,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["import_info.pnext",{"_index":3785,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["import_info.styp",{"_index":3783,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["import_properti",{"_index":3805,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["import_properties[3",{"_index":3799,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["importantli",{"_index":70,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["imposs",{"_index":2270,"title":{},"name":{},"text":{"49":{},"54":{},"56":{}},"component":{},"keyword":{}}],["impract",{"_index":2271,"title":{},"name":{},"text":{"49":{},"56":{},"85":{}},"component":{},"keyword":{}}],["improv",{"_index":1188,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"38":{},"47":{},"56":{},"60":{},"85":{},"90":{},"91":{},"94":{},"96":{},"99":{},"100":{},"101":{},"103":{},"104":{},"107":{}},"component":{},"keyword":{}}],["imr",{"_index":4697,"title":{"93-4":{}},"name":{},"text":{},"component":{},"keyword":{}}],["in",{"_index":3193,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["in_norm",{"_index":4615,"title":{},"name":{},"text":{"91":{},"108":{}},"component":{},"keyword":{}}],["in_uv",{"_index":2801,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["inaccur",{"_index":1444,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{},"keyword":{}}],["inc",{"_index":503,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["includ",{"_index":77,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"11":{},"12":{},"13":{},"15":{},"19":{},"20":{},"43":{},"48":{},"54":{},"56":{},"57":{},"59":{},"61":{},"64":{},"67":{},"74":{},"77":{},"80":{},"81":{},"82":{},"85":{},"90":{},"92":{},"95":{},"97":{},"100":{},"104":{},"105":{},"107":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["include/compon",{"_index":536,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["incolor",{"_index":3212,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["incolor[0].rgb",{"_index":3216,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["incolor[1].rgb",{"_index":3218,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["incolor[2].rgb",{"_index":3220,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["incompat",{"_index":3251,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["incorpor",{"_index":1324,"title":{},"name":{},"text":{"12":{},"19":{},"65":{},"70":{},"71":{},"76":{},"82":{}},"component":{},"keyword":{}}],["incorrect",{"_index":4694,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["increas",{"_index":796,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"61":{},"66":{},"84":{},"88":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"100":{},"101":{},"103":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["increasingli",{"_index":4201,"title":{},"name":{},"text":{"85":{},"93":{}},"component":{},"keyword":{}}],["increment",{"_index":864,"title":{},"name":{},"text":{"8":{},"9":{},"38":{},"47":{},"88":{},"95":{}},"component":{},"keyword":{}}],["incur",{"_index":3855,"title":{},"name":{},"text":{"82":{},"94":{}},"component":{},"keyword":{}}],["inde",{"_index":5203,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["independ",{"_index":449,"title":{"33":{},"40":{},"41":{},"12-51":{},"12-52":{},"17-26":{},"17-27":{}},"name":{},"text":{"4":{},"12":{},"17":{},"38":{},"40":{},"41":{},"47":{},"66":{},"74":{},"93":{},"103":{},"104":{}},"component":{},"keyword":{}}],["index",{"_index":873,"title":{"56":{},"12-71":{},"19-19":{},"56-6":{},"56-7":{},"56-8":{},"56-9":{},"56-10":{},"56-11":{},"56-13":{},"56-20":{}},"name":{},"text":{"8":{},"12":{},"19":{},"40":{},"43":{},"52":{},"56":{},"70":{},"82":{},"83":{},"88":{},"95":{},"96":{},"97":{},"102":{},"105":{},"114":{}},"component":{},"keyword":{}}],["index_buff",{"_index":2359,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["index_count",{"_index":1951,"title":{},"name":{},"text":{"42":{},"67":{}},"component":{},"keyword":{}}],["index_data_device_address",{"_index":3882,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["index_typ",{"_index":2376,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["indexcount",{"_index":4871,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["indic",{"_index":870,"title":{},"name":{},"text":{"8":{},"43":{},"48":{},"58":{},"61":{},"62":{},"67":{},"71":{},"77":{},"82":{},"83":{},"94":{},"99":{},"102":{},"104":{},"108":{},"113":{}},"component":{},"keyword":{}}],["indices(objresource.indic",{"_index":3933,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["indices[126",{"_index":3355,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["indices_index",{"_index":3864,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["indirect",{"_index":1096,"title":{"102":{},"12-24":{},"20-23":{}},"name":{},"text":{"13":{},"49":{},"56":{},"96":{},"102":{}},"component":{},"keyword":{}}],["indirect_call_buff",{"_index":5183,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["indirectli",{"_index":4758,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["indistinguish",{"_index":2637,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["individu",{"_index":515,"title":{"66-2":{},"94-6":{}},"name":{},"text":{"5":{},"7":{},"13":{},"49":{},"56":{},"57":{},"85":{},"88":{},"94":{},"96":{}},"component":{},"keyword":{}}],["ineffici",{"_index":1181,"title":{},"name":{},"text":{"12":{},"20":{},"96":{}},"component":{},"keyword":{}}],["ineleg",{"_index":4269,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["inevit",{"_index":4736,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["infact",{"_index":3540,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["infer",{"_index":1395,"title":{},"name":{},"text":{"13":{},"49":{}},"component":{},"keyword":{}}],["infin",{"_index":4355,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["infinit",{"_index":2907,"title":{},"name":{},"text":{"58":{},"83":{}},"component":{},"keyword":{}}],["info",{"_index":1631,"title":{},"name":{},"text":{"34":{},"37":{},"42":{},"46":{},"54":{},"56":{},"60":{},"65":{},"66":{},"75":{},"83":{},"84":{},"85":{},"106":{}},"component":{},"keyword":{}}],["info.memori",{"_index":3776,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["info.pnext",{"_index":3775,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["info.styp",{"_index":3773,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["info_log",{"_index":4076,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["info_log.c_str",{"_index":4078,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["inform",{"_index":230,"title":{"4-4":{},"54-5":{},"64-4":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"9":{},"12":{},"19":{},"20":{},"37":{},"38":{},"46":{},"47":{},"54":{},"55":{},"56":{},"60":{},"62":{},"64":{},"71":{},"74":{},"82":{},"83":{},"84":{},"85":{},"90":{},"95":{},"96":{},"97":{},"99":{},"102":{},"105":{},"106":{},"108":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["ingest",{"_index":1054,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["inherit",{"_index":2929,"title":{},"name":{},"text":{"59":{},"94":{}},"component":{},"keyword":{}}],["initi",{"_index":317,"title":{"3":{}},"name":{},"text":{"37":{},"46":{},"54":{},"56":{},"70":{},"83":{},"88":{},"94":{},"96":{},"102":{},"106":{}},"component":{},"keyword":{}}],["initialis",{"_index":4929,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["initialize_device_memory_properti",{"_index":3428,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["initiallayout",{"_index":1195,"title":{},"name":{},"text":{"12":{},"20":{},"100":{}},"component":{},"keyword":{}}],["inject",{"_index":1462,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["inlin",{"_index":4813,"title":{},"name":{},"text":{"95":{},"101":{}},"component":{},"keyword":{}}],["inposit",{"_index":3968,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["input",{"_index":464,"title":{"89":{},"12-78":{},"19-26":{}},"name":{},"text":{"4":{},"12":{},"19":{},"20":{},"26":{},"31":{},"62":{},"65":{},"66":{},"71":{},"84":{},"85":{},"89":{},"91":{},"93":{},"95":{},"97":{},"98":{},"105":{},"106":{},"108":{},"110":{},"111":{}},"component":{},"keyword":{}}],["input.posit",{"_index":3973,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["input.uv",{"_index":1575,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["input/output",{"_index":4572,"title":{},"name":{},"text":{"91":{},"95":{}},"component":{},"keyword":{}}],["input_assembly_st",{"_index":3087,"title":{},"name":{},"text":{"61":{},"66":{},"77":{}},"component":{},"keyword":{}}],["input_assembly_state.primitiverestarten",{"_index":3117,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["input_assembly_state.topolog",{"_index":3116,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["inputoutput",{"_index":1090,"title":{"91":{},"12-20":{},"20-19":{},"91-4":{}},"name":{},"text":{},"component":{},"keyword":{}}],["insert",{"_index":1437,"title":{"54-6":{}},"name":{},"text":{"13":{},"37":{},"38":{},"46":{},"47":{},"54":{}},"component":{},"keyword":{}}],["insid",{"_index":535,"title":{},"name":{},"text":{"5":{},"7":{},"37":{},"38":{},"46":{},"47":{},"49":{},"54":{},"55":{},"70":{},"74":{},"78":{},"95":{},"101":{},"106":{},"111":{}},"component":{},"keyword":{}}],["insight",{"_index":2636,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["inspect",{"_index":1991,"title":{},"name":{},"text":{"43":{},"56":{},"99":{},"114":{}},"component":{},"keyword":{}}],["inspir",{"_index":532,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["instal",{"_index":87,"title":{"7-32":{},"7-34":{}},"name":{},"text":{"2":{},"7":{},"10":{},"85":{}},"component":{},"keyword":{}}],["install_vulkan.pi",{"_index":667,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["instanc",{"_index":271,"title":{"32":{},"39":{},"12-36":{},"12-43":{},"17-11":{},"17-18":{}},"name":{},"text":{"2":{},"10":{},"11":{},"12":{},"17":{},"19":{},"21":{},"32":{},"39":{},"54":{},"56":{},"60":{},"61":{},"64":{},"69":{},"70":{},"74":{},"77":{},"78":{},"82":{},"83":{},"84":{},"85":{},"89":{},"95":{},"99":{},"102":{},"109":{},"114":{}},"component":{},"keyword":{}}],["instance.cpp",{"_index":2385,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{},"keyword":{}}],["instance_create_info",{"_index":2411,"title":{},"name":{},"text":{"54":{},"114":{}},"component":{},"keyword":{}}],["instance_create_info.flag",{"_index":5610,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["instance_create_info.pcreateinfo",{"_index":5609,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["instance_create_info.pnext",{"_index":2413,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["instance_create_info.pprofil",{"_index":5608,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["instance_create_info{vk_structure_type_instance_create_info",{"_index":3985,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["instance_extension_count",{"_index":2386,"title":{},"name":{},"text":{"54":{},"78":{}},"component":{},"keyword":{}}],["instance_index",{"_index":4876,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["instance_info.pnext",{"_index":2842,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["instancecount",{"_index":4872,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["instanti",{"_index":3938,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["instead",{"_index":531,"title":{},"name":{},"text":{"5":{},"7":{},"11":{},"12":{},"15":{},"17":{},"19":{},"26":{},"31":{},"37":{},"38":{},"46":{},"47":{},"49":{},"52":{},"53":{},"55":{},"56":{},"60":{},"61":{},"66":{},"71":{},"74":{},"77":{},"79":{},"82":{},"83":{},"85":{},"88":{},"89":{},"93":{},"94":{},"95":{},"96":{},"99":{},"103":{},"104":{},"107":{},"109":{},"114":{}},"component":{},"keyword":{}}],["instruct",{"_index":418,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"56":{},"90":{}},"component":{},"keyword":{}}],["instrument",{"_index":2812,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["int",{"_index":1834,"title":{},"name":{},"text":{"38":{},"47":{},"49":{},"61":{},"70":{},"71":{},"74":{},"83":{},"85":{}},"component":{},"keyword":{}}],["int16_t",{"_index":4513,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["int32_max",{"_index":4357,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["int32_t",{"_index":1732,"title":{},"name":{},"text":{"37":{},"46":{},"95":{},"109":{}},"component":{},"keyword":{}}],["int32_t(1",{"_index":1734,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["int32_t(texture.extent.height",{"_index":1733,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["int32_t(texture.extent.width",{"_index":1736,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["int32_t(texture.height",{"_index":2040,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["int32_t(texture.width",{"_index":2047,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["int8",{"_index":4459,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["int_point",{"_index":2215,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["int_pointer.i",{"_index":2229,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["integ",{"_index":2125,"title":{"49-9":{},"90-4":{}},"name":{},"text":{"49":{},"64":{},"69":{},"90":{}},"component":{},"keyword":{}}],["integr",{"_index":611,"title":{"88-6":{}},"name":{},"text":{"7":{},"88":{},"95":{},"100":{},"101":{}},"component":{},"keyword":{}}],["intend",{"_index":2816,"title":{},"name":{},"text":{"56":{},"90":{}},"component":{},"keyword":{}}],["intens",{"_index":4901,"title":{},"name":{},"text":{"96":{},"104":{}},"component":{},"keyword":{}}],["intent",{"_index":2688,"title":{},"name":{},"text":{"56":{},"71":{},"90":{},"93":{}},"component":{},"keyword":{}}],["interact",{"_index":7,"title":{"56-15":{}},"name":{},"text":{"1":{},"12":{},"20":{},"48":{},"93":{},"95":{}},"component":{},"keyword":{}}],["interchang",{"_index":5461,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["interest",{"_index":1678,"title":{"37-4":{},"46-4":{}},"name":{},"text":{"38":{},"47":{},"49":{},"74":{},"84":{},"96":{}},"component":{},"keyword":{}}],["interfac",{"_index":473,"title":{"11-9":{},"86-6":{},"95-8":{}},"name":{},"text":{"4":{},"5":{},"11":{},"13":{},"15":{},"34":{},"42":{},"55":{},"66":{},"85":{},"91":{},"95":{},"104":{}},"component":{},"keyword":{}}],["interlockedadd(img[nonuniformresourceindex(index)][int2(0",{"_index":2771,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["intermedi",{"_index":783,"title":{},"name":{},"text":{"8":{},"13":{},"26":{},"31":{},"85":{},"108":{}},"component":{},"keyword":{}}],["intern",{"_index":1224,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"82":{},"94":{},"97":{},"104":{},"105":{}},"component":{},"keyword":{}}],["interoper",{"_index":1122,"title":{"74":{},"75":{},"76":{},"12-65":{},"12-66":{},"12-67":{},"19-13":{},"19-14":{},"19-15":{}},"name":{},"text":{"12":{},"19":{},"73":{},"74":{},"75":{},"85":{}},"component":{},"keyword":{}}],["interpol",{"_index":3195,"title":{},"name":{},"text":{"62":{},"82":{}},"component":{},"keyword":{}}],["interpret",{"_index":1762,"title":{"38-8":{},"47-8":{}},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["interrupt",{"_index":4712,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["intersect",{"_index":1886,"title":{},"name":{},"text":{"40":{},"41":{},"82":{}},"component":{},"keyword":{}}],["intertwin",{"_index":1184,"title":{},"name":{},"text":{"12":{},"20":{},"96":{}},"component":{},"keyword":{}}],["intervent",{"_index":2305,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["intra",{"_index":1484,"title":{},"name":{},"text":{"13":{},"104":{}},"component":{},"keyword":{}}],["introduc",{"_index":179,"title":{},"name":{},"text":{"2":{},"12":{},"19":{},"20":{},"38":{},"47":{},"48":{},"49":{},"52":{},"54":{},"55":{},"56":{},"64":{},"70":{},"71":{},"87":{},"88":{},"93":{},"95":{},"97":{},"102":{},"104":{},"105":{},"108":{},"109":{}},"component":{},"keyword":{}}],["introduct",{"_index":371,"title":{"4-1":{},"12-1":{},"38-1":{},"47-1":{},"50-2":{},"65-2":{},"95-4":{},"95-12":{},"95-15":{},"95-18":{},"95-22":{},"95-25":{},"95-28":{}},"name":{},"text":{"12":{},"52":{},"71":{},"95":{}},"component":{},"keyword":{}}],["intuit",{"_index":4598,"title":{},"name":{},"text":{"91":{},"93":{}},"component":{},"keyword":{}}],["inuv",{"_index":1666,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["inv_resolut",{"_index":5317,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["inv_view_proj",{"_index":5315,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["invalid",{"_index":1435,"title":{},"name":{},"text":{"13":{},"92":{},"95":{},"100":{},"106":{}},"component":{},"keyword":{}}],["invalidrenderarea",{"_index":2444,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["invalu",{"_index":4199,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["inverse(project",{"_index":5316,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["invoc",{"_index":1340,"title":{"56-14":{}},"name":{},"text":{"12":{},"19":{},"56":{},"63":{},"71":{},"84":{},"94":{},"95":{},"102":{}},"component":{},"keyword":{}}],["invok",{"_index":2414,"title":{},"name":{},"text":{"54":{},"91":{}},"component":{},"keyword":{}}],["involv",{"_index":1963,"title":{},"name":{},"text":{"43":{},"74":{},"84":{},"90":{},"94":{}},"component":{},"keyword":{}}],["io",{"_index":568,"title":{"7-24":{}},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ioan",{"_index":331,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["ip",{"_index":5081,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["iphoneo",{"_index":693,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ir",{"_index":2182,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["irregular",{"_index":5110,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["isn’t",{"_index":941,"title":{},"name":{},"text":{"10":{},"13":{},"74":{},"88":{},"95":{}},"component":{},"keyword":{}}],["isol",{"_index":4476,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["isshadow",{"_index":3944,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["issu",{"_index":2,"title":{},"name":{},"text":{"1":{},"2":{},"8":{},"12":{},"19":{},"20":{},"37":{},"38":{},"41":{},"43":{},"46":{},"47":{},"56":{},"65":{},"88":{},"93":{},"95":{},"96":{},"104":{},"113":{}},"component":{},"keyword":{}}],["item",{"_index":3351,"title":{},"name":{},"text":{"67":{},"78":{}},"component":{},"keyword":{}}],["iter",{"_index":2343,"title":{},"name":{},"text":{"52":{},"74":{},"85":{},"88":{},"102":{}},"component":{},"keyword":{}}],["itself",{"_index":980,"title":{},"name":{},"text":{"11":{},"43":{},"56":{},"85":{},"91":{},"92":{},"95":{},"96":{}},"component":{},"keyword":{}}],["it’",{"_index":695,"title":{},"name":{},"text":{"7":{},"37":{},"38":{},"46":{},"47":{},"48":{},"52":{},"54":{},"56":{},"59":{},"66":{},"74":{},"75":{},"82":{},"84":{},"85":{},"88":{},"90":{},"93":{},"94":{},"95":{},"101":{},"111":{}},"component":{},"keyword":{}}],["it’ll",{"_index":3685,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["ivec2(0",{"_index":2743,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["j",{"_index":691,"title":{},"name":{},"text":{"7":{},"55":{},"102":{}},"component":{},"keyword":{}}],["j$(nproc",{"_index":657,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["j4",{"_index":670,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jaggi",{"_index":1209,"title":{},"name":{},"text":{"12":{},"20":{},"101":{}},"component":{},"keyword":{}}],["jank",{"_index":4272,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["java_home=/java",{"_index":712,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jdk",{"_index":711,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jeff",{"_index":334,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["job",{"_index":1960,"title":{},"name":{},"text":{"43":{},"108":{},"113":{}},"component":{},"keyword":{}}],["jose",{"_index":336,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["journey",{"_index":1475,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["json",{"_index":495,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["juggl",{"_index":4261,"title":{},"name":{},"text":{"88":{},"93":{}},"component":{},"keyword":{}}],["jump",{"_index":4354,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["k",{"_index":3526,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["k/",{"_index":4849,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["kapoulkin",{"_index":4778,"title":{},"name":{},"text":{"94":{},"95":{},"96":{}},"component":{},"keyword":{}}],["kb",{"_index":4816,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["keep",{"_index":18,"title":{},"name":{},"text":{"1":{},"8":{},"41":{},"43":{},"56":{},"85":{},"86":{},"88":{},"93":{},"94":{},"95":{},"96":{},"98":{},"100":{},"101":{},"104":{},"108":{},"110":{}},"component":{},"keyword":{}}],["kept",{"_index":1910,"title":{},"name":{},"text":{"41":{},"43":{},"61":{},"91":{},"94":{},"108":{}},"component":{},"keyword":{}}],["kernel",{"_index":3548,"title":{},"name":{},"text":{"74":{},"75":{},"88":{},"90":{}},"component":{},"keyword":{}}],["key",{"_index":2199,"title":{},"name":{},"text":{"49":{},"56":{},"86":{},"88":{},"91":{},"96":{}},"component":{},"keyword":{}}],["keyboard",{"_index":3267,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["keyword",{"_index":2964,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["khr",{"_index":3223,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["khrono",{"_index":5,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"13":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["khronosgroup/vulkan",{"_index":278,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["kick",{"_index":4326,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["kill",{"_index":5102,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["kind",{"_index":263,"title":{},"name":{},"text":{"2":{},"49":{},"54":{},"56":{},"59":{},"85":{},"90":{},"93":{}},"component":{},"keyword":{}}],["kinda",{"_index":4362,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["know",{"_index":1769,"title":{},"name":{},"text":{"38":{},"43":{},"47":{},"49":{},"55":{},"56":{},"83":{},"85":{},"88":{},"91":{},"95":{},"106":{},"107":{},"108":{}},"component":{},"keyword":{}}],["knowledg",{"_index":5297,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["known",{"_index":1401,"title":{},"name":{},"text":{"13":{},"38":{},"43":{},"47":{},"56":{},"74":{},"88":{},"95":{},"97":{},"100":{},"101":{},"105":{},"107":{},"108":{}},"component":{},"keyword":{}}],["kramer",{"_index":343,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["kri",{"_index":340,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["ktx",{"_index":477,"title":{"111-4":{},"111-6":{}},"name":{},"text":{"4":{},"11":{},"111":{}},"component":{},"keyword":{}}],["ktx1.0",{"_index":5510,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx2",{"_index":5460,"title":{"111-2":{}},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_",{"_index":5500,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basis_sgd.h",{"_index":5475,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basis_transcode.cpp",{"_index":5476,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu.h",{"_index":5486,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_containers.h",{"_index":5477,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_containers_impl.h",{"_index":5478,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_file_headers.h",{"_index":5479,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_global_selector_cb.h",{"_index":5480,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_global_selector_palette.h",{"_index":5481,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_transcoder.cpp",{"_index":5484,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_transcoder.h",{"_index":5485,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_transcoder_internal.h",{"_index":5482,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/transcoder/basisu_transcoder_uastc.h",{"_index":5483,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/basisu/zstd/zstd.c",{"_index":5487,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/texture2.c",{"_index":5488,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_dir}/lib/texture2.h",{"_index":5489,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_error_cod",{"_index":5515,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_image_data",{"_index":5536,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_success",{"_index":5518,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_textur",{"_index":5513,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_texture_create_load_image_data_bit",{"_index":5517,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktx_ttf_bc7_rgba",{"_index":5526,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtextur",{"_index":5512,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtexture2",{"_index":5511,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtexture2_needstranscod",{"_index":5521,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtexture2_needstranscoding(ktx_textur",{"_index":5523,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtexture2_transcodebasi",{"_index":5522,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtexture2_transcodebasis(ktx_textur",{"_index":5524,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ktxtexture_createfromnamedfile(file_name.c_str",{"_index":5516,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["l",{"_index":3947,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["l2_ext_write_beat",{"_index":4653,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["label",{"_index":2380,"title":{"54-6":{}},"name":{},"text":{"54":{},"84":{},"92":{}},"component":{},"keyword":{}}],["lack",{"_index":2123,"title":{"49-4":{}},"name":{},"text":{"56":{},"59":{},"88":{}},"component":{},"keyword":{}}],["land",{"_index":4369,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["landscap",{"_index":940,"title":{},"name":{},"text":{"10":{},"12":{},"20":{},"109":{}},"component":{},"keyword":{}}],["languag",{"_index":16,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"11":{},"12":{},"17":{},"26":{},"31":{},"49":{},"84":{}},"component":{},"keyword":{}}],["larg",{"_index":408,"title":{},"name":{},"text":{"4":{},"49":{},"56":{},"82":{},"88":{},"90":{},"91":{},"94":{},"95":{},"96":{},"98":{},"102":{},"103":{},"110":{}},"component":{},"keyword":{}}],["larger",{"_index":2943,"title":{},"name":{},"text":{"59":{},"99":{},"101":{}},"component":{},"keyword":{}}],["last",{"_index":1896,"title":{},"name":{},"text":{"40":{},"59":{},"74":{},"84":{},"85":{},"86":{},"100":{}},"component":{},"keyword":{}}],["lastest",{"_index":754,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["latch",{"_index":1831,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["late",{"_index":4710,"title":{},"name":{},"text":{"93":{},"104":{},"108":{}},"component":{},"keyword":{}}],["latenc",{"_index":2303,"title":{},"name":{},"text":{"52":{},"88":{},"90":{},"93":{},"98":{},"104":{},"110":{}},"component":{},"keyword":{}}],["later",{"_index":857,"title":{},"name":{},"text":{"8":{},"11":{},"12":{},"20":{},"38":{},"43":{},"47":{},"56":{},"74":{},"91":{},"93":{},"94":{},"97":{},"100":{},"103":{},"105":{},"106":{},"111":{}},"component":{},"keyword":{}}],["latest",{"_index":1385,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["launch",{"_index":3487,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["law",{"_index":254,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["layer",{"_index":290,"title":{"85-10":{}},"name":{},"text":{"2":{},"7":{},"13":{},"40":{},"41":{},"54":{},"56":{},"84":{},"85":{},"91":{},"94":{},"96":{}},"component":{},"keyword":{}}],["layer(",{"_index":3976,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["layer_instance_extension_count",{"_index":2821,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["layer’",{"_index":4192,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["layout",{"_index":1081,"title":{"100":{},"12-9":{},"20-8":{},"37-9":{},"46-9":{}},"name":{},"text":{"12":{},"13":{},"20":{},"34":{},"37":{},"42":{},"46":{},"52":{},"55":{},"62":{},"67":{},"82":{},"85":{},"91":{},"95":{},"96":{},"97":{},"100":{},"105":{},"108":{},"109":{}},"component":{},"keyword":{}}],["layout(buffer_refer",{"_index":2163,"title":{},"name":{},"text":{"49":{},"83":{}},"component":{},"keyword":{}}],["layout(loc",{"_index":3196,"title":{},"name":{},"text":{"62":{},"91":{},"95":{},"109":{}},"component":{},"keyword":{}}],["layout(local_size_x",{"_index":2727,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["layout(offset",{"_index":2805,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["layout(push_const",{"_index":2248,"title":{},"name":{},"text":{"49":{},"56":{},"95":{}},"component":{},"keyword":{}}],["layout(set",{"_index":2203,"title":{},"name":{},"text":{"49":{},"56":{},"83":{},"95":{},"109":{}},"component":{},"keyword":{}}],["layout(std430",{"_index":2165,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lazily_alloc",{"_index":5119,"title":{},"name":{},"text":{"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["lead",{"_index":3256,"title":{},"name":{},"text":{"64":{},"67":{},"90":{},"91":{},"108":{}},"component":{},"keyword":{}}],["lean",{"_index":4379,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["learn",{"_index":3743,"title":{},"name":{},"text":{"75":{},"88":{},"95":{}},"component":{},"keyword":{}}],["leav",{"_index":3952,"title":{},"name":{},"text":{"83":{},"90":{}},"component":{},"keyword":{}}],["left",{"_index":894,"title":{},"name":{},"text":{"9":{},"56":{},"59":{},"101":{},"108":{}},"component":{},"keyword":{}}],["legal",{"_index":1414,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["legitim",{"_index":4544,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["len",{"_index":4478,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["lend",{"_index":4200,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["less",{"_index":972,"title":{},"name":{},"text":{"11":{},"40":{},"59":{},"82":{},"85":{},"86":{},"90":{},"91":{},"96":{},"99":{},"100":{},"103":{},"106":{},"107":{},"113":{}},"component":{},"keyword":{}}],["let",{"_index":976,"title":{},"name":{},"text":{"11":{},"12":{},"20":{},"54":{},"56":{},"84":{},"85":{},"94":{},"95":{},"104":{},"106":{}},"component":{},"keyword":{}}],["let’",{"_index":2547,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["level",{"_index":198,"title":{"11-2":{},"13-1":{},"37-6":{},"37-7":{},"46-6":{},"46-7":{},"56-7":{},"83-2":{}},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"26":{},"31":{},"34":{},"37":{},"42":{},"44":{},"46":{},"48":{},"54":{},"60":{},"74":{},"78":{},"80":{},"81":{},"82":{},"83":{},"85":{},"86":{},"89":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"99":{},"100":{},"101":{},"103":{},"105":{},"109":{},"111":{}},"component":{},"keyword":{}}],["lever",{"_index":4916,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["lf",{"_index":410,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["libglu1",{"_index":650,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["libktx",{"_index":5471,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["librari",{"_index":123,"title":{"66":{},"12-76":{},"12-92":{},"19-24":{},"21-2":{},"66-3":{},"111-4":{}},"name":{},"text":{"2":{},"4":{},"12":{},"19":{},"21":{},"66":{},"95":{},"111":{},"114":{}},"component":{},"keyword":{}}],["libraries.data",{"_index":3338,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["library_info",{"_index":3274,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["library_info.flag",{"_index":3277,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["library_info.styp",{"_index":3275,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["licens",{"_index":32,"title":{"2-5":{},"4-10":{}},"name":{},"text":{"2":{},"4":{},"7":{},"14":{},"48":{}},"component":{},"keyword":{}}],["lie",{"_index":1391,"title":{},"name":{},"text":{"13":{},"101":{}},"component":{},"keyword":{}}],["lieu",{"_index":4626,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["life",{"_index":1329,"title":{},"name":{},"text":{"12":{},"14":{},"19":{},"88":{},"91":{},"100":{},"101":{},"109":{}},"component":{},"keyword":{}}],["lifecycl",{"_index":4776,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["lifetim",{"_index":1463,"title":{},"name":{},"text":{"13":{},"86":{}},"component":{},"keyword":{}}],["lift",{"_index":797,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["light",{"_index":3346,"title":{},"name":{},"text":{"66":{},"74":{},"82":{},"83":{},"93":{},"95":{},"103":{},"107":{},"108":{},"111":{}},"component":{},"keyword":{}}],["light_pt",{"_index":3888,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["lighter",{"_index":1425,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["liken",{"_index":4862,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["limit",{"_index":269,"title":{"8":{},"88-17":{}},"name":{},"text":{"2":{},"4":{},"8":{},"13":{},"26":{},"31":{},"38":{},"41":{},"47":{},"56":{},"71":{},"83":{},"84":{},"88":{},"95":{},"96":{},"98":{},"100":{},"102":{},"107":{},"108":{},"110":{}},"component":{},"keyword":{}}],["line",{"_index":243,"title":{"58":{},"12-88":{},"19-36":{}},"name":{},"text":{"2":{},"4":{},"7":{},"12":{},"14":{},"19":{},"58":{},"84":{},"95":{},"98":{},"110":{}},"component":{},"keyword":{}}],["linear",{"_index":1745,"title":{},"name":{},"text":{"37":{},"46":{},"52":{},"62":{}},"component":{},"keyword":{}}],["linear_scene_nod",{"_index":2347,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["linearli",{"_index":3357,"title":{},"name":{},"text":{"67":{},"82":{}},"component":{},"keyword":{}}],["linestipplefactor",{"_index":2903,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["linestipplepattern",{"_index":2901,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["link",{"_index":310,"title":{"33":{},"41":{},"12-37":{},"12-51":{},"17-12":{},"17-26":{},"51-4":{},"57-4":{},"58-4":{},"66-5":{},"71-5":{},"85-4":{}},"name":{},"text":{"2":{},"4":{},"5":{},"12":{},"17":{},"26":{},"31":{},"33":{},"41":{},"49":{},"65":{},"66":{},"85":{},"95":{}},"component":{},"keyword":{}}],["link_lib",{"_index":545,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["linking_info",{"_index":3332,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["linking_info.librarycount",{"_index":3335,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["linking_info.plibrari",{"_index":3337,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["linking_info.styp",{"_index":3333,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["lint",{"_index":79,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["linux",{"_index":282,"title":{"7-18":{}},"name":{},"text":{"2":{},"4":{},"7":{},"11":{},"41":{},"114":{}},"component":{},"keyword":{}}],["list",{"_index":396,"title":{"33":{},"41":{},"12-37":{},"12-51":{},"17-12":{},"17-26":{},"78-3":{}},"name":{},"text":{"4":{},"12":{},"17":{},"33":{},"41":{},"49":{},"50":{},"52":{},"54":{},"56":{},"61":{},"70":{},"74":{},"75":{},"78":{},"83":{},"84":{},"85":{},"92":{},"95":{},"101":{},"108":{},"111":{}},"component":{},"keyword":{}}],["littl",{"_index":1268,"title":{},"name":{},"text":{"12":{},"13":{},"17":{},"19":{},"56":{},"71":{},"88":{},"104":{}},"component":{},"keyword":{}}],["live",{"_index":5276,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["llvm",{"_index":622,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["lo",{"_index":2226,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["load",{"_index":779,"title":{"36":{},"45":{},"11-10":{},"11-11":{},"11-12":{},"12-40":{},"12-46":{},"17-15":{},"17-21":{},"106-2":{},"111-4":{},"111-6":{},"111-7":{}},"name":{},"text":{"8":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"26":{},"31":{},"36":{},"37":{},"45":{},"46":{},"49":{},"54":{},"56":{},"60":{},"75":{},"85":{},"86":{},"89":{},"90":{},"91":{},"94":{},"96":{},"97":{},"98":{},"105":{},"106":{},"108":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["load/stor",{"_index":4820,"title":{},"name":{},"text":{"95":{},"101":{},"107":{}},"component":{},"keyword":{}}],["load/store/sample/atom",{"_index":2775,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["load_model",{"_index":3363,"title":{},"name":{},"text":{"67":{},"89":{}},"component":{},"keyword":{}}],["load_model(\"filenamea.gltf",{"_index":1035,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["load_model(\"filenameb.gltf",{"_index":1036,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["load_op_clear",{"_index":5162,"title":{},"name":{},"text":{"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["load_op_dont_car",{"_index":5163,"title":{},"name":{},"text":{"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["load_op_load",{"_index":5165,"title":{},"name":{},"text":{"101":{},"106":{}},"component":{},"keyword":{}}],["load_point",{"_index":2214,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["load_scene(\"filename.gltf",{"_index":1025,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["load_shader(\"fs.frag",{"_index":1074,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["load_shader(\"vs.vert",{"_index":1071,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["load_store[i_color_ms].store_op",{"_index":5120,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["load_store[i_depth].store_op",{"_index":5143,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["load_texture(\"rgba_texture.ktx",{"_index":1045,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["loader",{"_index":500,"title":{},"name":{},"text":{"4":{},"11":{},"54":{},"85":{}},"component":{},"keyword":{}}],["loading/stor",{"_index":5254,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["loadop",{"_index":1229,"title":{},"name":{},"text":{"12":{},"20":{},"101":{},"106":{}},"component":{},"keyword":{}}],["loadop=load",{"_index":858,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["local",{"_index":591,"title":{},"name":{},"text":{"7":{},"52":{},"55":{},"91":{},"94":{},"102":{},"104":{},"111":{},"113":{}},"component":{},"keyword":{}}],["local_s",{"_index":3727,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["local_size.data",{"_index":3735,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["locat",{"_index":759,"title":{},"name":{},"text":{"7":{},"12":{},"19":{},"62":{},"82":{},"91":{},"95":{},"101":{},"109":{}},"component":{},"keyword":{}}],["location=1",{"_index":3241,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["lock",{"_index":4255,"title":{"88-16":{}},"name":{},"text":{"88":{},"98":{},"110":{}},"component":{},"keyword":{}}],["lock.cond.notify_on",{"_index":4374,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["lock.cond.wait(hold",{"_index":4377,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["lock.pending_timelin",{"_index":4373,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["lod",{"_index":4207,"title":{"86-5":{}},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["log",{"_index":481,"title":{},"name":{},"text":{"4":{},"95":{},"109":{}},"component":{},"keyword":{}}],["log2",{"_index":4232,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["loge",{"_index":2439,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["loge(\"build_linked_shad",{"_index":4103,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["loge(\"fail",{"_index":4077,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["loge(\"vkcreateshadersext",{"_index":4115,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["logger",{"_index":1601,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["logi",{"_index":2827,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["logic",{"_index":1134,"title":{"69":{},"12-80":{},"19-28":{},"69-3":{},"69-4":{}},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"49":{},"55":{},"69":{},"71":{},"97":{},"105":{},"108":{},"109":{}},"component":{},"keyword":{}}],["logicopen",{"_index":3393,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["logw",{"_index":2435,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["lohri",{"_index":368,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["long",{"_index":1545,"title":{},"name":{},"text":{"26":{},"31":{},"56":{},"59":{},"88":{},"90":{},"101":{},"108":{}},"component":{},"keyword":{}}],["longer",{"_index":1988,"title":{},"name":{},"text":{"43":{},"55":{},"56":{},"88":{},"94":{},"95":{},"96":{},"98":{},"100":{},"103":{},"108":{},"110":{},"114":{}},"component":{},"keyword":{}}],["longest",{"_index":5304,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["look",{"_index":968,"title":{"56-18":{}},"name":{},"text":{"11":{},"12":{},"20":{},"38":{},"47":{},"52":{},"54":{},"55":{},"56":{},"59":{},"74":{},"84":{},"90":{},"91":{},"95":{},"97":{},"104":{},"105":{},"114":{}},"component":{},"keyword":{}}],["loop",{"_index":1730,"title":{},"name":{},"text":{"37":{},"46":{},"55":{},"64":{},"83":{},"88":{},"107":{}},"component":{},"keyword":{}}],["lopez",{"_index":339,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["lose",{"_index":1495,"title":{},"name":{},"text":{"13":{},"92":{},"96":{},"99":{},"108":{}},"component":{},"keyword":{}}],["loss",{"_index":4559,"title":{},"name":{},"text":{"90":{},"100":{}},"component":{},"keyword":{}}],["lossi",{"_index":4979,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["lossless",{"_index":1146,"title":{},"name":{},"text":{"12":{},"20":{},"92":{},"99":{}},"component":{},"keyword":{}}],["lot",{"_index":1466,"title":{},"name":{},"text":{"13":{},"37":{},"38":{},"46":{},"47":{},"54":{},"56":{},"59":{},"66":{},"83":{},"84":{},"88":{},"90":{},"91":{},"95":{},"104":{},"108":{},"111":{},"114":{}},"component":{},"keyword":{}}],["lou",{"_index":342,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["low",{"_index":1342,"title":{"13-1":{}},"name":{},"text":{"12":{},"13":{},"19":{},"41":{},"64":{},"84":{},"86":{},"93":{},"94":{},"99":{},"106":{}},"component":{},"keyword":{}}],["low/high",{"_index":4977,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["lower",{"_index":879,"title":{},"name":{},"text":{"8":{},"13":{},"64":{},"66":{},"83":{},"93":{},"94":{},"98":{},"106":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["lowest",{"_index":3246,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["lull",{"_index":4732,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["lunarg",{"_index":3988,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["lunarg’",{"_index":5626,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["m",{"_index":3927,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["m/",{"_index":4610,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["m_enable_mci",{"_index":5179,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["m_supports_mci",{"_index":5181,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["machin",{"_index":3742,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["maco",{"_index":283,"title":{"7-21":{}},"name":{},"text":{"2":{},"4":{},"11":{}},"component":{},"keyword":{}}],["macro",{"_index":917,"title":{},"name":{},"text":{"9":{},"15":{},"60":{}},"component":{},"keyword":{}}],["mad",{"_index":2211,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["made",{"_index":1400,"title":{},"name":{},"text":{"13":{},"59":{},"83":{},"88":{},"95":{},"109":{}},"component":{},"keyword":{}}],["magic",{"_index":2266,"title":{},"name":{},"text":{"49":{},"93":{}},"component":{},"keyword":{}}],["magick",{"_index":4985,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["mailbox",{"_index":5459,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["main",{"_index":97,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"18":{},"20":{},"34":{},"41":{},"42":{},"49":{},"56":{},"66":{},"84":{},"85":{},"88":{},"90":{},"91":{},"93":{},"95":{},"99":{},"101":{},"103":{},"108":{}},"component":{},"keyword":{}}],["main(uint3",{"_index":2762,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["main(void",{"_index":5441,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["main(vsinput",{"_index":1572,"title":{},"name":{},"text":{"26":{},"31":{},"84":{}},"component":{},"keyword":{}}],["main_thread_timeline.timelin",{"_index":4360,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["main_thread_timeline_lock",{"_index":4366,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["mainli",{"_index":4803,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["maintain",{"_index":75,"title":{},"name":{},"text":{"2":{},"13":{},"43":{},"64":{},"74":{},"113":{}},"component":{},"keyword":{}}],["mainten",{"_index":38,"title":{"2-9":{}},"name":{},"text":{},"component":{},"keyword":{}}],["major",{"_index":528,"title":{},"name":{},"text":{"5":{},"9":{},"13":{},"15":{},"56":{},"96":{}},"component":{},"keyword":{}}],["make",{"_index":80,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"11":{},"12":{},"13":{},"14":{},"19":{},"38":{},"47":{},"49":{},"52":{},"54":{},"55":{},"56":{},"59":{},"66":{},"74":{},"75":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"101":{},"104":{},"105":{},"106":{},"109":{},"114":{}},"component":{},"keyword":{}}],["makefil",{"_index":653,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mali",{"_index":508,"title":{"8-2":{},"100-1":{}},"name":{},"text":{"4":{},"8":{},"9":{},"12":{},"13":{},"20":{},"91":{},"92":{},"93":{},"95":{},"97":{},"98":{},"100":{},"101":{},"103":{},"104":{},"105":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["manag",{"_index":4,"title":{"96":{},"97":{},"105":{},"12-6":{},"13-3":{},"20-5":{},"96-4":{}},"name":{},"text":{"1":{},"2":{},"12":{},"13":{},"20":{},"55":{},"56":{},"60":{},"61":{},"77":{},"85":{},"89":{},"94":{},"95":{},"96":{},"97":{},"100":{},"104":{},"105":{},"113":{}},"component":{},"keyword":{}}],["mandatori",{"_index":3544,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["mani",{"_index":1143,"title":{},"name":{},"text":{"12":{},"13":{},"17":{},"20":{},"37":{},"39":{},"46":{},"48":{},"49":{},"56":{},"58":{},"64":{},"71":{},"75":{},"82":{},"86":{},"88":{},"90":{},"91":{},"94":{},"95":{},"96":{},"98":{},"100":{},"104":{},"107":{},"109":{},"110":{},"114":{}},"component":{},"keyword":{}}],["manifest",{"_index":5370,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["manual",{"_index":93,"title":{"93-7":{}},"name":{},"text":{"2":{},"7":{},"11":{},"13":{},"38":{},"47":{},"54":{},"56":{},"74":{},"94":{},"95":{},"101":{},"106":{},"114":{}},"component":{},"keyword":{}}],["manufactur",{"_index":3505,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["map",{"_index":1109,"title":{"37":{},"46":{},"12-41":{},"12-47":{},"17-16":{},"17-22":{}},"name":{},"text":{"12":{},"13":{},"17":{},"19":{},"37":{},"38":{},"45":{},"46":{},"47":{},"52":{},"55":{},"56":{},"59":{},"93":{},"95":{},"96":{},"97":{},"101":{},"103":{},"105":{}},"component":{},"keyword":{}}],["march",{"_index":2109,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["margin",{"_index":881,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mark",{"_index":1549,"title":{},"name":{},"text":{"26":{},"31":{},"49":{},"52":{},"88":{},"91":{}},"component":{},"keyword":{}}],["marker",{"_index":2453,"title":{},"name":{},"text":{"54":{},"96":{},"98":{},"110":{}},"component":{},"keyword":{}}],["markers/label",{"_index":585,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["market",{"_index":1487,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["marton",{"_index":344,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["mask",{"_index":2267,"title":{},"name":{},"text":{"49":{},"71":{},"106":{}},"component":{},"keyword":{}}],["mass",{"_index":1486,"title":{},"name":{},"text":{"13":{},"62":{}},"component":{},"keyword":{}}],["massiv",{"_index":2121,"title":{},"name":{},"text":{"48":{},"56":{}},"component":{},"keyword":{}}],["mat",{"_index":2360,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["mat4",{"_index":2257,"title":{},"name":{},"text":{"49":{},"55":{},"95":{},"108":{},"109":{}},"component":{},"keyword":{}}],["match",{"_index":1243,"title":{"74-4":{}},"name":{},"text":{"12":{},"20":{},"52":{},"56":{},"74":{},"100":{},"109":{}},"component":{},"keyword":{}}],["materi",{"_index":393,"title":{},"name":{},"text":{"4":{},"12":{},"19":{},"83":{},"85":{},"96":{},"99":{}},"component":{},"keyword":{}}],["material_frag_shaders[shader.frag",{"_index":4151,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["material_geo_shaders[shader.geo",{"_index":4150,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["material_push_const",{"_index":4179,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["material_push_constant.model",{"_index":4170,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["material_vert_shaders.back",{"_index":4130,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["material_vert_shaders.emplace_back",{"_index":4121,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["material_vert_shaders[shader.vert",{"_index":4148,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["materialindic",{"_index":3922,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["materials(objresource.materi",{"_index":3932,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["materials/textur",{"_index":4921,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["math",{"_index":2702,"title":{},"name":{},"text":{"56":{},"90":{}},"component":{},"keyword":{}}],["mathemat",{"_index":466,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["matindic",{"_index":3928,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["matindices(objresource.materialindic",{"_index":3931,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["matric",{"_index":1271,"title":{},"name":{},"text":{"12":{},"17":{},"23":{},"55":{},"83":{},"95":{}},"component":{},"keyword":{}}],["matrix",{"_index":3211,"title":{},"name":{},"text":{"62":{},"83":{},"95":{},"96":{},"102":{},"109":{}},"component":{},"keyword":{}}],["matter",{"_index":4361,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["matthew",{"_index":346,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["max",{"_index":872,"title":{"50-3":{}},"name":{},"text":{"8":{},"37":{},"46":{},"50":{}},"component":{},"keyword":{}}],["max(dt",{"_index":4233,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["max(f16vec4(1.0hf",{"_index":4536,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["max(parabola",{"_index":4507,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["max(vec4(1.0",{"_index":4503,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["max_frames_in_flight",{"_index":1861,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["maxim",{"_index":4972,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["maximagecount",{"_index":4955,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["maximis",{"_index":4839,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["maximum",{"_index":1812,"title":{},"name":{},"text":{"38":{},"41":{},"47":{},"99":{}},"component":{},"keyword":{}}],["maxlod",{"_index":4225,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["maxpipelinerayrecursiondepth",{"_index":3951,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["maxpushconstantss",{"_index":4829,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["maxstoragebufferrang",{"_index":4794,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["maxtimelinesemaphorevaluediffer",{"_index":4358,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["maxuniformbufferrang",{"_index":4793,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mb",{"_index":795,"title":{},"name":{},"text":{"8":{},"91":{}},"component":{},"keyword":{}}],["mb/render",{"_index":825,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mean",{"_index":837,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"38":{},"43":{},"47":{},"55":{},"56":{},"74":{},"84":{},"85":{},"88":{},"91":{},"93":{},"95":{},"96":{},"99":{},"101":{},"102":{},"103":{},"106":{},"107":{},"109":{},"111":{}},"component":{},"keyword":{}}],["meaning",{"_index":1777,"title":{},"name":{},"text":{"38":{},"47":{},"49":{},"54":{}},"component":{},"keyword":{}}],["meaningless",{"_index":2776,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["meant",{"_index":1912,"title":{},"name":{},"text":{"41":{},"84":{}},"component":{},"keyword":{}}],["measur",{"_index":1765,"title":{},"name":{},"text":{"38":{},"47":{},"50":{},"59":{},"70":{},"91":{},"92":{},"94":{},"103":{},"107":{}},"component":{},"keyword":{}}],["mechan",{"_index":1767,"title":{},"name":{},"text":{"38":{},"47":{},"75":{},"85":{},"95":{},"96":{},"99":{},"111":{}},"component":{},"keyword":{}}],["mediump",{"_index":4455,"title":{"90-7":{},"91-5":{}},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["meet",{"_index":4625,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["mega",{"_index":4244,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["megabyt",{"_index":3440,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["mem_properti",{"_index":3625,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["mem_properties.data",{"_index":3656,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["mem_properties.push_back((cl_mem_properti",{"_index":3627,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["mem_properties.push_back(0",{"_index":3634,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["member",{"_index":303,"title":{},"name":{},"text":{"2":{},"54":{},"62":{},"69":{},"78":{},"97":{},"101":{},"105":{},"106":{},"114":{}},"component":{},"keyword":{}}],["membership",{"_index":305,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["memcpy(data",{"_index":5535,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["memori",{"_index":406,"title":{"8":{},"70":{},"12-58":{},"13-8":{},"13-9":{},"19-6":{},"70-1":{},"70-2":{},"84-6":{},"99-4":{}},"name":{},"text":{"4":{},"8":{},"12":{},"13":{},"17":{},"19":{},"20":{},"22":{},"37":{},"38":{},"46":{},"47":{},"49":{},"55":{},"56":{},"67":{},"70":{},"71":{},"74":{},"75":{},"76":{},"82":{},"83":{},"84":{},"86":{},"87":{},"90":{},"91":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"104":{},"106":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["memory_allocate_info",{"_index":3604,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["memory_allocation_info.pnext",{"_index":2144,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["memory_limit",{"_index":764,"title":{},"name":{"8":{}},"text":{},"component":{},"keyword":{}}],["memory_requirements.s",{"_index":5534,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["memorybudget",{"_index":3422,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["memorybudget::initialize_device_memory_properti",{"_index":3429,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["memorybudget::on_update_ui_overlay(vkb::draw",{"_index":3441,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["memorybudget::update_device_memory_properti",{"_index":3464,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["memorytypeindex",{"_index":3787,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["mention",{"_index":2307,"title":{},"name":{},"text":{"52":{},"70":{},"91":{},"93":{},"95":{},"101":{}},"component":{},"keyword":{}}],["merg",{"_index":312,"title":{"108-3":{}},"name":{},"text":{"2":{},"40":{},"108":{}},"component":{},"keyword":{}}],["mesa",{"_index":651,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mesh",{"_index":1119,"title":{"67":{},"68":{},"71":{},"72":{},"12-59":{},"12-63":{},"12-64":{},"12-85":{},"19-7":{},"19-11":{},"19-12":{},"19-33":{},"71-3":{},"71-7":{}},"name":{},"text":{"12":{},"17":{},"19":{},"39":{},"48":{},"49":{},"52":{},"66":{},"67":{},"68":{},"71":{},"72":{},"84":{},"91":{},"95":{},"96":{},"97":{},"102":{},"105":{}},"component":{},"keyword":{}}],["mesh.index_buff",{"_index":4883,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh.index_buffer.s",{"_index":4885,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh.vertex_buff",{"_index":4881,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh_array",{"_index":4866,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh_array.model_matrices[gl_instanceindex",{"_index":4867,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh_color",{"_index":4797,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh_data",{"_index":4833,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["mesh_siz",{"_index":2137,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mesharray",{"_index":4864,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["meshdata",{"_index":4832,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["meshlet",{"_index":2234,"title":{"67-2":{}},"name":{},"text":{"49":{},"67":{},"71":{}},"component":{},"keyword":{}}],["meshlet_dens",{"_index":3483,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["meshletsnumb",{"_index":3500,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["meshshad",{"_index":3473,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["messag",{"_index":658,"title":{},"name":{},"text":{"7":{},"26":{},"31":{},"54":{},"84":{},"95":{},"109":{}},"component":{},"keyword":{}}],["message_sever",{"_index":2429,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["message_typ",{"_index":2431,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["messageid",{"_index":2855,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["messageidnumb",{"_index":2436,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["messagesever",{"_index":2417,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["messagetyp",{"_index":3999,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["messeng",{"_index":2382,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["met",{"_index":280,"title":{},"name":{},"text":{"2":{},"91":{},"108":{}},"component":{},"keyword":{}}],["meta",{"_index":499,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{},"keyword":{}}],["metadata",{"_index":2565,"title":{},"name":{},"text":{"55":{},"56":{},"99":{}},"component":{},"keyword":{}}],["method",{"_index":1161,"title":{"95-10":{}},"name":{},"text":{"12":{},"19":{},"20":{},"57":{},"59":{},"61":{},"62":{},"69":{},"71":{},"77":{},"82":{},"83":{},"85":{},"86":{},"94":{},"95":{},"99":{},"102":{},"103":{},"107":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["metric",{"_index":4986,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["mib/",{"_index":4656,"title":{},"name":{},"text":{"92":{},"101":{},"106":{}},"component":{},"keyword":{}}],["michael",{"_index":348,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["microsoft’",{"_index":1546,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["middl",{"_index":4023,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["midgard",{"_index":925,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["migrat",{"_index":1426,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["million",{"_index":814,"title":{},"name":{},"text":{"8":{},"106":{}},"component":{},"keyword":{}}],["mimic",{"_index":5387,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["min",{"_index":871,"title":{},"name":{},"text":{"8":{},"56":{},"88":{}},"component":{},"keyword":{}}],["min(dist",{"_index":3905,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["min_threshold",{"_index":3906,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["mind",{"_index":869,"title":{},"name":{},"text":{"8":{},"56":{},"59":{},"85":{},"93":{}},"component":{},"keyword":{}}],["minim",{"_index":190,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"17":{},"25":{},"85":{},"91":{},"94":{},"97":{},"101":{},"102":{},"104":{},"105":{}},"component":{},"keyword":{}}],["minimagecount",{"_index":4950,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["minimum",{"_index":519,"title":{},"name":{},"text":{"5":{},"7":{},"56":{},"98":{},"99":{},"110":{}},"component":{},"keyword":{}}],["minor",{"_index":904,"title":{},"name":{},"text":{"9":{},"113":{}},"component":{},"keyword":{}}],["mip",{"_index":1108,"title":{"37":{},"46":{},"12-41":{},"12-47":{},"17-16":{},"17-22":{},"37-6":{},"37-7":{},"37-8":{},"46-6":{},"46-7":{},"46-8":{}},"name":{},"text":{"12":{},"17":{},"37":{},"46":{},"56":{},"86":{},"101":{},"111":{}},"component":{},"keyword":{}}],["mip_level",{"_index":5538,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["mipmap",{"_index":1681,"title":{},"name":{},"text":{"37":{},"100":{}},"component":{},"keyword":{}}],["mirror",{"_index":3937,"title":{},"name":{},"text":{"83":{},"109":{}},"component":{},"keyword":{}}],["misc",{"_index":404,"title":{},"name":{"9":{}},"text":{"4":{}},"component":{},"keyword":{}}],["miscellan",{"_index":882,"title":{"9":{}},"name":{},"text":{},"component":{},"keyword":{}}],["mismatch",{"_index":2114,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["miss",{"_index":1305,"title":{},"name":{},"text":{"12":{},"19":{},"81":{},"83":{},"98":{},"104":{},"110":{}},"component":{},"keyword":{}}],["mistak",{"_index":1431,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["mit",{"_index":220,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{},"keyword":{}}],["mitig",{"_index":820,"title":{},"name":{},"text":{"8":{},"101":{},"104":{}},"component":{},"keyword":{}}],["mix",{"_index":1624,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["mlp",{"_index":2110,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["mobil",{"_index":475,"title":{"48":{},"12-94":{},"18-2":{},"48-1":{}},"name":{},"text":{"4":{},"8":{},"9":{},"12":{},"13":{},"20":{},"48":{},"75":{},"90":{},"91":{},"96":{},"98":{},"101":{},"106":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["mode",{"_index":430,"title":{"49-6":{},"93-4":{},"98-3":{},"110-3":{}},"name":{},"text":{"4":{},"7":{},"12":{},"13":{},"17":{},"20":{},"43":{},"61":{},"65":{},"85":{},"93":{},"94":{},"96":{},"98":{},"101":{},"104":{},"109":{},"110":{}},"component":{},"keyword":{}}],["model",{"_index":117,"title":{"7-12":{},"11-10":{},"13-4":{},"13-5":{}},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"13":{},"19":{},"20":{},"26":{},"31":{},"49":{},"52":{},"55":{},"56":{},"59":{},"61":{},"66":{},"67":{},"69":{},"71":{},"82":{},"83":{},"85":{},"88":{},"89":{},"95":{},"101":{},"102":{},"109":{}},"component":{},"keyword":{}}],["model/view",{"_index":5188,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["model_buffer.num_vertic",{"_index":3876,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["model_matric",{"_index":4865,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["model_matrix",{"_index":4163,"title":{},"name":{},"text":{"85":{},"95":{}},"component":{},"keyword":{}}],["modela",{"_index":1031,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["modelb",{"_index":1032,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["modelinformationbuff",{"_index":5189,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["modern",{"_index":1411,"title":{},"name":{},"text":{"13":{},"49":{},"56":{},"88":{},"90":{},"91":{},"93":{},"95":{}},"component":{},"keyword":{}}],["modif",{"_index":3200,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["modifi",{"_index":2108,"title":{},"name":{},"text":{"48":{},"49":{},"57":{},"58":{},"61":{},"102":{},"104":{}},"component":{},"keyword":{}}],["modul",{"_index":116,"title":{"26-4":{},"31-4":{},"66-4":{}},"name":{},"text":{"2":{},"11":{},"26":{},"31":{},"54":{},"56":{},"66":{},"83":{},"90":{},"99":{}},"component":{},"keyword":{}}],["module_create_info",{"_index":1607,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["module_create_info.codes",{"_index":1610,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["module_create_info.pcod",{"_index":1613,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["module_create_info.styp",{"_index":1608,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["moltenvk",{"_index":1349,"title":{},"name":{},"text":{"12":{},"19":{},"78":{}},"component":{},"keyword":{}}],["moment",{"_index":3744,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["monitor",{"_index":1295,"title":{},"name":{},"text":{"12":{},"19":{},"94":{},"96":{},"101":{}},"component":{},"keyword":{}}],["monitorfromwindow",{"_index":3269,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["monolith",{"_index":3271,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["monoton",{"_index":4276,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["more",{"_index":308,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"11":{},"12":{},"13":{},"20":{},"26":{},"31":{},"37":{},"40":{},"41":{},"43":{},"46":{},"49":{},"54":{},"55":{},"56":{},"57":{},"60":{},"61":{},"65":{},"67":{},"71":{},"74":{},"75":{},"77":{},"83":{},"85":{},"86":{},"88":{},"89":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{}},"component":{},"keyword":{}}],["mostli",{"_index":1771,"title":{},"name":{},"text":{"38":{},"47":{},"56":{},"88":{},"91":{}},"component":{},"keyword":{}}],["motiv",{"_index":4701,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["mous",{"_index":891,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["move",{"_index":884,"title":{"82-2":{}},"name":{},"text":{"9":{},"12":{},"13":{},"20":{},"52":{},"59":{},"71":{},"74":{},"82":{},"86":{},"90":{},"95":{},"99":{},"106":{}},"component":{},"keyword":{}}],["movement",{"_index":895,"title":{},"name":{},"text":{"9":{},"86":{}},"component":{},"keyword":{}}],["ms",{"_index":4726,"title":{},"name":{},"text":{"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"105":{},"110":{}},"component":{},"keyword":{}}],["msaa",{"_index":1083,"title":{"101":{},"12-10":{},"20-9":{}},"name":{},"text":{"12":{},"20":{},"64":{},"101":{}},"component":{},"keyword":{}}],["msg(",{"_index":4015,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["msgwrite",{"_index":5396,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["much",{"_index":1870,"title":{},"name":{},"text":{"38":{},"43":{},"47":{},"49":{},"54":{},"56":{},"84":{},"86":{},"90":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"101":{},"103":{},"104":{},"105":{},"110":{}},"component":{},"keyword":{}}],["mul(ubo.model",{"_index":1578,"title":{},"name":{},"text":{"26":{},"31":{},"84":{}},"component":{},"keyword":{}}],["mul(ubo.project",{"_index":1577,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["mul(ubo.view",{"_index":3972,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["multi",{"_index":463,"title":{"94":{},"102":{},"103":{},"12-11":{},"12-24":{},"20-10":{},"20-23":{},"94-3":{},"103-3":{}},"name":{},"text":{"4":{},"12":{},"13":{},"20":{},"49":{},"56":{},"94":{},"101":{},"102":{},"103":{}},"component":{},"keyword":{}}],["multidrawindirect",{"_index":5180,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["multipass",{"_index":5332,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["multipl",{"_index":523,"title":{"103":{},"12-11":{},"20-10":{},"88-5":{},"93-5":{},"103-2":{}},"name":{},"text":{"5":{},"8":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"23":{},"34":{},"38":{},"42":{},"47":{},"48":{},"51":{},"54":{},"55":{},"56":{},"61":{},"66":{},"74":{},"77":{},"83":{},"85":{},"88":{},"89":{},"92":{},"93":{},"94":{},"95":{},"101":{},"102":{},"103":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["multipli",{"_index":1892,"title":{},"name":{},"text":{"40":{},"41":{},"83":{},"101":{},"108":{}},"component":{},"keyword":{}}],["multisampl",{"_index":1211,"title":{"101":{}},"name":{},"text":{"12":{},"20":{},"92":{},"101":{},"108":{}},"component":{},"keyword":{}}],["multisampled_img.get_handl",{"_index":5124,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["multithread",{"_index":5198,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["munoz",{"_index":338,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["mutabl",{"_index":1472,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["mvp",{"_index":4821,"title":{},"name":{},"text":{"95":{},"96":{},"109":{}},"component":{},"keyword":{}}],["mw",{"_index":5136,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["mw/(gb/",{"_index":836,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["my_sample.cpp",{"_index":1033,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["my_sample.h",{"_index":1027,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["myapisampl",{"_index":1028,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["myapisample::build_command_buff",{"_index":1037,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["myapisample::on_update_ui_overlay(vkb::draw",{"_index":1018,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["myapisample::prepare(const",{"_index":1034,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["mysample::draw_gui",{"_index":1014,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["mysample::mysampl",{"_index":991,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["mysample::prepare(const",{"_index":1023,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["mysample::request_gpu_features(vkb::physicaldevic",{"_index":1003,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["n",{"_index":446,"title":{"22":{},"27":{},"12-27":{},"12-31":{},"17-2":{},"17-6":{}},"name":{},"text":{"4":{},"12":{},"17":{},"19":{},"22":{},"27":{},"37":{},"43":{},"46":{},"49":{},"71":{},"84":{},"87":{},"88":{},"91":{},"93":{}},"component":{},"keyword":{}}],["n/a",{"_index":5365,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["naiv",{"_index":4720,"title":{},"name":{},"text":{"93":{},"104":{}},"component":{},"keyword":{}}],["nake",{"_index":4981,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["name",{"_index":145,"title":{"54-7":{}},"name":{},"text":{"2":{},"5":{},"7":{},"12":{},"14":{},"15":{},"19":{},"48":{},"52":{},"54":{},"62":{}},"component":{},"keyword":{}}],["name_info",{"_index":2514,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["name_info.objecthandl",{"_index":2518,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["name_info.objecttyp",{"_index":2516,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["name_info.pobjectnam",{"_index":2520,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["namespac",{"_index":1552,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["nanosecond",{"_index":1844,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["narrow",{"_index":4576,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["nasti",{"_index":2967,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["nativ",{"_index":1248,"title":{"111-5":{},"111-8":{}},"name":{},"text":{"12":{},"13":{},"20":{},"75":{},"85":{},"90":{},"91":{},"95":{},"106":{},"109":{},"111":{}},"component":{},"keyword":{}}],["natur",{"_index":2254,"title":{},"name":{},"text":{"49":{},"56":{},"85":{},"88":{}},"component":{},"keyword":{}}],["navig",{"_index":2462,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["nb",{"_index":688,"title":{},"name":{},"text":{"7":{},"71":{},"78":{}},"component":{},"keyword":{}}],["ndk",{"_index":599,"title":{},"name":{},"text":{"7":{},"109":{}},"component":{},"keyword":{}}],["ndk;25.1.8937393",{"_index":738,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["near",{"_index":2930,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["near/far",{"_index":2972,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["nearest",{"_index":3896,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["neat",{"_index":2815,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["necessari",{"_index":1399,"title":{},"name":{},"text":{"13":{},"37":{},"46":{},"56":{},"85":{},"94":{},"96":{},"97":{},"98":{},"99":{},"105":{},"107":{},"110":{},"113":{}},"component":{},"keyword":{}}],["necessarili",{"_index":1376,"title":{},"name":{},"text":{"12":{},"13":{},"18":{},"56":{},"95":{}},"component":{},"keyword":{}}],["need",{"_index":180,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"26":{},"31":{},"37":{},"38":{},"46":{},"47":{},"49":{},"54":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"66":{},"67":{},"69":{},"70":{},"74":{},"75":{},"77":{},"82":{},"83":{},"84":{},"85":{},"88":{},"89":{},"90":{},"91":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["needless",{"_index":4714,"title":{},"name":{},"text":{"93":{},"106":{}},"component":{},"keyword":{}}],["needlessli",{"_index":5231,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["needs_work",{"_index":2717,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["neg",{"_index":4748,"title":{},"name":{},"text":{"94":{},"95":{},"99":{},"101":{},"106":{},"109":{}},"component":{},"keyword":{}}],["nerf",{"_index":1140,"title":{"48":{},"12-94":{},"18-2":{},"48-1":{}},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["nest",{"_index":2465,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["neural",{"_index":1377,"title":{},"name":{},"text":{"12":{},"18":{},"48":{}},"component":{},"keyword":{}}],["neutral",{"_index":1381,"title":{"13-11":{}},"name":{},"text":{},"component":{},"keyword":{}}],["never",{"_index":2809,"title":{},"name":{},"text":{"56":{},"88":{},"93":{},"101":{},"104":{}},"component":{},"keyword":{}}],["new",{"_index":130,"title":{"5-2":{},"55-3":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"9":{},"11":{},"12":{},"13":{},"14":{},"19":{},"26":{},"31":{},"37":{},"38":{},"43":{},"46":{},"47":{},"48":{},"49":{},"52":{},"54":{},"55":{},"56":{},"59":{},"60":{},"61":{},"64":{},"65":{},"66":{},"69":{},"71":{},"77":{},"83":{},"85":{},"87":{},"88":{},"94":{},"95":{},"96":{},"98":{},"109":{},"110":{}},"component":{},"keyword":{}}],["new_imag",{"_index":5037,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["new_swapchain",{"_index":5079,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["newer",{"_index":4825,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["newli",{"_index":1715,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["newvertex",{"_index":3872,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["next",{"_index":533,"title":{},"name":{},"text":{"5":{},"12":{},"19":{},"37":{},"46":{},"52":{},"55":{},"64":{},"70":{},"74":{},"83":{},"85":{},"88":{},"93":{},"95":{},"97":{},"98":{},"102":{},"104":{},"105":{},"108":{},"110":{},"113":{}},"component":{},"keyword":{}}],["next_stag",{"_index":4051,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["next_stage_",{"_index":4068,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["nice",{"_index":2162,"title":{},"name":{},"text":{"49":{},"56":{},"88":{},"90":{},"91":{},"93":{},"95":{},"96":{}},"component":{},"keyword":{}}],["nich",{"_index":3739,"title":{},"name":{},"text":{"74":{},"88":{}},"component":{},"keyword":{}}],["nifti",{"_index":2241,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["night",{"_index":4249,"title":{"88-6":{}},"name":{},"text":{},"component":{},"keyword":{}}],["ninja",{"_index":720,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["nlohmann",{"_index":494,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["node",{"_index":2335,"title":{},"name":{},"text":{"52":{},"109":{}},"component":{},"keyword":{}}],["node.nod",{"_index":2350,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["node.sub_mesh",{"_index":2355,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["node_index",{"_index":2342,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["node_transform",{"_index":2349,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["node’",{"_index":2379,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["nois",{"_index":3909,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["noisi",{"_index":1688,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["non",{"_index":1337,"title":{"56-6":{},"56-10":{},"56-11":{},"56-13":{}},"name":{},"text":{"12":{},"19":{},"38":{},"41":{},"47":{},"48":{},"52":{},"55":{},"56":{},"60":{},"62":{},"78":{},"82":{},"86":{},"89":{},"106":{},"109":{}},"component":{},"keyword":{}}],["none",{"_index":4159,"title":{},"name":{},"text":{"85":{},"99":{}},"component":{},"keyword":{}}],["nonuniform",{"_index":2774,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["nonuniformext",{"_index":2689,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["nonuniformext(subgroupbroadcastfirst",{"_index":2716,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["nop",{"_index":5330,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["normal",{"_index":701,"title":{},"name":{},"text":{"7":{},"8":{},"12":{},"19":{},"26":{},"31":{},"37":{},"46":{},"48":{},"49":{},"56":{},"67":{},"69":{},"82":{},"83":{},"85":{},"88":{},"89":{},"90":{},"91":{},"98":{},"99":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["normal0",{"_index":1563,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["notat",{"_index":1966,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["note",{"_index":167,"title":{"38-2":{},"47-2":{},"48-2":{},"49-11":{},"74-5":{},"93-4":{}},"name":{},"text":{"2":{},"9":{},"13":{},"37":{},"38":{},"43":{},"46":{},"47":{},"49":{},"52":{},"56":{},"59":{},"61":{},"64":{},"66":{},"71":{},"74":{},"83":{},"90":{},"92":{},"93":{},"94":{},"95":{},"99":{},"100":{},"101":{},"103":{},"104":{},"108":{},"109":{},"111":{},"113":{}},"component":{},"keyword":{}}],["noth",{"_index":2212,"title":{},"name":{},"text":{"49":{},"55":{},"83":{},"90":{}},"component":{},"keyword":{}}],["notic",{"_index":31,"title":{"2-5":{}},"name":{},"text":{"2":{},"97":{},"99":{},"103":{},"105":{},"106":{},"108":{}},"component":{},"keyword":{}}],["notifi",{"_index":2687,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["novel",{"_index":2112,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["now",{"_index":746,"title":{},"name":{},"text":{"7":{},"8":{},"37":{},"38":{},"43":{},"46":{},"47":{},"49":{},"52":{},"54":{},"55":{},"56":{},"61":{},"66":{},"74":{},"77":{},"84":{},"85":{},"88":{},"90":{},"91":{},"92":{},"93":{},"96":{},"98":{},"110":{}},"component":{},"keyword":{}}],["nth",{"_index":1884,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["null",{"_index":1616,"title":{},"name":{},"text":{"26":{},"60":{},"71":{},"74":{},"85":{}},"component":{},"keyword":{}}],["nullptr",{"_index":1079,"title":{},"name":{},"text":{"11":{},"42":{},"46":{},"47":{},"54":{},"56":{},"61":{},"66":{},"70":{},"74":{},"75":{},"77":{},"78":{},"84":{},"85":{},"88":{},"89":{},"99":{},"111":{},"114":{}},"component":{},"keyword":{}}],["num_devic",{"_index":3589,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["num_fram",{"_index":4353,"title":{},"name":{},"text":{"88":{},"96":{}},"component":{},"keyword":{}}],["num_platform",{"_index":3579,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["number",{"_index":906,"title":{"98":{},"110":{},"98-2":{},"110-2":{}},"name":{},"text":{"9":{},"12":{},"19":{},"20":{},"37":{},"38":{},"41":{},"46":{},"47":{},"54":{},"56":{},"60":{},"61":{},"63":{},"64":{},"71":{},"77":{},"82":{},"83":{},"84":{},"86":{},"88":{},"89":{},"90":{},"91":{},"92":{},"94":{},"96":{},"98":{},"99":{},"100":{},"101":{},"102":{},"107":{},"108":{},"110":{}},"component":{},"keyword":{}}],["numdescriptorsnonuniform",{"_index":2849,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["numthreads(64",{"_index":2761,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["nutshel",{"_index":5357,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["nvidia",{"_index":3507,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["o",{"_index":3183,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["o_color",{"_index":4582,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["o_delta_po",{"_index":4593,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["o_norm",{"_index":4592,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["o_po",{"_index":4788,"title":{},"name":{},"text":{"95":{},"109":{}},"component":{},"keyword":{}}],["o_vertex_color",{"_index":4591,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["obj",{"_index":3915,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["objbuff",{"_index":3921,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["object",{"_index":139,"title":{"82":{},"85":{},"12-86":{},"19-34":{},"54-7":{},"82-2":{},"82-3":{},"85-3":{},"95-19":{},"95-27":{},"107-2":{}},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"23":{},"26":{},"31":{},"34":{},"40":{},"41":{},"42":{},"54":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"66":{},"67":{},"71":{},"74":{},"75":{},"77":{},"79":{},"82":{},"83":{},"85":{},"88":{},"94":{},"95":{},"96":{},"97":{},"105":{},"107":{},"111":{},"113":{}},"component":{},"keyword":{}}],["object_pt",{"_index":3887,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["object_typ",{"_index":3866,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["object’",{"_index":2502,"title":{},"name":{},"text":{"54":{},"82":{},"97":{},"105":{}},"component":{},"keyword":{}}],["objresourc",{"_index":3929,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["observ",{"_index":1911,"title":{},"name":{},"text":{"41":{},"69":{},"86":{},"88":{},"90":{},"91":{},"95":{},"99":{},"106":{}},"component":{},"keyword":{}}],["obtain",{"_index":250,"title":{},"name":{},"text":{"2":{},"51":{},"86":{},"90":{},"97":{},"99":{},"105":{}},"component":{},"keyword":{}}],["obviou",{"_index":2965,"title":{},"name":{},"text":{"59":{},"88":{},"94":{},"109":{}},"component":{},"keyword":{}}],["occlud",{"_index":5191,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["occlus",{"_index":1309,"title":{"82-5":{}},"name":{},"text":{"12":{},"19":{},"82":{}},"component":{},"keyword":{}}],["occup",{"_index":1907,"title":{},"name":{},"text":{"41":{},"90":{}},"component":{},"keyword":{}}],["occupi",{"_index":4238,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["occur",{"_index":1432,"title":{},"name":{},"text":{"13":{},"41":{},"82":{},"84":{},"95":{},"96":{},"102":{},"107":{}},"component":{},"keyword":{}}],["off",{"_index":4750,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["offer",{"_index":960,"title":{},"name":{},"text":{"11":{},"12":{},"20":{},"37":{},"38":{},"46":{},"47":{},"67":{},"74":{},"82":{},"92":{},"94":{},"95":{},"101":{}},"component":{},"keyword":{}}],["offici",{"_index":724,"title":{},"name":{},"text":{"7":{},"12":{},"19":{},"81":{},"111":{}},"component":{},"keyword":{}}],["offlin",{"_index":1684,"title":{},"name":{},"text":{"37":{},"46":{},"90":{},"107":{}},"component":{},"keyword":{}}],["offload",{"_index":1265,"title":{},"name":{},"text":{"12":{},"20":{},"102":{}},"component":{},"keyword":{}}],["offscreen",{"_index":435,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["offset",{"_index":2153,"title":{},"name":{},"text":{"49":{},"52":{},"55":{},"56":{},"82":{},"89":{},"90":{},"95":{},"96":{},"102":{},"111":{}},"component":{},"keyword":{}}],["offset.i",{"_index":5282,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["offset.x",{"_index":5281,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["offset.xxyi",{"_index":4519,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["offsetof(samplevertex",{"_index":4450,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["offsetof(vertex",{"_index":4440,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["offsetof(vertex1",{"_index":4394,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["offsetof(vertex2",{"_index":4398,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["offsets[1",{"_index":2353,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["oit",{"_index":1105,"title":{"12-37":{},"17-12":{}},"name":{},"text":{"12":{},"17":{},"33":{},"40":{},"41":{}},"component":{},"keyword":{}}],["ok",{"_index":5224,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["okay",{"_index":4540,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["old",{"_index":922,"title":{},"name":{},"text":{"9":{},"43":{},"55":{},"56":{},"109":{}},"component":{},"keyword":{}}],["old_valu",{"_index":4279,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["older",{"_index":2699,"title":{},"name":{},"text":{"56":{},"85":{}},"component":{},"keyword":{}}],["oldlayout",{"_index":5101,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["oldlayout/initiallayout",{"_index":1202,"title":{},"name":{},"text":{"12":{},"20":{},"100":{}},"component":{},"keyword":{}}],["on",{"_index":244,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"11":{},"12":{},"20":{},"26":{},"31":{},"34":{},"37":{},"38":{},"40":{},"42":{},"43":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"59":{},"62":{},"64":{},"71":{},"75":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"92":{},"93":{},"94":{},"95":{},"96":{},"98":{},"99":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"110":{},"113":{},"114":{}},"component":{},"keyword":{}}],["on_app_cmd(android_app",{"_index":5372,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["on_content_rect_changed(anativeact",{"_index":5389,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["on_update_ui_overlay",{"_index":1017,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["onc",{"_index":311,"title":{},"name":{},"text":{"2":{},"7":{},"12":{},"19":{},"37":{},"43":{},"46":{},"49":{},"54":{},"56":{},"66":{},"70":{},"71":{},"74":{},"75":{},"82":{},"83":{},"88":{},"93":{},"94":{},"95":{},"98":{},"99":{},"101":{},"102":{},"103":{},"110":{},"111":{}},"component":{},"keyword":{}}],["oncontentrectchang",{"_index":5388,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["ondestroy",{"_index":5366,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["one_time_submit_bit",{"_index":4761,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["onlin",{"_index":5302,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["onto",{"_index":937,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["onward",{"_index":4661,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["oof",{"_index":4707,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["oom",{"_index":769,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["opac",{"_index":1876,"title":{},"name":{},"text":{"40":{},"41":{},"48":{}},"component":{},"keyword":{}}],["opaqu",{"_index":2983,"title":{},"name":{},"text":{"60":{},"94":{},"100":{}},"component":{},"keyword":{}}],["opatom",{"_index":2797,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["opbitcast",{"_index":2220,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["opcap",{"_index":2185,"title":{},"name":{},"text":{"49":{},"91":{}},"component":{},"keyword":{}}],["opcopyobject",{"_index":2790,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["opdecor",{"_index":2783,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["open",{"_index":105,"title":{},"name":{},"text":{"2":{},"7":{},"26":{},"31":{},"66":{},"84":{},"92":{}},"component":{},"keyword":{}}],["opencl",{"_index":1123,"title":{"73":{},"74":{},"75":{},"12-66":{},"12-67":{},"19-14":{},"19-15":{},"75-7":{}},"name":{},"text":{"12":{},"19":{},"73":{},"74":{},"75":{}},"component":{},"keyword":{}}],["opencl_objects.cl_update_vk_semaphor",{"_index":3701,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["opencl_objects.device_id",{"_index":3632,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["opencl_objects.imag",{"_index":3654,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["opencl_objects.kernel",{"_index":3732,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["opencl_objects.vk_update_cl_semaphor",{"_index":3723,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["openclinterop::prepare_sync_object",{"_index":3660,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["openclinterop::rend",{"_index":3706,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["opencl’",{"_index":3546,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["opengl",{"_index":402,"title":{"76":{},"12-65":{},"13-2":{},"19-13":{}},"name":{},"text":{"4":{},"12":{},"13":{},"19":{},"59":{},"75":{},"76":{},"90":{},"96":{},"109":{}},"component":{},"keyword":{}}],["oper",{"_index":1135,"title":{"69":{},"12-80":{},"19-28":{},"69-3":{},"69-4":{},"106-2":{},"106-3":{}},"name":{},"text":{"12":{},"13":{},"15":{},"19":{},"20":{},"37":{},"38":{},"40":{},"41":{},"43":{},"46":{},"47":{},"57":{},"69":{},"88":{},"90":{},"94":{},"95":{},"97":{},"98":{},"100":{},"101":{},"104":{},"105":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["opextens",{"_index":2187,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["opfadd",{"_index":4584,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["opfconvert",{"_index":4580,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["opimagesampleimplicitlod",{"_index":2793,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["oplin",{"_index":2867,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["opload",{"_index":2191,"title":{},"name":{},"text":{"49":{},"56":{},"91":{}},"component":{},"keyword":{}}],["opmemorymodel",{"_index":2189,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["opportun",{"_index":4733,"title":{},"name":{},"text":{"93":{},"96":{},"99":{}},"component":{},"keyword":{}}],["oppos",{"_index":4792,"title":{},"name":{},"text":{"95":{},"101":{}},"component":{},"keyword":{}}],["opposit",{"_index":1622,"title":{},"name":{},"text":{"34":{},"42":{},"67":{}},"component":{},"keyword":{}}],["opsampledimag",{"_index":2786,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["opstor",{"_index":2192,"title":{},"name":{},"text":{"49":{},"56":{},"91":{}},"component":{},"keyword":{}}],["opt",{"_index":2818,"title":{},"name":{},"text":{"56":{},"71":{},"99":{}},"component":{},"keyword":{}}],["optim",{"_index":136,"title":{},"name":{},"text":{"2":{},"4":{},"12":{},"13":{},"20":{},"48":{},"49":{},"56":{},"64":{},"66":{},"82":{},"85":{},"90":{},"93":{},"94":{},"96":{},"98":{},"99":{},"100":{},"104":{},"106":{},"108":{},"110":{}},"component":{},"keyword":{}}],["optimal_rate_i",{"_index":3249,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["optimis",{"_index":4652,"title":{},"name":{},"text":{"92":{},"95":{},"107":{}},"component":{},"keyword":{}}],["option",{"_index":553,"title":{"7-1":{},"40-3":{},"41-3":{},"85-9":{},"93-9":{}},"name":{},"text":{"7":{},"10":{},"11":{},"12":{},"14":{},"20":{},"26":{},"31":{},"34":{},"40":{},"41":{},"42":{},"54":{},"61":{},"64":{},"71":{},"75":{},"78":{},"84":{},"85":{},"86":{},"94":{},"95":{},"96":{},"98":{},"99":{},"101":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["option_en",{"_index":1016,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["or",{"_index":2887,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["orang",{"_index":4964,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["order",{"_index":604,"title":{"33":{},"40":{},"41":{},"12-51":{},"12-52":{},"17-26":{},"17-27":{},"88-4":{},"88-10":{},"88-14":{}},"name":{},"text":{"7":{},"10":{},"12":{},"13":{},"17":{},"19":{},"20":{},"38":{},"40":{},"41":{},"47":{},"50":{},"59":{},"61":{},"62":{},"70":{},"74":{},"84":{},"85":{},"88":{},"94":{},"96":{},"97":{},"98":{},"101":{},"104":{},"105":{},"106":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["organ",{"_index":3510,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["orient",{"_index":1241,"title":{},"name":{},"text":{"12":{},"20":{},"26":{},"31":{},"109":{}},"component":{},"keyword":{}}],["origin",{"_index":1879,"title":{},"name":{},"text":{"40":{},"48":{},"71":{},"83":{}},"component":{},"keyword":{}}],["oscil",{"_index":4651,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["otherwis",{"_index":166,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"49":{},"84":{},"88":{},"95":{},"102":{}},"component":{},"keyword":{}}],["out",{"_index":61,"title":{"88-4":{},"88-10":{},"88-14":{}},"name":{},"text":{"2":{},"5":{},"8":{},"10":{},"12":{},"19":{},"20":{},"49":{},"59":{},"62":{},"71":{},"85":{},"88":{},"91":{},"92":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["out/read",{"_index":5331,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["out_frag_color",{"_index":2799,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["out_norm",{"_index":5313,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["out_po",{"_index":4868,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["out_valu",{"_index":2770,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["outcolor",{"_index":3209,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["outcolor.rgb",{"_index":3215,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["outcolor[k",{"_index":3531,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["outer",{"_index":4211,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["outlin",{"_index":1389,"title":{},"name":{},"text":{"13":{},"88":{}},"component":{},"keyword":{}}],["outperform",{"_index":4845,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["outpo",{"_index":4006,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["outposit",{"_index":3965,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["output",{"_index":707,"title":{"84-4":{},"84-5":{}},"name":{},"text":{"7":{},"8":{},"12":{},"14":{},"19":{},"20":{},"26":{},"31":{},"48":{},"51":{},"54":{},"62":{},"64":{},"66":{},"71":{},"84":{},"85":{},"91":{},"93":{},"95":{},"99":{},"103":{},"106":{},"107":{},"109":{},"113":{}},"component":{},"keyword":{}}],["output.po",{"_index":1576,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["output.posit",{"_index":3971,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["output.uv",{"_index":1574,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["outsid",{"_index":3857,"title":{},"name":{},"text":{"82":{},"100":{}},"component":{},"keyword":{}}],["over",{"_index":813,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"19":{},"20":{},"37":{},"38":{},"46":{},"47":{},"50":{},"52":{},"56":{},"59":{},"63":{},"64":{},"74":{},"75":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"98":{},"104":{},"107":{},"108":{},"110":{}},"component":{},"keyword":{}}],["overal",{"_index":1482,"title":{},"name":{},"text":{"13":{},"86":{},"91":{},"94":{},"95":{},"96":{},"100":{},"101":{},"103":{},"104":{},"108":{}},"component":{},"keyword":{}}],["overestim",{"_index":1285,"title":{},"name":{},"text":{"12":{},"19":{},"53":{}},"component":{},"keyword":{}}],["overflow",{"_index":1845,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["overh",{"_index":841,"title":{},"name":{},"text":{"8":{},"100":{}},"component":{},"keyword":{}}],["overhead",{"_index":1205,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"86":{},"90":{},"94":{},"96":{},"100":{},"101":{},"102":{}},"component":{},"keyword":{}}],["overlap",{"_index":1773,"title":{},"name":{},"text":{"38":{},"47":{},"93":{},"104":{}},"component":{},"keyword":{}}],["overlay",{"_index":3421,"title":{"70-2":{}},"name":{},"text":{"70":{},"100":{}},"component":{},"keyword":{}}],["overli",{"_index":4859,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["overrid",{"_index":1000,"title":{},"name":{},"text":{"11":{},"69":{}},"component":{},"keyword":{}}],["overview",{"_index":1141,"title":{"12":{},"37-1":{},"40-1":{},"41-1":{},"46-1":{},"49-1":{},"50-1":{},"51-1":{},"52-1":{},"54-1":{},"55-1":{},"56-1":{},"57-1":{},"58-1":{},"59-1":{},"60-1":{},"61-1":{},"62-1":{},"65-1":{},"66-1":{},"67-1":{},"69-1":{},"71-1":{},"75-1":{},"77-1":{},"78-1":{},"83-1":{},"84-1":{},"85-1":{},"86-2":{},"88-1":{},"89-1":{},"90-1":{},"91-1":{},"92-1":{},"93-1":{},"94-1":{},"95-1":{},"95-11":{},"96-1":{},"97-1":{},"98-1":{},"99-1":{},"103-1":{},"104-1":{},"105-1":{},"106-1":{},"107-1":{},"108-1":{},"109-1":{},"110-1":{},"111-1":{},"113-1":{}},"name":{},"text":{"95":{},"104":{}},"component":{},"keyword":{}}],["overvoorde’",{"_index":4891,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["overwritten",{"_index":2292,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["owner",{"_index":246,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["ownership",{"_index":3736,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["o’shea",{"_index":354,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["p",{"_index":1974,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["p30",{"_index":4636,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["pack",{"_index":1185,"title":{},"name":{},"text":{"12":{},"20":{},"56":{},"71":{},"90":{},"96":{}},"component":{},"keyword":{}}],["packag",{"_index":4197,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["pad",{"_index":4819,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["page",{"_index":239,"title":{},"name":{},"text":{"2":{},"7":{},"86":{}},"component":{},"keyword":{}}],["painless",{"_index":82,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["pair",{"_index":4260,"title":{},"name":{},"text":{"88":{},"104":{}},"component":{},"keyword":{}}],["palloc",{"_index":4047,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["pan",{"_index":893,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["panel",{"_index":1249,"title":{},"name":{},"text":{"12":{},"20":{},"56":{},"109":{}},"component":{},"keyword":{}}],["paper",{"_index":1880,"title":{},"name":{},"text":{"40":{},"48":{}},"component":{},"keyword":{}}],["parabola",{"_index":4502,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["parabolas.w",{"_index":4506,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["parallel",{"_index":517,"title":{},"name":{},"text":{"5":{},"13":{},"48":{},"93":{},"94":{},"104":{},"113":{}},"component":{},"keyword":{}}],["param",{"_index":4395,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["paramet",{"_index":1197,"title":{},"name":{},"text":{"12":{},"17":{},"20":{},"26":{},"31":{},"39":{},"52":{},"57":{},"59":{},"61":{},"67":{},"77":{},"95":{},"98":{},"100":{},"102":{},"110":{}},"component":{},"keyword":{}}],["parameter",{"_index":5306,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["parkin",{"_index":349,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["pars",{"_index":461,"title":{},"name":{},"text":{"4":{},"26":{},"31":{}},"component":{},"keyword":{}}],["parser",{"_index":493,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["part",{"_index":182,"title":{},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"13":{},"19":{},"21":{},"26":{},"31":{},"38":{},"43":{},"47":{},"56":{},"59":{},"66":{},"67":{},"74":{},"78":{},"84":{},"85":{},"86":{},"90":{},"94":{},"96":{},"98":{},"100":{},"101":{},"103":{},"110":{}},"component":{},"keyword":{}}],["parti",{"_index":217,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{},"keyword":{}}],["partial",{"_index":3175,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["particl",{"_index":1270,"title":{},"name":{},"text":{"12":{},"17":{},"19":{},"22":{},"82":{},"87":{}},"component":{},"keyword":{}}],["particular",{"_index":1283,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"56":{},"85":{},"86":{},"90":{},"91":{},"93":{},"95":{},"99":{},"103":{}},"component":{},"keyword":{}}],["particularli",{"_index":1218,"title":{},"name":{},"text":{"12":{},"20":{},"101":{},"104":{}},"component":{},"keyword":{}}],["pass",{"_index":786,"title":{"103":{},"106":{},"12-11":{},"12-14":{},"12-16":{},"13-7":{},"20-10":{},"20-13":{},"20-15":{},"93-7":{},"103-2":{},"103-3":{}},"name":{},"text":{"8":{},"12":{},"13":{},"17":{},"19":{},"20":{},"22":{},"37":{},"38":{},"40":{},"41":{},"46":{},"47":{},"49":{},"51":{},"52":{},"54":{},"56":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{},"74":{},"77":{},"78":{},"79":{},"82":{},"83":{},"84":{},"85":{},"91":{},"92":{},"93":{},"94":{},"95":{},"97":{},"99":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["past",{"_index":2923,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["patch",{"_index":905,"title":{"77":{},"12-81":{},"19-29":{}},"name":{},"text":{"9":{},"12":{},"19":{},"61":{},"77":{},"109":{}},"component":{},"keyword":{}}],["patch_control_points_triangl",{"_index":3160,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["patchcontrolpoint",{"_index":3085,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["path",{"_index":932,"title":{},"name":{},"text":{"10":{},"15":{},"54":{},"85":{},"94":{},"95":{},"96":{},"100":{},"101":{},"107":{}},"component":{},"keyword":{}}],["pattern",{"_index":526,"title":{},"name":{},"text":{"5":{},"15":{},"49":{},"56":{},"58":{},"75":{},"101":{}},"component":{},"keyword":{}}],["pay",{"_index":1477,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["payload",{"_index":3489,"title":{},"name":{},"text":{"71":{},"83":{}},"component":{},"keyword":{}}],["pcallbackdata",{"_index":4000,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["pconditionalrenderingbegin",{"_index":2322,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["pcreateinfo",{"_index":4045,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["pe",{"_index":1967,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["peculiar",{"_index":4257,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["peel",{"_index":1116,"title":{"40":{},"12-52":{},"17-27":{}},"name":{},"text":{"12":{},"17":{},"40":{}},"component":{},"keyword":{}}],["penalti",{"_index":3856,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["pend",{"_index":1999,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["per",{"_index":812,"title":{"33":{},"41":{},"12-51":{},"17-26":{},"71-8":{}},"name":{},"text":{"8":{},"12":{},"13":{},"17":{},"19":{},"41":{},"49":{},"52":{},"55":{},"56":{},"59":{},"62":{},"71":{},"79":{},"82":{},"83":{},"84":{},"85":{},"86":{},"91":{},"92":{},"94":{},"95":{},"96":{},"99":{},"101":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["per_mesh_data",{"_index":4798,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["per_mesh_data.model_matrix",{"_index":4800,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["percept",{"_index":4623,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["perf",{"_index":4705,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["perfect",{"_index":1878,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["perfectli",{"_index":4281,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["perform",{"_index":49,"title":{"7-13":{},"12-2":{},"20-1":{},"94-8":{},"95-16":{},"95-20":{},"95-23":{},"95-26":{},"95-29":{},"109-7":{}},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"12":{},"13":{},"20":{},"37":{},"38":{},"41":{},"46":{},"47":{},"49":{},"51":{},"52":{},"56":{},"59":{},"64":{},"67":{},"75":{},"82":{},"85":{},"88":{},"90":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["perhap",{"_index":2256,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["period",{"_index":2272,"title":{"50-3":{}},"name":{},"text":{"50":{},"93":{},"94":{},"98":{},"110":{}},"component":{},"keyword":{}}],["perman",{"_index":4359,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["permeshdata",{"_index":4796,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["permiss",{"_index":268,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["permut",{"_index":4021,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["persist",{"_index":1458,"title":{},"name":{},"text":{"13":{},"101":{}},"component":{},"keyword":{}}],["perspect",{"_index":3184,"title":{},"name":{},"text":{"62":{},"92":{}},"component":{},"keyword":{}}],["pervertexattr",{"_index":3197,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["pervertexext",{"_index":3185,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["pervertexkhr",{"_index":3192,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["peter",{"_index":351,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["pfixedrateflag",{"_index":5039,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["pfn_vkcmdbeginrenderingkhr",{"_index":3048,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pfn_vkcmdendrenderingkhr",{"_index":3050,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["phase",{"_index":1234,"title":{},"name":{},"text":{"12":{},"20":{},"108":{}},"component":{},"keyword":{}}],["phi",{"_index":3904,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["phone",{"_index":2122,"title":{},"name":{},"text":{"48":{},"96":{},"97":{},"98":{},"103":{},"105":{},"107":{},"110":{},"113":{}},"component":{},"keyword":{}}],["physic",{"_index":1242,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"20":{},"38":{},"47":{},"49":{},"70":{},"78":{},"83":{},"95":{},"98":{},"101":{},"106":{},"108":{},"109":{},"110":{},"114":{}},"component":{},"keyword":{}}],["physical_device_features2",{"_index":5583,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["physical_device_features2.pnext",{"_index":5585,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["physical_device_features2.styp",{"_index":5584,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["physical_device_id_propreti",{"_index":3569,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["physical_device_id_propreties.styp",{"_index":3570,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["physical_device_memory_budget_properti",{"_index":3425,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["physical_device_memory_budget_properties.heapbudget[i",{"_index":3468,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["physical_device_memory_budget_properties.heapusage[i",{"_index":3467,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["physical_device_memory_budget_properties.pnext",{"_index":3432,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["physical_device_memory_budget_properties.styp",{"_index":3430,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["physical_device_properties_2",{"_index":3573,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["physical_device_properties_2.pnext",{"_index":3575,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["physical_device_properties_2.styp",{"_index":3574,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["physicalstoragebuff",{"_index":2179,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["physicalstoragebuffer64",{"_index":2183,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["physicalstoragebufferaddress",{"_index":2186,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pictur",{"_index":5341,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["pilot",{"_index":4888,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["pin",{"_index":5206,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["ping",{"_index":4337,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["pinputassemblyst",{"_index":3478,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["pip",{"_index":91,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["pipelin",{"_index":612,"title":{"66":{},"97":{},"104":{},"105":{},"12-12":{},"12-13":{},"12-76":{},"19-24":{},"20-11":{},"20-12":{},"60-3":{},"61-2":{},"66-2":{},"66-3":{},"69-3":{},"71-4":{},"77-2":{},"83-7":{},"83-10":{},"89-2":{},"97-2":{},"97-3":{},"104-3":{},"105-2":{},"105-3":{}},"name":{},"text":{"7":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"24":{},"38":{},"47":{},"48":{},"51":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"66":{},"67":{},"69":{},"71":{},"74":{},"77":{},"80":{},"81":{},"82":{},"83":{},"85":{},"88":{},"89":{},"91":{},"93":{},"95":{},"96":{},"97":{},"100":{},"101":{},"104":{},"105":{},"107":{},"113":{}},"component":{},"keyword":{}}],["pipeline.background",{"_index":3164,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline.baselin",{"_index":3143,"title":{},"name":{},"text":{"61":{},"69":{}},"component":{},"keyword":{}}],["pipeline.dynamically_tessel",{"_index":3819,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["pipeline.statically_tessel",{"_index":3817,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["pipeline.tessel",{"_index":3158,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline/subpass",{"_index":4824,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["pipeline1",{"_index":3065,"title":{},"name":{},"text":{"61":{},"89":{}},"component":{},"keyword":{}}],["pipeline2",{"_index":3067,"title":{},"name":{},"text":{"61":{},"89":{}},"component":{},"keyword":{}}],["pipeline3",{"_index":3069,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline4",{"_index":3071,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline_barri",{"_index":5219,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["pipeline_cach",{"_index":1077,"title":{},"name":{},"text":{"11":{},"61":{},"66":{},"69":{},"77":{},"105":{}},"component":{},"keyword":{}}],["pipeline_cr",{"_index":3033,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_create.colorattachmentcount",{"_index":3025,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_create.depthattachmentformat",{"_index":3028,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_create.pcolorattachmentformat",{"_index":3026,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_create.pnext",{"_index":3023,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_create.stencilattachmentformat",{"_index":3030,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_create_info",{"_index":1078,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["pipeline_create{vk_structure_type_pipeline_rendering_create_info_khr",{"_index":3022,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["pipeline_layout",{"_index":1656,"title":{},"name":{},"text":{"34":{},"42":{},"52":{},"55":{}},"component":{},"keyword":{}}],["pipeline_layout[shadertypebas",{"_index":4165,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["pipeline_layout[shadertypemateri",{"_index":4177,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["pipeline_layouts.background",{"_index":3162,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline_layouts.baselin",{"_index":3148,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline_layouts.dynamically_tessel",{"_index":3818,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["pipeline_layouts.statically_tessel",{"_index":3816,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["pipeline_layouts.tessel",{"_index":3123,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["pipeline_library.fragment_output_interfac",{"_index":3330,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library.pre_rasterization_shad",{"_index":3328,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library.vertex_input_interfac",{"_index":3310,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info",{"_index":3300,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.flag",{"_index":3303,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.pinputassemblyst",{"_index":3307,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.pnext",{"_index":3306,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.pstag",{"_index":3327,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.pvertexinputst",{"_index":3308,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.stagecount",{"_index":3326,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipeline_library_create_info.styp",{"_index":3301,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["pipelinestag",{"_index":1829,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["pipeline’",{"_index":4400,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["pitfal",{"_index":4386,"title":{},"name":{},"text":{"88":{},"95":{}},"component":{},"keyword":{}}],["pixel",{"_index":1114,"title":{"33":{},"41":{},"12-51":{},"17-26":{}},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"40":{},"41":{},"48":{},"53":{},"63":{},"64":{},"86":{},"90":{},"92":{},"99":{},"100":{},"101":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["place",{"_index":141,"title":{},"name":{},"text":{"2":{},"4":{},"12":{},"13":{},"19":{},"41":{},"49":{},"55":{},"56":{},"64":{},"83":{},"88":{},"95":{},"100":{},"102":{}},"component":{},"keyword":{}}],["plain",{"_index":3232,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["plan",{"_index":935,"title":{},"name":{},"text":{"10":{},"91":{},"93":{},"109":{}},"component":{},"keyword":{}}],["plane",{"_index":2924,"title":{},"name":{},"text":{"59":{},"83":{}},"component":{},"keyword":{}}],["plate",{"_index":5625,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["platform",{"_index":165,"title":{"4-7":{},"15-1":{}},"name":{},"text":{"2":{},"4":{},"11":{},"12":{},"13":{},"15":{},"20":{},"48":{},"54":{},"65":{},"74":{},"95":{},"96":{},"98":{},"109":{},"110":{},"114":{}},"component":{},"keyword":{}}],["platform.create_render_context(*device.get",{"_index":3392,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["platform__android",{"_index":1524,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["platform__linux",{"_index":1527,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["platform__linux_d2d",{"_index":1526,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["platform__maco",{"_index":1528,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["platform__window",{"_index":1525,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["platform_id",{"_index":3588,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["platform_ids(num_platform",{"_index":3581,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["platform_ids.data",{"_index":3583,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["plausibl",{"_index":4558,"title":{},"name":{},"text":{"90":{},"93":{}},"component":{},"keyword":{}}],["play",{"_index":705,"title":{},"name":{},"text":{"7":{},"88":{}},"component":{},"keyword":{}}],["pleas",{"_index":17,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"33":{},"56":{},"71":{},"95":{}},"component":{},"keyword":{}}],["plot",{"_index":4027,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["plu",{"_index":5157,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["plug",{"_index":4785,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["plugin",{"_index":719,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["plugins/tool",{"_index":718,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["plung",{"_index":5270,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["pmessag",{"_index":2438,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["pmessageidnam",{"_index":2437,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["pmultisamplest",{"_index":5115,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["pnext",{"_index":2138,"title":{},"name":{},"text":{"49":{},"54":{},"56":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{},"69":{},"70":{},"75":{},"77":{},"78":{},"85":{},"89":{},"91":{},"99":{},"101":{},"114":{}},"component":{},"keyword":{}}],["po",{"_index":1556,"title":{},"name":{},"text":{"26":{},"31":{},"49":{},"89":{},"90":{}},"component":{},"keyword":{}}],["point",{"_index":57,"title":{"77":{},"12-81":{},"19-29":{},"37-4":{},"46-4":{},"90-2":{}},"name":{},"text":{"2":{},"12":{},"13":{},"17":{},"19":{},"20":{},"24":{},"34":{},"38":{},"42":{},"43":{},"47":{},"49":{},"54":{},"55":{},"56":{},"58":{},"60":{},"61":{},"62":{},"77":{},"82":{},"83":{},"88":{},"90":{},"93":{},"95":{},"96":{},"98":{},"101":{},"102":{},"103":{},"104":{},"110":{},"111":{}},"component":{},"keyword":{}}],["pointer",{"_index":994,"title":{"49-8":{},"49-9":{}},"name":{},"text":{"11":{},"49":{},"54":{},"55":{},"56":{},"60":{},"70":{},"75":{},"85":{},"95":{}},"component":{},"keyword":{}}],["pointer.v",{"_index":2218,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pointertofloat",{"_index":2213,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pointertofloat(int_point",{"_index":2217,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pointertofloat(uvec2(lo",{"_index":2230,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["points/lines/triangl",{"_index":2921,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["poll",{"_index":1852,"title":{},"name":{},"text":{"38":{},"47":{},"98":{},"110":{}},"component":{},"keyword":{}}],["polygon",{"_index":1380,"title":{},"name":{},"text":{"12":{},"18":{},"48":{}},"component":{},"keyword":{}}],["pong",{"_index":4338,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["pool",{"_index":456,"title":{"38-4":{},"38-5":{},"47-4":{},"47-5":{},"94-7":{}},"name":{},"text":{"4":{},"12":{},"13":{},"20":{},"38":{},"47":{},"55":{},"84":{},"94":{},"95":{},"96":{}},"component":{},"keyword":{}}],["poor",{"_index":4561,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["pop",{"_index":593,"title":{"93-5":{}},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["popul",{"_index":2283,"title":{},"name":{},"text":{"51":{},"78":{}},"component":{},"keyword":{}}],["popular",{"_index":1780,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["port",{"_index":192,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"104":{}},"component":{},"keyword":{}}],["portability_featur",{"_index":3835,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["portability_features.styp",{"_index":3836,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["portabl",{"_index":1132,"title":{"78":{},"12-75":{},"19-23":{}},"name":{},"text":{"12":{},"13":{},"19":{},"78":{},"114":{}},"component":{},"keyword":{}}],["portion",{"_index":2276,"title":{},"name":{},"text":{"50":{},"102":{},"109":{}},"component":{},"keyword":{}}],["portrait",{"_index":1244,"title":{},"name":{},"text":{"12":{},"20":{},"109":{}},"component":{},"keyword":{}}],["pose",{"_index":4912,"title":{},"name":{},"text":{"96":{},"98":{},"110":{}},"component":{},"keyword":{}}],["posit",{"_index":2164,"title":{},"name":{},"text":{"49":{},"52":{},"54":{},"59":{},"67":{},"71":{},"83":{},"84":{},"89":{},"91":{},"95":{},"101":{},"103":{},"108":{},"109":{}},"component":{},"keyword":{}}],["position.i",{"_index":3537,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["position.x",{"_index":3536,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["position0",{"_index":1557,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["positionrefer",{"_index":2174,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["positiontransform",{"_index":3499,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["possibl",{"_index":84,"title":{},"name":{},"text":{"2":{},"8":{},"12":{},"13":{},"15":{},"17":{},"19":{},"38":{},"41":{},"43":{},"47":{},"49":{},"54":{},"56":{},"61":{},"64":{},"66":{},"71":{},"77":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"96":{},"98":{},"99":{},"101":{},"103":{},"104":{},"107":{},"108":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["post",{"_index":1263,"title":{"93-2":{},"93-3":{},"93-4":{}},"name":{},"text":{"12":{},"19":{},"20":{},"59":{},"85":{},"91":{},"93":{},"99":{},"101":{}},"component":{},"keyword":{}}],["potent",{"_index":2874,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["potenti",{"_index":1239,"title":{"59-6":{}},"name":{},"text":{"12":{},"20":{},"67":{},"85":{},"88":{},"90":{},"98":{},"104":{},"106":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["power",{"_index":832,"title":{"13-1":{}},"name":{},"text":{"8":{},"13":{},"49":{},"56":{},"91":{},"98":{},"99":{},"100":{},"101":{},"104":{},"110":{}},"component":{},"keyword":{}}],["powervr",{"_index":5505,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ppenabledextensionnam",{"_index":4034,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["ppenabledlayernam",{"_index":4187,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["ppushconstantrang",{"_index":4074,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["practic",{"_index":47,"title":{"90-9":{},"91-7":{},"92-6":{},"93-10":{},"94-10":{},"95-31":{},"96-6":{},"97-6":{},"98-6":{},"100-3":{},"101-3":{},"103-6":{},"104-5":{},"105-6":{},"106-7":{},"107-4":{},"108-7":{},"109-8":{},"110-6":{},"113-4":{}},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"12":{},"17":{},"43":{},"71":{},"85":{},"88":{},"95":{},"98":{},"100":{},"101":{},"108":{},"110":{}},"component":{},"keyword":{}}],["pre",{"_index":85,"title":{"109-2":{}},"name":{},"text":{"2":{},"12":{},"19":{},"66":{},"67":{},"82":{},"95":{},"97":{},"105":{},"109":{},"111":{}},"component":{},"keyword":{}}],["pre_rotate_mat",{"_index":5419,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["pre_transform",{"_index":5403,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["precis",{"_index":1274,"title":{"91-6":{}},"name":{},"text":{"12":{},"17":{},"24":{},"38":{},"47":{},"50":{},"61":{},"90":{},"91":{}},"component":{},"keyword":{}}],["predict",{"_index":1406,"title":{},"name":{},"text":{"13":{},"98":{},"110":{}},"component":{},"keyword":{}}],["prefer",{"_index":92,"title":{},"name":{},"text":{"2":{},"7":{},"38":{},"47":{},"96":{},"98":{},"110":{},"111":{}},"component":{},"keyword":{}}],["prefix",{"_index":530,"title":{},"name":{},"text":{"5":{},"15":{},"111":{}},"component":{},"keyword":{}}],["premultipl",{"_index":2884,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["prepackag",{"_index":1404,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["prepar",{"_index":1680,"title":{"37-7":{},"46-7":{}},"name":{},"text":{"37":{},"46":{},"51":{},"97":{},"105":{},"109":{}},"component":{},"keyword":{}}],["prepare_instance_data",{"_index":3469,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["prepare_meshlet",{"_index":3361,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["prepare_opencl_resourc",{"_index":3567,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["prepare_time_stamp_queri",{"_index":1803,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["preprocessor",{"_index":3044,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["prerequisit",{"_index":407,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["presenc",{"_index":2934,"title":{},"name":{},"text":{"59":{},"104":{}},"component":{},"keyword":{}}],["present",{"_index":1282,"title":{"98-3":{},"110-3":{}},"name":{},"text":{"12":{},"17":{},"43":{},"49":{},"54":{},"56":{},"57":{},"59":{},"69":{},"78":{},"88":{},"92":{},"93":{},"95":{},"98":{},"101":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["present_src_khr",{"_index":5095,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["presentation’",{"_index":1994,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["preserv",{"_index":5106,"title":{},"name":{},"text":{"100":{},"101":{},"109":{}},"component":{},"keyword":{}}],["presolveattach",{"_index":4692,"title":{},"name":{},"text":{"92":{},"101":{}},"component":{},"keyword":{}}],["press",{"_index":887,"title":{},"name":{},"text":{"9":{},"54":{},"70":{}},"component":{},"keyword":{}}],["pressur",{"_index":4457,"title":{"90-8":{}},"name":{},"text":{"90":{},"96":{},"109":{}},"component":{},"keyword":{}}],["pretend",{"_index":2846,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["pretransform",{"_index":5359,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["pretti",{"_index":1869,"title":{},"name":{},"text":{"38":{},"47":{},"55":{},"84":{}},"component":{},"keyword":{}}],["prevent",{"_index":1204,"title":{},"name":{},"text":{"12":{},"20":{},"64":{},"71":{},"94":{},"96":{},"100":{},"113":{}},"component":{},"keyword":{}}],["previou",{"_index":1200,"title":{},"name":{},"text":{"12":{},"20":{},"37":{},"38":{},"43":{},"46":{},"47":{},"51":{},"62":{},"64":{},"75":{},"86":{},"92":{},"97":{},"98":{},"100":{},"103":{},"104":{},"105":{},"106":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["previous",{"_index":755,"title":{},"name":{},"text":{"7":{},"60":{},"61":{},"89":{},"97":{},"98":{},"105":{},"110":{}},"component":{},"keyword":{}}],["price",{"_index":1476,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["primari",{"_index":2640,"title":{},"name":{},"text":{"56":{},"82":{},"86":{},"94":{},"103":{}},"component":{},"keyword":{}}],["primarili",{"_index":580,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{},"keyword":{}}],["primit",{"_index":1139,"title":{"59":{},"12-90":{},"19-38":{},"59-2":{},"59-4":{},"71-8":{}},"name":{},"text":{"12":{},"13":{},"19":{},"58":{},"59":{},"61":{},"62":{},"71":{},"75":{},"82":{},"91":{},"101":{},"104":{}},"component":{},"keyword":{}}],["primitiveboolparam",{"_index":3073,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["primitiverestarten",{"_index":3091,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["print",{"_index":238,"title":{},"name":{},"text":{"2":{},"10":{},"84":{}},"component":{},"keyword":{}}],["printf",{"_index":1138,"title":{"84":{},"12-89":{},"19-37":{},"84-2":{},"84-4":{},"84-5":{},"84-7":{}},"name":{},"text":{"12":{},"19":{},"84":{}},"component":{},"keyword":{}}],["printf(\"transform",{"_index":3974,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["prior",{"_index":632,"title":{},"name":{},"text":{"7":{},"8":{},"60":{},"65":{},"102":{},"107":{}},"component":{},"keyword":{}}],["priorit",{"_index":4240,"title":{},"name":{},"text":{"86":{},"93":{}},"component":{},"keyword":{}}],["prioriti",{"_index":4698,"title":{"93-6":{}},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["privat",{"_index":539,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["pro",{"_index":3348,"title":{"67-4":{}},"name":{},"text":{},"component":{},"keyword":{}}],["probabl",{"_index":4378,"title":{},"name":{},"text":{"88":{},"96":{},"111":{}},"component":{},"keyword":{}}],["problem",{"_index":1183,"title":{"88-2":{},"96-2":{}},"name":{},"text":{"12":{},"13":{},"20":{},"54":{},"56":{},"59":{},"64":{},"84":{},"86":{},"88":{},"90":{},"93":{},"96":{},"98":{},"107":{},"110":{}},"component":{},"keyword":{}}],["problemat",{"_index":2498,"title":{},"name":{},"text":{"54":{},"88":{},"93":{}},"component":{},"keyword":{}}],["procedur",{"_index":35,"title":{"2-7":{}},"name":{},"text":{"12":{},"19":{},"49":{},"65":{},"76":{},"90":{},"101":{}},"component":{},"keyword":{}}],["proces",{"_index":3384,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["process",{"_index":81,"title":{"93-2":{},"93-3":{},"93-4":{}},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"19":{},"20":{},"43":{},"49":{},"59":{},"62":{},"64":{},"67":{},"71":{},"74":{},"84":{},"85":{},"86":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"101":{},"103":{},"104":{},"105":{},"107":{},"109":{},"110":{}},"component":{},"keyword":{}}],["produc",{"_index":1877,"title":{"88-5":{}},"name":{},"text":{"40":{},"41":{},"48":{},"59":{},"62":{},"84":{},"88":{},"107":{}},"component":{},"keyword":{}}],["product",{"_index":3259,"title":{},"name":{},"text":{"64":{},"90":{}},"component":{},"keyword":{}}],["profession",{"_index":3532,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["profil",{"_index":387,"title":{"114":{},"12-92":{},"21-2":{},"103-4":{},"114-1":{},"114-2":{}},"name":{},"text":{"4":{},"7":{},"12":{},"17":{},"20":{},"21":{},"38":{},"47":{},"50":{},"90":{},"91":{},"92":{},"93":{},"94":{},"96":{},"99":{},"101":{},"103":{},"109":{},"114":{}},"component":{},"keyword":{}}],["profile_nam",{"_index":5597,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["profile_properti",{"_index":5596,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["profile_spec_vers",{"_index":5598,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["profile_support",{"_index":5599,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["program",{"_index":809,"title":{},"name":{},"text":{"8":{},"13":{},"26":{},"31":{},"51":{},"55":{},"84":{},"106":{},"107":{}},"component":{},"keyword":{}}],["program.addshader(&shad",{"_index":1596,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["program.getintermediate(languag",{"_index":1599,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["program.link(messag",{"_index":1597,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["programm",{"_index":2698,"title":{},"name":{},"text":{"56":{},"95":{}},"component":{},"keyword":{}}],["progress",{"_index":4271,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["prohibit",{"_index":13,"title":{},"name":{},"text":{"1":{},"101":{}},"component":{},"keyword":{}}],["project",{"_index":54,"title":{"7-31":{},"7-33":{},"14-4":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"13":{},"14":{},"15":{},"26":{},"31":{},"55":{},"95":{},"109":{},"111":{}},"component":{},"keyword":{}}],["promot",{"_index":2648,"title":{},"name":{},"text":{"56":{},"61":{},"69":{},"77":{},"101":{}},"component":{},"keyword":{}}],["prompt",{"_index":623,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["pronounc",{"_index":4760,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["proper",{"_index":1683,"title":{},"name":{},"text":{"37":{},"38":{},"46":{},"47":{},"59":{},"70":{},"74":{},"84":{}},"component":{},"keyword":{}}],["properli",{"_index":1821,"title":{},"name":{},"text":{"38":{},"47":{},"54":{},"74":{},"84":{},"88":{},"92":{},"98":{},"101":{},"108":{},"110":{}},"component":{},"keyword":{}}],["properti",{"_index":909,"title":{"70-2":{}},"name":{},"text":{"9":{},"56":{},"66":{},"70":{},"74":{},"75":{},"91":{},"92":{},"99":{},"101":{},"106":{},"109":{},"114":{}},"component":{},"keyword":{}}],["properties.driververs",{"_index":916,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["proport",{"_index":4993,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["propos",{"_index":3347,"title":{},"name":{},"text":{"66":{},"85":{}},"component":{},"keyword":{}}],["prove",{"_index":2505,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{},"keyword":{}}],["provenzano",{"_index":328,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["provid",{"_index":135,"title":{},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"47":{},"48":{},"49":{},"54":{},"55":{},"59":{},"60":{},"61":{},"62":{},"64":{},"65":{},"67":{},"68":{},"69":{},"74":{},"75":{},"77":{},"78":{},"82":{},"83":{},"84":{},"85":{},"89":{},"92":{},"94":{},"96":{},"97":{},"98":{},"99":{},"101":{},"102":{},"103":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["provis",{"_index":698,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["psetlayout",{"_index":4072,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["pseudo",{"_index":4875,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["pseudocod",{"_index":3886,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["pshader",{"_index":4048,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["psnr",{"_index":4983,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["pstage",{"_index":4153,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["psurfacecap",{"_index":4956,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["ptile",{"_index":5324,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["ptr_posit",{"_index":2260,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptr_positions.positions[gl_vertexindex",{"_index":2263,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["public",{"_index":488,"title":{},"name":{},"text":{"4":{},"5":{},"11":{},"14":{}},"component":{},"keyword":{}}],["pull",{"_index":294,"title":{},"name":{},"text":{"2":{},"95":{}},"component":{},"keyword":{}}],["pure",{"_index":1523,"title":{},"name":{},"text":{"15":{},"83":{},"90":{},"91":{},"95":{}},"component":{},"keyword":{}}],["purpos",{"_index":237,"title":{},"name":{},"text":{"2":{},"7":{},"56":{},"67":{},"71":{},"88":{},"90":{},"99":{},"109":{}},"component":{},"keyword":{}}],["puserdata",{"_index":4001,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["push",{"_index":594,"title":{"79":{},"12-56":{},"19-4":{},"95-14":{}},"name":{},"text":{"7":{},"12":{},"13":{},"19":{},"20":{},"41":{},"49":{},"52":{},"56":{},"74":{},"79":{},"85":{},"90":{},"91":{},"94":{},"95":{},"96":{},"97":{},"102":{},"105":{},"107":{},"109":{}},"component":{},"keyword":{}}],["push_const",{"_index":2177,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["push_const_block",{"_index":2371,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["push_const_block.color",{"_index":2365,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["push_const_block.model_matrix",{"_index":2364,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["push_constant_ranges[shadertypebas",{"_index":4061,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["push_constant_ranges[shadertypemateri",{"_index":4128,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["put",{"_index":2344,"title":{"55-5":{}},"name":{},"text":{"52":{},"55":{},"59":{},"96":{},"104":{}},"component":{},"keyword":{}}],["puzzl",{"_index":4808,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["pvalu",{"_index":4838,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["pvertexinputst",{"_index":3477,"title":{},"name":{},"text":{"71":{},"89":{}},"component":{},"keyword":{}}],["pvrtc1",{"_index":5467,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["python",{"_index":459,"title":{},"name":{},"text":{"4":{},"7":{},"10":{}},"component":{},"keyword":{}}],["qp",{"_index":1971,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["qs",{"_index":1969,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["quad",{"_index":1316,"title":{},"name":{},"text":{"12":{},"19":{},"54":{},"56":{},"74":{},"75":{}},"component":{},"keyword":{}}],["quads.frag",{"_index":2782,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["qualifi",{"_index":2634,"title":{"56-13":{}},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["qualiti",{"_index":23,"title":{"2-1":{},"7-11":{}},"name":{},"text":{"2":{},"7":{},"91":{},"99":{},"101":{}},"component":{},"keyword":{}}],["queri",{"_index":1111,"title":{"38":{},"47":{},"80":{},"12-42":{},"12-49":{},"12-60":{},"17-17":{},"17-24":{},"19-8":{},"38-2":{},"38-4":{},"38-5":{},"47-2":{},"47-4":{},"47-5":{},"99-7":{},"99-11":{}},"name":{},"text":{"12":{},"17":{},"19":{},"38":{},"47":{},"48":{},"49":{},"50":{},"51":{},"56":{},"60":{},"64":{},"78":{},"80":{},"89":{},"90":{},"92":{},"95":{},"98":{},"99":{},"101":{},"102":{},"110":{}},"component":{},"keyword":{}}],["query_pool_create_info",{"_index":1805,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["query_pool_info",{"_index":2083,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["query_pool_info.querycount",{"_index":2088,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["query_pool_info.querytyp",{"_index":2086,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["query_pool_info.styp",{"_index":2084,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["query_pool_timestamp",{"_index":2090,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["querycount",{"_index":1811,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["querytyp",{"_index":1810,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["question",{"_index":1163,"title":{},"name":{},"text":{"12":{},"20":{},"90":{},"95":{},"96":{}},"component":{},"keyword":{}}],["queu",{"_index":5567,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["queue",{"_index":1262,"title":{"88-9":{},"88-14":{},"93-5":{},"93-6":{}},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"37":{},"38":{},"46":{},"47":{},"50":{},"54":{},"74":{},"75":{},"88":{},"93":{},"94":{},"95":{},"98":{},"103":{},"104":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["queuewaitidl",{"_index":4350,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["quickli",{"_index":2208,"title":{},"name":{},"text":{"49":{},"104":{},"111":{},"113":{}},"component":{},"keyword":{}}],["quirk",{"_index":2792,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["quit",{"_index":2180,"title":{},"name":{},"text":{"49":{},"56":{},"74":{},"88":{},"90":{},"91":{},"96":{}},"component":{},"keyword":{}}],["r",{"_index":1973,"title":{},"name":{},"text":{"43":{},"51":{}},"component":{},"keyword":{}}],["r14",{"_index":924,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["r16p0",{"_index":4631,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["r23",{"_index":715,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["r26",{"_index":926,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["r32ui",{"_index":2731,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["r_dot",{"_index":4489,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["r_offset",{"_index":4484,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["radianc",{"_index":1378,"title":{},"name":{},"text":{"12":{},"18":{},"48":{},"83":{}},"component":{},"keyword":{}}],["radio",{"_index":5299,"title":{},"name":{},"text":{"107":{},"113":{}},"component":{},"keyword":{}}],["radiu",{"_index":3534,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["rais",{"_index":1162,"title":{},"name":{},"text":{"12":{},"20":{},"95":{}},"component":{},"keyword":{}}],["ram",{"_index":1489,"title":{},"name":{},"text":{"13":{},"95":{},"104":{}},"component":{},"keyword":{}}],["random",{"_index":1898,"title":{},"name":{},"text":{"41":{},"49":{},"66":{},"106":{}},"component":{},"keyword":{}}],["randomli",{"_index":4022,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["rang",{"_index":74,"title":{"24":{},"29":{},"12-29":{},"12-33":{},"17-4":{},"17-8":{}},"name":{},"text":{"2":{},"11":{},"12":{},"17":{},"24":{},"29":{},"37":{},"46":{},"48":{},"49":{},"74":{},"90":{},"91":{},"98":{},"110":{}},"component":{},"keyword":{}}],["rangethat",{"_index":1277,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{},"keyword":{}}],["rare",{"_index":1485,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["raster",{"_index":1117,"title":{"53":{},"58":{},"12-54":{},"12-88":{},"19-2":{},"19-36":{}},"name":{},"text":{"12":{},"19":{},"48":{},"53":{},"58":{},"61":{},"66":{},"82":{},"91":{},"93":{},"97":{},"105":{}},"component":{},"keyword":{}}],["rasterization_st",{"_index":3093,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterization_state.depthbiasclamp",{"_index":3101,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterization_state.depthbiasconstantfactor",{"_index":3099,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterization_state.depthbiasen",{"_index":3125,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterization_state.depthbiasslopefactor",{"_index":3100,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterization_state.polygonmod",{"_index":3127,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterization_state.rasterizerdiscarden",{"_index":3115,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rasterizationsampl",{"_index":5114,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["rate",{"_index":1128,"title":{"63":{},"64":{},"12-72":{},"19-20":{},"64-1":{},"64-2":{},"99-3":{},"99-14":{}},"name":{},"text":{"12":{},"19":{},"20":{},"43":{},"48":{},"63":{},"64":{},"99":{},"109":{}},"component":{},"keyword":{}}],["rate_dynam",{"_index":1129,"title":{"12-73":{},"19-21":{}},"name":{},"text":{},"component":{},"keyword":{}}],["ratio",{"_index":4230,"title":{},"name":{},"text":{"86":{},"99":{}},"component":{},"keyword":{}}],["rational",{"_index":2691,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["raw",{"_index":186,"title":{},"name":{},"text":{"2":{},"49":{}},"component":{},"keyword":{}}],["ray",{"_index":1120,"title":{"80":{},"81":{},"82":{},"83":{},"12-60":{},"12-61":{},"12-62":{},"12-74":{},"19-8":{},"19-9":{},"19-10":{},"19-22":{},"82-5":{},"83-7":{},"83-10":{}},"name":{},"text":{"12":{},"19":{},"48":{},"80":{},"81":{},"82":{},"83":{}},"component":{},"keyword":{}}],["raydir",{"_index":3958,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["rayorigin",{"_index":3957,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["raytrac",{"_index":3964,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["raytracingreflection::create_blas_inst",{"_index":3936,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["raytracingreflection::create_scen",{"_index":3917,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["re",{"_index":1179,"title":{"109-5":{}},"name":{},"text":{"12":{},"20":{},"66":{},"74":{},"86":{},"88":{},"94":{},"96":{},"97":{},"101":{},"102":{},"105":{},"109":{},"113":{}},"component":{},"keyword":{}}],["reach",{"_index":822,"title":{},"name":{},"text":{"8":{},"67":{},"88":{}},"component":{},"keyword":{}}],["read",{"_index":802,"title":{"92-5":{},"94-9":{},"95-30":{},"103-5":{},"108-5":{}},"name":{},"text":{"8":{},"12":{},"13":{},"19":{},"37":{},"38":{},"46":{},"47":{},"49":{},"55":{},"67":{},"71":{},"84":{},"88":{},"91":{},"95":{},"97":{},"99":{},"100":{},"101":{},"104":{},"105":{},"106":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["read/writ",{"_index":5158,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["read_memoryheap_flags(device_memory_properties.memoryproperties.memoryheaps[i].flags).c_str",{"_index":3459,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["readabl",{"_index":1544,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["readi",{"_index":307,"title":{},"name":{},"text":{"2":{},"70":{},"74":{},"98":{},"110":{}},"component":{},"keyword":{}}],["readm",{"_index":286,"title":{},"name":{"4":{},"5":{},"6":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"text":{"2":{},"7":{},"12":{},"98":{}},"component":{},"keyword":{}}],["readme.adoc",{"_index":150,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["readonli",{"_index":2173,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["reads/writ",{"_index":5325,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["real",{"_index":385,"title":{},"name":{},"text":{"4":{},"8":{},"12":{},"20":{},"38":{},"47":{},"67":{},"75":{},"85":{},"86":{},"91":{},"92":{},"97":{},"105":{},"111":{}},"component":{},"keyword":{}}],["realis",{"_index":4861,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["realist",{"_index":4206,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["realiti",{"_index":1410,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["realli",{"_index":2155,"title":{},"name":{},"text":{"49":{},"56":{},"92":{},"93":{},"98":{},"110":{}},"component":{},"keyword":{}}],["realloc",{"_index":1429,"title":{},"name":{},"text":{"13":{},"86":{},"96":{}},"component":{},"keyword":{}}],["reason",{"_index":799,"title":{},"name":{},"text":{"8":{},"38":{},"47":{},"56":{},"88":{},"90":{},"91":{},"94":{},"96":{},"99":{},"114":{}},"component":{},"keyword":{}}],["rebound",{"_index":2233,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rebuild",{"_index":1319,"title":{},"name":{},"text":{"12":{},"19":{},"34":{},"42":{},"97":{},"105":{}},"component":{},"keyword":{}}],["receiv",{"_index":3476,"title":{},"name":{},"text":{"71":{},"96":{}},"component":{},"keyword":{}}],["recent",{"_index":288,"title":{},"name":{},"text":{"2":{},"90":{},"95":{},"99":{},"108":{}},"component":{},"keyword":{}}],["recommend",{"_index":205,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"66":{},"71":{},"95":{},"99":{},"101":{},"103":{}},"component":{},"keyword":{}}],["reconstruct",{"_index":5314,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["record",{"_index":1084,"title":{"94":{},"103":{},"12-11":{},"20-10":{},"94-3":{}},"name":{},"text":{"12":{},"20":{},"55":{},"85":{},"88":{},"92":{},"94":{},"96":{},"97":{},"101":{},"103":{},"104":{},"105":{}},"component":{},"keyword":{}}],["recreat",{"_index":1112,"title":{"43":{},"12-50":{},"17-25":{},"43-1":{}},"name":{},"text":{"12":{},"13":{},"17":{},"20":{},"43":{},"65":{},"95":{},"97":{},"105":{},"109":{}},"component":{},"keyword":{}}],["rect",{"_index":5391,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["recurs",{"_index":414,"title":{},"name":{},"text":{"4":{},"83":{}},"component":{},"keyword":{}}],["recycl",{"_index":1471,"title":{"94-4":{}},"name":{},"text":{"13":{},"43":{},"88":{},"94":{},"96":{}},"component":{},"keyword":{}}],["redirect",{"_index":3989,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["reduc",{"_index":853,"title":{"91":{},"90-8":{}},"name":{},"text":{"8":{},"9":{},"12":{},"13":{},"19":{},"20":{},"52":{},"61":{},"64":{},"66":{},"67":{},"77":{},"82":{},"83":{},"89":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"105":{},"106":{},"107":{},"108":{},"110":{}},"component":{},"keyword":{}}],["reduct",{"_index":843,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"64":{},"90":{},"92":{},"99":{},"100":{},"108":{}},"component":{},"keyword":{}}],["redund",{"_index":4284,"title":{},"name":{},"text":{"88":{},"100":{}},"component":{},"keyword":{}}],["redundantli",{"_index":2779,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["refer",{"_index":392,"title":{"82-3":{},"108-6":{}},"name":{},"text":{"4":{},"7":{},"11":{},"26":{},"31":{},"34":{},"42":{},"43":{},"49":{},"54":{},"55":{},"56":{},"60":{},"64":{},"71":{},"82":{},"83":{},"85":{},"96":{},"99":{},"100":{},"103":{},"108":{},"111":{}},"component":{},"keyword":{}}],["referenc",{"_index":601,"title":{},"name":{},"text":{"7":{},"8":{},"34":{},"42":{},"60":{},"74":{},"89":{},"96":{}},"component":{},"keyword":{}}],["reflect",{"_index":1130,"title":{"83":{},"12-74":{},"19-22":{},"83-9":{}},"name":{},"text":{"12":{},"13":{},"19":{},"37":{},"46":{},"83":{}},"component":{},"keyword":{}}],["refract",{"_index":3851,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["regardless",{"_index":4662,"title":{},"name":{},"text":{"92":{},"101":{}},"component":{},"keyword":{}}],["region",{"_index":782,"title":{},"name":{},"text":{"8":{},"12":{},"19":{},"52":{},"63":{},"64":{},"75":{},"100":{},"106":{},"111":{}},"component":{},"keyword":{}}],["regions.data",{"_index":5127,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["regist",{"_index":502,"title":{"90-8":{}},"name":{},"text":{"4":{},"5":{},"49":{},"56":{},"90":{},"95":{},"109":{}},"component":{},"keyword":{}}],["register(b0",{"_index":1568,"title":{},"name":{},"text":{"26":{},"31":{},"56":{}},"component":{},"keyword":{}}],["register(s0",{"_index":2751,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["register(t0",{"_index":2749,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["register(u0",{"_index":2757,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["registers.references.buffers[slic",{"_index":2261,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["regular",{"_index":4851,"title":{},"name":{},"text":{"95":{},"99":{},"111":{}},"component":{},"keyword":{}}],["reinterpret_cast(act",{"_index":5393,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["reinterpret_cast(app",{"_index":5373,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["rel",{"_index":780,"title":{"94-8":{}},"name":{},"text":{"8":{},"10":{},"59":{},"94":{},"96":{},"113":{}},"component":{},"keyword":{}}],["relat",{"_index":376,"title":{"4-13":{}},"name":{},"text":{"5":{},"12":{},"19":{},"34":{},"42":{},"57":{},"58":{},"70":{},"73":{},"74":{},"84":{},"88":{},"95":{},"96":{},"99":{}},"component":{},"keyword":{}}],["relationship",{"_index":1451,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["relax",{"_index":5216,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["relaxedprecis",{"_index":4456,"title":{"90-7":{}},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["releas",{"_index":318,"title":{"3":{}},"name":{},"text":{"7":{},"13":{},"74":{},"88":{},"94":{},"96":{},"109":{},"111":{}},"component":{},"keyword":{}}],["release.apk",{"_index":750,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["relev",{"_index":914,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"31":{},"56":{},"71":{},"75":{},"85":{},"99":{},"104":{},"109":{}},"component":{},"keyword":{}}],["reli",{"_index":1442,"title":{},"name":{},"text":{"13":{},"43":{},"48":{},"49":{},"56":{},"85":{},"90":{},"91":{},"96":{},"106":{},"107":{}},"component":{},"keyword":{}}],["reliabl",{"_index":5560,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["reload",{"_index":680,"title":{},"name":{},"text":{"7":{},"92":{}},"component":{},"keyword":{}}],["remain",{"_index":1457,"title":{},"name":{},"text":{"13":{},"37":{},"43":{},"46":{},"49":{},"86":{},"94":{},"95":{},"98":{},"101":{},"103":{},"110":{}},"component":{},"keyword":{}}],["rememb",{"_index":1479,"title":{},"name":{},"text":{"13":{},"74":{},"101":{},"106":{}},"component":{},"keyword":{}}],["remind",{"_index":1,"title":{"65-3":{}},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["remov",{"_index":1438,"title":{},"name":{},"text":{"13":{},"55":{},"56":{},"74":{},"83":{},"84":{},"86":{},"88":{},"95":{},"96":{},"102":{},"107":{},"109":{}},"component":{},"keyword":{}}],["render",{"_index":785,"title":{"52":{},"60":{},"102":{},"103":{},"106":{},"12-11":{},"12-14":{},"12-24":{},"12-55":{},"12-77":{},"13-7":{},"19-3":{},"19-25":{},"20-10":{},"20-13":{},"20-23":{},"60-2":{},"93-3":{},"103-2":{},"103-3":{},"104-2":{},"106-6":{},"108-2":{}},"name":{},"text":{"8":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"23":{},"24":{},"25":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"67":{},"71":{},"75":{},"76":{},"80":{},"81":{},"82":{},"85":{},"86":{},"88":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["render_area",{"_index":3011,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_context",{"_index":3391,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["render_info",{"_index":3014,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_info.layercount",{"_index":3016,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_info.pdepthattach",{"_index":3017,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_info.pstencilattach",{"_index":3018,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass",{"_index":2990,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info",{"_index":2987,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info.clearvaluecount",{"_index":2995,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info.framebuff",{"_index":2991,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info.pclearvalu",{"_index":2996,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info.renderarea.extent.height",{"_index":2994,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info.renderarea.extent.width",{"_index":2993,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pass_begin_info.renderpass",{"_index":2989,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["render_pipelin",{"_index":1062,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["render_pipeline.add_subpass(std::move(scene_subpass",{"_index":1064,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["renderarea",{"_index":2445,"title":{},"name":{},"text":{"54":{},"106":{}},"component":{},"keyword":{}}],["renderdoc",{"_index":1292,"title":{"56-21":{}},"name":{},"text":{"12":{},"19":{},"49":{},"54":{},"56":{},"84":{},"97":{},"105":{},"114":{}},"component":{},"keyword":{}}],["rendering_finished_f",{"_index":3708,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["renderpass",{"_index":3222,"title":{"64-4":{}},"name":{},"text":{"64":{},"101":{},"108":{}},"component":{},"keyword":{}}],["reorder",{"_index":4699,"title":{"93-7":{}},"name":{},"text":{},"component":{},"keyword":{}}],["repeat",{"_index":3705,"title":{},"name":{},"text":{"74":{},"97":{},"105":{}},"component":{},"keyword":{}}],["replac",{"_index":228,"title":{},"name":{},"text":{"2":{},"12":{},"19":{},"55":{},"60":{},"71":{},"83":{},"91":{},"94":{},"98":{},"110":{}},"component":{},"keyword":{}}],["replay",{"_index":2264,"title":{},"name":{},"text":{"49":{},"97":{},"105":{}},"component":{},"keyword":{}}],["replic",{"_index":3847,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["repo",{"_index":412,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["report",{"_index":1915,"title":{},"name":{},"text":{"41":{},"54":{},"74":{},"83":{},"90":{},"97":{},"105":{},"109":{}},"component":{},"keyword":{}}],["repositori",{"_index":25,"title":{"2-2":{}},"name":{},"text":{"2":{},"4":{},"7":{},"12":{},"14":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["repres",{"_index":2118,"title":{},"name":{},"text":{"48":{},"49":{},"58":{},"75":{},"82":{},"95":{},"103":{}},"component":{},"keyword":{}}],["represent",{"_index":1225,"title":{},"name":{},"text":{"12":{},"20":{},"26":{},"31":{},"48":{},"97":{},"105":{}},"component":{},"keyword":{}}],["repurpos",{"_index":4188,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["request",{"_index":295,"title":{"11-8":{},"99-8":{},"99-12":{}},"name":{},"text":{"2":{},"11":{},"38":{},"47":{},"86":{},"94":{},"96":{},"97":{},"98":{},"99":{},"105":{},"110":{},"111":{}},"component":{},"keyword":{}}],["request_command_buff",{"_index":4763,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["request_extension_features(vk_structure_type_physical_device_some_extension_features_khr",{"_index":1005,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["request_gpu_featur",{"_index":1001,"title":{},"name":{},"text":{"11":{},"69":{}},"component":{},"keyword":{}}],["requested_extended_dynamic_state2_featur",{"_index":3414,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["requested_extended_dynamic_state2_features.extendeddynamicstate2",{"_index":3416,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["requested_extended_dynamic_state2_features.extendeddynamicstate2logicop",{"_index":3417,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["requested_extended_dynamic_state_featur",{"_index":3418,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["requested_extended_dynamic_state_feature.extendeddynamicst",{"_index":3420,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["requested_extension_featur",{"_index":1004,"title":{},"name":{},"text":{"11":{},"38":{},"47":{}},"component":{},"keyword":{}}],["requested_extension_feature.featurenam",{"_index":1006,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["requested_extension_features.hostqueryreset",{"_index":1820,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["requested_fragment_shader_barycentric_featur",{"_index":3203,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["requested_fragment_shader_barycentric_features.fragmentshaderbarycentr",{"_index":3206,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["requested_fragment_shader_barycentric_features.styp",{"_index":3204,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["requested_vertex_input_featur",{"_index":3380,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["requested_vertex_input_features.meshshad",{"_index":3382,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["requestedshaderobject",{"_index":4037,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["requestedshaderobject.shaderobject",{"_index":4039,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["requir",{"_index":29,"title":{"2-4":{},"37-3":{},"46-3":{},"69-5":{},"74-3":{},"86-5":{}},"name":{},"text":{"2":{},"7":{},"11":{},"12":{},"13":{},"15":{},"19":{},"20":{},"26":{},"31":{},"34":{},"37":{},"38":{},"42":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{},"69":{},"71":{},"74":{},"77":{},"80":{},"81":{},"83":{},"85":{},"86":{},"88":{},"89":{},"90":{},"91":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{},"114":{}},"component":{},"keyword":{}}],["reserv",{"_index":2845,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["reserve_binding_slot_ext",{"_index":2844,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["reset",{"_index":1759,"title":{"38-5":{},"47-5":{},"94-6":{},"94-7":{}},"name":{},"text":{"38":{},"47":{},"61":{},"88":{},"94":{},"96":{}},"component":{},"keyword":{}}],["reset_command_buffer_bit",{"_index":4755,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["resid",{"_index":4224,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["residencycod",{"_index":4227,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["resiz",{"_index":1281,"title":{},"name":{},"text":{"12":{},"17":{},"43":{},"94":{}},"component":{},"keyword":{}}],["resize(width",{"_index":5384,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["resolut",{"_index":952,"title":{},"name":{},"text":{"10":{},"12":{},"20":{},"56":{},"64":{},"86":{},"91":{},"92":{},"101":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["resolv",{"_index":1997,"title":{"101-1":{},"101-2":{}},"name":{},"text":{"43":{},"88":{},"92":{},"101":{}},"component":{},"keyword":{}}],["resort",{"_index":1746,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["resourc",{"_index":377,"title":{"4-13":{},"56-7":{},"66-7":{},"71-5":{},"85-11":{},"96-5":{},"97-4":{},"102-3":{},"105-4":{}},"name":{},"text":{"4":{},"12":{},"13":{},"19":{},"20":{},"43":{},"54":{},"55":{},"56":{},"60":{},"74":{},"86":{},"93":{},"94":{},"95":{},"97":{},"102":{},"103":{},"104":{},"105":{},"113":{}},"component":{},"keyword":{}}],["resource_descriptor_buff",{"_index":2589,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["respect",{"_index":1012,"title":{},"name":{},"text":{"11":{},"12":{},"61":{},"90":{},"95":{},"99":{},"101":{},"109":{}},"component":{},"keyword":{}}],["respond",{"_index":3240,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["respons",{"_index":316,"title":{},"name":{},"text":{"2":{},"13":{},"56":{},"71":{},"85":{},"93":{},"102":{},"109":{}},"component":{},"keyword":{}}],["rest",{"_index":4510,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["restart",{"_index":1362,"title":{},"name":{},"text":{"12":{},"19":{},"61":{}},"component":{},"keyword":{}}],["restor",{"_index":859,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["restrict",{"_index":168,"title":{},"name":{},"text":{"2":{},"13":{},"49":{},"56":{},"75":{},"86":{},"88":{},"95":{},"106":{}},"component":{},"keyword":{}}],["result",{"_index":770,"title":{"38-7":{},"38-8":{},"47-7":{},"47-8":{}},"name":{},"text":{"8":{},"10":{},"12":{},"13":{},"19":{},"20":{},"37":{},"38":{},"40":{},"41":{},"46":{},"47":{},"48":{},"51":{},"52":{},"54":{},"59":{},"64":{},"66":{},"67":{},"69":{},"75":{},"81":{},"82":{},"83":{},"85":{},"88":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"109":{},"110":{},"111":{},"113":{},"114":{}},"component":{},"keyword":{}}],["retir",{"_index":1956,"title":{},"name":{},"text":{"43":{},"88":{}},"component":{},"keyword":{}}],["retriev",{"_index":3797,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["return",{"_index":929,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"31":{},"38":{},"43":{},"47":{},"54":{},"70":{},"74":{},"82":{},"84":{},"85":{},"88":{},"90":{},"94":{},"97":{},"105":{},"109":{}},"component":{},"keyword":{}}],["reus",{"_index":1468,"title":{},"name":{},"text":{"13":{},"66":{},"75":{},"83":{},"94":{},"96":{},"97":{},"105":{}},"component":{},"keyword":{}}],["revers",{"_index":3103,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["revert",{"_index":4920,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["review",{"_index":37,"title":{"2-8":{}},"name":{},"text":{"2":{},"94":{},"104":{},"106":{}},"component":{},"keyword":{}}],["rework",{"_index":1335,"title":{},"name":{},"text":{"12":{},"19":{},"87":{}},"component":{},"keyword":{}}],["rewrit",{"_index":4508,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["rg_dot",{"_index":4527,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["rg_dot.zw",{"_index":4533,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["rg_offset",{"_index":4518,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["rgb/rgba",{"_index":5466,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["rgb10a2_unorm",{"_index":5310,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["rgba",{"_index":1043,"title":{},"name":{},"text":{"11":{},"111":{}},"component":{},"keyword":{}}],["rgba8",{"_index":4336,"title":{},"name":{},"text":{"88":{},"101":{}},"component":{},"keyword":{}}],["rgba8_srgb",{"_index":5307,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["rgba8_unorm",{"_index":5309,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["right",{"_index":380,"title":{"98":{},"110":{}},"name":{},"text":{"4":{},"9":{},"13":{},"56":{},"88":{},"90":{},"92":{},"95":{},"101":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["ring",{"_index":2804,"title":{},"name":{},"text":{"56":{},"90":{}},"component":{},"keyword":{}}],["risk",{"_index":1492,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["robust",{"_index":2124,"title":{"49-4":{}},"name":{},"text":{"49":{},"88":{}},"component":{},"keyword":{}}],["room",{"_index":2808,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["root",{"_index":153,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"14":{},"54":{}},"component":{},"keyword":{}}],["rose",{"_index":341,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["rotat",{"_index":889,"title":{"109":{},"12-17":{},"20-16":{},"109-2":{},"109-4":{},"109-6":{}},"name":{},"text":{"9":{},"12":{},"20":{},"40":{},"41":{},"82":{},"93":{},"101":{},"109":{},"111":{}},"component":{},"keyword":{}}],["rotation_axi",{"_index":5421,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["rotation_cases.jpg[pr",{"_index":5354,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["roughli",{"_index":4855,"title":{},"name":{},"text":{"95":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["round",{"_index":5290,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["rout",{"_index":4545,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["row",{"_index":4242,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["rule",{"_index":1583,"title":{},"name":{},"text":{"26":{},"31":{},"85":{},"88":{},"95":{},"98":{},"110":{}},"component":{},"keyword":{}}],["run",{"_index":89,"title":{"37":{},"46":{},"10-5":{},"12-41":{},"12-47":{},"17-16":{},"17-22":{},"54-8":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"38":{},"47":{},"48":{},"54":{},"70":{},"74":{},"82":{},"84":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"97":{},"98":{},"103":{},"104":{},"105":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["runtim",{"_index":1053,"title":{},"name":{},"text":{"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"26":{},"31":{},"34":{},"37":{},"42":{},"46":{},"56":{},"66":{},"83":{},"84":{},"85":{},"89":{},"95":{},"97":{},"105":{},"106":{},"111":{},"114":{}},"component":{},"keyword":{}}],["run’",{"_index":4934,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["rusch",{"_index":347,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["rwstructuredbuff",{"_index":2756,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["rwtexture2d",{"_index":2759,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["ryan",{"_index":353,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["s",{"_index":630,"title":{},"name":{},"text":{"7":{},"10":{},"43":{},"54":{},"56":{},"70":{},"88":{},"91":{},"109":{}},"component":{},"keyword":{}}],["s10",{"_index":4634,"title":{},"name":{},"text":{"92":{},"95":{},"108":{}},"component":{},"keyword":{}}],["s2",{"_index":1989,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s:f1",{"_index":1983,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s:f2",{"_index":1985,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s:s1",{"_index":1977,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s:s2",{"_index":1984,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s:s3",{"_index":1980,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s:s4",{"_index":1986,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["s_dot",{"_index":4495,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["s_offset",{"_index":4483,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["sacrif",{"_index":5086,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["safe",{"_index":856,"title":{},"name":{},"text":{"8":{},"13":{},"49":{},"56":{},"88":{},"98":{},"100":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["safeti",{"_index":880,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sake",{"_index":4119,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["same",{"_index":207,"title":{},"name":{},"text":{"2":{},"7":{},"12":{},"13":{},"17":{},"19":{},"20":{},"37":{},"38":{},"39":{},"41":{},"43":{},"46":{},"47":{},"55":{},"56":{},"59":{},"62":{},"64":{},"67":{},"69":{},"71":{},"74":{},"75":{},"76":{},"83":{},"84":{},"85":{},"88":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"99":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["samp",{"_index":2728,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["samp[index",{"_index":2739,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["sampl",{"_index":22,"title":{"4":{},"12":{},"2-3":{},"4-3":{},"10-4":{},"11-1":{},"11-2":{},"11-3":{},"12-2":{},"12-26":{},"12-53":{},"12-91":{},"12-93":{},"14-2":{},"14-3":{},"17-1":{},"18-1":{},"19-1":{},"20-1":{},"21-1":{},"49-10":{},"51-3":{},"54-8":{},"56-19":{},"57-3":{},"58-2":{},"66-6":{},"74-2":{},"75-8":{},"88-8":{},"90-6":{},"91-4":{},"92-3":{},"93-8":{},"95-11":{},"97-5":{},"98-5":{},"100-2":{},"103-3":{},"104-4":{},"105-5":{},"107-3":{},"110-5":{},"111-10":{},"113-3":{}},"name":{},"text":{"2":{},"4":{},"6":{},"7":{},"10":{},"11":{},"12":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"keyword":{}}],["sample_api",{"_index":1517,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["sample_count",{"_index":4693,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["samplenam",{"_index":1515,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["sampler",{"_index":1106,"title":{"34":{},"42":{},"12-38":{},"12-44":{},"17-13":{},"17-19":{},"34-3":{},"42-3":{}},"name":{},"text":{"12":{},"17":{},"34":{},"42":{},"55":{},"56":{},"71":{}},"component":{},"keyword":{}}],["sampler/combin",{"_index":2552,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["sampler2d",{"_index":1663,"title":{},"name":{},"text":{"34":{},"42":{},"55":{},"56":{},"82":{}},"component":{},"keyword":{}}],["sampler2darray",{"_index":2700,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["sampler_descriptor_set_layout",{"_index":1647,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["sampler_descriptor_sets.s",{"_index":1935,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_descriptor_sets[i",{"_index":1938,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_descriptor_sets[selected_sampl",{"_index":1657,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["sampler_info",{"_index":1652,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["sampler_info(samplers[i",{"_index":1650,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["sampler_info.sampl",{"_index":1939,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set",{"_index":1941,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set(sampler_descriptor_sets[i",{"_index":1651,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set.descriptorcount",{"_index":1945,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set.descriptortyp",{"_index":1946,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set.dstbind",{"_index":1944,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set.dstset",{"_index":1943,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set.pimageinfo",{"_index":1947,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sampler_write_descriptor_set.styp",{"_index":1942,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["samplercolormap",{"_index":2551,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["samplers[i",{"_index":1940,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["samplerst",{"_index":2750,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["samples.git",{"_index":416,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["samples/api",{"_index":108,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["samples/category/my_sample/cmakelists.txt",{"_index":1512,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["samples/category/my_sample/sample_name.cpp",{"_index":1513,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["samples/category/my_sample/sample_name.h",{"_index":1514,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["samples/extens",{"_index":110,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["samples/perform",{"_index":111,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["samplevertex",{"_index":4435,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["sample’",{"_index":154,"title":{},"name":{},"text":{"2":{},"84":{},"85":{}},"component":{},"keyword":{}}],["samsung",{"_index":4632,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["sandbox",{"_index":394,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["sascha",{"_index":355,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{},"keyword":{}}],["saschawillems.d",{"_index":5347,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["satisfi",{"_index":2572,"title":{},"name":{},"text":{"55":{},"98":{},"106":{},"110":{}},"component":{},"keyword":{}}],["satur",{"_index":4700,"title":{"93":{}},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["save",{"_index":206,"title":{"99-4":{},"99-5":{}},"name":{},"text":{"2":{},"12":{},"20":{},"91":{},"92":{},"97":{},"98":{},"99":{},"101":{},"105":{},"106":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["sawicki",{"_index":322,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{},"keyword":{}}],["scalabl",{"_index":4831,"title":{},"name":{},"text":{"95":{},"111":{}},"component":{},"keyword":{}}],["scalar",{"_index":2172,"title":{},"name":{},"text":{"49":{},"83":{},"90":{}},"component":{},"keyword":{}}],["scale",{"_index":3846,"title":{},"name":{},"text":{"82":{},"93":{},"95":{}},"component":{},"keyword":{}}],["scan",{"_index":3358,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["scenario",{"_index":852,"title":{},"name":{},"text":{"8":{},"12":{},"18":{},"38":{},"47":{},"75":{},"88":{},"90":{},"91":{},"93":{},"95":{},"101":{}},"component":{},"keyword":{}}],["scene",{"_index":118,"title":{"109-6":{}},"name":{},"text":{"2":{},"9":{},"11":{},"12":{},"19":{},"41":{},"48":{},"49":{},"51":{},"52":{},"55":{},"61":{},"64":{},"71":{},"76":{},"77":{},"80":{},"81":{},"82":{},"83":{},"85":{},"92":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"102":{},"103":{},"106":{},"107":{},"109":{}},"component":{},"keyword":{}}],["scene.vert",{"_index":4004,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["scene_desc",{"_index":3924,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["scene_desc.i[gl_instancecustomindexext",{"_index":3930,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["scene_elements_baselin",{"_index":3154,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["scene_elements_tess",{"_index":3161,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["scene_nod",{"_index":3172,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["scene_subpass",{"_index":1058,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["sceneinstancedata",{"_index":3862,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["scene’",{"_index":3859,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["schedul",{"_index":1418,"title":{},"name":{},"text":{"13":{},"104":{},"113":{}},"component":{},"keyword":{}}],["scheme",{"_index":703,"title":{},"name":{},"text":{"7":{},"8":{},"49":{},"96":{},"99":{}},"component":{},"keyword":{}}],["scientif",{"_index":3547,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["scissor",{"_index":5287,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["scope",{"_index":3858,"title":{},"name":{},"text":{"82":{},"107":{}},"component":{},"keyword":{}}],["scratch",{"_index":3939,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["screen",{"_index":1885,"title":{"65":{}},"name":{},"text":{"40":{},"41":{},"54":{},"56":{},"65":{},"85":{},"86":{},"90":{},"91":{},"92":{},"94":{},"98":{},"99":{},"101":{},"104":{},"109":{},"110":{}},"component":{},"keyword":{}}],["screenshot",{"_index":2975,"title":{},"name":{},"text":{"59":{},"91":{},"92":{},"95":{},"97":{},"98":{},"101":{},"103":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["screensiz",{"_index":5367,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["script",{"_index":931,"title":{"14":{}},"name":{},"text":{"10":{},"14":{}},"component":{},"keyword":{}}],["scripts/clang",{"_index":1520,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["scripts/clang_format.pi",{"_index":96,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["scripts/copyright.pi",{"_index":98,"title":{},"name":{},"text":{"2":{},"14":{}},"component":{},"keyword":{}}],["scripts/generate.pi",{"_index":726,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{},"keyword":{}}],["scroll",{"_index":4841,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["sdcard/android/data/com.khronos.vulkan_samples/fil",{"_index":603,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sdk",{"_index":292,"title":{},"name":{},"text":{"2":{},"7":{},"60":{},"61":{},"69":{},"77":{},"84":{},"85":{},"89":{},"114":{}},"component":{},"keyword":{}}],["sdkmanag",{"_index":731,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sdk}/cmdline",{"_index":736,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["search",{"_index":2509,"title":{},"name":{},"text":{"54":{},"59":{}},"component":{},"keyword":{}}],["second",{"_index":438,"title":{},"name":{},"text":{"4":{},"13":{},"38":{},"40":{},"43":{},"47":{},"51":{},"55":{},"61":{},"83":{},"89":{},"94":{},"98":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["secondari",{"_index":1155,"title":{"94-2":{}},"name":{},"text":{"12":{},"20":{},"94":{},"103":{}},"component":{},"keyword":{}}],["secondli",{"_index":1453,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["section",{"_index":2960,"title":{},"name":{},"text":{"59":{},"60":{},"61":{},"77":{},"85":{},"89":{},"92":{},"95":{},"96":{},"98":{},"104":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["sector",{"_index":4239,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["secur",{"_index":3543,"title":{"74-5":{}},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["security.perf_harden",{"_index":608,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["see",{"_index":266,"title":{"51-5":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"11":{},"12":{},"13":{},"20":{},"33":{},"38":{},"47":{},"49":{},"54":{},"55":{},"56":{},"59":{},"66":{},"67":{},"74":{},"75":{},"78":{},"83":{},"84":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"98":{},"99":{},"100":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["seed",{"_index":4481,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["seem",{"_index":4612,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["seemingli",{"_index":2500,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["seen",{"_index":5301,"title":{},"name":{},"text":{"107":{},"109":{}},"component":{},"keyword":{}}],["select",{"_index":666,"title":{"111-5":{}},"name":{},"text":{"7":{},"11":{},"12":{},"20":{},"26":{},"31":{},"34":{},"38":{},"42":{},"47":{},"52":{},"54":{},"61":{},"64":{},"74":{},"77":{},"82":{},"84":{},"90":{},"99":{},"101":{},"106":{},"111":{},"113":{},"114":{}},"component":{},"keyword":{}}],["select_pre_transform",{"_index":5412,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["selected_device_id",{"_index":3594,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["selected_device_id{nullptr",{"_index":3587,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["selected_platform_id{nullptr",{"_index":3585,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["self",{"_index":1276,"title":{},"name":{},"text":{"12":{},"17":{},"25":{}},"component":{},"keyword":{}}],["semant",{"_index":903,"title":{},"name":{},"text":{"9":{},"26":{},"31":{}},"component":{},"keyword":{}}],["semaphor",{"_index":1125,"title":{"88":{},"12-68":{},"19-16":{},"74-7":{},"88-2":{},"88-7":{}},"name":{},"text":{"12":{},"19":{},"43":{},"74":{},"76":{},"88":{},"93":{}},"component":{},"keyword":{}}],["semaphore_create_info",{"_index":3676,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_create_info.pnext",{"_index":3679,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_create_info.styp",{"_index":3677,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_properti",{"_index":3688,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_properties.data",{"_index":3703,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_properties.pop_back",{"_index":3704,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_properties.push_back((cl_semaphore_properties_khr",{"_index":3695,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphore_properties.push_back(0",{"_index":3699,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphores.acquired_image_readi",{"_index":3716,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["semaphores.render_complet",{"_index":3718,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["send",{"_index":1160,"title":{},"name":{},"text":{"12":{},"20":{},"83":{},"95":{},"96":{},"108":{}},"component":{},"keyword":{}}],["sens",{"_index":4270,"title":{},"name":{},"text":{"88":{},"95":{},"106":{}},"component":{},"keyword":{}}],["sensit",{"_index":1497,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["sent",{"_index":2920,"title":{},"name":{},"text":{"59":{},"95":{}},"component":{},"keyword":{}}],["separ",{"_index":142,"title":{"34":{},"42":{},"12-38":{},"12-44":{},"17-13":{},"17-19":{},"64-4":{}},"name":{},"text":{"2":{},"12":{},"13":{},"17":{},"20":{},"23":{},"34":{},"42":{},"49":{},"51":{},"54":{},"56":{},"59":{},"64":{},"66":{},"82":{},"83":{},"85":{},"90":{},"94":{},"96":{},"101":{},"102":{},"103":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["sequenc",{"_index":4248,"title":{"88-3":{}},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["sequenti",{"_index":4339,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["seri",{"_index":1508,"title":{},"name":{},"text":{"14":{},"96":{}},"component":{},"keyword":{}}],["serial",{"_index":5222,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["serialis",{"_index":4941,"title":{},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["serv",{"_index":2240,"title":{},"name":{},"text":{"49":{},"51":{},"75":{},"111":{}},"component":{},"keyword":{}}],["server",{"_index":1397,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["set",{"_index":569,"title":{"7-26":{},"54-4":{},"69-2":{},"69-4":{},"85-8":{},"95-17":{},"95-21":{},"95-24":{},"96-3":{}},"name":{},"text":{"7":{},"8":{},"9":{},"12":{},"14":{},"19":{},"20":{},"26":{},"31":{},"34":{},"37":{},"38":{},"41":{},"42":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"65":{},"67":{},"69":{},"71":{},"74":{},"75":{},"77":{},"78":{},"79":{},"80":{},"82":{},"83":{},"84":{},"85":{},"89":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["set(ktx_dir",{"_index":5472,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["set(ktx_sourc",{"_index":5474,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["set/ubo",{"_index":4895,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["set_api_version(vk_api_version_1_1",{"_index":3373,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["set_api_version(vk_api_version_1_2",{"_index":997,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["set_color_resolve_attachments({i_swapchain",{"_index":5121,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["set_depth_stencil_resolve_attachment(i_depth_resolv",{"_index":5144,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["set_depth_stencil_resolve_mode(depth_resolve_mod",{"_index":5145,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["set_initial_st",{"_index":4158,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["set_layout_create_info",{"_index":2672,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["set_layout_create_info.flag",{"_index":2657,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["set_layout_create_info.pnext",{"_index":2670,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["set_layout_create_info{vk_structure_type_descriptor_set_layout_create_info",{"_index":2656,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["set_pre_rotation(pre_rotate_mat",{"_index":5430,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["set_render_pipeline(std::move(render_pipelin",{"_index":1065,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["set_shader(shaderext",{"_index":4133,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["set_shader(shaderexts[0",{"_index":4117,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["set_shader(shaderexts[1",{"_index":4118,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["setprop",{"_index":607,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["setup",{"_index":373,"title":{"4-5":{},"37-5":{},"46-5":{},"54-2":{},"78-2":{},"84-3":{}},"name":{},"text":{"7":{},"12":{},"19":{},"21":{},"34":{},"42":{},"46":{},"51":{},"52":{},"54":{},"55":{},"66":{},"81":{},"84":{},"95":{},"103":{},"111":{}},"component":{},"keyword":{}}],["sever",{"_index":1343,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"38":{},"40":{},"47":{},"54":{},"96":{},"98":{},"110":{}},"component":{},"keyword":{}}],["sg::node",{"_index":5432,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["shade",{"_index":789,"title":{"63":{},"64":{},"68":{},"72":{},"12-63":{},"12-64":{},"12-72":{},"12-73":{},"19-11":{},"19-12":{},"19-20":{},"19-21":{},"64-1":{},"64-2":{},"71-3":{}},"name":{},"text":{"8":{},"12":{},"13":{},"17":{},"19":{},"26":{},"31":{},"63":{},"64":{},"68":{},"71":{},"72":{},"83":{},"87":{},"91":{},"93":{},"100":{},"101":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["shader",{"_index":112,"title":{"22":{},"26":{},"27":{},"31":{},"62":{},"67":{},"71":{},"84":{},"85":{},"11-12":{},"12-27":{},"12-31":{},"12-35":{},"12-48":{},"12-59":{},"12-82":{},"12-85":{},"12-86":{},"12-89":{},"17-2":{},"17-6":{},"17-10":{},"17-23":{},"19-7":{},"19-30":{},"19-33":{},"19-34":{},"19-37":{},"26-4":{},"31-4":{},"34-2":{},"42-2":{},"55-7":{},"62-3":{},"62-4":{},"62-5":{},"66-4":{},"71-6":{},"71-7":{},"82-3":{},"82-4":{},"84-2":{},"85-3":{},"85-4":{},"85-5":{},"85-6":{},"85-7":{},"93-3":{},"95-5":{}},"name":{},"text":{"2":{},"4":{},"7":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"22":{},"26":{},"31":{},"34":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"47":{},"48":{},"49":{},"51":{},"54":{},"55":{},"56":{},"58":{},"59":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{},"71":{},"72":{},"74":{},"75":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"90":{},"91":{},"93":{},"95":{},"97":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{}},"component":{},"keyword":{}}],["shader'",{"_index":4136,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader(languag",{"_index":1590,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["shader(vk_shader_stage_fragment_bit",{"_index":4063,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader(vk_shader_stage_vertex_bit",{"_index":4057,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader.parse(&glslang::defaulttbuiltinresourc",{"_index":1593,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["shader.setenvinput(glslang::eshsourcehlsl",{"_index":1591,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["shader\\n",{"_index":4104,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_cr",{"_index":4108,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_create.flag",{"_index":4110,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_create_info",{"_index":4109,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_create_infos[0",{"_index":4105,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_create_infos[1",{"_index":4107,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_create_infos[2",{"_index":4102,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_data",{"_index":4126,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_device_address_bit",{"_index":2131,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shader_index",{"_index":4144,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_messag",{"_index":4008,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["shader_message.substr(shader_message.find(\"posit",{"_index":4009,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["shader_message{pcallbackdata",{"_index":4007,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["shader_modul",{"_index":1605,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["shader_module_create_info",{"_index":3314,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_module_create_info.codes",{"_index":3316,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_module_create_info.pcod",{"_index":3318,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_module_create_info.styp",{"_index":3315,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_nam",{"_index":4052,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_name.length",{"_index":4123,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_name.substr(unlinked_material_prefix_s",{"_index":4122,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_name_",{"_index":4069,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shader_read",{"_index":2055,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["shader_read_only_optim",{"_index":5094,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["shader_source_glsl.data",{"_index":2533,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["shader_source_glsl.data_s",{"_index":2531,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["shader_stag",{"_index":1069,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["shader_stage.modul",{"_index":2528,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["shader_stage_create_info",{"_index":3320,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_stage_create_info.pnam",{"_index":3325,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_stage_create_info.pnext",{"_index":3323,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_stage_create_info.stag",{"_index":3324,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_stage_create_info.styp",{"_index":3321,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["shader_stages[0",{"_index":1070,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["shader_stages[1",{"_index":1073,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["shadercreateinfo",{"_index":4132,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderdebugprintf::create_inst",{"_index":3978,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["shaderdebugprintf::debug_utils_message_callback",{"_index":3998,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["shaderext",{"_index":4113,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderexts[2",{"_index":4111,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderfloat16",{"_index":4461,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["shaderint16",{"_index":4464,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["shaderint8",{"_index":4462,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["shaderobject",{"_index":4030,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::bind_material_shader(vkcommandbuff",{"_index":4143,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::bind_shader(vkcommandbuff",{"_index":4138,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::build_linked_shaders(vkdevic",{"_index":4100,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::build_shader(vkdevic",{"_index":4131,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::get_validation_lay",{"_index":4189,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::shad",{"_index":4101,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderobject::shader::shader(vkshaderstageflagbit",{"_index":4066,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shaderresourceresid",{"_index":4215,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["shaders/dynamic_primitive_clipping/primitive_clipping.vert",{"_index":2946,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["shader’",{"_index":4055,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shading_rate_imag",{"_index":3252,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["shading_rate_image_comput",{"_index":3250,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["shadingrateattachmenttexels",{"_index":3235,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["shadow",{"_index":1131,"title":{"12-74":{},"19-22":{},"82-5":{},"83-8":{}},"name":{},"text":{"12":{},"19":{},"59":{},"80":{},"82":{},"83":{},"93":{},"103":{}},"component":{},"keyword":{}}],["shadowmap",{"_index":4717,"title":{},"name":{},"text":{"93":{},"103":{}},"component":{},"keyword":{}}],["share",{"_index":1269,"title":{"74-6":{},"74-7":{},"74-8":{},"75-2":{}},"name":{},"text":{"12":{},"13":{},"17":{},"19":{},"22":{},"41":{},"66":{},"71":{},"73":{},"74":{},"75":{},"76":{},"83":{},"85":{},"90":{},"95":{},"96":{},"98":{},"104":{},"108":{},"110":{}},"component":{},"keyword":{}}],["shareabl",{"_index":3622,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["shared_cl_mem",{"_index":3803,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["shared_imag",{"_index":3764,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["shared_image.height",{"_index":3646,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["shared_image.imag",{"_index":3607,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["shared_image.memori",{"_index":3605,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["shared_image.width",{"_index":3644,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["shared_memori",{"_index":3777,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["shareddata",{"_index":3498,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["shareddata.cullradiu",{"_index":3539,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["shareddata.meshletsnumb",{"_index":3530,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["shareddata.positiontransform",{"_index":3516,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["shareddata.subdimens",{"_index":3514,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["shell",{"_index":444,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{},"keyword":{}}],["shift",{"_index":897,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["shine",{"_index":4548,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["shini",{"_index":3960,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["ship",{"_index":4184,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["shoot",{"_index":3907,"title":{},"name":{},"text":{"82":{},"83":{}},"component":{},"keyword":{}}],["short",{"_index":144,"title":{},"name":{},"text":{"2":{},"95":{},"109":{}},"component":{},"keyword":{}}],["shortest",{"_index":5303,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["shorthand",{"_index":1965,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["shot",{"_index":3885,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["shouldn’t",{"_index":4730,"title":{},"name":{},"text":{"93":{},"95":{}},"component":{},"keyword":{}}],["show",{"_index":383,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"19":{},"20":{},"26":{},"31":{},"34":{},"38":{},"42":{},"47":{},"51":{},"54":{},"55":{},"59":{},"64":{},"65":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"90":{},"91":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["showcas",{"_index":1375,"title":{},"name":{},"text":{"12":{},"18":{},"86":{}},"component":{},"keyword":{}}],["shown",{"_index":3002,"title":{},"name":{},"text":{"60":{},"94":{},"99":{},"100":{},"101":{},"103":{},"104":{},"109":{}},"component":{},"keyword":{}}],["side",{"_index":1448,"title":{},"name":{},"text":{"13":{},"38":{},"47":{},"54":{},"56":{},"74":{},"84":{},"90":{},"96":{},"98":{},"109":{},"110":{}},"component":{},"keyword":{}}],["sidestep",{"_index":4713,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["sign",{"_index":299,"title":{},"name":{},"text":{"2":{},"7":{},"69":{}},"component":{},"keyword":{}}],["signal",{"_index":1207,"title":{"88-4":{},"88-6":{}},"name":{},"text":{"12":{},"19":{},"20":{},"43":{},"74":{},"88":{},"90":{},"98":{},"101":{},"104":{},"110":{}},"component":{},"keyword":{}}],["signal_info",{"_index":4332,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["signal_info.semaphor",{"_index":4329,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["signal_info.valu",{"_index":4330,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["signal_info{vk_structure_type_semaphore_signal_info_khr",{"_index":4328,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["signal_semaphor",{"_index":3717,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["signal_timeline_cpu(main_thread_timelin",{"_index":4365,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["signatur",{"_index":5092,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["signific",{"_index":1217,"title":{},"name":{},"text":{"12":{},"20":{},"56":{},"86":{},"90":{},"91":{},"94":{},"96":{},"97":{},"98":{},"101":{},"102":{},"103":{},"104":{},"105":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["significantli",{"_index":1293,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"56":{},"91":{},"94":{},"96":{},"106":{}},"component":{},"keyword":{}}],["silicon",{"_index":661,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["silli",{"_index":4266,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["similar",{"_index":1522,"title":{},"name":{},"text":{"14":{},"26":{},"31":{},"38":{},"47":{},"49":{},"54":{},"55":{},"56":{},"59":{},"66":{},"71":{},"74":{},"85":{},"88":{},"90":{},"96":{},"97":{},"99":{},"102":{},"103":{},"105":{}},"component":{},"keyword":{}}],["similarli",{"_index":1996,"title":{},"name":{},"text":{"43":{},"49":{},"56":{},"85":{},"88":{},"91":{},"94":{},"99":{},"108":{}},"component":{},"keyword":{}}],["simpl",{"_index":1321,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"38":{},"47":{},"49":{},"54":{},"71":{},"75":{},"88":{},"91":{},"92":{},"93":{},"95":{},"96":{},"99":{},"101":{},"107":{},"108":{},"111":{}},"component":{},"keyword":{}}],["simpler",{"_index":4914,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["simplest",{"_index":2247,"title":{},"name":{},"text":{"49":{},"59":{},"96":{},"113":{}},"component":{},"keyword":{}}],["simpli",{"_index":762,"title":{},"name":{},"text":{"7":{},"37":{},"46":{},"54":{},"55":{},"56":{},"84":{},"85":{},"90":{},"91":{}},"component":{},"keyword":{}}],["simplic",{"_index":2317,"title":{},"name":{},"text":{"52":{},"75":{}},"component":{},"keyword":{}}],["simplifi",{"_index":1245,"title":{},"name":{},"text":{"12":{},"20":{},"21":{},"54":{},"55":{},"85":{},"88":{},"109":{},"114":{}},"component":{},"keyword":{}}],["simplist",{"_index":3496,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["simul",{"_index":1099,"title":{"22":{},"27":{},"12-27":{},"12-31":{},"17-2":{},"17-6":{}},"name":{},"text":{"12":{},"17":{},"22":{},"82":{},"88":{}},"component":{},"keyword":{}}],["simultan",{"_index":4744,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["simultaneous_use_bit",{"_index":4762,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["singl",{"_index":188,"title":{"88-5":{},"88-14":{}},"name":{},"text":{"2":{},"4":{},"8":{},"11":{},"12":{},"13":{},"17":{},"20":{},"23":{},"34":{},"37":{},"38":{},"39":{},"40":{},"42":{},"46":{},"47":{},"49":{},"54":{},"56":{},"58":{},"67":{},"68":{},"71":{},"72":{},"82":{},"84":{},"85":{},"86":{},"88":{},"94":{},"95":{},"96":{},"98":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"108":{},"110":{},"113":{}},"component":{},"keyword":{}}],["sit",{"_index":4262,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["situat",{"_index":767,"title":{},"name":{},"text":{"8":{},"41":{},"88":{}},"component":{},"keyword":{}}],["size",{"_index":792,"title":{"84-5":{}},"name":{},"text":{"8":{},"12":{},"20":{},"41":{},"49":{},"52":{},"55":{},"56":{},"59":{},"64":{},"71":{},"83":{},"84":{},"86":{},"95":{},"96":{},"97":{},"99":{},"100":{},"101":{},"105":{},"106":{},"107":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["size_t",{"_index":1648,"title":{},"name":{},"text":{"34":{},"42":{},"55":{},"102":{},"109":{}},"component":{},"keyword":{}}],["sizeof(basicpushconst",{"_index":4168,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["sizeof(cl_mem",{"_index":3729,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["sizeof(cmd",{"_index":5397,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["sizeof(cpu_commands[0",{"_index":5185,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["sizeof(float",{"_index":3290,"title":{},"name":{},"text":{"66":{},"74":{}},"component":{},"keyword":{}}],["sizeof(int32_t",{"_index":2314,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sizeof(materialpushconst",{"_index":4178,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["sizeof(newvertex",{"_index":3878,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["sizeof(push_const_block",{"_index":2370,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sizeof(samplevertex",{"_index":4449,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["sizeof(spirv[0",{"_index":4088,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["sizeof(uint32_t",{"_index":1612,"title":{},"name":{},"text":{"26":{},"66":{}},"component":{},"keyword":{}}],["sizeof(uint64_t",{"_index":1837,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["sizeof(uuid",{"_index":3600,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["sizeof(vertex",{"_index":3285,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["sizeof(vertex1",{"_index":4392,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["sizeof(vertex2",{"_index":4397,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["ski",{"_index":3231,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["skip",{"_index":578,"title":{},"name":{},"text":{"7":{},"40":{},"71":{},"83":{},"92":{},"100":{}},"component":{},"keyword":{}}],["skybox",{"_index":4054,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["skybox_frag_shad",{"_index":4062,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["skybox_vert_shad",{"_index":4056,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["slice",{"_index":2259,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["slider",{"_index":2297,"title":{},"name":{},"text":{"51":{},"94":{}},"component":{},"keyword":{}}],["slightli",{"_index":1782,"title":{},"name":{},"text":{"38":{},"47":{},"49":{},"95":{},"97":{},"99":{},"100":{},"104":{},"105":{}},"component":{},"keyword":{}}],["slot",{"_index":2627,"title":{},"name":{},"text":{"55":{},"56":{},"104":{}},"component":{},"keyword":{}}],["slow",{"_index":2817,"title":{},"name":{},"text":{"56":{},"83":{},"97":{},"105":{}},"component":{},"keyword":{}}],["slower",{"_index":1424,"title":{},"name":{},"text":{"13":{},"95":{}},"component":{},"keyword":{}}],["small",{"_index":589,"title":{},"name":{},"text":{"7":{},"15":{},"48":{},"71":{},"83":{},"84":{},"86":{},"90":{},"95":{},"98":{},"104":{},"108":{},"110":{}},"component":{},"keyword":{}}],["smaller",{"_index":1488,"title":{},"name":{},"text":{"13":{},"49":{},"90":{},"91":{},"96":{},"108":{}},"component":{},"keyword":{}}],["smartphon",{"_index":5128,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["smoother",{"_index":1502,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["sn",{"_index":1975,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["snake",{"_index":598,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["snake_cas",{"_index":146,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["snippet",{"_index":4614,"title":{},"name":{},"text":{"91":{},"95":{}},"component":{},"keyword":{}}],["softwar",{"_index":257,"title":{},"name":{},"text":{"2":{},"4":{},"99":{},"111":{}},"component":{},"keyword":{}}],["software.github.io",{"_index":5346,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["software/hwcpip",{"_index":614,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sole",{"_index":4795,"title":{},"name":{},"text":{"95":{},"111":{}},"component":{},"keyword":{}}],["solid",{"_index":4994,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["solut",{"_index":846,"title":{},"name":{},"text":{"8":{},"12":{},"20":{},"65":{},"71":{},"84":{},"86":{},"88":{},"95":{},"96":{},"104":{},"106":{}},"component":{},"keyword":{}}],["solv",{"_index":1172,"title":{},"name":{},"text":{"12":{},"20":{},"56":{},"88":{},"95":{}},"component":{},"keyword":{}}],["somehow",{"_index":4917,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["someth",{"_index":1493,"title":{},"name":{},"text":{"13":{},"55":{},"56":{},"74":{},"88":{},"90":{},"91":{},"93":{},"95":{},"100":{},"114":{}},"component":{},"keyword":{}}],["something_non_uniform",{"_index":2718,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["sometim",{"_index":4828,"title":{},"name":{},"text":{"95":{},"99":{}},"component":{},"keyword":{}}],["somewhat",{"_index":2707,"title":{},"name":{},"text":{"56":{},"88":{},"90":{},"91":{},"93":{}},"component":{},"keyword":{}}],["somewher",{"_index":2158,"title":{},"name":{},"text":{"49":{},"56":{},"85":{}},"component":{},"keyword":{}}],["song",{"_index":2653,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["sort",{"_index":319,"title":{"3":{}},"name":{},"text":{"12":{},"20":{},"41":{},"55":{},"99":{},"100":{}},"component":{},"keyword":{}}],["sorted_fragment_max_count",{"_index":1908,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["sound",{"_index":1779,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["sourc",{"_index":189,"title":{"73":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"12":{},"19":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["space",{"_index":1459,"title":{},"name":{},"text":{"13":{},"40":{},"41":{},"59":{},"91":{},"99":{},"108":{}},"component":{},"keyword":{}}],["space0",{"_index":1569,"title":{},"name":{},"text":{"26":{},"31":{},"56":{}},"component":{},"keyword":{}}],["space1",{"_index":2752,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["space2",{"_index":2755,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["space3",{"_index":2758,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["space4",{"_index":2760,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["spars",{"_index":2968,"title":{"86-1":{}},"name":{},"text":{"59":{},"86":{}},"component":{},"keyword":{}}],["sparsebind",{"_index":4213,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["sparseimage::request_gpu_features(vkb::physicaldevic",{"_index":4216,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["sparseresidencyimage2d",{"_index":4214,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["sparsetexelsresidentarb(residencycod",{"_index":4226,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["sparsetexturelodarb(texsampl",{"_index":4228,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["spawn",{"_index":2709,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["spdlog",{"_index":479,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["speak",{"_index":4243,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["spec",{"_index":1351,"title":{},"name":{},"text":{"12":{},"19":{},"54":{},"55":{},"56":{},"74":{},"83":{},"88":{},"94":{},"95":{},"101":{}},"component":{},"keyword":{}}],["special",{"_index":1086,"title":{"107":{},"12-15":{},"20-14":{},"107-2":{},"107-3":{}},"name":{},"text":{"12":{},"19":{},"20":{},"48":{},"49":{},"59":{},"63":{},"88":{},"90":{},"95":{},"100":{},"104":{},"107":{}},"component":{},"keyword":{}}],["specif",{"_index":169,"title":{},"name":{},"text":{"2":{},"5":{},"10":{},"13":{},"15":{},"26":{},"31":{},"54":{},"59":{},"61":{},"62":{},"66":{},"69":{},"74":{},"75":{},"77":{},"84":{},"85":{},"88":{},"91":{},"92":{},"93":{},"95":{},"98":{},"99":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["specifi",{"_index":947,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{},"20":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"46":{},"47":{},"49":{},"54":{},"59":{},"61":{},"64":{},"66":{},"71":{},"74":{},"75":{},"85":{},"95":{},"99":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["specular",{"_index":1689,"title":{},"name":{},"text":{"37":{},"46":{},"83":{}},"component":{},"keyword":{}}],["speed",{"_index":896,"title":{},"name":{},"text":{"9":{},"111":{}},"component":{},"keyword":{}}],["speedup",{"_index":4909,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["spencer",{"_index":357,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["spend",{"_index":4551,"title":{},"name":{},"text":{"90":{},"95":{},"106":{}},"component":{},"keyword":{}}],["spent",{"_index":4925,"title":{},"name":{},"text":{"96":{},"103":{}},"component":{},"keyword":{}}],["sphere",{"_index":1897,"title":{},"name":{},"text":{"41":{},"102":{}},"component":{},"keyword":{}}],["spici",{"_index":2176,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["spill",{"_index":4897,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["spir",{"_index":485,"title":{"26-3":{},"31-3":{},"49-5":{},"56-18":{}},"name":{},"text":{"4":{},"11":{},"12":{},"17":{},"26":{},"31":{},"49":{},"56":{},"62":{},"84":{},"90":{},"91":{}},"component":{},"keyword":{}}],["spirv",{"_index":482,"title":{},"name":{},"text":{"4":{},"26":{},"31":{},"67":{},"85":{}},"component":{},"keyword":{}}],["spirv.data",{"_index":1614,"title":{},"name":{},"text":{"26":{},"66":{},"85":{}},"component":{},"keyword":{}}],["spirv.siz",{"_index":1611,"title":{},"name":{},"text":{"26":{},"85":{}},"component":{},"keyword":{}}],["spirvcod",{"_index":1617,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["split",{"_index":855,"title":{},"name":{},"text":{"8":{},"13":{},"59":{},"66":{},"91":{},"93":{},"94":{},"103":{},"108":{}},"component":{},"keyword":{}}],["splite",{"_index":3352,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["sponza",{"_index":950,"title":{},"name":{},"text":{"10":{},"12":{},"19":{},"80":{},"82":{},"92":{},"97":{},"98":{},"99":{},"105":{},"110":{}},"component":{},"keyword":{}}],["spot",{"_index":4613,"title":{},"name":{},"text":{"91":{},"109":{}},"component":{},"keyword":{}}],["spread",{"_index":3225,"title":{},"name":{},"text":{"64":{},"94":{},"103":{}},"component":{},"keyword":{}}],["spv_khr_physical_storage_buff",{"_index":2188,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["squar",{"_index":3244,"title":{},"name":{},"text":{"64":{},"82":{},"90":{}},"component":{},"keyword":{}}],["squareradiu",{"_index":3535,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["srbg",{"_index":4664,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["src",{"_index":538,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["src/.cpp",{"_index":544,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["src/.hpp",{"_index":543,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["srcoffset",{"_index":2038,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["srcstagemask",{"_index":5227,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["ssaa",{"_index":5112,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["ssao",{"_index":5139,"title":{},"name":{},"text":{"101":{},"107":{}},"component":{},"keyword":{}}],["ssbo",{"_index":1261,"title":{},"name":{},"text":{"12":{},"20":{},"49":{},"56":{},"67":{},"71":{},"90":{},"91":{},"95":{},"102":{}},"component":{},"keyword":{}}],["ssbo2",{"_index":2205,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ssbo[nonuniformext(index)].v",{"_index":2741,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["ssbo[nonuniformresourceindex(index)][0",{"_index":2769,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["stabil",{"_index":1388,"title":{},"name":{},"text":{"13":{},"37":{},"46":{}},"component":{},"keyword":{}}],["stabl",{"_index":1889,"title":{},"name":{},"text":{"40":{},"49":{}},"component":{},"keyword":{}}],["stack",{"_index":2984,"title":{},"name":{},"text":{"60":{},"96":{}},"component":{},"keyword":{}}],["stackoverflow.com",{"_index":5348,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["stage",{"_index":518,"title":{"104-3":{}},"name":{},"text":{"5":{},"12":{},"20":{},"26":{},"31":{},"38":{},"47":{},"54":{},"56":{},"59":{},"62":{},"66":{},"71":{},"74":{},"75":{},"82":{},"84":{},"85":{},"91":{},"95":{},"97":{},"100":{},"102":{},"103":{},"104":{},"105":{},"108":{},"111":{},"113":{}},"component":{},"keyword":{}}],["stage_",{"_index":4067,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["stageflag",{"_index":4837,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["staging_buff",{"_index":2026,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["staging_memori",{"_index":5533,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["stale",{"_index":2810,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["stall",{"_index":1255,"title":{},"name":{},"text":{"12":{},"20":{},"38":{},"47":{},"88":{},"93":{},"98":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["stamp",{"_index":1760,"title":{"38-6":{},"47-6":{}},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["standard",{"_index":1301,"title":{},"name":{},"text":{"12":{},"19":{},"48":{},"54":{},"71":{},"80":{},"86":{},"90":{},"102":{}},"component":{},"keyword":{}}],["start",{"_index":60,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"13":{},"34":{},"38":{},"42":{},"47":{},"52":{},"54":{},"55":{},"60":{},"74":{},"83":{},"93":{},"95":{},"98":{},"102":{},"104":{},"106":{},"110":{}},"component":{},"keyword":{}}],["startup",{"_index":1021,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["starv",{"_index":4723,"title":{},"name":{},"text":{"93":{},"104":{}},"component":{},"keyword":{}}],["starvat",{"_index":4728,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["stat",{"_index":4563,"title":{},"name":{},"text":{"90":{},"95":{}},"component":{},"keyword":{}}],["state",{"_index":1133,"title":{"61":{},"69":{},"89":{},"12-78":{},"12-79":{},"12-80":{},"13-3":{},"19-26":{},"19-27":{},"19-28":{},"66-2":{},"85-8":{}},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"51":{},"54":{},"56":{},"61":{},"66":{},"69":{},"71":{},"77":{},"83":{},"85":{},"88":{},"89":{},"92":{},"94":{},"97":{},"100":{},"101":{},"105":{},"106":{},"108":{}},"component":{},"keyword":{}}],["statement",{"_index":1373,"title":{},"name":{},"text":{"12":{},"19":{},"62":{},"84":{}},"component":{},"keyword":{}}],["static",{"_index":2833,"title":{"82-2":{}},"name":{},"text":{"56":{},"59":{},"61":{},"77":{},"82":{},"89":{},"95":{},"96":{},"100":{},"107":{}},"component":{},"keyword":{}}],["static/non",{"_index":3052,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["static_cast(buffer_copy_regions.s",{"_index":5554,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["static_cast(cubes.s",{"_index":2582,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["static_cast(dynamic_state_enables.s",{"_index":3141,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["static_cast(enabled_extensions.s",{"_index":5606,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["static_cast(eshmsgreadhlsl",{"_index":1586,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["static_cast(floor(log2(std::max(texture.width",{"_index":1708,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["static_cast(gui_settings.selected_oper",{"_index":3407,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["static_cast(libraries.s",{"_index":3336,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["static_cast(spirv.s",{"_index":3317,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["static_cast(time_stamps.s",{"_index":1807,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["static_cast(vertex_attribute_description_ext.s",{"_index":4447,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["static_cast(vertex_bindings_description_ext.s",{"_index":4445,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["static_cast(vertex_input_attributes.s",{"_index":3297,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["static_cast(vertex_input_attributes_1.s",{"_index":4411,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["static_cast(vertex_input_attributes_2.s",{"_index":4423,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["static_cast(vertex_input_bindings.s",{"_index":3293,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["static_cast(vertex_input_bindings_1.s",{"_index":4407,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["static_cast(vertex_input_bindings_2.s",{"_index":4419,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["static_cast(write_descriptor_sets.s",{"_index":1933,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["stay",{"_index":1888,"title":{},"name":{},"text":{"40":{},"49":{},"95":{}},"component":{},"keyword":{}}],["stb",{"_index":487,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["std430",{"_index":3367,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["std::array",{"_index":1068,"title":{},"name":{},"text":{"11":{},"34":{},"38":{},"47":{},"74":{}},"component":{},"keyword":{}}],["std::cout",{"_index":1864,"title":{},"name":{},"text":{"38":{},"47":{},"84":{}},"component":{},"keyword":{}}],["std::fill(conditional_visibility_list.begin",{"_index":2338,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["std::lock_guard",{"_index":4371,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["std::make_unique(*swapchain",{"_index":5417,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["std::make_unique(get_devic",{"_index":2313,"title":{},"name":{},"text":{"52":{},"55":{}},"component":{},"keyword":{}}],["std::make_unique(get_render_context",{"_index":1059,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["std::move(frag_shad",{"_index":1061,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["std::move(vert_shad",{"_index":1060,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["std::numeric_limits::max",{"_index":3709,"title":{},"name":{},"text":{"74":{},"88":{}},"component":{},"keyword":{}}],["std::runtime_error(\"could",{"_index":5519,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["std::runtime_error(\"un",{"_index":3051,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["std::runtime_error{\"th",{"_index":1794,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["std::string",{"_index":3451,"title":{},"name":{},"text":{"70":{},"84":{},"85":{}},"component":{},"keyword":{}}],["std::swap(width",{"_index":5416,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["std::to_string(i",{"_index":3452,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["std::unique_lock",{"_index":4376,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["std::unique_ptr",{"_index":1030,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["std::vector",{"_index":1582,"title":{},"name":{},"text":{"26":{},"31":{},"42":{},"52":{},"54":{},"56":{},"61":{},"66":{},"69":{},"74":{},"77":{},"78":{},"84":{},"85":{},"89":{},"99":{},"111":{}},"component":{},"keyword":{}}],["stencil",{"_index":1227,"title":{},"name":{},"text":{"12":{},"20":{},"60":{},"97":{},"104":{},"105":{},"106":{}},"component":{},"keyword":{}}],["step",{"_index":625,"title":{},"name":{},"text":{"7":{},"12":{},"20":{},"52":{},"55":{},"66":{},"84":{},"86":{},"92":{},"101":{},"103":{},"109":{}},"component":{},"keyword":{}}],["steven",{"_index":359,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["still",{"_index":1434,"title":{},"name":{},"text":{"13":{},"38":{},"47":{},"55":{},"56":{},"59":{},"64":{},"74":{},"88":{},"91":{},"93":{},"94":{},"95":{},"96":{},"98":{},"101":{},"103":{},"104":{},"110":{}},"component":{},"keyword":{}}],["stippl",{"_index":2894,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["stitch",{"_index":2242,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["stop",{"_index":433,"title":{},"name":{},"text":{"4":{},"43":{},"49":{},"113":{}},"component":{},"keyword":{}}],["storag",{"_index":409,"title":{"91":{},"12-20":{},"20-19":{},"90-5":{},"91-2":{},"91-3":{},"91-4":{}},"name":{},"text":{"4":{},"8":{},"12":{},"13":{},"20":{},"41":{},"49":{},"55":{},"67":{},"71":{},"90":{},"91":{},"95":{},"99":{},"100":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["storage_buff",{"_index":3364,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["storagebuffer16bitaccess",{"_index":4467,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["storageinputoutput16",{"_index":4566,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["storagepushconstant16",{"_index":4468,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["store",{"_index":160,"title":{"106-3":{}},"name":{},"text":{"2":{},"8":{},"12":{},"17":{},"20":{},"23":{},"37":{},"38":{},"41":{},"46":{},"47":{},"49":{},"52":{},"55":{},"59":{},"67":{},"82":{},"83":{},"90":{},"91":{},"95":{},"96":{},"97":{},"98":{},"101":{},"105":{},"106":{},"108":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["store_op_dont_car",{"_index":5164,"title":{},"name":{},"text":{"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["store_op_stor",{"_index":5166,"title":{},"name":{},"text":{"101":{},"106":{}},"component":{},"keyword":{}}],["storeop",{"_index":1230,"title":{},"name":{},"text":{"12":{},"20":{},"100":{},"101":{},"106":{}},"component":{},"keyword":{}}],["straight",{"_index":2813,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["straightforward",{"_index":1176,"title":{},"name":{},"text":{"12":{},"20":{},"38":{},"43":{},"47":{},"54":{},"95":{},"96":{}},"component":{},"keyword":{}}],["strategi",{"_index":2318,"title":{"94-4":{}},"name":{},"text":{"52":{},"90":{},"93":{}},"component":{},"keyword":{}}],["strcmp(available_extension.extensionnam",{"_index":2393,"title":{},"name":{},"text":{"54":{},"56":{},"78":{}},"component":{},"keyword":{}}],["stream",{"_index":2632,"title":{"56-3":{}},"name":{},"text":{"56":{},"96":{},"109":{}},"component":{},"keyword":{}}],["streamed/bindless",{"_index":2651,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["streamlin",{"_index":1336,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"55":{},"87":{},"91":{},"92":{},"95":{},"96":{},"98":{},"101":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"113":{}},"component":{},"keyword":{}}],["strict",{"_index":1220,"title":{},"name":{},"text":{"12":{},"20":{},"95":{},"104":{}},"component":{},"keyword":{}}],["strictli",{"_index":4961,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["stride",{"_index":3869,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["string",{"_index":1540,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["strip",{"_index":3155,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["strongli",{"_index":3494,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["struct",{"_index":911,"title":{},"name":{},"text":{"9":{},"12":{},"20":{},"26":{},"31":{},"49":{},"51":{},"54":{},"56":{},"60":{},"61":{},"64":{},"67":{},"69":{},"71":{},"82":{},"83":{},"85":{},"89":{},"90":{},"95":{},"102":{},"106":{},"109":{}},"component":{},"keyword":{}}],["structur",{"_index":26,"title":{"2-2":{},"82-1":{},"83-2":{}},"name":{},"text":{"11":{},"12":{},"13":{},"19":{},"26":{},"31":{},"37":{},"46":{},"49":{},"52":{},"54":{},"56":{},"59":{},"60":{},"61":{},"62":{},"67":{},"69":{},"70":{},"71":{},"74":{},"75":{},"77":{},"78":{},"80":{},"81":{},"82":{},"83":{},"85":{},"89":{},"91":{},"94":{},"95":{},"97":{},"98":{},"101":{},"102":{},"105":{},"110":{}},"component":{},"keyword":{}}],["struggl",{"_index":4555,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["studi",{"_index":2927,"title":{"93-2":{}},"name":{},"text":{"59":{},"90":{},"93":{}},"component":{},"keyword":{}}],["studio",{"_index":567,"title":{"7-16":{},"7-35":{}},"name":{},"text":{"7":{},"113":{}},"component":{},"keyword":{}}],["stumbl",{"_index":4826,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["stutter",{"_index":3258,"title":{},"name":{},"text":{"64":{},"97":{},"105":{}},"component":{},"keyword":{}}],["style",{"_index":34,"title":{"2-6":{}},"name":{},"text":{"2":{},"7":{},"49":{},"56":{},"93":{}},"component":{},"keyword":{}}],["style=fil",{"_index":274,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["stype",{"_index":3041,"title":{},"name":{},"text":{"60":{},"69":{},"70":{},"89":{}},"component":{},"keyword":{}}],["sub",{"_index":115,"title":{"12-16":{},"20-15":{}},"name":{},"text":{"2":{},"10":{},"12":{},"20":{},"52":{},"64":{},"100":{},"102":{},"106":{}},"component":{},"keyword":{}}],["subcommand",{"_index":425,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["subdimens",{"_index":3501,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["subdivid",{"_index":1233,"title":{},"name":{},"text":{"12":{},"20":{},"108":{}},"component":{},"keyword":{}}],["subgroup",{"_index":2635,"title":{"56-15":{}},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["subgroupbroadcastfirst",{"_index":2714,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["subgroupbroadcastfirst(index",{"_index":2719,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["subject",{"_index":304,"title":{},"name":{},"text":{"2":{},"95":{}},"component":{},"keyword":{}}],["submiss",{"_index":301,"title":{"88-10":{},"88-14":{},"88-15":{}},"name":{},"text":{"2":{},"12":{},"19":{},"52":{},"74":{},"87":{},"88":{}},"component":{},"keyword":{}}],["submit",{"_index":293,"title":{},"name":{},"text":{"2":{},"37":{},"38":{},"46":{},"47":{},"54":{},"74":{},"88":{},"93":{},"94":{},"95":{},"98":{},"103":{},"110":{},"113":{}},"component":{},"keyword":{}}],["submit.commandbuffercount",{"_index":4301,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.pcommandbuff",{"_index":4299,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.pnext",{"_index":4308,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.psignalsemaphor",{"_index":4297,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.pwaitdststagemask",{"_index":4313,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.pwaitsemaphor",{"_index":4312,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.signalsemaphorecount",{"_index":4298,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit.waitsemaphorecount",{"_index":4314,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["submit_info",{"_index":3721,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["submodul",{"_index":413,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{},"keyword":{}}],["suboptim",{"_index":1494,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["subpass",{"_index":1232,"title":{"108":{}},"name":{},"text":{"12":{},"13":{},"20":{},"51":{},"64":{},"96":{},"97":{},"100":{},"101":{},"104":{},"105":{},"108":{}},"component":{},"keyword":{}}],["subpassload(i_depth).x",{"_index":5320,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["subresourc",{"_index":1741,"title":{},"name":{},"text":{"37":{},"46":{}},"component":{},"keyword":{}}],["subresource_layout",{"_index":5054,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["subresource_layout.pnext",{"_index":5046,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["subresource_layout{vk_structure_type_subresource_layout_2_khr",{"_index":5045,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["subsect",{"_index":4157,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["subsequ",{"_index":874,"title":{},"name":{},"text":{"8":{},"49":{},"57":{},"85":{},"92":{},"97":{},"105":{}},"component":{},"keyword":{}}],["subset",{"_index":1467,"title":{},"name":{},"text":{"13":{},"78":{},"92":{},"95":{}},"component":{},"keyword":{}}],["substanti",{"_index":5085,"title":{},"name":{},"text":{"99":{},"101":{}},"component":{},"keyword":{}}],["substitut",{"_index":4886,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["subsystem",{"_index":1246,"title":{},"name":{},"text":{"12":{},"20":{},"109":{}},"component":{},"keyword":{}}],["subtl",{"_index":4775,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["successfulli",{"_index":3725,"title":{},"name":{},"text":{"74":{},"90":{},"111":{}},"component":{},"keyword":{}}],["such",{"_index":817,"title":{},"name":{},"text":{"8":{},"11":{},"12":{},"13":{},"19":{},"20":{},"26":{},"31":{},"37":{},"38":{},"46":{},"47":{},"52":{},"54":{},"55":{},"56":{},"59":{},"62":{},"70":{},"71":{},"75":{},"78":{},"82":{},"84":{},"85":{},"86":{},"88":{},"90":{},"91":{},"92":{},"95":{},"96":{},"97":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"107":{},"108":{},"109":{}},"component":{},"keyword":{}}],["sudden",{"_index":4947,"title":{},"name":{},"text":{"97":{},"98":{},"105":{},"110":{}},"component":{},"keyword":{}}],["sudo",{"_index":646,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["suffer",{"_index":5298,"title":{},"name":{},"text":{"107":{},"111":{}},"component":{},"keyword":{}}],["suffic",{"_index":4011,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["suffici",{"_index":1797,"title":{},"name":{},"text":{"38":{},"47":{},"104":{}},"component":{},"keyword":{}}],["suggest",{"_index":103,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["suit",{"_index":4204,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["suitabl",{"_index":4191,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["sum",{"_index":2564,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["summari",{"_index":157,"title":{"90-9":{},"91-7":{},"92-6":{},"93-10":{},"94-10":{},"95-31":{},"96-6":{},"97-6":{},"98-6":{},"100-3":{},"101-3":{},"103-6":{},"104-5":{},"105-6":{},"106-7":{},"107-4":{},"108-7":{},"109-8":{},"110-6":{},"113-4":{}},"name":{},"text":{"2":{},"13":{},"95":{}},"component":{},"keyword":{}}],["super",{"_index":5111,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["supercompress",{"_index":1095,"title":{"111":{},"12-23":{},"20-22":{}},"name":{},"text":{"12":{},"20":{},"111":{}},"component":{},"keyword":{}}],["superset",{"_index":4273,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["suppli",{"_index":4780,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["support",{"_index":164,"title":{"4-7":{},"11-4":{},"38-3":{},"47-3":{},"75-4":{},"75-7":{},"78-3":{},"90-2":{},"90-5":{},"91-3":{},"92-4":{},"99-7":{},"99-11":{}},"name":{},"text":{"2":{},"7":{},"10":{},"11":{},"12":{},"13":{},"15":{},"19":{},"26":{},"31":{},"37":{},"38":{},"46":{},"47":{},"49":{},"51":{},"56":{},"60":{},"61":{},"62":{},"64":{},"74":{},"77":{},"78":{},"85":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"95":{},"98":{},"99":{},"101":{},"102":{},"109":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["supported/unsupport",{"_index":3827,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["supported_compression_properti",{"_index":5017,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["supported_compression_properties{vk_structure_type_image_compression_properties_ext",{"_index":5000,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["suppos",{"_index":3756,"title":{},"name":{},"text":{"75":{},"98":{},"110":{}},"component":{},"keyword":{}}],["sure",{"_index":279,"title":{},"name":{},"text":{"2":{},"4":{},"7":{},"38":{},"47":{},"74":{},"75":{},"90":{},"91":{},"92":{},"94":{},"96":{},"99":{}},"component":{},"keyword":{}}],["surfac",{"_index":1087,"title":{"109":{},"12-17":{},"20-16":{},"69-2":{},"99-11":{},"99-12":{},"99-13":{}},"name":{},"text":{"69":{},"83":{},"92":{},"98":{},"99":{},"101":{},"109":{},"110":{}},"component":{},"keyword":{}}],["surface_ext",{"_index":5409,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["surface_format",{"_index":5065,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_format_count",{"_index":5064,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_format_count{0u",{"_index":5061,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_formats.data",{"_index":5072,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_formats.resize(surface_format_count",{"_index":5066,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_formats[i].pnext",{"_index":5070,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_info",{"_index":5063,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_info.surfac",{"_index":5060,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_info{vk_structure_type_physical_device_surface_info_2_khr",{"_index":5059,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["surface_priority_list",{"_index":3389,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["surface_properti",{"_index":5400,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["surface_properties.currenttransform",{"_index":5404,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["surface_rot",{"_index":5445,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["surface’",{"_index":5358,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["surround",{"_index":4025,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["sustain",{"_index":819,"title":{},"name":{},"text":{"8":{},"101":{}},"component":{},"keyword":{}}],["sv_dispatchthreadid",{"_index":2764,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["sv_posit",{"_index":1571,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["swap",{"_index":4029,"title":{},"name":{},"text":{"85":{},"109":{}},"component":{},"keyword":{}}],["swapchain",{"_index":426,"title":{"43":{},"98":{},"110":{},"12-7":{},"12-18":{},"12-50":{},"17-25":{},"20-6":{},"20-17":{},"43-1":{},"109-5":{}},"name":{},"text":{"4":{},"12":{},"17":{},"19":{},"20":{},"43":{},"65":{},"81":{},"88":{},"92":{},"93":{},"98":{},"99":{},"100":{},"101":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["swapchain.get_transform",{"_index":5424,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["swapchain::get_applied_compress",{"_index":5080,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["swapchain::query_supported_fixed_rate_compress",{"_index":5074,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["swapchain_buffers[i].view",{"_index":3006,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["swapchain_imag",{"_index":427,"title":{},"name":{},"text":{"4":{},"110":{}},"component":{},"keyword":{}}],["swapchain_img.get_handl",{"_index":5125,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["swapchain’",{"_index":5406,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["sweet",{"_index":330,"title":{"88-6":{}},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["switch",{"_index":3214,"title":{},"name":{},"text":{"62":{},"65":{},"74":{},"98":{},"100":{},"104":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["swizzl",{"_index":4530,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["swoop",{"_index":4348,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["symbol",{"_index":2873,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["sync",{"_index":602,"title":{},"name":{},"text":{"7":{},"74":{},"100":{}},"component":{},"keyword":{}}],["synchron",{"_index":582,"title":{"113":{}},"name":{},"text":{"7":{},"12":{},"13":{},"19":{},"20":{},"37":{},"46":{},"52":{},"74":{},"75":{},"76":{},"87":{},"88":{},"103":{},"104":{},"113":{}},"component":{},"keyword":{}}],["synchronis",{"_index":5566,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["synchronization2",{"_index":1127,"title":{"87":{},"12-70":{},"19-18":{}},"name":{},"text":{},"component":{},"keyword":{}}],["syntax",{"_index":236,"title":{"26-1":{},"31-1":{}},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["synthes",{"_index":1379,"title":{},"name":{},"text":{"12":{},"18":{},"48":{}},"component":{},"keyword":{}}],["system",{"_index":138,"title":{"16":{},"10-2":{}},"name":{},"text":{"2":{},"4":{},"7":{},"10":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"22":{},"41":{},"64":{},"74":{},"82":{},"85":{},"87":{},"92":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"105":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["system_test.pi",{"_index":943,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["szabo",{"_index":333,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["t",{"_index":4590,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["tab",{"_index":3437,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["tabl",{"_index":1142,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"75":{},"81":{},"90":{},"94":{},"114":{}},"component":{},"keyword":{}}],["table_offset",{"_index":2806,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tackl",{"_index":1149,"title":{},"name":{},"text":{"12":{},"20":{},"92":{}},"component":{},"keyword":{}}],["tag",{"_index":174,"title":{"49-7":{},"54-7":{}},"name":{},"text":{"2":{},"49":{},"54":{},"56":{}},"component":{},"keyword":{}}],["tag_info",{"_index":2523,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["tag_info.objecthandl",{"_index":2527,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["tag_info.objecttyp",{"_index":2525,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["tag_info.ptag",{"_index":2532,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["tag_info.tagnam",{"_index":2529,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["tag_info.tags",{"_index":2530,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["take",{"_index":315,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"20":{},"38":{},"43":{},"47":{},"50":{},"54":{},"55":{},"57":{},"85":{},"86":{},"88":{},"90":{},"91":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"105":{},"108":{},"109":{},"110":{},"114":{}},"component":{},"keyword":{}}],["taken",{"_index":1778,"title":{},"name":{},"text":{"38":{},"47":{},"52":{},"95":{},"103":{},"107":{},"111":{}},"component":{},"keyword":{}}],["tama",{"_index":345,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["tandem",{"_index":4024,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["tangent",{"_index":4617,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["tap",{"_index":901,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["target",{"_index":285,"title":{"5-3":{},"111-5":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"12":{},"13":{},"20":{},"26":{},"31":{},"56":{},"74":{},"75":{},"83":{},"93":{},"100":{},"104":{},"106":{},"111":{}},"component":{},"keyword":{}}],["target_format",{"_index":5525,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["task",{"_index":1297,"title":{"71-6":{}},"name":{},"text":{"12":{},"13":{},"19":{},"56":{},"71":{},"88":{}},"component":{},"keyword":{}}],["taskpayloadsharedext",{"_index":3490,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["taskshad",{"_index":3472,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["tbdr",{"_index":4564,"title":{"93-3":{},"93-4":{}},"name":{},"text":{"91":{},"93":{}},"component":{},"keyword":{}}],["teamid",{"_index":690,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["teapot",{"_index":2974,"title":{},"name":{},"text":{"59":{},"67":{},"91":{}},"component":{},"keyword":{}}],["teapot.gltf",{"_index":3365,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["tear",{"_index":4254,"title":{"88-13":{}},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["teardown",{"_index":4334,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["technic",{"_index":1775,"title":{},"name":{},"text":{"38":{},"47":{},"49":{},"56":{},"95":{}},"component":{},"keyword":{}}],["techniqu",{"_index":1213,"title":{},"name":{},"text":{"12":{},"18":{},"20":{},"37":{},"46":{},"48":{},"56":{},"59":{},"82":{},"93":{},"94":{},"95":{},"96":{},"101":{},"103":{},"108":{}},"component":{},"keyword":{}}],["technolog",{"_index":1153,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"92":{},"100":{}},"component":{},"keyword":{}}],["tell",{"_index":1825,"title":{},"name":{},"text":{"38":{},"43":{},"47":{},"54":{},"70":{},"84":{},"106":{},"109":{}},"component":{},"keyword":{}}],["templat",{"_index":33,"title":{"2-5":{}},"name":{},"text":{"7":{},"62":{},"109":{}},"component":{},"keyword":{}}],["ten",{"_index":4182,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["tend",{"_index":4381,"title":{},"name":{},"text":{"88":{},"90":{},"91":{}},"component":{},"keyword":{}}],["term",{"_index":1687,"title":{"88-3":{}},"name":{},"text":{"37":{},"46":{},"56":{},"99":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["termin",{"_index":708,"title":{},"name":{},"text":{"7":{},"74":{},"75":{},"83":{},"97":{},"105":{}},"component":{},"keyword":{}}],["terminolog",{"_index":2708,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["terrain",{"_index":1107,"title":{"35":{},"44":{},"12-39":{},"12-45":{},"17-14":{},"17-20":{}},"name":{},"text":{"12":{},"17":{},"35":{},"44":{},"59":{},"85":{},"86":{}},"component":{},"keyword":{}}],["tessel",{"_index":788,"title":{"35":{},"44":{},"12-39":{},"12-45":{},"17-14":{},"17-20":{}},"name":{},"text":{"8":{},"12":{},"17":{},"35":{},"44":{},"61":{},"77":{},"85":{}},"component":{},"keyword":{}}],["tessellation_st",{"_index":3120,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["tessellation_state.patchcontrolpoint",{"_index":3812,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["tessellation_state.styp",{"_index":3810,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["tessellationshad",{"_index":4156,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["test",{"_index":374,"title":{"10":{},"4-9":{},"5-4":{},"10-2":{},"10-4":{},"41-4":{}},"name":{"10":{}},"text":{"4":{},"5":{},"7":{},"10":{},"41":{},"82":{},"83":{},"90":{},"91":{},"92":{},"94":{},"96":{},"101":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["test(",{"_index":949,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tests/.test.cpp",{"_index":548,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["tests/generate_sampl",{"_index":956,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tests/system_test",{"_index":942,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tests__",{"_index":552,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["tex",{"_index":2696,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tex0",{"_index":2682,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tex1",{"_index":2683,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tex2",{"_index":2684,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tex3",{"_index":2685,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tex[4",{"_index":2677,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["tex[nonuniformresourceindex(index)].samplelevel(samp[nonuniformresourceindex(index",{"_index":2767,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texcoord0",{"_index":1561,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["texel",{"_index":3234,"title":{},"name":{},"text":{"64":{},"86":{}},"component":{},"keyword":{}}],["text",{"_index":233,"title":{},"name":{},"text":{"2":{},"26":{},"31":{},"84":{}},"component":{},"keyword":{}}],["textual",{"_index":1051,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["textur",{"_index":478,"title":{"36":{},"45":{},"111":{},"112":{},"12-23":{},"12-25":{},"12-40":{},"12-41":{},"12-46":{},"12-47":{},"17-15":{},"17-16":{},"17-21":{},"17-22":{},"20-22":{},"20-24":{},"56-11":{},"56-12":{},"82-4":{},"102-3":{},"111-9":{}},"name":{},"text":{"4":{},"11":{},"12":{},"17":{},"18":{},"19":{},"20":{},"36":{},"37":{},"39":{},"45":{},"46":{},"48":{},"56":{},"62":{},"74":{},"75":{},"76":{},"82":{},"84":{},"86":{},"90":{},"91":{},"92":{},"96":{},"101":{},"102":{},"107":{},"108":{},"109":{},"111":{},"112":{}},"component":{},"keyword":{}}],["texture(_combined_imag",{"_index":1676,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["texture(nonuniformext(sampler2d(textures[in_texture_index",{"_index":2800,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture(sampler2d(_textur",{"_index":1665,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["texture(sampler2d(textures[registers.table_offset",{"_index":2807,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture(tex[0",{"_index":2678,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture(tex[2",{"_index":2679,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture(tex[dynamically_uniform_express",{"_index":2686,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture(tex[index",{"_index":2725,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture(tex[nonuniformext(arbitrary_express",{"_index":2697,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texture.height",{"_index":1709,"title":{},"name":{},"text":{"37":{},"46":{},"111":{}},"component":{},"keyword":{}}],["texture.imag",{"_index":1634,"title":{},"name":{},"text":{"34":{},"37":{},"42":{},"46":{},"111":{}},"component":{},"keyword":{}}],["texture.image_layout",{"_index":1671,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["texture.mip_level",{"_index":1707,"title":{},"name":{},"text":{"37":{},"46":{},"111":{}},"component":{},"keyword":{}}],["texture.sampl",{"_index":1953,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["texture.view",{"_index":1670,"title":{},"name":{},"text":{"34":{},"37":{},"42":{},"46":{}},"component":{},"keyword":{}}],["texture.width",{"_index":2022,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["texture2d",{"_index":1660,"title":{},"name":{},"text":{"34":{},"42":{},"56":{}},"component":{},"keyword":{}}],["texturecompressionbasisu::get_available_target_format",{"_index":5493,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["texturecompressionbasisu::transcode_textur",{"_index":5509,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["texturelod(combined[nonuniformext(index",{"_index":2737,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["texturelod(nonuniformext(sampler2d(tex[index",{"_index":2738,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["thank",{"_index":3144,"title":{},"name":{},"text":{"61":{},"77":{},"97":{},"99":{},"105":{}},"component":{},"keyword":{}}],["that'",{"_index":2722,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["that’",{"_index":1787,"title":{},"name":{},"text":{"38":{},"47":{},"54":{},"56":{},"74":{},"88":{},"91":{},"114":{}},"component":{},"keyword":{}}],["themselv",{"_index":3860,"title":{},"name":{},"text":{"82":{},"85":{},"96":{}},"component":{},"keyword":{}}],["theoret",{"_index":4607,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["theori",{"_index":4781,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["therefor",{"_index":928,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"20":{},"83":{},"94":{},"95":{},"97":{},"99":{},"101":{},"103":{},"105":{},"106":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["there’",{"_index":3986,"title":{},"name":{},"text":{"84":{},"91":{}},"component":{},"keyword":{}}],["thermal",{"_index":1428,"title":{},"name":{},"text":{"13":{},"98":{},"110":{}},"component":{},"keyword":{}}],["theta",{"_index":3903,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["theta,phi",{"_index":3898,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["they’ll",{"_index":3711,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["they’r",{"_index":2917,"title":{},"name":{},"text":{"59":{},"66":{}},"component":{},"keyword":{}}],["thicker",{"_index":1505,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["thin",{"_index":1501,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["thing",{"_index":1473,"title":{"93-2":{}},"name":{},"text":{"13":{},"49":{},"56":{},"74":{},"88":{},"91":{},"95":{},"108":{}},"component":{},"keyword":{}}],["think",{"_index":2467,"title":{"88-3":{}},"name":{},"text":{"54":{},"56":{},"88":{}},"component":{},"keyword":{}}],["thinner",{"_index":1496,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["third",{"_index":216,"title":{},"name":{},"text":{"2":{},"4":{},"61":{},"104":{}},"component":{},"keyword":{}}],["third_parti",{"_index":120,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["those",{"_index":302,"title":{},"name":{},"text":{"2":{},"12":{},"19":{},"20":{},"51":{},"54":{},"55":{},"61":{},"74":{},"83":{},"84":{},"86":{},"91":{},"101":{},"106":{},"109":{}},"component":{},"keyword":{}}],["though",{"_index":1580,"title":{},"name":{},"text":{"26":{},"31":{},"37":{},"38":{},"46":{},"47":{},"56":{},"74":{},"82":{},"85":{},"98":{},"99":{},"110":{}},"component":{},"keyword":{}}],["thousand",{"_index":4183,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["thr",{"_index":2763,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["thr.x",{"_index":2765,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["thread",{"_index":455,"title":{"94":{},"103":{},"12-11":{},"13-5":{},"20-10":{},"88-10":{},"88-13":{},"94-3":{},"103-3":{}},"name":{},"text":{"4":{},"12":{},"13":{},"20":{},"56":{},"66":{},"88":{},"90":{},"93":{},"94":{},"95":{},"103":{},"108":{}},"component":{},"keyword":{}}],["thread_index",{"_index":5433,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["thread_pipeline_cach",{"_index":3345,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["three",{"_index":1813,"title":{},"name":{},"text":{"38":{},"47":{},"51":{},"55":{},"62":{},"82":{},"83":{},"94":{},"95":{},"102":{},"104":{}},"component":{},"keyword":{}}],["threshold",{"_index":3897,"title":{},"name":{},"text":{"82":{},"83":{}},"component":{},"keyword":{}}],["through",{"_index":700,"title":{},"name":{},"text":{"7":{},"11":{},"13":{},"48":{},"49":{},"55":{},"60":{},"64":{},"85":{},"88":{},"94":{},"102":{},"104":{},"107":{},"109":{}},"component":{},"keyword":{}}],["throughout",{"_index":4784,"title":{},"name":{},"text":{"95":{},"104":{}},"component":{},"keyword":{}}],["throughput",{"_index":1259,"title":{},"name":{},"text":{"12":{},"20":{},"90":{},"91":{},"108":{}},"component":{},"keyword":{}}],["throw",{"_index":1793,"title":{},"name":{},"text":{"38":{},"47":{},"60":{},"111":{}},"component":{},"keyword":{}}],["thu",{"_index":804,"title":{},"name":{},"text":{"8":{},"48":{},"56":{},"71":{},"82":{},"84":{},"90":{},"94":{},"96":{},"99":{},"109":{}},"component":{},"keyword":{}}],["thumb",{"_index":4894,"title":{},"name":{},"text":{"95":{},"98":{},"110":{}},"component":{},"keyword":{}}],["tidi",{"_index":597,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["tight",{"_index":4569,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["tightli",{"_index":1430,"title":{},"name":{},"text":{"13":{},"104":{}},"component":{},"keyword":{}}],["tile",{"_index":801,"title":{"91":{},"93-3":{},"104-2":{}},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"91":{},"93":{},"94":{},"100":{},"101":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["tiler",{"_index":5116,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["time",{"_index":386,"title":{"37":{},"46":{},"12-41":{},"12-47":{},"17-16":{},"17-22":{},"38-6":{},"47-6":{},"50-3":{},"50-4":{}},"name":{},"text":{"4":{},"7":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"34":{},"38":{},"42":{},"43":{},"47":{},"48":{},"49":{},"50":{},"52":{},"55":{},"56":{},"66":{},"67":{},"70":{},"71":{},"75":{},"79":{},"82":{},"83":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"101":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"112":{},"113":{}},"component":{},"keyword":{}}],["time_stamp",{"_index":1841,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["time_stamp_with_avail",{"_index":1856,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["time_stamp_with_availibility[current_fram",{"_index":1855,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["time_stamps.data",{"_index":1838,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["time_stamps.s",{"_index":1836,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["time_stamps[0",{"_index":1867,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["time_stamps_query_pool",{"_index":1808,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["timefram",{"_index":5196,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["timelin",{"_index":1124,"title":{"88":{},"12-68":{},"19-16":{},"88-7":{}},"name":{},"text":{"12":{},"19":{},"74":{},"88":{},"103":{}},"component":{},"keyword":{}}],["timeline.semaphor",{"_index":4294,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline.timelin",{"_index":4307,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline_info",{"_index":4309,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline_info.psignalsemaphorevalu",{"_index":4306,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline_info.pwaitsemaphorevalu",{"_index":4316,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline_info.signalsemaphorevaluecount",{"_index":4305,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline_info.waitsemaphorevaluecount",{"_index":4315,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timeline_info{vk_structure_type_timeline_semaphore_submit_info_khr",{"_index":4304,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timelinesemaphore::finish",{"_index":4349,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timelinesemaphore::update_pend",{"_index":4370,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timelinesemaphore::wait_pend",{"_index":4375,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["timer",{"_index":1832,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["timestamp",{"_index":1110,"title":{"38":{},"47":{},"50":{},"12-42":{},"12-49":{},"17-17":{},"17-24":{},"38-2":{},"47-2":{},"50-3":{},"50-4":{}},"name":{},"text":{"12":{},"17":{},"38":{},"47":{},"50":{}},"component":{},"keyword":{}}],["timestampcomputeandgraph",{"_index":1795,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["timestampperiod",{"_index":1784,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["timur’",{"_index":3509,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["tinygltf",{"_index":490,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["tip",{"_index":4735,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["tla",{"_index":1313,"title":{},"name":{},"text":{"12":{},"19":{},"82":{},"83":{}},"component":{},"keyword":{}}],["to_u32(regions.s",{"_index":5126,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["tobia",{"_index":361,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["today",{"_index":4198,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["togeth",{"_index":384,"title":{},"name":{},"text":{"4":{},"49":{},"56":{},"66":{},"84":{},"85":{},"108":{}},"component":{},"keyword":{}}],["toggl",{"_index":899,"title":{},"name":{},"text":{"9":{},"12":{},"19":{},"20":{},"51":{},"52":{},"57":{},"58":{},"82":{},"92":{},"95":{},"99":{},"101":{},"102":{},"109":{}},"component":{},"keyword":{}}],["tom",{"_index":363,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["ton",{"_index":4477,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["tonemap",{"_index":4722,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["tool",{"_index":101,"title":{"12-91":{},"21-1":{},"54-5":{}},"name":{},"text":{"2":{},"4":{},"7":{},"12":{},"19":{},"21":{},"49":{},"54":{},"56":{},"70":{},"84":{},"85":{},"90":{},"93":{},"94":{},"103":{}},"component":{},"keyword":{}}],["tools/latest/bin/sdkmanag",{"_index":737,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["tooltip",{"_index":4765,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["top",{"_index":215,"title":{"83-2":{}},"name":{},"text":{"2":{},"8":{},"12":{},"19":{},"38":{},"47":{},"80":{},"81":{},"82":{},"83":{},"92":{},"93":{},"95":{},"106":{}},"component":{},"keyword":{}}],["top_of_pipe_bit",{"_index":5221,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["topic",{"_index":2723,"title":{},"name":{},"text":{"56":{},"93":{}},"component":{},"keyword":{}}],["topolog",{"_index":3134,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["toru",{"_index":1874,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["torusknot",{"_index":2969,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["total",{"_index":1470,"title":{},"name":{},"text":{"13":{},"64":{},"70":{},"71":{},"86":{},"91":{},"94":{},"101":{},"102":{},"103":{}},"component":{},"keyword":{}}],["total_time_pass",{"_index":3730,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["touch",{"_index":1286,"title":{},"name":{},"text":{"12":{},"19":{},"53":{},"104":{}},"component":{},"keyword":{}}],["toward",{"_index":3945,"title":{},"name":{},"text":{"83":{},"88":{},"92":{},"108":{}},"component":{},"keyword":{}}],["trace",{"_index":717,"title":{"81":{},"82":{},"83":{},"12-61":{},"12-62":{},"12-74":{},"19-9":{},"19-10":{},"19-22":{},"82-5":{},"83-7":{}},"name":{},"text":{"7":{},"12":{},"19":{},"48":{},"54":{},"81":{},"82":{},"83":{},"96":{},"98":{},"106":{},"109":{},"110":{}},"component":{},"keyword":{}}],["trace_ray(object_pt",{"_index":3890,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["tracerayext",{"_index":3953,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["track",{"_index":1199,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"88":{},"96":{},"97":{},"100":{},"105":{},"109":{}},"component":{},"keyword":{}}],["tracker",{"_index":3,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["trade",{"_index":1906,"title":{},"name":{},"text":{"41":{},"94":{},"107":{}},"component":{},"keyword":{}}],["trademark",{"_index":375,"title":{"4-11":{}},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["tradeoff",{"_index":3506,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["tradit",{"_index":1355,"title":{},"name":{},"text":{"12":{},"13":{},"19":{},"48":{},"67":{},"82":{},"104":{}},"component":{},"keyword":{}}],["tradition",{"_index":4858,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["traffic",{"_index":5447,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["transact",{"_index":5087,"title":{"100-1":{}},"name":{},"text":{"100":{},"106":{},"108":{}},"component":{},"keyword":{}}],["transcod",{"_index":1189,"title":{"111-8":{}},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"68":{},"97":{},"98":{},"111":{}},"component":{},"keyword":{}}],["transer_src",{"_index":2056,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["transfer",{"_index":1447,"title":{},"name":{},"text":{"13":{},"37":{},"46":{},"64":{},"86":{},"88":{},"100":{},"104":{}},"component":{},"keyword":{}}],["transfer_dst",{"_index":2050,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["transfer_dst_optim",{"_index":2053,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["transfer_src",{"_index":2028,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["transfer_src_optim",{"_index":2054,"title":{},"name":{},"text":{"46":{},"100":{}},"component":{},"keyword":{}}],["transform",{"_index":3845,"title":{},"name":{},"text":{"82":{},"83":{},"84":{},"108":{},"109":{}},"component":{},"keyword":{}}],["transform_matrix_device_address",{"_index":3884,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["transient",{"_index":5117,"title":{"108-4":{}},"name":{},"text":{"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["transient_attach",{"_index":5275,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["transient_attachment_bit",{"_index":5090,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["transit",{"_index":1082,"title":{"100":{},"12-9":{},"20-8":{},"37-9":{},"46-9":{}},"name":{},"text":{"12":{},"20":{},"37":{},"46":{},"100":{}},"component":{},"keyword":{}}],["translat",{"_index":1445,"title":{},"name":{},"text":{"13":{},"26":{},"31":{},"71":{},"82":{},"90":{}},"component":{},"keyword":{}}],["transmiss",{"_index":5464,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["transpar",{"_index":1113,"title":{"33":{},"40":{},"41":{},"12-51":{},"12-52":{},"17-26":{},"17-27":{}},"name":{},"text":{"12":{},"15":{},"17":{},"19":{},"40":{},"41":{},"58":{},"92":{},"94":{},"99":{},"109":{}},"component":{},"keyword":{}}],["travers",{"_index":1320,"title":{},"name":{},"text":{"12":{},"19":{},"82":{}},"component":{},"keyword":{}}],["treat",{"_index":588,"title":{},"name":{},"text":{"7":{},"56":{}},"component":{},"keyword":{}}],["tree",{"_index":2461,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["tri",{"_index":966,"title":{},"name":{},"text":{"11":{},"59":{},"74":{},"90":{},"93":{},"94":{},"95":{}},"component":{},"keyword":{}}],["triangl",{"_index":1103,"title":{"25":{},"30":{},"12-30":{},"12-34":{},"17-5":{},"17-9":{}},"name":{},"text":{"12":{},"17":{},"19":{},"25":{},"30":{},"48":{},"51":{},"59":{},"61":{},"62":{},"68":{},"71":{},"72":{},"82":{},"83":{},"91":{}},"component":{},"keyword":{}}],["triangle’",{"_index":3198,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["trick",{"_index":2129,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tricki",{"_index":2506,"title":{},"name":{},"text":{"54":{},"88":{}},"component":{},"keyword":{}}],["trigger",{"_index":768,"title":{},"name":{},"text":{"8":{},"54":{},"82":{},"88":{},"92":{},"94":{},"97":{},"100":{},"105":{},"109":{}},"component":{},"keyword":{}}],["trip",{"_index":5291,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["tripl",{"_index":4745,"title":{"98-4":{},"110-4":{}},"name":{},"text":{"94":{},"98":{},"110":{}},"component":{},"keyword":{}}],["triplet",{"_index":3916,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["trivial",{"_index":1198,"title":{},"name":{},"text":{"12":{},"20":{},"56":{},"88":{},"95":{},"100":{}},"component":{},"keyword":{}}],["true",{"_index":1796,"title":{},"name":{},"text":{"38":{},"49":{},"54":{},"56":{},"67":{},"70":{},"74":{},"78":{},"83":{},"91":{},"111":{}},"component":{},"keyword":{}}],["tune",{"_index":1491,"title":{},"name":{},"text":{"13":{},"90":{},"104":{}},"component":{},"keyword":{}}],["tunnel",{"_index":2963,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["ture",{"_index":3504,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["turn",{"_index":2945,"title":{},"name":{},"text":{"59":{},"66":{},"67":{},"90":{},"98":{},"99":{},"110":{},"113":{}},"component":{},"keyword":{}}],["tutori",{"_index":152,"title":{"83-11":{}},"name":{},"text":{"2":{},"4":{},"12":{},"26":{},"31":{},"34":{},"38":{},"42":{},"47":{},"54":{},"59":{},"64":{},"78":{},"82":{},"83":{},"94":{},"95":{},"96":{},"97":{},"100":{},"101":{},"103":{},"104":{},"105":{},"107":{},"111":{}},"component":{},"keyword":{}}],["tutorial.com/uniform_buffers/descriptor_layout_and_buffer#page_uniform",{"_index":4807,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["tutorial.com/vertex_buffers/staging_buffer#page_abstract",{"_index":4806,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["tutorial.com/vertex_buffers/vertex_buffer_cr",{"_index":4805,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["two",{"_index":969,"title":{},"name":{},"text":{"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"22":{},"34":{},"37":{},"41":{},"42":{},"46":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"58":{},"59":{},"69":{},"71":{},"74":{},"75":{},"82":{},"83":{},"86":{},"88":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"100":{},"102":{},"103":{},"104":{},"105":{},"107":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["type",{"_index":41,"title":{"95-6":{},"95-7":{}},"name":{},"text":{"2":{},"9":{},"12":{},"13":{},"19":{},"20":{},"34":{},"38":{},"42":{},"47":{},"49":{},"52":{},"54":{},"55":{},"56":{},"58":{},"59":{},"62":{},"64":{},"71":{},"74":{},"75":{},"82":{},"84":{},"88":{},"90":{},"91":{},"95":{},"102":{},"104":{},"111":{},"112":{}},"component":{},"keyword":{}}],["type_create_info",{"_index":4292,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["type_create_info.initialvalu",{"_index":4290,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["type_create_info.semaphoretyp",{"_index":4288,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["type_create_info{vk_structure_type_semaphore_type_create_info_khr",{"_index":4287,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["typedef",{"_index":3039,"title":{},"name":{},"text":{"60":{},"69":{},"89":{},"101":{}},"component":{},"keyword":{}}],["typic",{"_index":808,"title":{},"name":{},"text":{"8":{},"54":{},"56":{},"71":{},"83":{},"90":{},"96":{},"97":{},"98":{},"101":{},"105":{},"110":{}},"component":{},"keyword":{}}],["u",{"_index":2729,"title":{},"name":{},"text":{"56":{},"86":{}},"component":{},"keyword":{}}],["uaddcarry(int_pointer.x",{"_index":2227,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["uastc",{"_index":5462,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ubo",{"_index":1231,"title":{},"name":{},"text":{"12":{},"20":{},"26":{},"31":{},"49":{},"55":{},"56":{},"71":{},"91":{},"95":{},"107":{}},"component":{},"keyword":{}}],["ubo.model",{"_index":3967,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["ubo.view",{"_index":3966,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["ubo/ssbo",{"_index":2796,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["ubo[nonuniformext(index)].v",{"_index":2740,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["ubo_cul",{"_index":3485,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["ubocamera",{"_index":2549,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["ubomodel",{"_index":2550,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uboscen",{"_index":2548,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["ugli",{"_index":2780,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["ui",{"_index":1011,"title":{"70-2":{}},"name":{},"text":{"11":{},"12":{},"20":{},"40":{},"70":{},"85":{},"91":{},"93":{}},"component":{},"keyword":{}}],["ui/hud",{"_index":5293,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["uimage2d",{"_index":2732,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["uint",{"_index":2225,"title":{},"name":{},"text":{"49":{},"56":{},"83":{}},"component":{},"keyword":{}}],["uint16_t",{"_index":2902,"title":{},"name":{},"text":{"58":{},"90":{},"102":{}},"component":{},"keyword":{}}],["uint32_t",{"_index":2346,"title":{},"name":{},"text":{"52":{},"54":{},"55":{},"56":{},"67":{},"70":{},"74":{},"78":{},"82":{},"85":{},"95":{},"99":{},"111":{}},"component":{},"keyword":{}}],["uint64_max",{"_index":4325,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["uint64_t",{"_index":2156,"title":{},"name":{},"text":{"49":{},"54":{},"83":{}},"component":{},"keyword":{}}],["uint64_t(point",{"_index":2216,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["uint8_t",{"_index":5531,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["ul",{"_index":1873,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["ultim",{"_index":3508,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["unabl",{"_index":2866,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["unassign",{"_index":2441,"title":{},"name":{},"text":{"54":{},"56":{}},"component":{},"keyword":{}}],["unawar",{"_index":1450,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["unbind",{"_index":4018,"title":{"85-7":{}},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["unblock",{"_index":4342,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["unbound",{"_index":4152,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["uncertainti",{"_index":4811,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["unclear",{"_index":2773,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["uncompress",{"_index":4695,"title":{},"name":{},"text":{"92":{},"99":{},"106":{},"111":{}},"component":{},"keyword":{}}],["uncondition",{"_index":4473,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["undefin",{"_index":930,"title":{},"name":{},"text":{"9":{},"54":{},"83":{},"100":{}},"component":{},"keyword":{}}],["under",{"_index":208,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"12":{},"14":{},"20":{},"48":{},"83":{},"88":{},"100":{},"101":{}},"component":{},"keyword":{}}],["underli",{"_index":1315,"title":{},"name":{},"text":{"12":{},"13":{},"19":{}},"component":{},"keyword":{}}],["underneath",{"_index":1507,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["understand",{"_index":2496,"title":{},"name":{},"text":{"54":{},"55":{},"56":{},"74":{},"95":{}},"component":{},"keyword":{}}],["undetect",{"_index":1439,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["unfamiliar",{"_index":2535,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["unfortun",{"_index":4264,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["uniform",{"_index":1101,"title":{"23":{},"28":{},"12-28":{},"12-32":{},"17-3":{},"17-7":{},"56-6":{},"56-10":{},"56-11":{},"56-13":{},"95-7":{},"107-2":{}},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"23":{},"28":{},"34":{},"42":{},"49":{},"54":{},"55":{},"56":{},"71":{},"95":{},"96":{},"107":{},"109":{}},"component":{},"keyword":{}}],["uniform_binding_descriptor.buff",{"_index":2581,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uniform_binding_descriptor.layout",{"_index":2567,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uniform_binding_descriptor.offset",{"_index":2578,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uniform_binding_descriptor.s",{"_index":2568,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uniform_buffers.matrices.handl",{"_index":2519,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["uniform_buffers.scen",{"_index":2595,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uniform_descriptor_buf_ptr",{"_index":2588,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["uniformandstoragebuffer16bitaccess",{"_index":4567,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["uniniti",{"_index":2852,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["uniqu",{"_index":51,"title":{},"name":{},"text":{"2":{},"49":{},"52":{},"56":{},"67":{},"74":{},"91":{},"108":{}},"component":{},"keyword":{}}],["unit",{"_index":3438,"title":{},"name":{},"text":{"70":{},"73":{},"109":{}},"component":{},"keyword":{}}],["unitprimitive_0",{"_index":3525,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["unitprimitive_1",{"_index":3528,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["unitvertex_0",{"_index":3515,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["unitvertex_1",{"_index":3519,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["unitvertex_2",{"_index":3521,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["unitvertex_3",{"_index":3523,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["univers",{"_index":1094,"title":{"111":{},"12-23":{},"20-22":{},"111-3":{}},"name":{},"text":{"12":{},"20":{},"49":{},"74":{},"111":{}},"component":{},"keyword":{}}],["unix",{"_index":652,"title":{},"name":{},"text":{"7":{},"74":{}},"component":{},"keyword":{}}],["unknown",{"_index":4552,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["unless",{"_index":253,"title":{},"name":{},"text":{"2":{},"7":{},"13":{},"49":{},"88":{},"91":{},"92":{},"93":{},"96":{},"98":{},"100":{},"104":{},"106":{},"110":{},"113":{}},"component":{},"keyword":{}}],["unlik",{"_index":818,"title":{},"name":{},"text":{"8":{},"13":{},"38":{},"47":{},"49":{},"50":{},"95":{},"106":{},"107":{},"111":{}},"component":{},"keyword":{}}],["unlink",{"_index":4017,"title":{"85-5":{}},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["unlinked_material_prefix_s",{"_index":4124,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["unmap",{"_index":1460,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["unmark",{"_index":2457,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["unnecessari",{"_index":1850,"title":{},"name":{},"text":{"38":{},"43":{},"47":{},"98":{},"100":{},"106":{},"110":{}},"component":{},"keyword":{}}],["unnecessarili",{"_index":5565,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["unneed",{"_index":5105,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["unoptim",{"_index":4595,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["unpredict",{"_index":867,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["unrel",{"_index":2243,"title":{},"name":{},"text":{"49":{},"56":{},"108":{}},"component":{},"keyword":{}}],["unrol",{"_index":5296,"title":{},"name":{},"text":{"107":{}},"component":{},"keyword":{}}],["unsaf",{"_index":5096,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["unsign",{"_index":2848,"title":{},"name":{},"text":{"56":{},"64":{},"69":{},"88":{}},"component":{},"keyword":{}}],["unsignal",{"_index":4265,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["unsiz",{"_index":2695,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["unstabl",{"_index":3257,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["unsupport",{"_index":3828,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["until",{"_index":1416,"title":{},"name":{},"text":{"13":{},"38":{},"43":{},"47":{},"54":{},"56":{},"60":{},"74":{},"88":{},"94":{},"95":{},"96":{},"98":{},"110":{},"113":{}},"component":{},"keyword":{}}],["unus",{"_index":4212,"title":{},"name":{},"text":{"86":{},"107":{}},"component":{},"keyword":{}}],["unwant",{"_index":4246,"title":{},"name":{},"text":{"86":{}},"component":{},"keyword":{}}],["up",{"_index":67,"title":{"54-4":{}},"name":{},"text":{"2":{},"7":{},"8":{},"12":{},"13":{},"19":{},"20":{},"43":{},"49":{},"51":{},"52":{},"54":{},"56":{},"57":{},"59":{},"66":{},"67":{},"74":{},"80":{},"82":{},"84":{},"86":{},"88":{},"92":{},"95":{},"100":{},"102":{},"104":{},"106":{},"108":{}},"component":{},"keyword":{}}],["updat",{"_index":723,"title":{"56-3":{},"56-4":{},"95-24":{}},"name":{},"text":{"7":{},"12":{},"13":{},"14":{},"19":{},"49":{},"52":{},"56":{},"66":{},"70":{},"74":{},"82":{},"85":{},"86":{},"88":{},"94":{},"95":{},"96":{},"103":{},"109":{}},"component":{},"keyword":{}}],["update(conditional_visibility_list.data",{"_index":2340,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["update_after_bind_bit",{"_index":2652,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["update_converted_memory(device_memory_total_budget",{"_index":3448,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["update_converted_memory(device_memory_total_usag",{"_index":3443,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["update_converted_memory(physical_device_memory_budget_properties.heapbudget[i",{"_index":3456,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["update_converted_memory(physical_device_memory_budget_properties.heapusage[i",{"_index":3454,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["update_device_memory_properti",{"_index":3460,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["update_swapchain",{"_index":5407,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["upfront",{"_index":2539,"title":{},"name":{},"text":{"55":{},"95":{},"97":{},"105":{}},"component":{},"keyword":{}}],["uplift",{"_index":4470,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["upload",{"_index":1679,"title":{"37-6":{},"46-6":{},"111-9":{}},"name":{},"text":{"37":{},"46":{},"83":{},"111":{}},"component":{},"keyword":{}}],["upon",{"_index":1345,"title":{},"name":{},"text":{"12":{},"19":{},"48":{},"50":{},"95":{}},"component":{},"keyword":{}}],["upper",{"_index":5174,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["upscal",{"_index":5292,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["us",{"_index":52,"title":{"26":{},"31":{},"90":{},"91":{},"93":{},"104":{},"106":{},"109":{},"111":{},"114":{},"11-5":{},"51-2":{},"56-2":{},"56-13":{},"57-2":{},"88-7":{},"93-5":{},"103-2":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"31":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"69":{},"71":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["usag",{"_index":44,"title":{"94":{},"4-8":{},"12-4":{},"13-9":{},"20-3":{},"106-5":{}},"name":{},"text":{"2":{},"4":{},"6":{},"8":{},"12":{},"13":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"46":{},"49":{},"52":{},"54":{},"55":{},"61":{},"62":{},"64":{},"67":{},"68":{},"69":{},"70":{},"74":{},"75":{},"77":{},"84":{},"86":{},"92":{},"94":{},"95":{},"97":{},"98":{},"101":{},"102":{},"103":{},"106":{},"108":{},"114":{}},"component":{},"keyword":{}}],["usage/occup",{"_index":4554,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["usefulli",{"_index":1433,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["useless",{"_index":3313,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["user",{"_index":472,"title":{"11-9":{},"13-1":{},"86-6":{}},"name":{},"text":{"4":{},"11":{},"13":{},"54":{},"58":{},"59":{},"65":{},"70":{},"82":{},"85":{},"86":{},"90":{},"92":{},"94":{},"95":{},"101":{},"106":{},"108":{}},"component":{},"keyword":{}}],["user_data",{"_index":2434,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["userdata",{"_index":5374,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["user’",{"_index":4190,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["usual",{"_index":988,"title":{},"name":{},"text":{"11":{},"12":{},"20":{},"37":{},"38":{},"46":{},"47":{},"48":{},"55":{},"59":{},"67":{},"75":{},"88":{},"95":{},"97":{},"98":{},"99":{},"100":{},"101":{},"105":{},"110":{}},"component":{},"keyword":{}}],["utah",{"_index":2973,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["util",{"_index":587,"title":{"14":{},"54":{},"107":{},"12-57":{},"15-2":{},"19-5":{}},"name":{},"text":{"7":{},"12":{},"15":{},"19":{},"20":{},"54":{},"57":{},"71":{},"84":{},"96":{},"98":{},"103":{},"104":{},"107":{},"110":{}},"component":{},"keyword":{}}],["uuid",{"_index":3566,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["uuid[cl_uuid_size_khr",{"_index":3597,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["uv",{"_index":1560,"title":{},"name":{},"text":{"26":{},"31":{},"56":{},"91":{}},"component":{},"keyword":{}}],["uvec2",{"_index":2221,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["uvec2(point",{"_index":2224,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["uvec3",{"_index":3925,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["uvec3(4",{"_index":3527,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["v",{"_index":486,"title":{"26-3":{},"31-3":{},"49-5":{},"56-18":{}},"name":{},"text":{"4":{},"11":{},"12":{},"17":{},"26":{},"31":{},"49":{},"56":{},"62":{},"83":{},"84":{},"86":{},"90":{},"91":{}},"component":{},"keyword":{}}],["v1",{"_index":2204,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["v12",{"_index":664,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v3.12",{"_index":615,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v3.13",{"_index":633,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v3.14",{"_index":634,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v3.16",{"_index":714,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v3.21",{"_index":639,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v3.28",{"_index":672,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["v4",{"_index":2206,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["v4f",{"_index":3970,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["v4float",{"_index":2794,"title":{},"name":{},"text":{"56":{},"91":{}},"component":{},"keyword":{}}],["v4half",{"_index":4581,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["valid",{"_index":289,"title":{"54-3":{},"56-22":{}},"name":{},"text":{"2":{},"4":{},"7":{},"26":{},"31":{},"41":{},"54":{},"56":{},"84":{},"85":{},"91":{},"94":{},"95":{},"96":{},"98":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["validation_featur",{"_index":2820,"title":{},"name":{},"text":{"56":{},"84":{}},"component":{},"keyword":{}}],["validation_feature_en",{"_index":3979,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["validation_feature_enables.data",{"_index":3983,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["validation_features.enabledvalidationfeaturecount",{"_index":3981,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["validation_features.penabledvalidationfeatur",{"_index":3982,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["validation_features_info",{"_index":2831,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["validation_features_info.enabledvalidationfeaturecount",{"_index":2838,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["validation_features_info.penabledvalidationfeatur",{"_index":2839,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["validation_features_info.pnext",{"_index":2841,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["validation_features{vk_structure_type_validation_features_ext",{"_index":3980,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["validation_lay",{"_index":3984,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["valu",{"_index":907,"title":{},"name":{},"text":{"9":{},"11":{},"12":{},"19":{},"20":{},"34":{},"38":{},"40":{},"41":{},"42":{},"47":{},"49":{},"51":{},"52":{},"56":{},"59":{},"61":{},"62":{},"64":{},"69":{},"74":{},"75":{},"77":{},"83":{},"84":{},"86":{},"88":{},"90":{},"91":{},"92":{},"94":{},"95":{},"98":{},"99":{},"101":{},"103":{},"106":{},"107":{},"108":{},"109":{},"110":{}},"component":{},"keyword":{}}],["valuabl",{"_index":72,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["vari",{"_index":787,"title":{"95-6":{}},"name":{},"text":{"8":{},"12":{},"20":{},"50":{},"60":{},"64":{},"89":{},"95":{},"107":{},"108":{}},"component":{},"keyword":{}}],["variabl",{"_index":571,"title":{"7-26":{}},"name":{},"text":{"7":{},"12":{},"17":{},"39":{},"58":{},"59":{},"62":{},"70":{},"71":{},"83":{},"85":{},"88":{},"91":{},"95":{},"99":{}},"component":{},"keyword":{}}],["variant",{"_index":982,"title":{},"name":{},"text":{"11":{},"90":{},"95":{}},"component":{},"keyword":{}}],["variat",{"_index":3229,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["varieti",{"_index":5465,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["variou",{"_index":1166,"title":{},"name":{},"text":{"12":{},"19":{},"20":{},"49":{},"58":{},"59":{},"85":{},"88":{},"92":{},"95":{},"106":{},"108":{}},"component":{},"keyword":{}}],["vase",{"_index":1310,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["vbo",{"_index":2232,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vec2",{"_index":2169,"title":{},"name":{},"text":{"49":{},"56":{},"90":{},"108":{}},"component":{},"keyword":{}}],["vec2(1.0f",{"_index":5318,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["vec2(gl_globalinvocationid.yz",{"_index":2735,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vec3",{"_index":3187,"title":{},"name":{},"text":{"62":{},"71":{},"83":{},"91":{},"95":{},"108":{},"109":{}},"component":{},"keyword":{}}],["vec3(0",{"_index":3961,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["vec3(1",{"_index":3959,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["vec3(1.0f",{"_index":3529,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["vec4",{"_index":1664,"title":{},"name":{},"text":{"34":{},"42":{},"49":{},"56":{},"59":{},"62":{},"71":{},"84":{},"90":{},"91":{},"95":{},"108":{},"109":{}},"component":{},"keyword":{}}],["vec4(0.0",{"_index":4505,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["vec4(2.0",{"_index":3513,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["vec4(foo",{"_index":4577,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["vec4(in_po",{"_index":4869,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vec4(in_uv",{"_index":5319,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["vec4(posit",{"_index":5443,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vec4(r_dot",{"_index":4498,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["vector",{"_index":1842,"title":{},"name":{},"text":{"38":{},"47":{},"48":{},"52":{},"62":{},"69":{},"90":{}},"component":{},"keyword":{}}],["vendor",{"_index":161,"title":{"74":{}},"name":{},"text":{"2":{},"12":{},"19":{},"20":{},"71":{},"74":{},"81":{},"90":{},"95":{},"108":{}},"component":{},"keyword":{}}],["vendor’",{"_index":175,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["verbos",{"_index":973,"title":{},"name":{},"text":{"11":{},"54":{},"84":{}},"component":{},"keyword":{}}],["verdict",{"_index":1764,"title":{"38-10":{},"47-10":{}},"name":{},"text":{},"component":{},"keyword":{}}],["veri",{"_index":776,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"20":{},"49":{},"54":{},"56":{},"64":{},"71":{},"74":{},"85":{},"88":{},"90":{},"91":{},"93":{},"96":{},"104":{},"107":{},"113":{}},"component":{},"keyword":{}}],["verifi",{"_index":275,"title":{"99-9":{},"99-13":{}},"name":{},"text":{"2":{},"91":{},"99":{},"108":{}},"component":{},"keyword":{}}],["version",{"_index":247,"title":{"9-3":{},"11-7":{}},"name":{},"text":{"2":{},"4":{},"7":{},"9":{},"11":{},"12":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"48":{},"56":{},"59":{},"60":{},"65":{},"68":{},"83":{},"89":{},"90":{},"92":{},"95":{},"97":{},"98":{},"109":{},"111":{},"114":{}},"component":{},"keyword":{}}],["versu",{"_index":2458,"title":{},"name":{},"text":{"54":{},"107":{}},"component":{},"keyword":{}}],["vert",{"_index":4058,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vert_glsl_sourc",{"_index":4070,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vert_shader(\"vs.vert",{"_index":1056,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vert_shader_data",{"_index":4059,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vertex",{"_index":778,"title":{"89":{},"12-78":{},"19-26":{},"62-4":{}},"name":{},"text":{"8":{},"12":{},"17":{},"19":{},"34":{},"38":{},"39":{},"47":{},"49":{},"54":{},"55":{},"59":{},"62":{},"66":{},"67":{},"68":{},"71":{},"72":{},"82":{},"83":{},"84":{},"85":{},"89":{},"91":{},"93":{},"95":{},"97":{},"102":{},"104":{},"105":{},"109":{},"113":{}},"component":{},"keyword":{}}],["vertex/comput",{"_index":5208,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vertex/frag",{"_index":1302,"title":{},"name":{},"text":{"12":{},"19":{},"80":{}},"component":{},"keyword":{}}],["vertex/geometry/tesel",{"_index":2919,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vertex/index",{"_index":5186,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vertex_attribute_description.offset",{"_index":4393,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_attribute_description_ext.data",{"_index":4448,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_attribute_description_ext[1].offset",{"_index":4443,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_attribute_description_ext[2",{"_index":4438,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_bindings_description.strid",{"_index":4391,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_bindings_description_ext",{"_index":4436,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_bindings_description_ext.data",{"_index":4446,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_bindings_description_ext[0].strid",{"_index":4442,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_buffer_norm",{"_index":2357,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vertex_buffer_normal.get",{"_index":2374,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vertex_buffer_po",{"_index":2354,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vertex_buffer_pos.get",{"_index":2373,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vertex_buffers.at(\"norm",{"_index":2358,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vertex_buffers.at(\"posit",{"_index":2356,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vertex_count",{"_index":3356,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["vertex_data_device_address",{"_index":3874,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vertex_index",{"_index":3863,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vertex_indic",{"_index":2377,"title":{},"name":{},"text":{"52":{},"61":{}},"component":{},"keyword":{}}],["vertex_input_attribut",{"_index":3287,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_attributes.data",{"_index":3299,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_attributes_1",{"_index":4403,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_attributes_1.data",{"_index":4413,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_attributes_2",{"_index":4417,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_attributes_2.data",{"_index":4425,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_bind",{"_index":3283,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_bindings.data",{"_index":3295,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_bindings_1",{"_index":4401,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_bindings_1.data",{"_index":4409,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_bindings_2",{"_index":4416,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_bindings_2.data",{"_index":4421,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_st",{"_index":3281,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["vertex_input_state.pvertexattributedescript",{"_index":3298,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_state.pvertexbindingdescript",{"_index":3294,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_state.vertexattributedescriptioncount",{"_index":3296,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_state.vertexbindingdescriptioncount",{"_index":3292,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vertex_input_state_1",{"_index":4405,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_1.pvertexattributedescript",{"_index":4412,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_1.pvertexbindingdescript",{"_index":4408,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_1.vertexattributedescriptioncount",{"_index":4410,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_1.vertexbindingdescriptioncount",{"_index":4406,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_2",{"_index":4418,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_2.pvertexattributedescript",{"_index":4424,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_2.pvertexbindingdescript",{"_index":4420,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_input_state_2.vertexattributedescriptioncount",{"_index":4422,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertex_shader_bit",{"_index":5223,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vertexinputdynamicst",{"_index":4454,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vertexoffset",{"_index":4874,"title":{},"name":{},"text":{"95":{},"102":{}},"component":{},"keyword":{}}],["vertexstrid",{"_index":3870,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vertic",{"_index":815,"title":{},"name":{},"text":{"8":{},"12":{},"19":{},"54":{},"59":{},"62":{},"67":{},"71":{},"82":{},"83":{},"86":{},"91":{},"93":{},"101":{},"102":{},"106":{}},"component":{},"keyword":{}}],["vertices(objresource.vertic",{"_index":3934,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["vertices[64",{"_index":3354,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["via",{"_index":296,"title":{},"name":{},"text":{"2":{},"7":{},"13":{},"34":{},"40":{},"41":{},"42":{},"48":{},"50":{},"52":{},"54":{},"66":{},"74":{},"84":{},"98":{},"100":{},"103":{},"106":{},"108":{},"109":{},"110":{},"111":{},"114":{}},"component":{},"keyword":{}}],["video",{"_index":3542,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["view",{"_index":1398,"title":{"37-10":{},"46-10":{},"88-3":{}},"name":{},"text":{"13":{},"34":{},"37":{},"42":{},"46":{},"48":{},"54":{},"55":{},"71":{},"84":{},"88":{},"93":{},"95":{},"102":{},"103":{},"108":{},"109":{}},"component":{},"keyword":{}}],["view.compon",{"_index":2066,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.format",{"_index":2065,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.imag",{"_index":2062,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.subresourcerange.aspectmask",{"_index":2071,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.subresourcerange.basearraylay",{"_index":2073,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.subresourcerange.basemiplevel",{"_index":2072,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.subresourcerange.layercount",{"_index":2074,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.subresourcerange.levelcount",{"_index":2075,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view.viewtyp",{"_index":2063,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["view_proj",{"_index":5440,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["view_project",{"_index":2258,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["viewer",{"_index":2936,"title":{},"name":{},"text":{"59":{},"82":{},"84":{}},"component":{},"keyword":{}}],["viewpo",{"_index":1566,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["viewpoint",{"_index":5193,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["violat",{"_index":2424,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["virtual",{"_index":2127,"title":{},"name":{},"text":{"49":{},"69":{},"86":{}},"component":{},"keyword":{}}],["visibilitytest",{"_index":5187,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["visibl",{"_index":1456,"title":{},"name":{},"text":{"13":{},"48":{},"52":{},"59":{},"82":{},"91":{},"94":{},"109":{}},"component":{},"keyword":{}}],["visilibti",{"_index":2336,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["visit",{"_index":309,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{},"keyword":{}}],["visual",{"_index":566,"title":{"7-16":{}},"name":{},"text":{"7":{},"12":{},"19":{},"20":{},"40":{},"41":{},"56":{},"59":{},"64":{},"67":{},"70":{},"71":{},"84":{},"85":{},"93":{},"94":{},"95":{},"99":{},"104":{},"109":{},"113":{}},"component":{},"keyword":{}}],["vk",{"_index":1551,"title":{},"name":{},"text":{"26":{},"31":{},"74":{}},"component":{},"keyword":{}}],["vk::accessflagbits::eshaderread",{"_index":1748,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::accessflagbits::etransferread",{"_index":1724,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::accessflagbits::etransferwrit",{"_index":1738,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::bool",{"_index":1783,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::bufferimagecopi",{"_index":1716,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::commandbuffer::blitimag",{"_index":1697,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::commandbuffer::resetquerypool",{"_index":1822,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::commandbuffer::writetimestamp",{"_index":1828,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::commandbuffer::writetimestamp2",{"_index":1763,"title":{"38-9":{}},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::componentswizzle::",{"_index":1754,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::componentswizzle::ea",{"_index":1757,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::componentswizzle::eb",{"_index":1756,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::componentswizzle::eg",{"_index":1755,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::descriptorimageinfo",{"_index":1632,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::descriptortype::ecombinedimagesampl",{"_index":1673,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::descriptortype::esampl",{"_index":1630,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::descriptortype::esampledimag",{"_index":1629,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::descriptortype::euniformbuff",{"_index":1641,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::device::allocatememori",{"_index":1714,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::device::createcomputepipeline[",{"_index":4932,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vk::device::creategraphicspipeline[",{"_index":4931,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vk::device::createswapchainkhr",{"_index":4951,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::device::getpipelinecachedata",{"_index":4933,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vk::device::getquerypoolresult",{"_index":1849,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::device::getswapchainimageskhr",{"_index":4952,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::extent3d(texture.ext",{"_index":1713,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::fenc",{"_index":1729,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::filter::elinear",{"_index":1744,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::format::er8g8b8a8srgb",{"_index":1701,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::formatfeatureflagbits::eblitdst",{"_index":1699,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::formatfeatureflagbits::eblitsrc",{"_index":1698,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imageaspectflagbits::ecolor",{"_index":1718,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imageblit",{"_index":1731,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagecreateinfo",{"_index":1710,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagelayout::eshaderreadonlyoptim",{"_index":1636,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["vk::imagelayout::etransferdstoptim",{"_index":1720,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagelayout::etransfersrcoptim",{"_index":1721,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagelayout::eundefin",{"_index":1739,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagememorybarri",{"_index":1737,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagememorybarrier(vk::accessflagbits::etransferread",{"_index":1747,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagememorybarrier(vk::accessflagbits::etransferwrit",{"_index":1723,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imagetype::e2d",{"_index":1712,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imageview",{"_index":1627,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::imageviewcreateinfo",{"_index":1751,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imageviewcreateinfo.subresourcerange.levelcount",{"_index":1750,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::imageviewtype::e2d",{"_index":1753,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::location(0",{"_index":1554,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["vk::location(1",{"_index":1558,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["vk::location(2",{"_index":1562,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["vk::physicaldevice::getformatproperti",{"_index":1702,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::physicaldevice::getsurfacecapabilitieskhr",{"_index":4953,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::physicaldevice::getsurfacepresentmodeskhr",{"_index":4957,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::physicaldevicelimit",{"_index":1788,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::pipelinecach",{"_index":4930,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vk::pipelinelayout",{"_index":4928,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vk::pipelinestageflagbits::efragmentshad",{"_index":1749,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::pipelinestageflagbits::etransf",{"_index":1727,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::pipelinestageflags2",{"_index":1871,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::presentmodekhr::efifo",{"_index":4959,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::presentmodekhr::emailbox",{"_index":4960,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::querypoolcreateinfo",{"_index":1804,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::queryresultflag",{"_index":1843,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::queryresultflagbits::e64",{"_index":1839,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::queryresultflagbits::ewait",{"_index":1840,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::queryresultflagbits::ewithavail",{"_index":1851,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::querytype::etimestamp",{"_index":1806,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::queuefamilyproperti",{"_index":1799,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::queueflagbits::etransf",{"_index":1693,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk::renderpass",{"_index":4927,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vk::result",{"_index":1859,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::result::esuccess",{"_index":1863,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["vk::sampler",{"_index":1628,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk::shadermodul",{"_index":1619,"title":{},"name":{},"text":{"31":{},"97":{}},"component":{},"keyword":{}}],["vk::shadermodulecreateinfo",{"_index":1618,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["vk::surfacecapabilitieskhr",{"_index":4954,"title":{},"name":{},"text":{"98":{}},"component":{},"keyword":{}}],["vk::writedescriptorset",{"_index":1637,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["vk_access_shader_read_bit",{"_index":2057,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_access_transfer_read_bit",{"_index":2032,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_access_transfer_write_bit",{"_index":2031,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_android_external_memory_android_hardware_buff",{"_index":1325,"title":{},"name":{},"text":{"12":{},"19":{},"75":{}},"component":{},"keyword":{}}],["vk_api_version_1_1",{"_index":3471,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["vk_attachment_load_op_",{"_index":5241,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vk_attachment_load_op_clear",{"_index":5246,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vk_attachment_load_op_dont_car",{"_index":5286,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vk_attachment_store_op_",{"_index":5243,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vk_attachment_store_op_dont_car",{"_index":5118,"title":{},"name":{},"text":{"101":{},"106":{}},"component":{},"keyword":{}}],["vk_buffer_usage_conditional_rendering_bit_ext",{"_index":2308,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vk_buffer_usage_resource_descriptor_buffer_bit_ext",{"_index":2580,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_buffer_usage_sampler_descriptor_buffer_bit_ext",{"_index":2584,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_buffer_usage_shader_device_address_bit",{"_index":2583,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_buffer_usage_shader_device_address_bit_khr",{"_index":2136,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vk_buffer_usage_storage_buffer_bit",{"_index":2135,"title":{},"name":{},"text":{"49":{},"95":{}},"component":{},"keyword":{}}],["vk_buffer_usage_uniform_buffer_bit",{"_index":4844,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vk_build_acceleration_structure_allow_compaction_bit_khr",{"_index":3941,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["vk_build_acceleration_structure_prefer_fast_build_bit_khr",{"_index":3854,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vk_build_acceleration_structure_prefer_fast_trace_bit_khr",{"_index":3853,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vk_check(vkallocatedescriptorsets(get_device().get_handl",{"_index":1936,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["vk_check(vkallocatememory(device_handl",{"_index":3603,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_check(vkbegincommandbuffer(draw_cmd_buff",{"_index":3145,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_check(vkbindimagememory(device_handl",{"_index":3606,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_check(vkcreatedebugutilsmessengerext(vulkan_inst",{"_index":3995,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["vk_check(vkcreatedescriptorsetlayout(get_device().get_handl",{"_index":2671,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_check(vkcreategraphicspipelines(get_device().get_handl",{"_index":1076,"title":{},"name":{},"text":{"11":{},"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_check(vkcreateimageview(devic",{"_index":2076,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_check(vkcreatequerypool(devic",{"_index":2089,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_check(vkcreatesemaphore(devic",{"_index":3680,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_check(vkcreatesemaphore(get_device().get_handl",{"_index":4293,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vk_check(vkcreateshadermodule(get_device().get_handl",{"_index":1615,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vk_check(vkendcommandbuffer(draw_cmd_buff",{"_index":3167,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_check(vkenumerateinstanceextensionproperties(\"vk_layer_khronos_valid",{"_index":2822,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_check(vkenumerateinstanceextensionproperties(nullptr",{"_index":2387,"title":{},"name":{},"text":{"54":{},"78":{}},"component":{},"keyword":{}}],["vk_check(vkgetphysicaldevicesurfacecapabilitieskhr(get_device().get_physical_devic",{"_index":5401,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_check(vkqueuesubmit(queu",{"_index":3720,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_check(vkqueuesubmit(signal_queu",{"_index":4310,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vk_check(vkqueuesubmit(wait_queu",{"_index":4317,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vk_check(vksignalsemaphorekhr(devic",{"_index":4331,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vk_check(vkwaitsemaphoreskhr(devic",{"_index":4323,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vk_colorspace_srgb_nonlinear_khr",{"_index":3390,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vk_command_buffer_usage_render_pass_continue_bit",{"_index":4739,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vk_compare_op_great",{"_index":3109,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_component_swizzle_a",{"_index":2070,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_component_swizzle_b",{"_index":2069,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_component_swizzle_g",{"_index":2068,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_component_swizzle_r",{"_index":2067,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_cull_mode_back_bit",{"_index":3097,"title":{},"name":{},"text":{"61":{},"85":{}},"component":{},"keyword":{}}],["vk_cull_mode_non",{"_index":4161,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_debug_utils_message_severity_error_bit_ext",{"_index":2404,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_debug_utils_message_severity_info_bit_ext",{"_index":2420,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vk_debug_utils_message_severity_verbose_bit_ext",{"_index":2418,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_debug_utils_message_severity_warning_bit_ext",{"_index":2405,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_debug_utils_message_type_validation_bit_ext",{"_index":2407,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vk_descriptor_binding_partially_bound_bit_ext",{"_index":2661,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_descriptor_binding_update_after_bind_bit_ext",{"_index":2662,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_descriptor_binding_update_unused_while_pending_bit_ext",{"_index":2663,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_descriptor_binding_variable_descriptor_count_bit_ext",{"_index":2660,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_descriptor_pool_create_free_descriptor_set_bit",{"_index":4913,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["vk_descriptor_set_layout_create_update_after_bind_pool_bit_ext",{"_index":2658,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_descriptor_type_combined_image_sampl",{"_index":1668,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["vk_descriptor_type_sampl",{"_index":1920,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["vk_descriptor_type_sampled_imag",{"_index":1919,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["vk_descriptor_type_uniform_buff",{"_index":2604,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_descriptor_type_uniform_buffer_dynam",{"_index":4853,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vk_dynamic_state_depth_bias_enable_ext",{"_index":3056,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_dynamic_state_depth_clamp_enable_ext",{"_index":2953,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vk_dynamic_state_logic_op_ext",{"_index":3386,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vk_dynamic_state_patch_control_points_ext",{"_index":3809,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["vk_dynamic_state_primitive_restart_enable_ext",{"_index":3059,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_dynamic_state_primitive_topology_ext",{"_index":3057,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_dynamic_state_rasterizer_discard_enable_ext",{"_index":3058,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_dynamic_state_scissor",{"_index":3055,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_dynamic_state_vertex_input_ext",{"_index":4387,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vk_dynamic_state_viewport",{"_index":3054,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_enable_beta_extens",{"_index":3829,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vk_error_device_lost",{"_index":793,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vk_error_out_of_date_khr",{"_index":5451,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_ext_blend_operation_advanced_extension_nam",{"_index":2880,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vk_ext_calibrated_timestamp",{"_index":2275,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["vk_ext_color_write_en",{"_index":1366,"title":{},"name":{},"text":{"12":{},"19":{},"51":{}},"component":{},"keyword":{}}],["vk_ext_color_write_enable_extension_nam",{"_index":2285,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vk_ext_conditional_rend",{"_index":1356,"title":{},"name":{},"text":{"12":{},"19":{},"52":{}},"component":{},"keyword":{}}],["vk_ext_conservative_raster",{"_index":1284,"title":{},"name":{},"text":{"12":{},"19":{},"53":{}},"component":{},"keyword":{}}],["vk_ext_debug_mark",{"_index":584,"title":{},"name":{},"text":{"7":{},"54":{}},"component":{},"keyword":{}}],["vk_ext_debug_report",{"_index":2384,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_ext_debug_util",{"_index":583,"title":{},"name":{},"text":{"7":{},"12":{},"19":{},"54":{}},"component":{},"keyword":{}}],["vk_ext_debug_utils_extension_nam",{"_index":2394,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_ext_depth_clip_control",{"_index":2935,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vk_ext_depth_clip_en",{"_index":2951,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vk_ext_descriptor_buff",{"_index":1365,"title":{},"name":{},"text":{"12":{},"19":{},"55":{}},"component":{},"keyword":{}}],["vk_ext_descriptor_index",{"_index":581,"title":{},"name":{},"text":{"7":{},"12":{},"19":{}},"component":{},"keyword":{}}],["vk_ext_extended_dynamic_state2",{"_index":1360,"title":{},"name":{},"text":{"12":{},"19":{},"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_ext_extended_dynamic_state3",{"_index":1368,"title":{},"name":{},"text":{"12":{},"19":{},"51":{},"57":{},"58":{},"59":{}},"component":{},"keyword":{}}],["vk_ext_extended_dynamic_state_2_extension_nam",{"_index":3177,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vk_ext_extended_dynamic_state_3_extension_nam",{"_index":2879,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vk_ext_full_screen_exclus",{"_index":3263,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["vk_ext_graphics_pipeline_librari",{"_index":1352,"title":{},"name":{},"text":{"12":{},"19":{},"66":{}},"component":{},"keyword":{}}],["vk_ext_host_query_reset",{"_index":1815,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["vk_ext_image_compression_control",{"_index":1192,"title":{"99-6":{}},"name":{},"text":{"12":{},"20":{},"92":{},"99":{}},"component":{},"keyword":{}}],["vk_ext_image_compression_control_swapchain",{"_index":1193,"title":{"99-10":{}},"name":{},"text":{"12":{},"20":{},"99":{}},"component":{},"keyword":{}}],["vk_ext_line_raster",{"_index":1369,"title":{},"name":{},"text":{"12":{},"19":{},"58":{}},"component":{},"keyword":{}}],["vk_ext_memory_budget",{"_index":1294,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["vk_ext_mesh_shad",{"_index":1296,"title":{},"name":{},"text":{"12":{},"19":{},"71":{}},"component":{},"keyword":{}}],["vk_ext_mesh_shader_extension_nam",{"_index":3368,"title":{},"name":{},"text":{"67":{},"71":{}},"component":{},"keyword":{}}],["vk_ext_scalar_block_layout",{"_index":1346,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["vk_ext_shader_object",{"_index":1367,"title":{},"name":{},"text":{"12":{},"19":{},"59":{},"85":{}},"component":{},"keyword":{}}],["vk_ext_shader_object_extension_nam",{"_index":4032,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_ext_swapchain_maintenance1",{"_index":1955,"title":{"43-2":{}},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["vk_ext_validation_featur",{"_index":2819,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_ext_validation_features_extension_nam",{"_index":2826,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_ext_vertex_input_dynamic_st",{"_index":1359,"title":{},"name":{},"text":{"12":{},"19":{},"89":{}},"component":{},"keyword":{}}],["vk_ext_vertex_input_dynamic_state_extension_nam",{"_index":4451,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vk_external_memory_handle_type_android_hardware_buffer_bit_android",{"_index":3755,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_external_semaphore_handle_type_opaque_fd_bit",{"_index":3674,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_external_semaphore_handle_type_opaque_win32_bit",{"_index":3673,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_fals",{"_index":2440,"title":{},"name":{},"text":{"54":{},"59":{},"61":{},"66":{},"69":{},"77":{},"84":{},"85":{}},"component":{},"keyword":{}}],["vk_filter_linear",{"_index":2052,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_format_a1r5g5b5_unorm_pack16",{"_index":4670,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_a8b8g8r8_srgb",{"_index":4674,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_a8b8g8r8_unorm",{"_index":4673,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_a8r8g8b8_srgb",{"_index":4675,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_a8r8g8b8_unorm",{"_index":4684,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_b10g10r10a2_unorm",{"_index":4676,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_b4g4r4a4_unorm_pack16",{"_index":4666,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_b5g5r5a1_unorm_pack16",{"_index":4669,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_b8g8r8_unorm",{"_index":4671,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_b8g8r8a8_srgb",{"_index":4672,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_b8g8r8a8_unorm",{"_index":3387,"title":{},"name":{},"text":{"69":{},"92":{}},"component":{},"keyword":{}}],["vk_format_d16_unorm",{"_index":4687,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_d24_unorm_s8_uint",{"_index":4686,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_d32_sfloat",{"_index":4688,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r10g10b10a2_unorm",{"_index":4685,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r32g32_sfloat",{"_index":3291,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_format_r32g32b32_sfloat",{"_index":3289,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["vk_format_r4g4b4a4_unorm",{"_index":4677,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r4g4b4a4_unorm_pack16",{"_index":4665,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r5g5b5a1_unorm",{"_index":4679,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r5g5b5a1_unorm_pack16",{"_index":4668,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r5g6b5_unorm",{"_index":4678,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r5g6b5_unorm_pack16",{"_index":4667,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r8_unorm",{"_index":4680,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r8g8_unorm",{"_index":4681,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_r8g8b8_unorm",{"_index":4682,"title":{},"name":{},"text":{"92":{},"99":{}},"component":{},"keyword":{}}],["vk_format_r8g8b8a8_srgb",{"_index":2006,"title":{},"name":{},"text":{"46":{},"92":{}},"component":{},"keyword":{}}],["vk_format_r8g8b8a8_unorm",{"_index":4683,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_format_undefin",{"_index":2600,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_front_face_clockwis",{"_index":3098,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_graphics_pipeline_library_vertex_input_interface_bit_ext",{"_index":3278,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_image_aspect_color_bit",{"_index":2017,"title":{},"name":{},"text":{"46":{},"99":{}},"component":{},"keyword":{}}],["vk_image_compression_default_ext",{"_index":5083,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_compression_disabled_ext",{"_index":5084,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_compression_fixed_rate_2bpc_bit_ext",{"_index":5023,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_compression_fixed_rate_5bpc_bit_ext",{"_index":5024,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_compression_fixed_rate_default_ext",{"_index":5038,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_compression_fixed_rate_explicit_ext",{"_index":5004,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_create_alias_bit",{"_index":4648,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_image_create_mutable_format_bit",{"_index":4649,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vk_image_layout_shader_read_only_optim",{"_index":1923,"title":{},"name":{},"text":{"42":{},"46":{}},"component":{},"keyword":{}}],["vk_image_layout_transfer_dst_optim",{"_index":2027,"title":{},"name":{},"text":{"46":{},"101":{},"111":{}},"component":{},"keyword":{}}],["vk_image_layout_transfer_src_optim",{"_index":2033,"title":{},"name":{},"text":{"46":{},"101":{}},"component":{},"keyword":{}}],["vk_image_layout_undefin",{"_index":1203,"title":{},"name":{},"text":{"12":{},"20":{},"46":{},"100":{},"111":{}},"component":{},"keyword":{}}],["vk_image_tiling_optim",{"_index":4641,"title":{},"name":{},"text":{"92":{},"99":{},"111":{}},"component":{},"keyword":{}}],["vk_image_type_2d",{"_index":2011,"title":{},"name":{},"text":{"46":{},"92":{},"99":{},"111":{}},"component":{},"keyword":{}}],["vk_image_usage_color_attachment_bit",{"_index":5011,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_image_usage_fragment_shading_rate_attachment_bit_khr",{"_index":3253,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["vk_image_usage_sampled_bit",{"_index":5012,"title":{},"name":{},"text":{"99":{},"111":{}},"component":{},"keyword":{}}],["vk_image_usage_storage_bit",{"_index":3254,"title":{},"name":{},"text":{"64":{},"92":{}},"component":{},"keyword":{}}],["vk_image_usage_transfer_dst_bit",{"_index":4646,"title":{},"name":{},"text":{"92":{},"111":{}},"component":{},"keyword":{}}],["vk_image_usage_transient_attachment_bit",{"_index":4645,"title":{},"name":{},"text":{"92":{},"101":{},"106":{}},"component":{},"keyword":{}}],["vk_image_view_type_2d",{"_index":2064,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_index_type_uint32",{"_index":3880,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vk_instance_create_enumerate_portability_bit_khr",{"_index":3824,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vk_khr_16bit_storag",{"_index":1258,"title":{},"name":{},"text":{"12":{},"20":{},"90":{},"91":{}},"component":{},"keyword":{}}],["vk_khr_acceleration_structur",{"_index":1299,"title":{},"name":{},"text":{"12":{},"19":{},"80":{},"81":{}},"component":{},"keyword":{}}],["vk_khr_buffer_device_address",{"_index":1332,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["vk_khr_depth_stencil_resolv",{"_index":5140,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_khr_device_group",{"_index":2139,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vk_khr_dynamic_rend",{"_index":1288,"title":{},"name":{},"text":{"12":{},"19":{},"60":{},"85":{}},"component":{},"keyword":{}}],["vk_khr_dynamic_rendering_extension_nam",{"_index":3037,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vk_khr_external_memori",{"_index":1322,"title":{},"name":{},"text":{"12":{},"19":{},"74":{},"76":{}},"component":{},"keyword":{}}],["vk_khr_external_memory_cap",{"_index":3551,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_khr_external_memory_fd",{"_index":3554,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_khr_external_memory_win32",{"_index":3553,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_khr_external_semaphor",{"_index":1323,"title":{},"name":{},"text":{"12":{},"19":{},"74":{},"76":{}},"component":{},"keyword":{}}],["vk_khr_external_semaphore_cap",{"_index":3559,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_khr_external_semaphore_fd",{"_index":3561,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_khr_external_semaphore_win32",{"_index":3560,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_khr_fragment_shader_barycentr",{"_index":1363,"title":{},"name":{},"text":{"12":{},"19":{},"62":{}},"component":{},"keyword":{}}],["vk_khr_fragment_shading_r",{"_index":1338,"title":{},"name":{},"text":{"12":{},"19":{},"63":{},"64":{}},"component":{},"keyword":{}}],["vk_khr_get_physical_device_properties2",{"_index":2277,"title":{},"name":{},"text":{"50":{},"59":{},"114":{}},"component":{},"keyword":{}}],["vk_khr_get_physical_device_properties_2_extension_nam",{"_index":3178,"title":{},"name":{},"text":{"61":{},"69":{},"77":{},"89":{}},"component":{},"keyword":{}}],["vk_khr_maintenance3",{"_index":5574,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vk_khr_pipeline_executable_properti",{"_index":4553,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["vk_khr_portability_subset",{"_index":1347,"title":{},"name":{},"text":{"12":{},"19":{},"78":{}},"component":{},"keyword":{}}],["vk_khr_portability_subset_extension_nam",{"_index":3832,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vk_khr_push_descriptor",{"_index":1291,"title":{},"name":{},"text":{"12":{},"19":{},"79":{}},"component":{},"keyword":{}}],["vk_khr_ray_queri",{"_index":1298,"title":{},"name":{},"text":{"12":{},"19":{},"80":{}},"component":{},"keyword":{}}],["vk_khr_ray_tracing_pipelin",{"_index":1304,"title":{},"name":{},"text":{"12":{},"19":{},"81":{}},"component":{},"keyword":{}}],["vk_khr_shader_float16_int8",{"_index":4458,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["vk_khr_shader_float_controls_extension_nam",{"_index":3371,"title":{},"name":{},"text":{"67":{},"71":{}},"component":{},"keyword":{}}],["vk_khr_shader_non_semantic_info",{"_index":1372,"title":{},"name":{},"text":{"12":{},"19":{},"84":{}},"component":{},"keyword":{}}],["vk_khr_spirv_1_4_extension_nam",{"_index":3369,"title":{},"name":{},"text":{"67":{},"71":{}},"component":{},"keyword":{}}],["vk_khr_storage_buffer_storage_class",{"_index":4465,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["vk_khr_synchronization2",{"_index":1334,"title":{},"name":{},"text":{"12":{},"19":{},"38":{},"47":{},"87":{}},"component":{},"keyword":{}}],["vk_khr_timeline_semaphor",{"_index":1327,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["vk_layer_khronos_shader_object",{"_index":4186,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_layer_khronos_valid",{"_index":3975,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["vk_layer_path",{"_index":4196,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_memory_allocate_device_address_bit_khr",{"_index":2143,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vk_memory_property_lazily_allocated_bit",{"_index":5264,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vk_no_prototyp",{"_index":3045,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vk_null_handl",{"_index":3024,"title":{},"name":{},"text":{"60":{},"61":{},"66":{},"69":{},"75":{},"77":{},"85":{},"88":{},"89":{}},"component":{},"keyword":{}}],["vk_nv_fragment_shader_barycentr",{"_index":3186,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["vk_object_type_buff",{"_index":2517,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_object_type_queu",{"_index":2854,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_object_type_shader_modul",{"_index":2526,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_pipeline_bind_point_graph",{"_index":1949,"title":{},"name":{},"text":{"42":{},"55":{},"61":{},"77":{},"85":{}},"component":{},"keyword":{}}],["vk_pipeline_create_library_bit_khr",{"_index":3304,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_pipeline_create_link_time_optimization_bit_ext",{"_index":3343,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_pipeline_create_retain_link_time_optimization_info_bit_ext",{"_index":3305,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_pipeline_stage_all_commands_bit",{"_index":3719,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_pipeline_stage_color_attachment_output_bit",{"_index":3714,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_pipeline_stage_fragment_shader_bit",{"_index":2058,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_pipeline_stage_top_of_pipe_bit",{"_index":2098,"title":{},"name":{},"text":{"47":{},"88":{}},"component":{},"keyword":{}}],["vk_pipeline_stage_transfer_bit",{"_index":2034,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_polygon_mode_fil",{"_index":3095,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_polygon_mode_lin",{"_index":3128,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_present_mode_fifo_khr",{"_index":5456,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["vk_present_mode_mailbox_khr",{"_index":5457,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["vk_primitive_topology_patch_list",{"_index":3124,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vk_primitive_topology_triangle_list",{"_index":3078,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_primitive_topology_triangle_strip",{"_index":3080,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vk_query_result_",{"_index":2101,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_query_result_64_bit",{"_index":2099,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_query_result_wait_bit",{"_index":2100,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_query_result_with_availability_bit",{"_index":2103,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_query_type_timestamp",{"_index":2087,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_queue_family_ignor",{"_index":1725,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["vk_queue_transfer_bit",{"_index":2002,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vk_resolve_mode_average_bit",{"_index":5150,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_resolve_mode_max_bit",{"_index":5152,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_resolve_mode_min_bit",{"_index":5151,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_resolve_mode_non",{"_index":5148,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_resolve_mode_sample_zero_bit",{"_index":5149,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_result_str(result",{"_index":5594,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vk_sample_count_1_bit",{"_index":4638,"title":{},"name":{},"text":{"92":{},"111":{}},"component":{},"keyword":{}}],["vk_sample_count_4_bit",{"_index":5113,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vk_semaphore_type_timeline_khr",{"_index":4289,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vk_shader_code_type_spirv_ext",{"_index":4086,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info",{"_index":4053,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.codes",{"_index":4087,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.codetyp",{"_index":4085,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.flag",{"_index":4082,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.nextstag",{"_index":4084,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.pcod",{"_index":4089,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.pnam",{"_index":4090,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.pnext",{"_index":4081,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.ppushconstantrang",{"_index":4094,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.psetlayout",{"_index":4092,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.pspecializationinfo",{"_index":4095,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.pushconstantrangecount",{"_index":4093,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.setlayoutcount",{"_index":4091,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.stag",{"_index":4083,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_info.styp",{"_index":4079,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_create_link_stage_bit_ext",{"_index":4096,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_stage_fragment_bit",{"_index":1075,"title":{},"name":{},"text":{"11":{},"85":{}},"component":{},"keyword":{}}],["vk_shader_stage_geometry_bit",{"_index":4120,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_shader_stage_vertex_bit",{"_index":1072,"title":{},"name":{},"text":{"11":{},"52":{},"66":{},"85":{}},"component":{},"keyword":{}}],["vk_sharing_mode_exclus",{"_index":5547,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vk_structure_type_android_hardware_buffer_properties_android",{"_index":3792,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_structure_type_conditional_rendering_begin_info_ext",{"_index":2326,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vk_structure_type_debug_utils_messenger_create_info_ext",{"_index":2402,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_structure_type_debug_utils_object_name_info_ext",{"_index":2515,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_structure_type_debug_utils_object_tag_info_ext",{"_index":2524,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vk_structure_type_descriptor_address_info_ext",{"_index":2593,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_structure_type_descriptor_buffer_binding_info_ext",{"_index":2616,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_structure_type_descriptor_set_layout_binding_flags_create_info_ext",{"_index":2667,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_structure_type_device_create_info",{"_index":5590,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vk_structure_type_export_memory_allocate_info",{"_index":3768,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_structure_type_export_memory_win32_handle_info_khr",{"_index":3615,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_structure_type_export_semaphore_create_info_khr",{"_index":3664,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_structure_type_export_semaphore_win32_handle_info_khr",{"_index":3668,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_structure_type_external_memory_image_create_info",{"_index":3752,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_structure_type_graphics_pipeline_create_info",{"_index":3302,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_structure_type_graphics_pipeline_library_create_info_ext",{"_index":3276,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_structure_type_image_compression_properties_ext",{"_index":5069,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_structure_type_image_create_info",{"_index":5278,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vk_structure_type_import_android_hardware_buffer_info_android",{"_index":3784,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_structure_type_instance_create_info",{"_index":2412,"title":{},"name":{},"text":{"54":{},"114":{}},"component":{},"keyword":{}}],["vk_structure_type_memory_dedicated_allocate_info",{"_index":3760,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_structure_type_memory_get_android_hardware_buffer_info_android",{"_index":3774,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_descriptor_buffer_properties_ext",{"_index":2559,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_descriptor_indexing_features_ext",{"_index":5579,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_features_2",{"_index":3840,"title":{},"name":{},"text":{"78":{},"114":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_fragment_shader_barycentric_features_khr",{"_index":3205,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_id_properti",{"_index":3571,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_memory_budget_properties_ext",{"_index":3431,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_memory_properties_2",{"_index":3434,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_portability_subset_features_khr",{"_index":3837,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vk_structure_type_physical_device_properties_2_khr",{"_index":2561,"title":{},"name":{},"text":{"55":{},"74":{}},"component":{},"keyword":{}}],["vk_structure_type_pipeline_library_create_info_khr",{"_index":3334,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_structure_type_pipeline_shader_stage_create_info",{"_index":3322,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vk_structure_type_pipeline_tessellation_state_create_info",{"_index":3811,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["vk_structure_type_query_pool_create_info",{"_index":2085,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vk_structure_type_semaphore_create_info",{"_index":3678,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_structure_type_shader_create_info_ext",{"_index":4080,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_structure_type_shader_module_create_info",{"_index":1609,"title":{},"name":{},"text":{"26":{},"66":{}},"component":{},"keyword":{}}],["vk_structure_type_surface_format_2_khr",{"_index":5067,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vk_structure_type_swapchain_create_info_khr",{"_index":5360,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_structure_type_validation_features_ext",{"_index":2832,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_structure_type_write_descriptor_set",{"_index":1926,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["vk_suboptimal_khr",{"_index":5450,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_subpass_contents_inlin",{"_index":2999,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vk_subpass_contents_secondary_command_buff",{"_index":4740,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vk_success",{"_index":4114,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vk_surface_transform_rotate_180_bit_khr",{"_index":5428,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_surface_transform_rotate_270_bit_khr",{"_index":5415,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_surface_transform_rotate_90_bit_khr",{"_index":5414,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vk_true",{"_index":1007,"title":{},"name":{},"text":{"11":{},"47":{},"59":{},"61":{},"62":{},"67":{},"69":{},"74":{},"85":{},"86":{},"114":{}},"component":{},"keyword":{}}],["vk_update_cl_semaphor",{"_index":3682,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vk_validation_feature_enable_debug_printf_ext",{"_index":3977,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["vk_validation_feature_enable_gpu_assisted_ext",{"_index":2837,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_validation_feature_enable_gpu_assisted_reserve_binding_slot_ext",{"_index":2836,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vk_version_major(properties.driververs",{"_index":918,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vk_version_minor(properties.driververs",{"_index":919,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vk_version_patch(properties.driververs",{"_index":920,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vk_vertex_input_rate_vertex",{"_index":3286,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["vkaccelerationstructurebuildgeometryinfokhr",{"_index":3852,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vkaccelerationstructuregeometrykhr",{"_index":3868,"title":{},"name":{},"text":{"82":{}},"component":{},"keyword":{}}],["vkacquirenextimagekhr",{"_index":1962,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["vkallocatecommandbuff",{"_index":4752,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkallocatedescriptorset",{"_index":2543,"title":{},"name":{},"text":{"55":{},"96":{}},"component":{},"keyword":{}}],["vkallocatememori",{"_index":2014,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkallocationcallback",{"_index":4046,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkandroidhardwarebufferpropertiesandroid",{"_index":3789,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkapi_attr",{"_index":2425,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vkapi_cal",{"_index":2427,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vkattach",{"_index":5333,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["vkattachmentdescript",{"_index":1228,"title":{},"name":{},"text":{"12":{},"20":{},"106":{}},"component":{},"keyword":{}}],["vkb",{"_index":540,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkb::applicationopt",{"_index":1024,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vkb::glslcompiler::set_target_environment(glslang::eshtargetspv",{"_index":3377,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["vkb::initializers::buffer_create_info",{"_index":2134,"title":{},"name":{},"text":{"49":{},"111":{}},"component":{},"keyword":{}}],["vkb::initializers::image_create_info",{"_index":2009,"title":{},"name":{},"text":{"46":{},"111":{}},"component":{},"keyword":{}}],["vkb::initializers::image_view_create_info",{"_index":2061,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_color_blend_state_create_info(1",{"_index":3397,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_depth_stencil_state_create_info",{"_index":3106,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_dynamic_state_create_info",{"_index":3139,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_input_assembly_state_create_info",{"_index":3088,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_input_assembly_state_create_info(vk_primitive_topology_triangle_list",{"_index":3279,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_rasterization_state_create_info",{"_index":3094,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_tessellation_state_create_info(3",{"_index":3121,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vkb::initializers::pipeline_vertex_input_state_create_info",{"_index":3282,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["vkb::initializers::render_pass_begin_info",{"_index":2988,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkb::initializers::rendering_attachment_info",{"_index":3004,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkb::initializers::rendering_info(render_area",{"_index":3015,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkb::initializers::semaphore_create_info",{"_index":4285,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vkb::initializers::submit_info",{"_index":4296,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vkb::initializers::vertex_input_attribute_descript",{"_index":4404,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkb::initializers::vertex_input_attribute_description(0",{"_index":3288,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkb::initializers::vertex_input_attribute_description2ext",{"_index":4439,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkb::initializers::vertex_input_binding_descript",{"_index":4402,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkb::initializers::vertex_input_binding_description(0",{"_index":3284,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkb::initializers::vertex_input_binding_description2ext",{"_index":4437,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkb::insert_image_memory_barri",{"_index":2029,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkb::physicaldevice::request_extension_featur",{"_index":3208,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["vkb::query_supported_fixed_rate_compress",{"_index":5021,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkb::renderpipelin",{"_index":1063,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vkb::sg::image::color",{"_index":1046,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vkb::shadersourc",{"_index":1055,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vkb::vulkan_style_projection(camera.get_project",{"_index":5438,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vkb_",{"_index":554,"title":{"7-2":{}},"name":{},"text":{},"component":{},"keyword":{}}],["vkb__",{"_index":550,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkb__compon",{"_index":549,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkb__register_compon",{"_index":542,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkb__register_test",{"_index":547,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkb__test",{"_index":551,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkb_build_sampl",{"_index":555,"title":{"7-3":{}},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vkb_build_test",{"_index":556,"title":{"7-4":{}},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vkb_enable_port",{"_index":3831,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vkb_validation_lay",{"_index":557,"title":{"7-5":{}},"name":{},"text":{},"component":{},"keyword":{}}],["vkb_validation_layers_best_practic",{"_index":559,"title":{"7-7":{}},"name":{},"text":{},"component":{},"keyword":{}}],["vkb_validation_layers_gpu_assist",{"_index":558,"title":{"7-6":{}},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vkb_validation_layers_synchron",{"_index":560,"title":{"7-8":{}},"name":{},"text":{},"component":{},"keyword":{}}],["vkb_vulkan_debug",{"_index":561,"title":{"7-9":{}},"name":{},"text":{},"component":{},"keyword":{}}],["vkb_warnings_as_error",{"_index":562,"title":{"7-10":{}},"name":{},"text":{},"component":{},"keyword":{}}],["vkbcompon",{"_index":541,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkbegincommandbuff",{"_index":1038,"title":{},"name":{},"text":{"11":{},"94":{}},"component":{},"keyword":{}}],["vkbegincommandbuffer(command_buff",{"_index":2104,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkbegincommandbuffer(draw_cmd_buffers[i",{"_index":2093,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkbool",{"_index":2079,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkbool32",{"_index":2426,"title":{},"name":{},"text":{"54":{},"60":{},"69":{},"84":{},"89":{},"114":{}},"component":{},"keyword":{}}],["vkbtest",{"_index":546,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vkbuffer",{"_index":1186,"title":{},"name":{},"text":{"12":{},"20":{},"49":{},"75":{},"95":{},"96":{},"104":{}},"component":{},"keyword":{}}],["vkbuffercreateinfo",{"_index":2132,"title":{},"name":{},"text":{"49":{},"111":{}},"component":{},"keyword":{}}],["vkbufferdeviceaddressinfokhr",{"_index":2146,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vkbufferimagecopi",{"_index":2015,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkbuffermemorybarri",{"_index":5213,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vkclearvalu",{"_index":5247,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vkcmd/queuebegindebugutilslabelext",{"_index":2474,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmd/queueenddebugutilslabelext",{"_index":2475,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmd/queueinsertdebugutilslabelext",{"_index":2477,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdbeginconditionalrenderingext",{"_index":2334,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdbeginconditionalrenderingext(command_buff",{"_index":2331,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdbeginconditionalrenderingext(draw_cmd_buffers[i",{"_index":2363,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdbeginconditionalrenderingext(vkcommandbuff",{"_index":2319,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdbegindebugutilslabelext",{"_index":2468,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdbeginrenderingkhr",{"_index":2977,"title":{},"name":{},"text":{"60":{},"85":{}},"component":{},"keyword":{}}],["vkcmdbeginrenderingkhr(draw_cmd_buff",{"_index":3019,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkcmdbeginrenderpass",{"_index":2976,"title":{},"name":{},"text":{"60":{},"94":{}},"component":{},"keyword":{}}],["vkcmdbeginrenderpass(draw_cmd_buff",{"_index":2998,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkcmdbeginrenderpass(draw_cmd_buffers[i",{"_index":2486,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdbinddescriptorbuffersext(draw_cmd_buffers[i",{"_index":2620,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkcmdbinddescriptorset",{"_index":2545,"title":{},"name":{},"text":{"55":{},"56":{},"95":{},"96":{}},"component":{},"keyword":{}}],["vkcmdbinddescriptorset(command_buff",{"_index":4877,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vkcmdbinddescriptorsets(draw_cmd_buff",{"_index":3147,"title":{},"name":{},"text":{"61":{},"77":{},"85":{}},"component":{},"keyword":{}}],["vkcmdbinddescriptorsets(draw_cmd_buffers[i",{"_index":1948,"title":{},"name":{},"text":{"42":{},"54":{}},"component":{},"keyword":{}}],["vkcmdbindindexbuffer(command_buff",{"_index":4882,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vkcmdbindindexbuffer(draw_cmd_buffers[i",{"_index":2375,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdbindpipeline(draw_cmd_buff",{"_index":3150,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vkcmdbindpipeline(draw_cmd_buffers[i",{"_index":2489,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdbindshadersext",{"_index":4134,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcmdbindshadersext(cmd_buff",{"_index":4140,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcmdbindshadersext(draw_cmd_buff",{"_index":4155,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcmdbindvertexbuff",{"_index":5170,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vkcmdbindvertexbuffer(command_buff",{"_index":4880,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vkcmdbindvertexbuffers(draw_cmd_buffers[i",{"_index":2372,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdblitimag",{"_index":2003,"title":{},"name":{},"text":{"46":{},"100":{},"106":{}},"component":{},"keyword":{}}],["vkcmdclear",{"_index":5237,"title":{"106-4":{}},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vkcmdclearattach",{"_index":5272,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vkcmdclearcolorimag",{"_index":5288,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vkcmdcleardepthstencilimag",{"_index":5289,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vkcmdcopybuffertoimag",{"_index":5553,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vkcmdcopybuffertoimage(copy_command",{"_index":2025,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkcmdcopyimag",{"_index":4690,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vkcmddispatch",{"_index":5210,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vkcmddraw",{"_index":4020,"title":{},"name":{},"text":{"85":{},"95":{},"104":{}},"component":{},"keyword":{}}],["vkcmddraw(draw_cmd_buffers[i",{"_index":2490,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmddraw*(cmd",{"_index":2952,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkcmddrawindex",{"_index":2332,"title":{},"name":{},"text":{"52":{},"95":{},"102":{}},"component":{},"keyword":{}}],["vkcmddrawindexed(command_buff",{"_index":4884,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vkcmddrawindexed(draw_cmd_buffers[i",{"_index":1950,"title":{},"name":{},"text":{"42":{},"52":{}},"component":{},"keyword":{}}],["vkcmddrawindexedindirect(draw_cmd_buffers[i",{"_index":5182,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vkcmddrawindexindirect",{"_index":5171,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vkcmddrawindirect",{"_index":5209,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vkcmdendconditionalrenderingext(command_buff",{"_index":2333,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdendconditionalrenderingext(draw_cmd_buffers[i",{"_index":2378,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdendconditionalrenderingext(vkcommandbuff",{"_index":2323,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdenddebugutilslabelext",{"_index":2469,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdendrenderingkhr",{"_index":3043,"title":{},"name":{},"text":{"60":{},"85":{}},"component":{},"keyword":{}}],["vkcmdendrenderingkhr(draw_cmd_buff",{"_index":3020,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkcmdendrenderpass",{"_index":4742,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkcmdendrenderpass(draw_cmd_buff",{"_index":3001,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkcmdendrenderpass(draw_cmd_buffers[i",{"_index":2491,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdexecutecommand",{"_index":4741,"title":{},"name":{},"text":{"94":{},"103":{}},"component":{},"keyword":{}}],["vkcmdinsertdebugutilslabelext",{"_index":2470,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdnextsubpass",{"_index":5329,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["vkcmdpipelinebarri",{"_index":5099,"title":{},"name":{},"text":{"100":{},"104":{}},"component":{},"keyword":{}}],["vkcmdpushconst",{"_index":4834,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["vkcmdpushconstants(draw_cmd_buff",{"_index":4167,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcmdpushconstants(draw_cmd_buffers[i",{"_index":2369,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkcmdresetquerypool",{"_index":2092,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkcmdresetquerypool(draw_cmd_buffers[i",{"_index":2095,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkcmdresolveimag",{"_index":5122,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vkcmdresolveimage(cmd_buf.get_handl",{"_index":5123,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vkcmdsetcolorblendadvancedext",{"_index":2878,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vkcmdsetcolorblendenableext",{"_index":2875,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vkcmdsetcolorblendequationext",{"_index":2876,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vkcmdsetcolorwriteenableext",{"_index":2293,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vkcmdsetcolorwritemaskext",{"_index":2284,"title":{},"name":{},"text":{"51":{},"57":{}},"component":{},"keyword":{}}],["vkcmdsetcullmodeext(draw_cmd_buff",{"_index":4160,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcmdsetdepthbiasenableext",{"_index":3129,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetdepthbiasenableext(command_buff",{"_index":3173,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetdepthbiasenableext(commandbuffer1",{"_index":3074,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetdepthbiasenableext(commandbuffer3",{"_index":3082,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetdepthclipenableext",{"_index":2914,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkcmdsetdepthwriteenableext(draw_cmd_buff",{"_index":4162,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcmdsetdescriptorbufferoffsetsext",{"_index":2553,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkcmdsetdescriptorbufferoffsetsext(draw_cmd_buffers[i",{"_index":2624,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkcmdsetlinerasterizationmodeext",{"_index":2896,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["vkcmdsetlinestippleenableext",{"_index":2897,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["vkcmdsetlinestippleext",{"_index":2893,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["vkcmdsetlinewidth",{"_index":2898,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["vkcmdsetlogicopext",{"_index":3403,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkcmdsetlogicopext(draw_cmd_buff",{"_index":3406,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkcmdsetpatchcontrolpointsext",{"_index":3132,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vkcmdsetpatchcontrolpointsext(commandbuff",{"_index":3815,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["vkcmdsetpatchcontrolpointsext(commandbuffer4",{"_index":3084,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetpatchcontrolpointsext(draw_cmd_buff",{"_index":3159,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vkcmdsetpolygonmodeext",{"_index":2895,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["vkcmdsetprimitiverestartenableext",{"_index":3130,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitiverestartenableext(commandbuffer1",{"_index":3072,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitiverestartenableext(commandbuffer2",{"_index":3081,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitiverestartenableext(commandbuffer3",{"_index":3083,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitiverestartenableext(draw_cmd_buff",{"_index":3152,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitivetopolog",{"_index":3136,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitivetopologyext",{"_index":2899,"title":{},"name":{},"text":{"58":{},"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitivetopologyext(commandbuffer1",{"_index":3077,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitivetopologyext(commandbuffer2",{"_index":3079,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetprimitivetopologyext(draw_cmd_buff",{"_index":3151,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetrasterizerdiscardenableext",{"_index":3131,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetrasterizerdiscardenableext(command_buff",{"_index":3174,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetrasterizerdiscardenableext(commandbuffer1,rasterizerboolparam",{"_index":3076,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcmdsetscissor(draw_cmd_buffers[i",{"_index":2488,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdsetvertexinputext",{"_index":4430,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcmdsetvertexinputext(&vertex1_param",{"_index":4396,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcmdsetvertexinputext(&vertex2_param",{"_index":4399,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcmdsetvertexinputext(draw_cmd_buff",{"_index":4444,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcmdsetviewport(draw_cmd_buffers[i",{"_index":2487,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcmdwaitev",{"_index":5100,"title":{},"name":{},"text":{"100":{}},"component":{},"keyword":{}}],["vkcmdwritetimestamp",{"_index":2096,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkcmdwritetimestamp(command_buff",{"_index":2105,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkcmdwritetimestamp(draw_cmd_buffers[i",{"_index":2097,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkcmdwritetimestamp2",{"_index":2078,"title":{"47-9":{}},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkcolorblendadvancedext",{"_index":2883,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vkcolorblendequationext",{"_index":2882,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vkcolorcomponentflag",{"_index":2885,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["vkcommandbuff",{"_index":4835,"title":{},"name":{},"text":{"95":{},"111":{}},"component":{},"keyword":{}}],["vkcommandbufferbegininfo",{"_index":4738,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkcommandbufferinheritanceinfo",{"_index":4737,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkconditionalrenderingbegininfoext",{"_index":2321,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkconfig",{"_index":3987,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["vkcreatecomputepipelin",{"_index":5235,"title":{},"name":{},"text":{"105":{}},"component":{},"keyword":{}}],["vkcreatedebugutilsmessengerext",{"_index":2399,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcreatedebugutilsmessengerext(handl",{"_index":2415,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkcreatedescriptorpool",{"_index":2542,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkcreatedevic",{"_index":5592,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vkcreatedevice'",{"_index":4570,"title":{},"name":{},"text":{"91":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelin",{"_index":5234,"title":{},"name":{},"text":{"105":{},"107":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(get_device().get_handl",{"_index":3309,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(model",{"_index":4390,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(model1",{"_index":4388,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(model2",{"_index":4389,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(pipelin",{"_index":3813,"title":{},"name":{},"text":{"77":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(pipeline1",{"_index":3060,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(pipeline2",{"_index":3061,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(pipeline3",{"_index":3062,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcreategraphicspipelines(pipeline4",{"_index":3063,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkcreateimage(devic",{"_index":5036,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkcreateimage(get_device().get_handl",{"_index":5551,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vkcreateinst",{"_index":2829,"title":{},"name":{},"text":{"56":{},"114":{}},"component":{},"keyword":{}}],["vkcreatesemaphor",{"_index":3683,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkcreateshadermodul",{"_index":3311,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkcreateshadersext",{"_index":4041,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcreateshadersext(devic",{"_index":4112,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkcreateswapchainkhr",{"_index":5453,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["vkcreateswapchainkhr(devic",{"_index":5078,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkdebugutilsmessageseverityflagbitsext",{"_index":2428,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vkdebugutilsmessagetypeflagsext",{"_index":2430,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vkdebugutilsmessengercallbackdataext",{"_index":2432,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vkdebugutilsmessengercreateinfoext",{"_index":2400,"title":{},"name":{},"text":{"54":{},"84":{}},"component":{},"keyword":{}}],["vkdebugutilsobjectnameinfoext",{"_index":2513,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkdebugutilsobjecttaginfoext",{"_index":2522,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkdescriptoraddressinfoext",{"_index":2591,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkdescriptorbindingflagsext",{"_index":2659,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vkdescriptorgetinfoext",{"_index":2601,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkdescriptorimageinfo",{"_index":1048,"title":{},"name":{},"text":{"11":{},"42":{}},"component":{},"keyword":{}}],["vkdescriptorpool",{"_index":2540,"title":{},"name":{},"text":{"55":{},"56":{},"96":{}},"component":{},"keyword":{}}],["vkdescriptorset",{"_index":2647,"title":{},"name":{},"text":{"56":{},"95":{},"96":{}},"component":{},"keyword":{}}],["vkdescriptorsetlayout",{"_index":4071,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkdescriptorsetlayoutbindingflagscreateinfoext",{"_index":2664,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vkdescriptorsetlayoutcreateinfo",{"_index":2655,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vkdevic",{"_index":2957,"title":{},"name":{},"text":{"59":{},"85":{}},"component":{},"keyword":{}}],["vkdevice::createcomputepipeline[",{"_index":4936,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vkdevice::creategraphicspipeline[",{"_index":4935,"title":{},"name":{},"text":{"97":{}},"component":{},"keyword":{}}],["vkdeviceaddress",{"_index":2154,"title":{},"name":{},"text":{"49":{},"83":{}},"component":{},"keyword":{}}],["vkdevicecreateinfo",{"_index":3182,"title":{},"name":{},"text":{"61":{},"77":{},"85":{},"114":{}},"component":{},"keyword":{}}],["vkdevicecreateinfo'",{"_index":4033,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkdevicememori",{"_index":3747,"title":{},"name":{},"text":{"75":{},"86":{}},"component":{},"keyword":{}}],["vkdevices",{"_index":2352,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vkdevicewaitidl",{"_index":4253,"title":{"88-12":{}},"name":{},"text":{"88":{},"113":{}},"component":{},"keyword":{}}],["vkdrawindexedindirectcommand",{"_index":5172,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vkdrawindexindirectcommand",{"_index":5178,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vkdynamicst",{"_index":3400,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkendcommandbuf",{"_index":1042,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vkendcommandbuffer(command_buff",{"_index":2106,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkevent",{"_index":5232,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vkexportmemoryallocateinfo",{"_index":3765,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkexportmemorywin32handleinfokhr",{"_index":3608,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkexportsemaphorecreateinfokhr",{"_index":3661,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkexportsemaphorewin32handleinfokhr",{"_index":3665,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkextent2d{width",{"_index":3013,"title":{},"name":{},"text":{"60":{},"109":{}},"component":{},"keyword":{}}],["vkexternalmemoryimagecreateinfo",{"_index":3749,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkfenc",{"_index":2035,"title":{"88-6":{}},"name":{},"text":{"46":{},"75":{},"88":{}},"component":{},"keyword":{}}],["vkformat",{"_index":4642,"title":{},"name":{},"text":{"92":{},"111":{}},"component":{},"keyword":{}}],["vkformat)ktx_textur",{"_index":5527,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vkfragmentshadingrateattachmentinfokhr",{"_index":3227,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["vkframebuff",{"_index":2980,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkfreecommandbuff",{"_index":4753,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkfreedescriptorset",{"_index":4911,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["vkgetandroidhardwarebufferpropertiesandroid",{"_index":3788,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkgetandroidhardwarebufferpropertiesandroid(devic",{"_index":3794,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkgetbufferdeviceaddresskhr(devic",{"_index":2151,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vkgetdescriptorext",{"_index":2586,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkgetdescriptorext(get_device().get_handl",{"_index":2606,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkgetdescriptorsetlayoutbindingoffsetext(get_device().get_handl",{"_index":2576,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkgetdescriptorsetlayoutsizeext(get_device().get_handl",{"_index":2566,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkgetimagesubresourcelayout2ext",{"_index":5042,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkgetimagesubresourcelayout2ext(devic",{"_index":5052,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkgetinstanceprocaddr",{"_index":2398,"title":{},"name":{},"text":{"54":{},"60":{}},"component":{},"keyword":{}}],["vkgetinstanceprocaddr(inst",{"_index":3049,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkgetmemoryandroidhardwarebufferandroid(devic",{"_index":3778,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkgetmemorywin32handlekhr",{"_index":3624,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicecalibrateabletimedomainsext",{"_index":2280,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicefeatures2",{"_index":2287,"title":{},"name":{},"text":{"51":{},"61":{},"62":{},"67":{},"77":{},"78":{},"90":{},"91":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicefeatures2(get_device().get_gpu().get_handl",{"_index":3842,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicefeatures2(physicaldevic",{"_index":5586,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vkgetphysicaldeviceformatproperti",{"_index":2007,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicefragmentshadingrateskhr",{"_index":3237,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["vkgetphysicaldeviceimageformatproperties2khr",{"_index":4999,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkgetphysicaldeviceimageformatproperties2khr(device.get_gpu().get_handl",{"_index":5018,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicememoryproperties2",{"_index":3461,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicememoryproperties2(get_device().get_gpu().get_handl",{"_index":3465,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["vkgetphysicaldeviceproperties(physical_devic",{"_index":908,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vkgetphysicaldeviceproperties2khr(devic",{"_index":3576,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkgetphysicaldeviceproperties2khr(get_device().get_gpu().get_handl",{"_index":2563,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicesurfacecapabilitieskhr",{"_index":5361,"title":{},"name":{},"text":{"109":{},"110":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicesurfaceformats2khr(devic",{"_index":5062,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkgetphysicaldevicesurfacepresentmodeskhr",{"_index":5455,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["vkgetpipelinecachedata",{"_index":5236,"title":{},"name":{},"text":{"105":{}},"component":{},"keyword":{}}],["vkgetquerypoolresult",{"_index":2102,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkgetrenderareagranular",{"_index":5280,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["vkgetsemaphorefdkhr",{"_index":3687,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkgetsemaphorewin32handlekhr",{"_index":3686,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkgetswapchainimageskhr",{"_index":5454,"title":{},"name":{},"text":{"110":{}},"component":{},"keyword":{}}],["vkgraphicspipelinecreateinfo",{"_index":3021,"title":{},"name":{},"text":{"60":{},"61":{},"66":{},"69":{},"77":{},"89":{}},"component":{},"keyword":{}}],["vkgraphicspipelinecreateinfo::pnext",{"_index":2949,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkgraphicspipelinelibrarycreateinfoext",{"_index":3273,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkimag",{"_index":3748,"title":{},"name":{},"text":{"75":{},"92":{},"99":{},"104":{}},"component":{},"keyword":{}}],["vkimage'",{"_index":4630,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vkimageblit",{"_index":2036,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkimagecompressioncontrolext",{"_index":5001,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkimagecompressionfixedrateflagsext",{"_index":5025,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkimagecompressionpropertiesext",{"_index":4997,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkimagecreateflag",{"_index":4647,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vkimagecreateinfo",{"_index":2008,"title":{},"name":{},"text":{"46":{},"75":{},"99":{},"106":{},"111":{}},"component":{},"keyword":{}}],["vkimageformat",{"_index":5339,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["vkimageformatproperties2",{"_index":4998,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkimagememorybarri",{"_index":5098,"title":{},"name":{},"text":{"100":{},"103":{},"104":{}},"component":{},"keyword":{}}],["vkimagesubresource2ext",{"_index":5041,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkimagetil",{"_index":4640,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vkimagetyp",{"_index":4639,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vkimageusageflag",{"_index":4644,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vkimageview",{"_index":1917,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["vkimageviewcreateinfo",{"_index":2060,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkimageviewcreateinfo.subresourcerange.levelcount",{"_index":2059,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["vkimportandroidhardwarebufferinfoandroid",{"_index":3781,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkinstanc",{"_index":2956,"title":{},"name":{},"text":{"59":{},"60":{}},"component":{},"keyword":{}}],["vkinstancecreateinfo",{"_index":2410,"title":{},"name":{},"text":{"54":{},"84":{},"114":{}},"component":{},"keyword":{}}],["vklayer_khronos_shader_object.dl",{"_index":4193,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vklayer_khronos_shader_object.json",{"_index":4194,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vklogicop",{"_index":3404,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkmapmemory(get_device().get_handl",{"_index":5532,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vkmemoryallocateflagsinfokhr",{"_index":2140,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vkmemoryallocateinfo",{"_index":3770,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkmemorybarri",{"_index":5212,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vkmemorydedicatedallocateinfo",{"_index":3757,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkmemorygetandroidhardwarebufferinfoandroid",{"_index":3772,"title":{},"name":{},"text":{"75":{}},"component":{},"keyword":{}}],["vkphysicald",{"_index":3412,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkphysicaldevice16bitstoragefeatur",{"_index":4466,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["vkphysicaldevicecolorwriteenablefeaturesext",{"_index":2288,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vkphysicaldevicedepthclipenablefeaturesext::depthclipen",{"_index":2958,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkphysicaldevicedescriptorbufferpropertiesext",{"_index":2629,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkphysicaldevicedescriptorbufferpropertiesext::descriptorbufferoffsetalign",{"_index":2554,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkphysicaldevicedescriptorindexingfeaturesext",{"_index":5576,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vkphysicaldevicedynamicrenderingfeatureskhr",{"_index":3038,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkphysicaldeviceextendeddynamicstate2featuresext",{"_index":3181,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vkphysicaldeviceextendeddynamicstate3featuresext::extendeddynamicstate3depthclipen",{"_index":2959,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkphysicaldeviceextendeddynamicstatefeaturesext",{"_index":3408,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkphysicaldevicefeatur",{"_index":5495,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vkphysicaldevicefeatures2",{"_index":2286,"title":{},"name":{},"text":{"51":{},"61":{},"62":{},"67":{},"77":{},"78":{},"114":{}},"component":{},"keyword":{}}],["vkphysicaldevicefeatures2::bufferdeviceaddress",{"_index":5177,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["vkphysicaldevicefeatures::shaderclipdist",{"_index":2938,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkphysicaldevicefragmentshaderbarycentricfeatureskhr",{"_index":3201,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["vkphysicaldevicefragmentshadingratefeatureskhr",{"_index":3226,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["vkphysicaldeviceidpropertieskhr",{"_index":3568,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkphysicaldeviceimageformatinfo2",{"_index":5005,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkphysicaldevicelimit",{"_index":2080,"title":{},"name":{},"text":{"47":{},"95":{},"101":{}},"component":{},"keyword":{}}],["vkphysicaldevicelimits::maxclipdist",{"_index":2944,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkphysicaldevicememorybudgetpropertiesext",{"_index":3424,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["vkphysicaldevicememoryproperties2",{"_index":3426,"title":{},"name":{},"text":{"70":{}},"component":{},"keyword":{}}],["vkphysicaldevicemeshshaderfeaturesext",{"_index":3379,"title":{},"name":{},"text":{"67":{},"71":{}},"component":{},"keyword":{}}],["vkphysicaldeviceportabilitysubsetfeatureskhr",{"_index":3834,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vkphysicaldeviceportabilitysubsetpropertieskhr",{"_index":3826,"title":{},"name":{},"text":{"78":{}},"component":{},"keyword":{}}],["vkphysicaldeviceproperti",{"_index":912,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vkphysicaldeviceproperties2",{"_index":3572,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkphysicaldeviceproperties2khr",{"_index":2556,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["vkphysicaldeviceshaderfloat16int8featur",{"_index":4460,"title":{},"name":{},"text":{"90":{}},"component":{},"keyword":{}}],["vkphysicaldeviceshaderobjectfeaturesext",{"_index":4035,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkphysicaldevicesurfaceinfo2khr",{"_index":5058,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkphysicaldevicevertexinputdynamicstatefeaturesext",{"_index":4453,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkpipelin",{"_index":3344,"title":{},"name":{},"text":{"66":{},"85":{}},"component":{},"keyword":{}}],["vkpipelinecach",{"_index":5233,"title":{},"name":{},"text":{"105":{}},"component":{},"keyword":{}}],["vkpipelinecolorblendattachmentst",{"_index":2291,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vkpipelinecolorblendstatecreateinfo",{"_index":3394,"title":{},"name":{},"text":{"69":{}},"component":{},"keyword":{}}],["vkpipelinecolorwritecreateinfoext",{"_index":2289,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vkpipelinedepthstencilstatecreateinfo",{"_index":3104,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkpipelinedynamicstatecreateinfo",{"_index":3138,"title":{},"name":{},"text":{"61":{},"69":{},"77":{}},"component":{},"keyword":{}}],["vkpipelinedynamicstatecreateinfo::pdynamicst",{"_index":2954,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkpipelineinputassemblystatecreateinfo",{"_index":3086,"title":{},"name":{},"text":{"61":{},"66":{},"77":{}},"component":{},"keyword":{}}],["vkpipelinelayout",{"_index":4836,"title":{},"name":{},"text":{"95":{},"105":{}},"component":{},"keyword":{}}],["vkpipelinelibrarycreateinfokhr",{"_index":3331,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkpipelinerasterizationdepthclipstatecreateinfoext",{"_index":2947,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkpipelinerasterizationdepthclipstatecreateinfoext::depthclipen",{"_index":2950,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkpipelinerasterizationstatecreateinfo",{"_index":3092,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["vkpipelinerasterizationstatecreateinfo::depthclampen",{"_index":2948,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkpipelinerenderingcreateinfokhr",{"_index":2986,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkpipelineshaderstagecreateinfo",{"_index":3319,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["vkpipelinestag",{"_index":5211,"title":{},"name":{},"text":{"104":{}},"component":{},"keyword":{}}],["vkpipelinestageflag",{"_index":4311,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vkpipelinestageflags2",{"_index":2107,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkpipelinetessellationstatecreateinfo",{"_index":3119,"title":{},"name":{},"text":{"61":{},"77":{}},"component":{},"keyword":{}}],["vkpipelinevertexinputstatecreateinfo",{"_index":3280,"title":{},"name":{},"text":{"66":{},"89":{}},"component":{},"keyword":{}}],["vkpipelineviewportdepthclipcontrolcreateinfoext",{"_index":2933,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["vkpushconstantrang",{"_index":4073,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkquerypoolcreateinfo",{"_index":2082,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkqueue",{"_index":4247,"title":{"88-3":{}},"name":{},"text":{"88":{},"93":{},"113":{}},"component":{},"keyword":{}}],["vkqueuebegindebugutilslabelext",{"_index":2471,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkqueueenddebugutilslabelext",{"_index":2472,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkqueuefamilyproperti",{"_index":2081,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["vkqueueinsertdebugutilslabelext",{"_index":2473,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkqueuepresentkhr",{"_index":1972,"title":{},"name":{},"text":{"43":{},"88":{}},"component":{},"keyword":{}}],["vkqueuesubmit",{"_index":1970,"title":{"88-16":{}},"name":{},"text":{"43":{},"56":{},"88":{},"103":{}},"component":{},"keyword":{}}],["vkqueuewaitidl",{"_index":4345,"title":{},"name":{},"text":{"88":{},"113":{}},"component":{},"keyword":{}}],["vkrect2d{vkoffset2d",{"_index":3012,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkrenderingattachmentinfokhr",{"_index":2981,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkrenderinginfokhr",{"_index":2979,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["vkrenderpass",{"_index":2985,"title":{},"name":{},"text":{"60":{},"100":{},"105":{}},"component":{},"keyword":{}}],["vkrenderpassbegininfo",{"_index":2978,"title":{},"name":{},"text":{"60":{},"106":{}},"component":{},"keyword":{}}],["vkresetcommandbuff",{"_index":4757,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkresetcommandpool",{"_index":4759,"title":{},"name":{},"text":{"94":{}},"component":{},"keyword":{}}],["vkresetdescriptorpool",{"_index":4900,"title":{},"name":{},"text":{"96":{}},"component":{},"keyword":{}}],["vkresetfences(devic",{"_index":3710,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkresolvemodeflagbit",{"_index":5147,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vkresult",{"_index":4042,"title":{},"name":{},"text":{"85":{},"114":{}},"component":{},"keyword":{}}],["vksamplecountflagbit",{"_index":4637,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vksampler",{"_index":1918,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["vksemaphor",{"_index":4256,"title":{},"name":{},"text":{"88":{},"104":{}},"component":{},"keyword":{}}],["vksemaphorecreateinfo",{"_index":3675,"title":{},"name":{},"text":{"74":{},"88":{}},"component":{},"keyword":{}}],["vksemaphoresignalinfokhr",{"_index":4327,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vksemaphoretypecreateinfokhr",{"_index":4286,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vksemaphorewaitinfokhr",{"_index":4318,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vksetdebugutilsobjectnameext",{"_index":2511,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vksetdebugutilsobjectnameext(devic",{"_index":2521,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vksetdebugutilsobjecttagext",{"_index":2512,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vksetdebugutilsobjecttagext(devic",{"_index":2534,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["vkshadercreateinfoext",{"_index":4044,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkshaderext",{"_index":4040,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkshadermodul",{"_index":1604,"title":{},"name":{},"text":{"26":{},"105":{}},"component":{},"keyword":{}}],["vkshadermodulecreateinfo",{"_index":1606,"title":{},"name":{},"text":{"26":{},"66":{}},"component":{},"keyword":{}}],["vkshaderstageflag",{"_index":4050,"title":{},"name":{},"text":{"85":{},"95":{}},"component":{},"keyword":{}}],["vkshaderstageflagbit",{"_index":4049,"title":{},"name":{},"text":{"85":{}},"component":{},"keyword":{}}],["vkstructuretyp",{"_index":3040,"title":{},"name":{},"text":{"60":{},"69":{},"89":{}},"component":{},"keyword":{}}],["vksubmitinfo",{"_index":4295,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vksubpassdepend",{"_index":5192,"title":{},"name":{},"text":{"103":{}},"component":{},"keyword":{}}],["vksubpassdescription2",{"_index":5141,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vksubpassdescriptiondepthstencilresolv",{"_index":5142,"title":{},"name":{},"text":{"101":{}},"component":{},"keyword":{}}],["vksubresourcelayout2ext",{"_index":5044,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vksurfacecapabilitieskhr",{"_index":5363,"title":{},"name":{},"text":{"109":{},"110":{}},"component":{},"keyword":{}}],["vksurfaceformat2khr",{"_index":5073,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vksurfacetransformflagbitskhr",{"_index":5405,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["vkswapchaincreateinfokhr",{"_index":5075,"title":{},"name":{},"text":{"99":{}},"component":{},"keyword":{}}],["vkswapchainkhr",{"_index":4629,"title":{},"name":{},"text":{"92":{}},"component":{},"keyword":{}}],["vktimedomainext",{"_index":2282,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["vktimelinesemaphoresubmitinfokhr",{"_index":4303,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["vkunmapmemory(get_device().get_handl",{"_index":5537,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["vkupdatedescriptorset",{"_index":2544,"title":{},"name":{},"text":{"55":{},"96":{}},"component":{},"keyword":{}}],["vkupdatedescriptorsets(get_device().get_handl",{"_index":1932,"title":{},"name":{},"text":{"42":{},"56":{}},"component":{},"keyword":{}}],["vkvalidationfeatureenableext",{"_index":2834,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["vkvalidationfeaturesext",{"_index":2830,"title":{},"name":{},"text":{"56":{},"84":{}},"component":{},"keyword":{}}],["vkvertexinputattributedescript",{"_index":4433,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkvertexinputattributedescription2ext",{"_index":4434,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkvertexinputbindingdescript",{"_index":4431,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkvertexinputbindingdescription2ext",{"_index":4432,"title":{},"name":{},"text":{"89":{}},"component":{},"keyword":{}}],["vkwaitforf",{"_index":5562,"title":{},"name":{},"text":{"113":{}},"component":{},"keyword":{}}],["vkwaitforfences(devic",{"_index":3707,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["vkwritedescriptorset",{"_index":1924,"title":{},"name":{},"text":{"42":{},"95":{}},"component":{},"keyword":{}}],["vma",{"_index":496,"title":{},"name":{},"text":{"4":{},"95":{}},"component":{},"keyword":{}}],["vma_memory_usage_cpu_to_gpu",{"_index":2316,"title":{},"name":{},"text":{"52":{},"55":{}},"component":{},"keyword":{}}],["vmaallocationcreateinfo",{"_index":5261,"title":{},"name":{},"text":{"106":{}},"component":{},"keyword":{}}],["void",{"_index":1002,"title":{},"name":{},"text":{"11":{},"34":{},"38":{},"42":{},"47":{},"49":{},"52":{},"54":{},"56":{},"60":{},"61":{},"69":{},"70":{},"84":{},"85":{},"86":{},"89":{},"95":{},"109":{},"111":{}},"component":{},"keyword":{}}],["volk",{"_index":498,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{},"keyword":{}}],["volum",{"_index":2922,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["volumetr",{"_index":2113,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["vp_device_create_merge_extensions_bit",{"_index":5621,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vp_instance_create_merge_extensions_bit",{"_index":5611,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vp_lunarg_desktop_portability_2021",{"_index":5568,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpcreatedevice(gpu.get_handl",{"_index":5622,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpcreateinstance(&instance_create_info",{"_index":5612,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpdevicecreateinfo",{"_index":5616,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpgetinstanceprofilesupport(nullptr",{"_index":5600,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpgetphysicaldeviceprofilesupport(inst",{"_index":5614,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpinstancecreateinfo",{"_index":5607,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vpprofileproperti",{"_index":5595,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vs",{"_index":627,"title":{"13-2":{},"56-11":{},"90-7":{},"93-4":{},"102-2":{}},"name":{},"text":{"7":{},"12":{},"19":{},"62":{},"90":{},"93":{},"108":{}},"component":{},"keyword":{}}],["vsinput",{"_index":1553,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["vsoutput",{"_index":1570,"title":{},"name":{},"text":{"26":{},"31":{},"84":{}},"component":{},"keyword":{}}],["vsoutput)0",{"_index":1573,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["vsync",{"_index":4601,"title":{},"name":{},"text":{"91":{},"98":{},"110":{}},"component":{},"keyword":{}}],["vulkan",{"_index":42,"title":{"4":{},"8":{},"13":{},"26":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"54":{},"74":{},"78":{},"92":{},"95":{},"97":{},"98":{},"111":{},"114":{},"11-4":{},"11-7":{},"13-2":{},"49-3":{},"51-2":{},"54-7":{},"54-8":{},"56-16":{},"57-2":{},"59-4":{},"59-5":{},"75-4":{},"75-5":{},"75-6":{},"95-5":{},"95-9":{},"97-2":{},"97-3":{},"105-2":{},"105-3":{}},"name":{},"text":{"2":{},"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{}},"component":{},"keyword":{}}],["vulkan.hpp",{"_index":1191,"title":{},"name":{},"text":{"12":{},"17":{},"19":{},"20":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"97":{},"98":{}},"component":{},"keyword":{}}],["vulkan.lunarg.com",{"_index":5349,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["vulkan_bas",{"_index":1384,"title":{},"name":{"13":{}},"text":{},"component":{},"keyword":{}}],["vulkan_devic",{"_index":5623,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vulkan_inst",{"_index":5613,"title":{},"name":{},"text":{"114":{}},"component":{},"keyword":{}}],["vulkan_sampl",{"_index":424,"title":{},"name":{},"text":{"4":{},"7":{}},"component":{},"keyword":{}}],["vulkan_sample.cpp",{"_index":975,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vulkan_sample.h",{"_index":974,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["vulkan_sdk=/path/to/vulkan/sdk",{"_index":679,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["vulkanapi",{"_index":3370,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["vulkansampl",{"_index":1516,"title":{},"name":{},"text":{"14":{}},"component":{},"keyword":{}}],["vulkan’",{"_index":2546,"title":{},"name":{},"text":{"55":{},"95":{}},"component":{},"keyword":{}}],["w",{"_index":840,"title":{},"name":{},"text":{"8":{},"43":{},"83":{},"101":{}},"component":{},"keyword":{}}],["w:s1",{"_index":1978,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["w:s2",{"_index":1979,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["w:s3",{"_index":1981,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["w:s4",{"_index":1982,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["wait",{"_index":1088,"title":{"12-19":{},"20-18":{},"88-4":{},"88-6":{},"113-3":{}},"name":{},"text":{"12":{},"13":{},"19":{},"38":{},"43":{},"47":{},"74":{},"88":{},"98":{},"104":{},"110":{},"113":{}},"component":{},"keyword":{}}],["wait_info",{"_index":4324,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wait_info.psemaphor",{"_index":4320,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wait_info.pvalu",{"_index":4322,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wait_info.semaphorecount",{"_index":4321,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wait_info{vk_structure_type_semaphore_wait_info_khr",{"_index":4319,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wait_pending(async_compute_timeline_lock",{"_index":4384,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wait_semaphor",{"_index":3715,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["wait_stag",{"_index":3713,"title":{},"name":{},"text":{"74":{},"88":{}},"component":{},"keyword":{}}],["wait_timeline_cpu(main_thread_timelin",{"_index":4352,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["waitidl",{"_index":1253,"title":{"113-2":{}},"name":{},"text":{"12":{},"20":{},"113":{}},"component":{},"keyword":{}}],["wall",{"_index":200,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["want",{"_index":743,"title":{},"name":{},"text":{"7":{},"37":{},"38":{},"46":{},"47":{},"54":{},"56":{},"59":{},"75":{},"84":{},"85":{},"88":{},"90":{},"92":{},"95":{},"96":{},"98":{},"101":{},"109":{},"110":{},"111":{}},"component":{},"keyword":{}}],["warmup",{"_index":4926,"title":{"97-4":{},"105-4":{}},"name":{},"text":{"97":{},"105":{}},"component":{},"keyword":{}}],["warn",{"_index":197,"title":{},"name":{},"text":{"2":{},"7":{},"54":{},"84":{},"95":{}},"component":{},"keyword":{}}],["warranti",{"_index":261,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["wasd",{"_index":886,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["wasim",{"_index":365,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["wast",{"_index":4562,"title":{},"name":{},"text":{"90":{},"91":{}},"component":{},"keyword":{}}],["wave",{"_index":2251,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["wavefrontmateri",{"_index":3926,"title":{},"name":{},"text":{"83":{}},"component":{},"keyword":{}}],["way",{"_index":1159,"title":{"55-3":{}},"name":{},"text":{"12":{},"13":{},"19":{},"20":{},"37":{},"38":{},"41":{},"43":{},"46":{},"47":{},"49":{},"53":{},"55":{},"56":{},"58":{},"59":{},"64":{},"71":{},"74":{},"75":{},"82":{},"83":{},"84":{},"85":{},"86":{},"88":{},"90":{},"92":{},"93":{},"94":{},"95":{},"96":{},"100":{},"101":{},"103":{},"106":{},"108":{},"109":{},"113":{}},"component":{},"keyword":{}}],["we'r",{"_index":2721,"title":{},"name":{},"text":{"56":{},"88":{}},"component":{},"keyword":{}}],["weak",{"_index":1914,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["weight",{"_index":3194,"title":{},"name":{},"text":{"62":{},"111":{}},"component":{},"keyword":{}}],["welcom",{"_index":40,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["well",{"_index":148,"title":{},"name":{},"text":{"2":{},"13":{},"41":{},"49":{},"74":{},"75":{},"86":{},"88":{},"90":{},"91":{},"98":{},"99":{},"100":{},"101":{},"104":{},"107":{},"110":{},"111":{}},"component":{},"keyword":{}}],["werror",{"_index":202,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["wextra",{"_index":201,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["we’d",{"_index":4843,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["we’ll",{"_index":1704,"title":{},"name":{},"text":{"37":{},"38":{},"46":{},"47":{},"55":{},"74":{},"114":{}},"component":{},"keyword":{}}],["we’r",{"_index":3552,"title":{},"name":{},"text":{"74":{},"88":{}},"component":{},"keyword":{}}],["we’v",{"_index":4802,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["whatev",{"_index":3360,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["when/wher",{"_index":1826,"title":{},"name":{},"text":{"38":{},"47":{}},"component":{},"keyword":{}}],["whenev",{"_index":178,"title":{},"name":{},"text":{"2":{},"12":{},"20":{},"104":{}},"component":{},"keyword":{}}],["wherea",{"_index":2476,"title":{},"name":{},"text":{"54":{},"60":{},"101":{},"102":{}},"component":{},"keyword":{}}],["wherein",{"_index":5173,"title":{},"name":{},"text":{"102":{}},"component":{},"keyword":{}}],["wherev",{"_index":4887,"title":{},"name":{},"text":{"95":{}},"component":{},"keyword":{}}],["whether",{"_index":576,"title":{},"name":{},"text":{"7":{},"58":{},"61":{},"77":{},"85":{},"94":{},"102":{},"103":{},"108":{},"109":{}},"component":{},"keyword":{}}],["white",{"_index":350,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["whitepap",{"_index":4012,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["whole",{"_index":1353,"title":{},"name":{},"text":{"12":{},"19":{},"37":{},"46":{},"54":{},"59":{},"86":{},"94":{},"98":{},"110":{}},"component":{},"keyword":{}}],["whose",{"_index":1875,"title":{},"name":{},"text":{"40":{},"43":{},"58":{}},"component":{},"keyword":{}}],["wide",{"_index":2116,"title":{},"name":{},"text":{"48":{},"59":{},"90":{},"92":{},"104":{},"111":{}},"component":{},"keyword":{}}],["widespread",{"_index":4202,"title":{},"name":{},"text":{"85":{},"90":{}},"component":{},"keyword":{}}],["width",{"_index":2447,"title":{},"name":{},"text":{"54":{},"58":{},"60":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["willem",{"_index":356,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{},"keyword":{}}],["william",{"_index":367,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["win",{"_index":4704,"title":{},"name":{},"text":{"93":{}},"component":{},"keyword":{}}],["win64",{"_index":629,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["win_security_attribut",{"_index":3612,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["window",{"_index":281,"title":{"7-14":{},"9-2":{},"74-5":{}},"name":{},"text":{"2":{},"4":{},"9":{},"11":{},"12":{},"17":{},"20":{},"41":{},"43":{},"65":{},"74":{},"84":{},"92":{},"94":{},"109":{},"114":{}},"component":{},"keyword":{}}],["winsecurityattribut",{"_index":3611,"title":{},"name":{},"text":{"74":{}},"component":{},"keyword":{}}],["winston",{"_index":360,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["winuser.h",{"_index":3270,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["wire",{"_index":3997,"title":{},"name":{},"text":{"84":{}},"component":{},"keyword":{}}],["wirefram",{"_index":2900,"title":{},"name":{},"text":{"58":{},"61":{},"62":{},"85":{}},"component":{},"keyword":{}}],["wise",{"_index":4962,"title":{},"name":{},"text":{"98":{},"110":{}},"component":{},"keyword":{}}],["wish",{"_index":3867,"title":{},"name":{},"text":{"82":{},"88":{}},"component":{},"keyword":{}}],["within",{"_index":143,"title":{},"name":{},"text":{"2":{},"10":{},"12":{},"13":{},"20":{},"38":{},"47":{},"50":{},"54":{},"64":{},"67":{},"71":{},"82":{},"85":{},"96":{},"98":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"110":{},"113":{}},"component":{},"keyword":{}}],["without",{"_index":260,"title":{"114-1":{}},"name":{},"text":{"2":{},"7":{},"8":{},"12":{},"17":{},"19":{},"37":{},"38":{},"43":{},"46":{},"47":{},"49":{},"52":{},"54":{},"64":{},"69":{},"74":{},"82":{},"85":{},"90":{},"92":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"101":{},"102":{},"105":{},"109":{},"110":{},"113":{},"114":{}},"component":{},"keyword":{}}],["won’t",{"_index":1776,"title":{},"name":{},"text":{"38":{},"43":{},"47":{},"49":{},"74":{},"90":{},"91":{},"95":{}},"component":{},"keyword":{}}],["word",{"_index":4003,"title":{},"name":{},"text":{"84":{},"101":{},"108":{}},"component":{},"keyword":{}}],["work",{"_index":222,"title":{},"name":{},"text":{"2":{},"7":{},"10":{},"11":{},"12":{},"13":{},"19":{},"20":{},"34":{},"38":{},"47":{},"49":{},"51":{},"54":{},"56":{},"57":{},"67":{},"71":{},"74":{},"75":{},"84":{},"85":{},"87":{},"88":{},"90":{},"91":{},"93":{},"94":{},"95":{},"97":{},"98":{},"103":{},"104":{},"105":{},"109":{},"110":{},"111":{},"113":{}},"component":{},"keyword":{}}],["workaround",{"_index":1961,"title":{},"name":{},"text":{"43":{},"56":{},"88":{}},"component":{},"keyword":{}}],["worker",{"_index":4250,"title":{"88-10":{},"88-13":{}},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["workgroup",{"_index":2710,"title":{},"name":{},"text":{"56":{},"71":{}},"component":{},"keyword":{}}],["workgroup(",{"_index":3503,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["workload",{"_index":1264,"title":{},"name":{},"text":{"12":{},"13":{},"17":{},"20":{},"74":{},"75":{},"90":{},"93":{},"94":{},"103":{},"104":{},"106":{},"113":{}},"component":{},"keyword":{}}],["world",{"_index":1854,"title":{},"name":{},"text":{"38":{},"47":{},"88":{},"90":{},"91":{},"95":{},"108":{},"109":{},"111":{}},"component":{},"keyword":{}}],["world_w",{"_index":5321,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["world_w.w",{"_index":5323,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["world_w.xyz",{"_index":5322,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}],["wors",{"_index":4550,"title":{},"name":{},"text":{"90":{},"99":{}},"component":{},"keyword":{}}],["worst",{"_index":4756,"title":{},"name":{},"text":{"94":{},"96":{},"101":{}},"component":{},"keyword":{}}],["worth",{"_index":1420,"title":{},"name":{},"text":{"13":{},"59":{},"75":{},"95":{},"103":{},"106":{}},"component":{},"keyword":{}}],["worthwhil",{"_index":2720,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["wouldn’t",{"_index":3495,"title":{},"name":{},"text":{"71":{},"111":{}},"component":{},"keyword":{}}],["wrap",{"_index":962,"title":{},"name":{},"text":{"11":{},"52":{},"54":{}},"component":{},"keyword":{}}],["wrapper",{"_index":133,"title":{},"name":{},"text":{"2":{},"11":{},"74":{}},"component":{},"keyword":{}}],["write",{"_index":256,"title":{"51":{},"12-84":{},"19-32":{},"38-6":{},"47-6":{}},"name":{},"text":{"2":{},"8":{},"11":{},"38":{},"47":{},"49":{},"51":{},"56":{},"85":{},"88":{},"91":{},"92":{},"94":{},"95":{},"96":{},"99":{},"100":{},"101":{},"103":{},"104":{},"106":{},"108":{},"109":{}},"component":{},"keyword":{}}],["write(app",{"_index":5395,"title":{},"name":{},"text":{"109":{}},"component":{},"keyword":{}}],["write/copi",{"_index":2645,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["write_descriptor_set",{"_index":1639,"title":{},"name":{},"text":{"34":{},"42":{}},"component":{},"keyword":{}}],["write_descriptor_sets.data",{"_index":1934,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["writeonli",{"_index":2168,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["written",{"_index":1152,"title":{},"name":{},"text":{"12":{},"13":{},"20":{},"26":{},"31":{},"38":{},"47":{},"91":{},"92":{},"95":{},"97":{},"98":{},"99":{},"100":{},"101":{},"105":{},"108":{},"109":{}},"component":{},"keyword":{}}],["wrong",{"_index":2501,"title":{},"name":{},"text":{"54":{},"104":{},"106":{}},"component":{},"keyword":{}}],["wsi",{"_index":4380,"title":{},"name":{},"text":{"88":{}},"component":{},"keyword":{}}],["wx",{"_index":203,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["x",{"_index":823,"title":{},"name":{},"text":{"8":{},"54":{},"64":{},"86":{},"101":{}},"component":{},"keyword":{}}],["x,i",{"_index":2863,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["x64",{"_index":638,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["xcframework",{"_index":673,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["xcode",{"_index":663,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["xorg",{"_index":648,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["xxxx",{"_index":689,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["y",{"_index":2446,"title":{},"name":{},"text":{"54":{},"59":{},"64":{},"86":{}},"component":{},"keyword":{}}],["ye",{"_index":735,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["year",{"_index":231,"title":{},"name":{},"text":{"2":{},"56":{}},"component":{},"keyword":{}}],["yield",{"_index":1830,"title":{},"name":{},"text":{"38":{},"47":{},"48":{},"52":{}},"component":{},"keyword":{}}],["yourself",{"_index":2157,"title":{},"name":{},"text":{"49":{},"56":{},"59":{}},"component":{},"keyword":{}}],["you’d",{"_index":1700,"title":{},"name":{},"text":{"37":{},"38":{},"46":{},"47":{},"54":{},"95":{}},"component":{},"keyword":{}}],["you’ll",{"_index":2396,"title":{},"name":{},"text":{"54":{},"84":{},"106":{}},"component":{},"keyword":{}}],["you’r",{"_index":2397,"title":{},"name":{},"text":{"54":{},"56":{},"90":{},"91":{},"104":{}},"component":{},"keyword":{}}],["yyyi",{"_index":245,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["z",{"_index":2120,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["zandro",{"_index":369,"title":{},"name":{},"text":{"3":{}},"component":{},"keyword":{}}],["zen",{"_index":4779,"title":{},"name":{},"text":{"94":{},"96":{}},"component":{},"keyword":{}}],["zero",{"_index":1786,"title":{},"name":{},"text":{"38":{},"47":{},"52":{},"74":{},"75":{},"95":{},"102":{},"104":{}},"component":{},"keyword":{}}],["zone",{"_index":3533,"title":{},"name":{},"text":{"71":{}},"component":{},"keyword":{}}],["zoom",{"_index":5558,"title":{},"name":{},"text":{"111":{}},"component":{},"keyword":{}}],["zs",{"_index":5351,"title":{},"name":{},"text":{"108":{}},"component":{},"keyword":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"A reminder that this issue tracker is managed by the Khronos Group. Interactions here should follow the Khronos Code of Conduct (https://www.khronos.org/developers/code-of-conduct), which prohibits aggressive or derogatory language. Please keep the discussion friendly and civil.","title":"","component":"samples","version":"latest","name":"CODE_OF_CONDUCT","url":"/samples/latest/CODE_OF_CONDUCT.html","titles":[]},"2":{"id":2,"text":"Contributions are encouraged! This repository welcomes samples of the following types: Vulkan API Usage Vulkan Extension Usage Vulkan Best Practices and/or Performance Guidance Unique Vulkan use case or project If you have a sample that demonstrates Vulkan like any of the above points, then consider contributing to the Vulkan samples repository. Before you start, check out the requirements and guidelines below. Following these guidelines can help ensure that your contribution ends up being approved by reviewers and most importantly becomes a valuable addition to the Vulkan Samples repository. Vulkan Samples has a range of quality checks to ensure that we maintain a consistent quality and style across all samples. These include formatting, linting and copyright checks. To make this process as painless for contributors as possible we use pre-commit. To install pre-commit and the hooks for this repository, run the following commands: pip install pre-commit pre-commit install If you prefer not to use pre-commit, you can run the checks manually using the following commands: # Run clang-format ./scripts/clang_format.py main # Run copyright checks ./scripts/copyright.py main --fix Future tooling may be added in the future. If you have any suggestions or feedback, please open an issue on the repository. folder description /samples/api/ folder containing samples that demonstrate API usage /samples/extensions/ folder containing samples that demonstrate API Extensions usage /samples/performance/ folder containing samples that demonstrate performance best-practices /shaders/ folder containing shaders used by the samples /assets/ GIT sub-module with models, scenes and fonts /third_party/ folder with commonly used external libraries Follow this guide to create a dummy sample and associated build files automatically. This new sample will be based on the framework of wrapper classes that provide an optimized and convenient system to manage Vulkan objects. Sample folder and description: Each sample must be placed in a separate sub-folder within /samples/api/, /samples/performance/ or /samples/extensions/. Each sample should use a short folder name, using snake_case, that best describes the sample. Each sample must be well-documented, include a README.adoc file and ideally include a tutorial file in the root of the sample’s folder with a detailed explanation of the sample and a 'best-practice' summary if applicable. Any images used in the tutorial should be stored in an images/ sub-folder in the sample folder. Vendor samples: By default each sample is assumed to run on all supported platforms. Otherwise note any platform restrictions in the sample’s documentation. If a sample is vendor-specific (i.e. only runs on certain hardware) please add a TAG with the vendor’s name in the sample’s CMakeLists.txt. Framework: Make use of the available framework whenever possible. Do not introduce any new wrapper code. If what you need is not already a part of the framework, please extend it rather than introduce anything new. Alternatively you may use raw Vulkan API calls. Code and assets: Single source file samples with minimal build complexity are encouraged to make porting to different platforms easier. Compiling the sample with the highest warning level and warnings-as-errors (-Wall -Wextra -Werror, or /Wall /WX) is highly recommended. Shaders are saved in the /shaders/ folder, in a separate sub-folder with the same name as the sample sub-folder in /samples/api/, /samples/performance/ or /samples/extensions/. Assets should be saved in vulkan-samples-assets. License: Samples are licensed under the LICENSE file in the root folder. The current Contributor License Agreement (CLA) only allows samples to be licensed under the Apache 2.0 license. Every source code file must have a Copyright notice and license at the top of the file as described below. Assets must have their own license. Third party libraries: A sample may not depend on a separate installation of a third party library. Any third party library that is used needs to be available under a compatible open source license i.e. MIT or Apache 2.0. Any third party library that is used must be included as a sub-module in the /third_party/ folder. To apply the Apache 2.0 License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information for the copyright year or years. Don’t include the brackets! The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. When contributing to an existing file you may add a new copyright year line under the existing ones. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. A common code style like, for instance, the one described by the Google C++ Style Guide is recommended. A sample must consistently apply a single code style. A .clang-format file is included with this repository, please use clang-format -style=file to verify the code style. Ensure that you are using clang-format 8. Fork the KhronosGroup/Vulkan-Samples repository. Add the contribution to the new fork (see Creating a sample). Make sure the above requirements are met. Make sure the sample is in compliance with the Vulkan specification. Make sure the sample code builds and runs on Windows, Linux, macOS and Android. If you cannot verify on all these target platforms, please note platform restrictions in the sample’s README. Verify the sample against a recent version of the Vulkan validation layers, either built from source or from the most recent available Vulkan SDK. Submit a pull request via github for the contribution, including electronically signing the Khronos Contributor License Agreement (CLA) for the repository using CLA-Assistant. All submissions, including those by project members, are subject to a code review by the Khronos Membership. GitHub pull requests are used to facilitate the review process, please submit a pull request with your contribution ready for review. For more information on the review process visit this link. Once a new sample is merged the author is expected to maintain it whenever possible. Otherwise they should identify a new maintainer that has agreed to take on the responsibility.","title":"Contributing","component":"samples","version":"latest","name":"CONTRIBUTING","url":"/samples/latest/CONTRIBUTING.html","titles":[{"text":"Quality Checks","hash":"_quality_checks","id":1},{"text":"Repository Structure","hash":"_repository_structure","id":2},{"text":"Creating a sample","hash":"_creating_a_sample","id":3},{"text":"General Requirements","hash":"_general_requirements","id":4},{"text":"Copyright Notice and License Template","hash":"_copyright_notice_and_license_template","id":5},{"text":"Code Style","hash":"_code_style","id":6},{"text":"Procedure for Contributing","hash":"_procedure_for_contributing","id":7},{"text":"Code Reviews","hash":"_code_reviews","id":8},{"text":"Maintenance","hash":"_maintenance","id":9}]},"3":{"id":3,"text":"Adam Sawicki Alon Or-bach Antonio Caggiano Attilio Provenzano Gary Sweet Ioan-Cristian Szabo Jeff Bolz Jose-Emilio Munoz-Lopez Kris Rose Lou Kramer Marton Tamas Matthew Rusch Michael Parkin-White Peter Harris Ryan O’Shea Sascha Willems Spencer Fricke Steven Winston Tobias Hector Tom Atkinson Wasim Abbas William Lohry Zandro Fargnoli","title":"Contributors to the initial release (sorted alphabetically)","component":"samples","version":"latest","name":"CONTRIBUTORS","url":"/samples/latest/CONTRIBUTORS.html","titles":[]},"4":{"id":4,"text":"The Vulkan Samples is collection of resources to help you develop optimized Vulkan applications. If you are new to Vulkan the API samples are the right place to start. Additionally you may find the following links useful: Vulkan Guide Get Started in Vulkan Performance samples show the recommended best practice together with real-time profiling information. They are more advanced but also contain a detailed tutorial with more in-detail explanations. Create a collection of resources that demonstrate best-practice recommendations in Vulkan Create tutorials that explain the implementation of best-practices and include performance analysis guides Create a framework that can be used as reference material and also as a sandbox for advanced experimentation with Vulkan Listing of all samples available in this repository Project Basics Controls Debug window Create a Sample Vulkan Essentials How does Vulkan compare to OpenGL ES? What should you expect when targeting Vulkan? Misc Driver version Memory limits Prerequisites: git with git large file storage (git-lfs). Clone the repo with submodules using the following command: git clone --recurse-submodules https://github.com/KhronosGroup/Vulkan-Samples.git cd Vulkan-Samples Follow build instructions for your platform below. Windows - Build Guide Linux - Build Guide macOS - Build Guide Android - Build Guide The following shows some example command line usage on how to configure and run the Vulkan Samples. Make sure that you are running the samples from the root directory of the repository. Otherwise the samples will not be able to find the assets. ./build/app/bin///vulkan_samples # For the entire usage use vulkan_samples --help # For subcommand usage use vulkan_samples --help # Run Swapchain Images sample vulkan_samples sample swapchain_images # Run AFBC sample in benchmark mode for 5000 frames vulkan_samples sample afbc --benchmark --stop-after-frame 5000 # Run bonza test offscreen vulkan_samples test bonza --headless # Run all the performance samples for 10 seconds in each configuration vulkan_samples batch --category performance --duration 10 # Run Swapchain Images sample on an Android device adb shell am start-activity -n com.khronos.vulkan_samples/com.khronos.vulkan_samples.SampleLauncherActivity -e sample swapchain_images System Test - Usage Guide Generate Sample - Usage Guide See LICENSE. This project has some third-party dependencies, each of which may have independent licensing: astc-encoder: ASTC Evaluation Codec CTPL: Thread Pool Library docopt: A C++11 port of the Python argument parsing library glfw: A multi-platform library for OpenGL, OpenGL ES, Vulkan, window and input glm: OpenGL Mathematics glslang: Shader front end and validator dear imgui: Immediate Mode Graphical User Interface HWCPipe: Interface to mobile Hardware Counters KTX-Software: Khronos Texture Library and Tools spdlog: Fast C++ logging library SPIRV-Cross: Parses and converts SPIR-V to other shader languages stb: Single-file public domain (or MIT licensed) libraries tinygltf: Header only C++11 glTF 2.0 file parser nlohmann json: C++ JSON Library (included by tinygltf) vma: Vulkan Memory Allocator volk: Meta loader for Vulkan API vulkan: Sources for the formal documentation of the Vulkan API This project uses assets from vulkan-samples-assets. Each one has its own license. Vulkan is a registered trademark of the Khronos Group Inc. Donated to Khronos by Arm, with further contributions by Sascha Willems and Adam Sawicki. See CONTRIBUTORS for the full contributor list. Also see CONTRIBUTING for contribution guidelines. Mali GPU Best Practices: A document with recommendations for efficient API usage","title":"Vulkan Samples","component":"samples","version":"latest","name":"README","url":"/samples/latest/README.html","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"Goals","hash":"_goals","id":2},{"text":"Samples","hash":"_samples","id":3},{"text":"General information","hash":"_general_information","id":4},{"text":"Setup","hash":"_setup","id":5},{"text":"Build","hash":"_build","id":6},{"text":"Supported Platforms","hash":"_supported_platforms","id":7},{"text":"Usage","hash":"_usage","id":8},{"text":"Tests","hash":"_tests","id":9},{"text":"License","hash":"_license","id":10},{"text":"Trademarks","hash":"_trademarks","id":11},{"text":"Contributions","hash":"_contributions","id":12},{"text":"Related resources","hash":"_related_resources","id":13}]},"5":{"id":5,"text":"A component encapsulates all code relating to a specific goal. Components act as individual compile targets. This allows CMake to efficiently parallelize the compilation and link stages. A component should include the minimum amount of dependencies. Circular dependencies should be avoided. Common interfaces can be used across the project and multiple components. These interfaces are defined in components/core. Core is the only component which does not follow the component pattern in its entirety. The only major difference between core and other components is the header prefix used is core/ instead of components/core/. See core documentation for more information. To create a new component add a new folder under components/. The folder name should relate to the components implementation - see current components for inspiration. The next instructs are to be carried out inside the components/ folder. Create a directory named include/components/. This contains all public headers which other components will have access too Create a directory named src. This contains all private headers and source files. Components will not be able to include these. Create a directory named tests. This contains all test files for this component Create a CMakeLists.txt Registering a component adds the vkb compile target. This target is also linked as a dependency to vkbcomponents. vkb__register_component( NAME SRC src/.hpp src/.cpp LINK_LIBS ) Registering a test adds the tests compile target. This target is also linked as a dependency to vkbtests. vkb__register_tests( NAME SRC tests/.test.cpp LINK_LIBS ) To compile all components run cmake with --target vkb__components To compile a specific component run cmake with --target vkb__ To compile all tests run cmake with --target vkb__tests To compile a specific test run cmake with --target tests__.","title":"Components","component":"samples","version":"latest","name":"README","url":"/samples/latest/components/README.html","titles":[{"text":"Core Component","hash":"_core_component","id":1},{"text":"Create a new component","hash":"_create_a_new_component","id":2},{"text":"Add the Component Compile Target","hash":"_add_the_component_compile_target","id":3},{"text":"Add a Test","hash":"_add_a_test","id":4},{"text":"Compile Components","hash":"_compile_components","id":5}]},"6":{"id":6,"text":"This folder contains documentation on general usage of the samples.","title":"General documentation","component":"samples","version":"latest","name":"README","url":"/samples/latest/docs/README.html","titles":[]},"7":{"id":7,"text":"The following options are used to change the build configuration Choose whether to include a sample at build time. ON - Build Sample OFF - Exclude Sample Default: ON Choose whether to build the samples. ON - Build All Samples OFF - Skip building Samples Default: ON Choose whether to build the tests ON - Build All Tests OFF - Skip building Tests Default: OFF Enable Validation Layers Default: OFF Enable GPU assisted validation layers, used primarily for VK_EXT_descriptor_indexing. Default: OFF Enable best practices validation layers. Default: OFF Enable synchronization validation layers. Default: OFF Enable VK_EXT_debug_utils or VK_EXT_debug_marker, if supported. This enables debug names for Vulkan objects, and markers/labels in command buffers. + See the debug utils sample for more information. Default: ON Treat all warnings as errors Default: ON We use a small set of tools to provide a level of quality to the project. These tools are part of our CI/CD process. If your local environment does not have the same versions of the tools we use in the CI you may see some errors or warnings pop-up when pushing. For up-to date version information please see the repositories for the individual tools Doxygen Doxygen Repository Clang Format / Clang Tidy Clang Tools Repository Snake Case Check Snake Case Check Repository Android NDK Android NDK Repository Most of the samples require 3D models downloaded from https://github.com/KhronosGroup/Vulkan-Samples-Assets. That repository is referenced as a git submodule by this project so if you followed the clone instructions in the project readme you will already have the models locally under ./assets/. On Android, Gradle will run CMake which will sync assets to the device if there has been a change. However, to sync them manually you may run the following command to ensure up to date assets are on the device: adb push --sync assets /sdcard/Android/data/com.khronos.vulkan_samples/files/ adb push --sync shaders /sdcard/Android/data/com.khronos.vulkan_samples/files/ In order for performance data to be displayed, profiling needs to be enabled on the device. Some devices may disable it by default. Profiling can be enabled via adb: adb shell setprop security.perf_harden 0 Performance data is captured using HWCPipe. For details on this project and how to integrate it in your pipeline, visit: https://github.com/ARM-software/HWCPipe CMake v3.12+ Python 3 Visual Studio 2017 or above CMake Options 3D models It is recommended to use clang-format-15, which is compatible with the styles in our .clang-format file. It is also used by CI and is a basic version installed with Visual Studio 2022. The minimum version that supports our current .clang-format file is clang-format-9. Go to the LLVM downloads page to get clang. Please make sure, when running any sample, that you either: Enable Developer Mode Run Command Prompt or Visual Studio as administrator Step 1. The following command will generate the VS project cmake -G\"Visual Studio 15 2017 Win64\" -S . -Bbuild/windows (Prior to CMake v3.13) cmake -G\"Visual Studio 15 2017 Win64\" . -Bbuild/windows (New in CMake v3.14. Visual Studio 2019 must be installed) cmake -G \"Visual Studio 16 2019\" -A x64 -S . -Bbuild/windows (New in CMake v3.21. Visual Studio 2022 must be installed) cmake -G \"Visual Studio 17 2022\" -A x64 -S . -Bbuild/windows Step 2. Build the Visual Studio project cmake --build build/windows --config Release --target vulkan_samples Step 3. Run the Vulkan Samples application build\\windows\\app\\bin\\Release\\AMD64\\vulkan_samples.exe CMake v3.12+ C++17 Compiler CMake Options 3D models sudo apt-get install cmake g++ xorg-dev libglu1-mesa-dev Step 1. The following command will generate the project cmake -G \"Unix Makefiles\" -Bbuild/linux -DCMAKE_BUILD_TYPE=Release Step 2. Build the project cmake --build build/linux --config Release --target vulkan_samples -j$(nproc) Step 3. Run the Vulkan Samples application to display the help message ./build/linux/app/bin/Release/x86_64/vulkan_samples --help CMake v3.12+ (Apple Silicon requires at least 3.19.2) XCode v12 for Apple Silicon Command Line Tools (CLT) for Xcode xcode-select --install Vulkan SDK ./install_vulkan.py CMake Options 3D models Step 1. The following command will generate the project cmake -Bbuild/mac -DCMAKE_BUILD_TYPE=Release Step 2. Build the project cmake --build build/mac --config Release --target vulkan_samples -j4 Step 3. Run the Vulkan Samples application to display the help message ./build/mac/app/bin/Release/x86_64/vulkan_samples --help CMake v3.28+ (Apple xcframeworks require at least 3.28) XCode v12 for Apple Silicon Command Line Tools (CLT) for Xcode xcode-select --install Vulkan SDK ./install_vulkan.py Vulkan at least version 1.3.278 to get the frameworks CMake Options 3D models Step 1. edit ~/.bash_profile Step 2. add the environment variable export VULKAN_SDK=/PATH/TO/VULKAN/SDK Step 3. reload the bash_profile source ~/.bash_profile Step 1. The following command will generate the project cmake -Bbuild/mac -DCMAKE_BUILD_TYPE=Release -G Xcode -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 -DCMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH=YES -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_IOS_INSTALL_COMBINED=NO -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=\"XXXX\" NB: You MUST change the XXXX in the above to your TeamID for code signing. iOS will Not allow the application to run without code signing setup. Step 2. Build the project cmake --build build/mac --config Release --target vulkan_samples -- -j 6 -sdk iphoneos -allowProvisioningUpdates It’s recommended to open the XCode project that is generated inside build/mac; building can be handled with command-B. Step 3. Run the Vulkan Samples application To run Vulkan Samples, one must have an iOS device provisioned and working with XCode. Open the XCode project and ensure that can build/install to a device through XCode normally. Once the bundle is created from the build command in Step 2, use the edit-scheme selection in XCode and set the arguments to have --help Click the \"Play\" button and you should see the help output in the terminal. For convenience, the default setting is to run the hello_triangle sample; just edit that to your desired sample to run For all dependencies set the following environment variables: JDK 8+ JAVA_HOME=/java Android SDK ANDROID_HOME=/android-sdk CMake v3.16+ Android NDK r23+ ANDROID_NDK_HOME=/android-ndk CMake Options 3D models Performance data We use this environment in the CI Android NDK Repository It is highly recommended to install Android Studio to build, run and trace the sample project. Android Studio uses the following plugins/tools to build samples: Android Gradle Plugin CMake Plugin, which installs and uses Ninja NDK Their versions are configured in the build.gradle.in and app.build.gradle.in files; when updating these versions, refer to the official documentation for the recommended combinations. To generate the gradle project, run the following command: ./scripts/generate.py android A new folder will be created in the root directory at build\\android_gradle Android Gradle Plugin (used by Android Studio) may not auto install dependencies. You will need to install them if they have not been installed: Find the configured versions in build/android_gradle/app/build.gradle, or its template file bldsys/cmake/template/gradle/app.build.gradle.in Install them with Android Studio or sdkmanager command line tool. For example, to install AGP port CMake 3.22.1 and NDK version 25.1.8937393 on Linux, do the following: yes | ${your-sdk}/cmdline-tools/latest/bin/sdkmanager --licenses ${your-sdk}/cmdline-tools/latest/bin/sdkmanager --install \"ndk;25.1.8937393\" --channel=3 ${your-sdk}/cmdline-tools/latest/bin/sdkmanager --install \"cmake;3.22.1\" --channel=3 cd build/android_gradle Prefer a release build for better performance unless you want to actively debug the application. For a release build: gradle assembleRelease For a debug build: gradle assembleDebug You can now install the apk on a connected device using the Android Debug Bridge: For a release build: adb install app/build/outputs/apk/release/vulkan_samples-release.apk For a debug build: adb install app/build/outputs/apk/debug/vulkan_samples-debug.apk With Android Studio you can open the build/android_gradle/build.gradle project, compile and run the project from here. The lastest Android Studio release is recommended. If you have agreed with the licenses previously on your development system, Android Studio will automatically install, at the start up time, CMake and NDK with the version configured in your build/android-gradle/build.gradle. Otherwise (or if the installation failed), you need to install the required CMake and NDK manually, refer to the official instructions for the detailed steps. The default installed locations are: $SDK-ROOT-DIR/ndk/$ndkVersion for NDK. $SDK-ROOT-DIR/cmake/$cmake-version for CMake. Android Studio will use the above default locations without any environment variable requirement; if you want to use the same NDK and CMake versions for other purpose, you can simply configure your environment variables to these locations. If you do set up the NDK and CMake environment variables, Android Studio will use them instead of the default locations.","title":"Build Guides","component":"samples","version":"latest","name":"build","url":"/samples/latest/docs/build.html","titles":[{"text":"CMake Options","hash":"_cmake_options","id":1},{"text":"VKB_","hash":"_vkb","id":2},{"text":"VKB_BUILD_SAMPLES","hash":"_vkb_build_samples","id":3},{"text":"VKB_BUILD_TESTS","hash":"_vkb_build_tests","id":4},{"text":"VKB_VALIDATION_LAYERS","hash":"_vkb_validation_layers","id":5},{"text":"VKB_VALIDATION_LAYERS_GPU_ASSISTED","hash":"_vkb_validation_layers_gpu_assisted","id":6},{"text":"VKB_VALIDATION_LAYERS_BEST_PRACTICES","hash":"_vkb_validation_layers_best_practices","id":7},{"text":"VKB_VALIDATION_LAYERS_SYNCHRONIZATION","hash":"_vkb_validation_layers_synchronization","id":8},{"text":"VKB_VULKAN_DEBUG","hash":"_vkb_vulkan_debug","id":9},{"text":"VKB_WARNINGS_AS_ERRORS","hash":"_vkb_warnings_as_errors","id":10},{"text":"Quality Assurance","hash":"_quality_assurance","id":11},{"text":"3D models","hash":"_3d_models","id":12},{"text":"Performance data","hash":"_performance_data","id":13},{"text":"Windows","hash":"_windows","id":14},{"text":"Dependencies","hash":"_dependencies","id":15},{"text":"Clang Format and Visual Studio","hash":"_clang_format_and_visual_studio","id":16},{"text":"Build with CMake","hash":"_build_with_cmake","id":17},{"text":"Linux","hash":"_linux","id":18},{"text":"Dependencies","hash":"_dependencies_2","id":19},{"text":"Build with CMake","hash":"_build_with_cmake_2","id":20},{"text":"macOS","hash":"_macos","id":21},{"text":"Dependencies","hash":"_dependencies_3","id":22},{"text":"Build with CMake","hash":"_build_with_cmake_3","id":23},{"text":"iOS","hash":"_ios","id":24},{"text":"Dependencies","hash":"_dependencies_4","id":25},{"text":"Set your environment variable","hash":"_set_your_environment_variable","id":26},{"text":"Build with CMake","hash":"_build_with_cmake_4","id":27},{"text":"Android","hash":"_android","id":28},{"text":"Dependencies","hash":"_dependencies_5","id":29},{"text":"Build with Gradle","hash":"_build_with_gradle","id":30},{"text":"Generate the gradle project","hash":"_generate_the_gradle_project","id":31},{"text":"Install dependencies","hash":"_install_dependencies","id":32},{"text":"Build the project","hash":"_build_the_project","id":33},{"text":"Install the apk on the device","hash":"_install_the_apk_on_the_device","id":34},{"text":"Build with Android Studio","hash":"_build_with_android_studio","id":35}]},"8":{"id":8,"text":"Mali GPUs This article covers situations in which a Vulkan application might trigger an out of memory (OOM) condition on Mali GPUs, resulting in a DEVICE_LOST error, even if the API usage is correct. The OOM condition that developers hit most often is due to a very high vertex load, which might be relatively common when porting Vulkan applications from desktop to mobile. Mali GPUs have a memory region which is available to store the intermediate geometry output from a render pass. This memory is used to store all of the varying data generated by vertex, tessellation, and geometry shading prior to fragment shading. Exceeding the size of this region may result in a VK_ERROR_DEVICE_LOST. The limit is fixed to 180 MB on current Mali GPUs, but it may be increases or lifted altogether in future GPUs. The reasoning behind this limit is that tile-based renderers need to write out and then read back intermediate geometry output, thus vertex load is directly correlated to memory bandwidth. For a typical program using 64 bytes of varying data per vertex the 180 MB of intermediate storage can contain over 2 million vertices, which we expect to be enough for normal mobile application usage. We will now cover the reasons why such a vertex load is unlikely to be sustainable and possible mitigations if your application is hitting it. Let us consider a vertex-heavy application with a single render pass that reaches the 180 MB limit. Since the GPU has to write the data out and read it back from memory, this results in 2 x 180 = 360 MB/render pass, which at 30 FPS brings memory bandwidth up to 30 x 360 = 10.8 GB/s. Memory bandwidth has a direct correlation with power consumption, which can be estimated as 100 mW/(GB/s). This means that an application using 180 MB of varying data will consume at least 1.08 W, and this does not consider further contributions to memory bandwidth and general GPU power consumption. A mobile GPU cannot sustain such a power usage without overheating, which would further cause a reduction of GPU frequency and a performance drop. The only real solution to the issue is to keep the application’s vertex count below approximately 2 million, as derived above for an average of 64 bytes of varying data per vertex. In scenarios where the memory storage is exceeded and reducing the vertex load is not feasible, we recommend that the application splits the render pass into multiple render passes, each using a safe amount of intermediate storage. Later render passes can use a loadOp=LOAD to restore the content of the framebuffer and continue rendering on top of earlier rendering. This form of incremental rendering might impact performance, due to the write-out and further read-back of the color image. If your vertex load is unpredictable and you are hitting DEVICE_LOST issues in the field, you can set up a scheme for estimating memory consumption for each draw call in a render pass, then performing incremental rendering if the limit is reached. You should keep in mind that memory is allocated for all vertex indices between the min and max index referenced by a draw call, and for all generated vertices for tessellation and geometry shading, even if they are subsequently culled by the clipping and culling pass. Such an estimate will be conservative, as the actual amount of memory allocated might be lower, so we don’t recommend adding a further safety margin to the 180 MB limit.","title":"Memory limits with Vulkan","component":"samples","version":"latest","name":"memory_limits","url":"/samples/latest/docs/memory_limits.html","titles":[{"text":"Contents","hash":"_contents","id":1},{"text":"Mali GPUs","hash":"_mali_gpus","id":2}]},"9":{"id":9,"text":"Action Desktop Mobile Move around the scene WASD press + hold Rotate camera right mouse button + drag press + move Pan left mouse button + drag - Movement speed reduced shift - Movement speed increased ctrl - toggle GUI left click tap toggle Debug Window right click 2 finger tap The Debug Window shows information about the current application. The debug window shows the driver version of the GPU, which follows the Vulkan semantics, with a major, minor, and patch number. New versions of the driver will increment these numbers. The framework is able to get these values by calling vkGetPhysicalDeviceProperties(physical_device, &properties). This will set all attributes of properties, which type is struct VkPhysicalDeviceProperties. Then it extracts the relevant bits from properties.driverVersion using the following Vulkan macros: VK_VERSION_MAJOR(properties.driverVersion); VK_VERSION_MINOR(properties.driverVersion); VK_VERSION_PATCH(properties.driverVersion); It is important to note that old Arm Mali drivers (before Bifrost r14 and Midgard r26) may not implement this feature, therefore the values returned will be undefined.","title":"Miscellaneous","component":"samples","version":"latest","name":"misc","url":"/samples/latest/docs/misc.html","titles":[{"text":"Controls","hash":"_controls","id":1},{"text":"Debug Window","hash":"_debug_window","id":2},{"text":"Driver version","hash":"_driver_version","id":3}]},"10":{"id":10,"text":"Testing Guides Contents System Test Android Generate Sample Test To run In order for the script to work you will need to install and add to your Path: Python 3.x imagemagick git cmake (Optional) adb if you plan to use Android You will also need to have built the Vulkan Best Practices in 64 bit, with the CMake flag VKB_BUILD_SAMPLES, VKB_BUILD_TESTS and in addition to this install a working .apk onto a device if you plan on testing on Android. Before you begin a system test on Android, ensure that the device is held in landscape, and there isn’t an instance of Vulkan Best Practice running already. From the root of the project: cd tests/system_test To run: python system_test.py -B -C e.g. python system_test.py -Bbuild/windows -CRelease (build path is relative to root) To target just testing on desktop, add a -D flag, or to target just Android, an -A flag. If no flag is specified it will run for both. To run a specific sub test(s), use the -S flag (e.g. python system_test.py ... -S sponza bonza runs sponza and bonza) We currently support FHD resolutions (2280x1080), if testing on another device or resolution the test may fail. There is a test for the generate_sample script, to ensure that it generates a sample that builds within the project. cd tests/generate_sample python generate_sample_test.py It will print out the result of the test","title":"Testing Guides","component":"samples","version":"latest","name":"testing","url":"/samples/latest/docs/testing.html","titles":[{"text":"Contents","hash":"_contents","id":1},{"text":"System Test","hash":"_system_test","id":2},{"text":"Android","hash":"_android","id":3},{"text":"Generate Sample Test","hash":"_generate_sample_test","id":4},{"text":"To run","hash":"_to_run","id":5}]},"11":{"id":11,"text":"This folder contains the base framework used by the samples. It offers sample base classes, encapsulates common functionality for e.g. loading assets (images, models, shaders), wraps common Vulkan objects and implements frequently used concepts like a cache and a scene graph. The framework also implements platform support for Windows, Linux, MacOS and Android. It can be used as a guideline for writing advanced Vulkan applications. Before trying to implement common functions, consider checking if the framework doesn’t already provides what you are looking for. The framework provides two different sample base classes. When creating new samples, you can choose between one of them: This base class abstracts away most of the Vulkan API calls and as such makes heavy use of the Vulkan object wrapper classes of the framework. Writing samples with the base class is less verbose. See vulkan_sample.h and vulkan_sample.cpp. This base class uses less abstraction, letting you work more explicitly with the api. See api_vulkan_sample.h and api_vulkan_sample.cpp. While the framework itself primarily uses the C-Interface for Vulkan, both the high level and the API sample base class also come with Vulkan-Hpp variants, letting you write samples using the C++ Vulkan language bindings instead. See hpp_vulkan_sample.h / hpp_vulkan_sample.cpp and hpp_api_vulkan_sample.h / hpp_api_vulkan_sample.cpp. Vulkan is an extensible api. New features are usually exposed through either instance or device extensions. Extensions can be enabled in the constructor of both the high level and api base sample class: MySample::MySample() { add_instance_extension(VK_SOME_INSTANCE_EXTENSION_NAME); add_device_extension(VK_SOME_DEVICE_EXTENSION_NAME); } The framework uses the Volk meta-loader, which will automatically load extension function pointers for all enabled extensions. There is no need to manually get extension pointer functions. By default all samples create a Vulkan 1.0 instance. Higher versions can be requested in the constructor of a sample: MySample::MySample() { set_api_version(VK_API_VERSION_1_2); } Most extensions also require enabling corresponding feature flags. This can be done by overriding the request_gpu_features function of the base class: void MySample::request_gpu_features(vkb::PhysicalDevice &gpu) { // Get a reference to the feature structure required for an extension auto &requested_extension_feature = gpu request_extension_features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SOME_EXTENSION_FEATURES_KHR); // Enable a selected feature requested_extension_feature.featureName = VK_TRUE; } The framework includes a graphical user interface based on Dear ImGui. This can be used by samples to display values and add controls like buttons, dropdowns, etc. To add additional elements to the UI of a sample, you override the respective function from the base class: Samples based on the high level base class need to override the draw_gui function: void MySample::draw_gui() { if (ImGui::Checkbox(\"Enable Option\", &option_enabled)) { ... } } Samples based on the api base class need to override the on_update_ui_overlay function: void MyApiSample::on_update_ui_overlay(vkb::Drawer &drawer) { if (drawer.checkbox(\"Enable option\", &option_enabled)) { ... } } The framework supports glTF models and includes a loader for this format. The high level base class works with a single glTF scene loaded at startup. The scene is part of the base class, and there is no need to explicitly draw it: bool MySample::prepare(const vkb::ApplicationOptions &options) { scene = load_scene(\"filename.gltf\"); } With the api base class are explicitly declared, loaded and rendered: // my_sample.h class MyApiSample : public ApiVulkanSample { std::unique_ptr modelA; std::unique_ptr modelB; ... } // my_sample.cpp bool MyApiSample::prepare(const vkb::ApplicationOptions &options) { modelA = load_model(\"filenameA.gltf\"); modelB = load_model(\"filenameB.gltf\"); } void MyApiSample::build_command_buffers() { vkBeginCommandBuffer(...); ... draw_model(modelA, draw_cmd_buffers[i]); ... draw_model(modelB, draw_cmd_buffers[i]); ... vkEndCommandBufer(...); } The framework supports the KTX GPU container format and includes a loader for this format. As a container format, KTX supports different image formats ranging from basic RGBA images to compressed formats. texture = load_texture(\"rgba_texture.ktx\", vkb::sg::Image::Color); Images (textures) loaded like this can then be used as descriptors later on: VkDescriptorImageInfo image_descriptor = create_descriptor(texture); The framework supports loading textual GLSL shaders. These shaders are then compiled to SPIR-V at runtime so Vulkan can ingest them. With the high level base class, shaders are attached to the scene graphics' render pipeline: vkb::ShaderSource vert_shader(\"vs.vert\"); vkb::ShaderSource frag_shader(\"fs.frag\"); auto scene_subpass = std::make_unique(get_render_context(), std::move(vert_shader), std::move(frag_shader), *scene, *camera); auto render_pipeline = vkb::RenderPipeline(); render_pipeline.add_subpass(std::move(scene_subpass)); set_render_pipeline(std::move(render_pipeline)); While in the api base class, this is again more explicitly by creating shader modules used at pipeline creation time: std::array shader_stages; ... shader_stages[0] = load_shader(\"vs.vert\", VK_SHADER_STAGE_VERTEX_BIT); shader_stages[1] = load_shader(\"fs.frag\", VK_SHADER_STAGE_FRAGMENT_BIT); VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &pipeline_create_info, nullptr, &pipeline));","title":"Framework","component":"samples","version":"latest","name":"README","url":"/samples/latest/framework/README.html","titles":[{"text":"Sample base classes","hash":"_sample_base_classes","id":1},{"text":"High level base sample class","hash":"_high_level_base_sample_class","id":2},{"text":"API sample base class","hash":"_api_sample_base_class","id":3},{"text":"Support for Vulkan-Hpp","hash":"_support_for_vulkan_hpp","id":4},{"text":"Commonly used framework concepts","hash":"_commonly_used_framework_concepts","id":5},{"text":"Enabling extensions","hash":"_enabling_extensions","id":6},{"text":"Changing the Vulkan api version","hash":"_changing_the_vulkan_api_version","id":7},{"text":"Requesting GPU features","hash":"_requesting_gpu_features","id":8},{"text":"Extending the graphical user interface","hash":"_extending_the_graphical_user_interface","id":9},{"text":"Loading models","hash":"_loading_models","id":10},{"text":"Loading images","hash":"_loading_images","id":11},{"text":"Loading shaders","hash":"_loading_shaders","id":12}]},"12":{"id":12,"text":"Table of Contents Introduction Performance samples API samples Extension samples Tooling Samples General Samples This readme lists all Vulkan samples currently available in this repository. They are grouped into multiple categories. Many samples come with a tutorial, which can be found in their respective folders. The goal of these samples is to demonstrate how to use certain features and functions to achieve optimal performance. To visualize this, they also include real-time profiling information. AFBC (Arm Frame Buffer Compression) is a real-time lossless compression algorithm found in Arm Mali GPUs, designed to tackle the ever-growing demand for higher resolution graphics. This format is applied to the framebuffers that are to be written to the GPU. This technology can offer bandwidth reductions of up to 50%. This sample demonstrates how to use and manage secondary command buffers, and how to record them concurrently. Implementing multi-threaded recording of draw calls can help reduce CPU frame time. The Vulkan API exposes a few different ways in which we can send uniform data into our shaders. There are enough methods that it raises the question \"Which one is fastest?\", and more often than not the answer is \"It depends\". The main issue for developers is that the fastest methods may differ between the various vendors, so often there is no \"one size fits all\" solution. This sample aims to highlight this issue, and help move the Vulkan ecosystem to a point where we are better equipped to solve this for developers. This is done by having an interactive way to toggle different constant data methods that the Vulkan API expose to us. This can then be run on a platform of the developers choice to see the performance implications that each of them bring. An application using Vulkan will have to implement a system to manage descriptor pools and sets. The most straightforward and flexible approach is to re-create them for each frame, but doing so might be very inefficient, especially on mobile platforms. The problem of descriptor management is intertwined with that of buffer management, that is choosing how to pack data in VkBuffer objects. This sample will explore a few options to improve both descriptor and buffer management. A transcoded version of the Performance sample Swapchain images that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. This sample shows how to use the extensions VK_EXT_image_compression_control and VK_EXT_image_compression_control_swapchain to select between different levels of image compression. The UI shows the impact compression has on image size and bandwidth, illustrating the benefits of fixed-rate (visually lossless) compression. Vulkan requires the application to manage image layouts, so that all render pass attachments are in the correct layout when the render pass begins. This is usually done using pipeline barriers or the initialLayout and finalLayout parameters of the render pass. If the rendering pipeline is complex, transitioning each image to its correct layout is not trivial, as it requires some sort of state tracking. If previous image contents are not needed, there is an easy way out, that is setting oldLayout/initialLayout to VK_IMAGE_LAYOUT_UNDEFINED. While this is functionally correct, it can have performance implications as it may prevent the GPU from performing some optimizations. This sample will cover an example of such optimizations and how to avoid the performance overhead from using sub-optimal layouts. Aliasing is the result of under-sampling a signal. In graphics this means computing the color of a pixel at a resolution that results in artifacts, commonly jaggies at model edges. Multisample anti-aliasing (MSAA) is an efficient technique that reduces pixel sampling error. Ideally you render all stages of your frame in a single render pass. However, in some cases different stages can’t be performed in the same render pass. This sample shows how multi-threading can help to boost performance when using multiple render passes to render a single frame. Vulkan gives the application significant control over memory access for resources. Pipeline barriers are particularly convenient for synchronizing memory accesses between render passes. Having barriers is required whenever there is a memory dependency - the application should not assume that render passes are executed in order. However, having too many or too strict barriers can affect the application’s performance. This sample will cover how to set up pipeline barriers efficiently, with a focus on pipeline stages. Vulkan gives applications the ability to save internal representation of a pipeline (graphics or compute) to enable recreating the same pipeline later. This sample will look in detail at the implementation and performance implications of the pipeline creation, caching and management. Vulkan render-passes use attachments to describe input and output render targets. This sample shows how loading and storing attachments might affect performance on mobile. During the creation of a render-pass, you can specify various color attachments and a depth-stencil attachment. Each of those is described by a VkAttachmentDescription struct, which contains attributes to specify the load operation (loadOp) and the store operation (storeOp). This sample lets you choose between different combinations of these operations at runtime. Vulkan exposes a number of methods for setting values within shader code during run-time, this includes UBOs and Specialization Constants. This sample compares these two methods and the performance impact of them. Vulkan introduces the concept of subpasses to subdivide a single render pass into separate logical phases. The benefit of using subpasses over multiple render passes is that a GPU is able to perform various optimizations. Tile-based renderers, for example, can take advantage of tile memory, which being on chip is decisively faster than external memory, potentially saving a considerable amount of bandwidth. Mobile devices can be rotated, therefore the logical orientation of the application window and the physical orientation of the display may not match. Applications then need to be able to operate in two modes: portrait and landscape. The difference between these two modes can be simplified to just a change in resolution. However, some display subsystems always work on the \"native\" (or \"physical\") orientation of the display panel. Since the device has been rotated, to achieve the desired effect the application output must also rotate. In this sample we focus on the rotation step, and analyze the performance implications of implementing it correctly with Vulkan. Vulkan gives the application some significant control over the number of swapchain images to be created. This sample analyzes the available options and their performance implications. This sample compares two methods for synchronizing between the CPU and GPU, WaitIdle and Fences demonstrating which one is the best option in order to avoid stalling. This sample compares bandwidth consumption when using FP32 varyings compared to using FP16 varyings with VK_KHR_16bit_storage. This sample compares arithmetic throughput for 32-bit arithmetic operations and 16-bit arithmetic. The sample also shows how to enable 16-bit storage for SSBOs and push constants. This sample demonstrates using multiple Vulkan queues to get better hardware utilization with compute post-processing workloads. This sample demonstrates how to use Basis universal supercompressed GPU textures in a Vulkan application. This sample demonstrates how to reduce CPU usage by offloading draw call generation and frustum culling to the GPU. This sample demonstrates how to use different types of compressed GPU textures in a Vulkan application, and shows the timing benefits of each. The goal of these samples is to demonstrate how to use a given Vulkan feature at the API level with as little abstraction as possible. Compute shader example that uses two passes and shared compute shader memory for simulating a N-Body particle system. Dynamic uniform buffers are used for rendering multiple objects with separate matrices stored in a single uniform buffer object, that are addressed dynamically. Implements a high dynamic range rendering pipeline using 16/32 bit floating point precision for all calculations. A self-contained (minimal use of framework) sample that illustrates the rendering of a triangle. A transcoded version of the API sample Compute N-Body that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Dynamic Uniform buffers that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample High dynamic rangethat illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Hello Triangle that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample HLSL Shaders that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Instancing that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample OIT Linked Lists that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Separate image sampler that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Terrain Tessellation that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Texture loading that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Texture run-time mip-map generation that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Timestamp queries that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Uses the instancing feature for rendering many instances of the same mesh from a single vertex buffer with variable parameters and textures. Separate image and samplers, both in the application and the shaders. The sample demonstrates how to use different samplers for the same image without the need to recreate descriptors. Uses a tessellation shader for rendering a terrain with dynamic level-of-detail and frustum culling. Loading and rendering of a 2D texture map from a file. Generates a complete mip-chain for a texture at runtime instead of loading it from a file. Converts High Level Shading Language (HLSL) shaders to Vulkan-compatible SPIR-V. Using timestamp queries for profiling GPU workloads. A sample that implements best practices in handling swapchain recreation, for example due to window resizing or present mode changes. A sample that implements an order-independent transparency algorithm using per-pixel ordered linked lists. A sample that implements order-independent transparency with depth peeling. The goal of these samples is to demonstrate how to use a particular Vulkan extension at the API level with as little abstraction as possible. Extension: VK_EXT_conservative_rasterization Uses conservative rasterization to change the way fragments are generated. Enables overestimation to generate fragments for every pixel touched instead of only pixels that are fully covered. Extension: VK_KHR_dynamic_rendering Demonstrates how to use Dynamic Rendering. Read the blog post here for discussion: (https://www.khronos.org/blog/streamlining-render-passes) Extension: VK_KHR_push_descriptor Push descriptors apply the push constants concept to descriptor sets. Instead of creating per-object descriptor sets, this example passes descriptors at command buffer creation time. Extension: VK_EXT_debug_utils Uses the debug utilities extension to name and group Vulkan objects (command buffers, images, etc.). This information makes debugging in tools like RenderDoc significantly easier. Extension: VK_EXT_memory_budget Uses the memory budget extension to monitor the allocated memory in the GPU and demonstrates how to use it. Extension: VK_EXT_mesh_shader Uses the mesh shader extension to demonstrate how to do basic culling utilizing both a mesh and a task shader. Extensions: VK_KHR_ray_query, VK_KHR_acceleration_structure Render a sponza scene using the ray query extension. Shows how to set up all data structures required for ray queries, including the bottom and top level acceleration structures for the geometry and a standard vertex/fragment shader pipeline. Shadows are cast dynamically by ray queries being cast by the fragment shader. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure Render a basic scene using the official cross-vendor ray tracing extension. Shows how to setup all data structures required for ray tracing, including the bottom and top level acceleration structures for the geometry, the shader binding table and the ray tracing pipelines with shader groups for ray generation, ray hits, and ray misses. After dispatching the rays, the final result is copied to the swapchain image. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure Render Sponza with Ambient Occlusion. Place a vase in center. Generate a particle fire that demonstrates the TLAS (Top Level Acceleration Structure) animation for the same underlying geometry. Procedurally generate a transparent quad and deform the geometry of the quad in the BLAS (Bottom Level Acceleration Structure) to demonstrate how to animate with deforming geometry. Shows how to rebuild the acceleration structure and when to set it to fast rebuild vs fast traversal. Extensions: VK_EXT_mesh_shader Renders a triangle with the most simple of all possible mesh shader pipeline examples. There is no vertex shader, there is only a mesh and fragment shader. The mesh shader creates the vertices for the triangle. The mesh shading pipeline includes the task and mesh shaders before going into the fragment shader. This replaces the vertex / geometry shader standard pipeline. A transcoded version of the Extensions sample Mesh shading that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Extensions: VK_KHR_external_memory, VK_KHR_external_semaphore Render a procedural image using OpenGL and incorporate that rendered content into a Vulkan scene. Demonstrates using the same backing memory for a texture in both OpenGL and Vulkan and how to synchronize the APIs using shared semaphores and barriers. Extensions: VK_KHR_external_memory, VK_KHR_external_semaphore This sample shows how to do Vulkan and OpenCL interoperability using cross vendor extensions in both apis. The sample uses OpenCL to update an image that is then displayed in Vulkan. This is done by sharing the memory for that image across the two apis. The sample also shares semaphores for doing cross api synchronization. Extensions: VK_ANDROID_external_memory_android_hardware_buffer This sample demonstrates usage of OpenCL extensions available on Arm devices. Fill a procedural texture using OpenCL and display it using Vulkan. In this sample data sharing between APIs is achieved using Android Hardware Buffers. Extensions: VK_KHR_timeline_semaphore Demonstrates various use cases which are enabled with timeline semaphores. The sample implements \"Game of Life\" in an esoteric way, using out-of-order signal and wait, multiple waits on same semaphore in different queues, waiting and signalling semaphore on host. Extensions: VK_KHR_buffer_device_address Demonstrates how to use the buffer device address feature, which enables extreme flexibility in how buffer memory is accessed. Extension VK_KHR_synchronization2 Demonstrates the use of the reworked synchronization api introduced with VK_KHR_synchronization2. Based on the compute shading N-Body particle system, this sample uses the new extension to streamline the memory barriers used for the compute and graphics work submissions. Extensions: VK_EXT_descriptor_indexing Demonstrates how to use descriptor indexing to enable update-after-bind and non-dynamically uniform indexing of descriptors. Extension: VK_KHR_fragment_shading_rate Uses a special framebuffer attachment to control fragment shading rates for different framebuffer regions. This allows explicit control over the number of fragment shader invocations for each pixel covered by a fragment, which is e.g. useful for foveated rendering. Extension: VK_KHR_fragment_shading_rate Render a simple scene showing the basics of shading rate dynamic. This sample shows low and high frequency textures over several cubes. It creates a sample rate map based upon this frequency every frame. Then it uses that dynamic sample rate map as a base for the next frame. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure, VK_EXT_descriptor_indexing, VK_EXT_scalar_block_layout Render a simple scene showing the basics of ray tracing, including reflection and shadow rays. The sample creates some geometries and create a bottom acceleration structure for each, then make instances of those, using different materials and placing them at different locations. Extensions: VK_KHR_portability_subset Demonstrate how to include non-conformant portable Vulkan implementations by using the portability extension to include those implementations in the device query. An example of a non-conformant portable Vulkan implementation is MoltenVk: MoltenVk. Also demonstrate use of beta extension which allows for querying which features of the full Vulkan spec are not currently supported by the non-conformant Vulkan implementation. Extension: VK_EXT_graphics_pipeline_library Uses the graphics pipeline library extensions to improve run-time pipeline creation. Instead of creating the whole pipeline at once, this sample makes use of that extension to pre-build shared pipeline parts such as vertex input state and fragment output state. These building blocks are then used to create pipelines at runtime, improving build times compared to traditional pipeline creation. Extension: VK_EXT_conditional_rendering Demonstrate how to do conditional rendering, dynamically discarding rendering commands without having to update command buffers. This is done by sourcing conditional rendering blocks from a dedicated buffer that can be updated without having to touch command buffers. Extension: VK_EXT_vertex_input_dynamic_state Demonstrate how to use vertex input bindings and attribute descriptions dynamically, which can reduce the number of pipeline objects that are needed to be created. Extension: VK_EXT_extended_dynamic_state2 Demonstrate how to use depth bias, primitive restart, rasterizer discard and patch control points dynamically, which can reduce the number of pipeline objects that are needed to be created. Extension: VK_EXT_extended_dynamic_state2 Demonstrate how to use logical operations dynamically, which can reduce the number of pipeline objects that are needed to be created or allow to change the pipeline state dynamically (change type of the logical operation). Extension: VK_EXT_extended_dynamic_state2 Demonstrate how to use patch control points dynamically, which can reduce the number of pipeline objects that are needed to be created. Extension: VK_KHR_fragment_shader_barycentric Demonstrate how to use fragment shader barycentric feature, which allows accessing barycentric coordinates for each processed fragment. Extension: VK_EXT_descriptor_buffer Demonstrate how to use the new extension to replace descriptor sets with resource descriptor buffers Extension: VK_EXT_color_write_enable Demonstrate how to create multiple color blend attachments and then toggle them dynamically. Extension: VK_EXT_mesh_shader Demonstrates how a mesh shader can be used to achieve the same results as with geometry shader, it loads model from a file and visualizes its normals. Extension: VK_EXT_shader_object Demonstrate how to use shader objects. Extension: VK_EXT_extended_dynamic_state3 Demonstrate how to use the blending related functions available in the VK_EXT_extended_dynamic_state3 extension. Extensions: VK_EXT_line_rasterization, VK_EXT_extended_dynamic_state3 Demonstrate methods for dynamically customizing the appearance of the rendered lines. Extension: VK_KHR_shader_non_semantic_info Demonstrates how to use Printf statements in a shader to output per-invocation values. This can help find issues with shaders in combination with graphics debugging tools. Extension: VK_EXT_extended_dynamic_state3 Rendering using primitive clipping and depth clipping configured by dynamic pipeline state. The goal of these samples is to demonstrate usage of tooling functions and libraries that are not directly part of the api. Use the Vulkan Profiles library to simplify instance and device setup. The library defines a common baseline of features, extensions, etc. The goal of these samples is to demonstrate different techniques or showcase complex scenarios that doesn’t necessarily fit any of the main categories. A Neural Radiance Field synthesizer sample, based on textured polygons.","title":"Samples overview","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/README.html","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"Performance samples","hash":"performance-samples","id":2},{"text":"AFBC","hash":"_afbc","id":3},{"text":"Command buffer usage","hash":"_command_buffer_usage","id":4},{"text":"Constant data","hash":"_constant_data","id":5},{"text":"Descriptor management","hash":"_descriptor_management","id":6},{"text":"HPP Swapchain images","hash":"_hpp_swapchain_images","id":7},{"text":"Image compression control","hash":"_image_compression_control","id":8},{"text":"Layout transitions","hash":"_layout_transitions","id":9},{"text":"MSAA","hash":"_msaa","id":10},{"text":"Multi-threaded recording with multiple render passes","hash":"_multi_threaded_recording_with_multiple_render_passes","id":11},{"text":"Pipeline barriers","hash":"_pipeline_barriers","id":12},{"text":"Pipeline cache","hash":"_pipeline_cache","id":13},{"text":"Render passes","hash":"_render_passes","id":14},{"text":"Specialization constants","hash":"_specialization_constants","id":15},{"text":"Sub passes","hash":"_sub_passes","id":16},{"text":"Surface rotation","hash":"_surface_rotation","id":17},{"text":"Swapchain images","hash":"_swapchain_images","id":18},{"text":"Wait idle","hash":"_wait_idle","id":19},{"text":"16-bit storage InputOutput","hash":"_16_bit_storage_inputoutput","id":20},{"text":"16-bit arithmetic","hash":"_16_bit_arithmetic","id":21},{"text":"Async compute","hash":"_async_compute","id":22},{"text":"Basis Universal supercompressed GPU textures","hash":"_basis_universal_supercompressed_gpu_textures","id":23},{"text":"GPU Rendering and Multi-Draw Indirect","hash":"_gpu_rendering_and_multi_draw_indirect","id":24},{"text":"Texture compression comparison","hash":"_texture_compression_comparison","id":25},{"text":"API samples","hash":"api-samples","id":26},{"text":"Compute shader N-Body simulation","hash":"_compute_shader_n_body_simulation","id":27},{"text":"Dynamic Uniform buffers","hash":"_dynamic_uniform_buffers","id":28},{"text":"High dynamic range","hash":"_high_dynamic_range","id":29},{"text":"Hello Triangle","hash":"_hello_triangle","id":30},{"text":"HPP Compute shader N-Body simulation","hash":"_hpp_compute_shader_n_body_simulation","id":31},{"text":"HPP Dynamic Uniform Buffers","hash":"_hpp_dynamic_uniform_buffers","id":32},{"text":"HPP High dynamic range","hash":"_hpp_high_dynamic_range","id":33},{"text":"HPP Hello Triangle","hash":"_hpp_hello_triangle","id":34},{"text":"HPP HLSL shaders","hash":"_hpp_hlsl_shaders","id":35},{"text":"HPP Instancing","hash":"_hpp_instancing","id":36},{"text":"HPP OIT Linked Lists","hash":"_hpp_oit_linked_lists","id":37},{"text":"HPP Separate image sampler","hash":"_hpp_separate_image_sampler","id":38},{"text":"HPP Terrain Tessellation","hash":"_hpp_terrain_tessellation","id":39},{"text":"HPP Texture Loading","hash":"_hpp_texture_loading","id":40},{"text":"HPP Texture run-time mip-map generation","hash":"_hpp_texture_run_time_mip_map_generation","id":41},{"text":"HPP Timestamp queries","hash":"_hpp_timestamp_queries","id":42},{"text":"Instancing","hash":"_instancing","id":43},{"text":"Separate image sampler","hash":"_separate_image_sampler","id":44},{"text":"Terrain Tessellation","hash":"_terrain_tessellation","id":45},{"text":"Texture loading","hash":"_texture_loading","id":46},{"text":"Texture run-time mip-map generation","hash":"_texture_run_time_mip_map_generation","id":47},{"text":"HLSL shaders","hash":"_hlsl_shaders","id":48},{"text":"Timestamp queries","hash":"_timestamp_queries","id":49},{"text":"Swapchain recreation","hash":"_swapchain_recreation","id":50},{"text":"Order-independent transparency with per-pixel ordered linked lists","hash":"_order_independent_transparency_with_per_pixel_ordered_linked_lists","id":51},{"text":"Order-independent transparency with depth peeling","hash":"_order_independent_transparency_with_depth_peeling","id":52},{"text":"Extension samples","hash":"extension-samples","id":53},{"text":"Conservative Rasterization","hash":"_conservative_rasterization","id":54},{"text":"Dynamic Rendering","hash":"_dynamic_rendering","id":55},{"text":"Push Descriptors","hash":"_push_descriptors","id":56},{"text":"Debug Utilities","hash":"_debug_utilities","id":57},{"text":"Memory Budget","hash":"_memory_budget","id":58},{"text":"Mesh Shader Culling","hash":"_mesh_shader_culling","id":59},{"text":"Basic ray queries","hash":"_basic_ray_queries","id":60},{"text":"Basic hardware accelerated ray tracing","hash":"_basic_hardware_accelerated_ray_tracing","id":61},{"text":"Extended hardware accelerated ray tracing","hash":"_extended_hardware_accelerated_ray_tracing","id":62},{"text":"Mesh shading","hash":"_mesh_shading","id":63},{"text":"HPP Mesh shading","hash":"_hpp_mesh_shading","id":64},{"text":"OpenGL interoperability","hash":"_opengl_interoperability","id":65},{"text":"OpenCL interoperability","hash":"_opencl_interoperability","id":66},{"text":"OpenCL interoperability (Arm)","hash":"_opencl_interoperability_arm","id":67},{"text":"Timeline semaphore","hash":"_timeline_semaphore","id":68},{"text":"Buffer device address","hash":"_buffer_device_address","id":69},{"text":"Synchronization2","hash":"_synchronization2","id":70},{"text":"Descriptor indexing","hash":"_descriptor_indexing","id":71},{"text":"Fragment shading rate","hash":"_fragment_shading_rate","id":72},{"text":"Fragment shading rate_dynamic","hash":"_fragment_shading_rate_dynamic","id":73},{"text":"Ray tracing: reflection, shadow rays","hash":"_ray_tracing_reflection_shadow_rays","id":74},{"text":"Portability","hash":"_portability","id":75},{"text":"Graphics pipeline library","hash":"_graphics_pipeline_library","id":76},{"text":"Conditional rendering","hash":"_conditional_rendering","id":77},{"text":"Vertex input dynamic state","hash":"_vertex_input_dynamic_state","id":78},{"text":"Extended dynamic state 2","hash":"_extended_dynamic_state_2","id":79},{"text":"Logic operations dynamic state","hash":"_logic_operations_dynamic_state","id":80},{"text":"Patch control points","hash":"_patch_control_points","id":81},{"text":"Fragment shader barycentric","hash":"_fragment_shader_barycentric","id":82},{"text":"Basic descriptor buffer","hash":"_basic_descriptor_buffer","id":83},{"text":"Color write enable","hash":"_color_write_enable","id":84},{"text":"Geometry shader to mesh shader","hash":"_geometry_shader_to_mesh_shader","id":85},{"text":"Shader object","hash":"_shader_object","id":86},{"text":"Dynamic blending","hash":"_dynamic_blending","id":87},{"text":"Dynamic line rasterization","hash":"_dynamic_line_rasterization","id":88},{"text":"Shader Debug Printf","hash":"_shader_debug_printf","id":89},{"text":"Dynamic depth clipping and primitive clipping","hash":"_dynamic_depth_clipping_and_primitive_clipping","id":90},{"text":"Tooling Samples","hash":"tooling-samples","id":91},{"text":"Profiles Library","hash":"_profiles_library","id":92},{"text":"General Samples","hash":"general-samples","id":93},{"text":"Mobile NeRF","hash":"_mobile_nerf","id":94}]},"13":{"id":13,"text":"Vulkan is the latest 3D rendering API from the Khronos Group. It is a low-level API that is designed to expose the GPU to application developers with a minimal level of abstraction provided by the device driver. This enables Vulkan applications to benefit from lower CPU overhead, lower memory footprint, and a higher degree of performance stability. However, the reduced level of abstraction compared to OpenGL ES pushes more responsibilities on to the application developer. This article compares OpenGL ES and Vulkan, and outlines what developers should (and should not) expect when targeting Vulkan. The two API choices for an Android mobile developer are either OpenGL ES or Vulkan, so it is a useful exercise to start by comparing the two APIs to see where the major differences lie. The table below gives a summary, and each feature is explored in more detail beneath the table. Feature OpenGL ES Vulkan State management Global state State objects API execution model Synchronous Asynchronous API threading model Single threaded Multi-threaded API error checking Extensive runtime checks Only via layers Render pass abstraction Inferred render passes Explicit render passes Memory allocation Client-server pools Shared memory pool Memory usage Typed allocations Typed views OpenGL ES uses a single global state, and must recreate the necessary render state and resource binding tables for every draw call that is made. The used state combinations are only known at draw time, meaning that some optimizations are difficult and/or expensive to apply. Vulkan uses object-based states — known as descriptors — allowing the application to prepackage combinations of used states ahead of time. Compiled pipeline objects combine all relevant state, allowing shader-based optimizations to be applied more predictably for lower run-time cost. The impact of these changes is to significantly reduce the CPU overhead of the graphics drivers, at the expense of requiring the application to determine the states it will need up front in order to build the state objects and benefit from the reduced overhead. OpenGL ES uses a synchronous rendering model, which means that an API call must behave as if all earlier API calls have already been processed. In reality no modern GPU works this way, rendering workloads are processed asynchronously and the synchronous model is an elaborate illusion maintained by the device driver. To maintain this illusion the driver must track which resources are read or written by each rendering operation in the queue, ensure that workloads run in a legal order to avoid rendering corruption, and ensure that API calls which need a data resource block and wait until that resource is safely available. Vulkan uses an asynchronous rendering model, reflecting how the modern GPUs work. Applications queue rendering commands into a queue, use explict scheduling dependencies to control workload execution order, and use explicit synchronization primitives to align dependent CPU and GPU processing. The impact of these changes is to significantly reduce the CPU overhead of the graphics drivers, at the expense of requiring the application to handle dependency management and synchronization. OpenGL ES uses a single-threaded rendering model, which severely limits the ability of an application to use multiple CPU cores in the main rendering pipeline. Vulkan uses a multi-threaded rendering model, which allows an application to parallelize rendering operations across multiple CPU cores. The impact of these changes is to allow applications to benefit from multi-core systems. It is worth noting that Arm-based systems generally implement a heterogenous multi-core technology, called \"big.LITTLE\", which combines \"big\" high performance CPU cores with slower but more efficient \"LITTLE\" CPU cores for lighter workloads. Splitting a workload over multiple cores reduces the per-core load, and may allow a workload to migrate from a single \"big\" core to multiple \"LITTLE\" cores. This can significantly reduce system power consumption, and free up thermal budget which can be reallocated to useful rendering workloads. OpenGL ES is a tightly specified API with extensive run-time error checking. Many errors result from programming mistakes which will only occur during development, and which cannot be usefully handled at runtime, but the run-time checking must still occur which increases driver overheads in release builds of all applications. Vulkan is tightly specified by the core specification but does not require the driver to implement runtime error checking. Invalid use of the API may cause rendering corruption, or even crash the application. As an alternative to always-on error checking, Vulkan provides a framework which allows layer drivers to be inserted between the application and the native Vulkan driver. These layers can implement error checking and other debugging functionality, and have the major advantage that they can be removed when not required. The impact of these changes is to reduce driver CPU load, at the expense of making many errors undetectable unless a layer driver is used. The OpenGL ES API has no concept of a render pass object, but they are critical to the basic function of a tile-based renderer such as Mali. The driver must therefore infer which rendering commands form a single pass on the fly, a task which takes some processing time and relies on heuristics which can be inaccurate. The Vulkan API is built around the concept of render passes, and additionally includes the concept of subpasses within a single pass which can be automatically translated into in-tile shading operations in a tile-based renderer. This explict encoding removes the need for heuristics and further reduces driver load as render pass structures can be built up-front. OpenGL ES uses a client-server memory model. This model explicitly demarcates resources which are accessible on the client (CPU) and the server (GPU), and provides transfer functions which move data between the two. This has two main side-effects: Firstly the application cannot directly allocate or manage the memory backing server-side resources. The driver will manage all of these resources individually using internal memory allocators, unaware of any higher-level relationships which could be exploited to reduce cost. Secondly there is a cost of synchronizing resources between client and server, in particular in cases where there is a conflict between the synchronous rendering requirement of the API and the asynchronous processing reality. Vulkan is designed for modern hardware and assumes some level of hardware-backed memory coherency between the CPU and the GPU-visible memory device. This allows the API to give the application more direct control over memory resources, how they are allocated, and how they are updated. Memory coherency support allows buffers to remain persistently mapped in the application address space, avoiding the continuous map-unmap cycle OpenGL ES requires to inject manual coherency operations. The impact of these changes is to reduce driver CPU load and give the application more control over memory management. The application can reduce CPU load even further, for example by grouping objects with the same lifetime into a single allocation and tracking that rather than tracking them all separately. OpenGL ES uses a heavily typed object model, which tightly couples a logical resource with the physical memory which backs it. This is very simple to use, but means that a lot of intermediate storage (e.g. for framebuffer attachments) is only in use for a subset of a frame. Vulkan separates the concept of a resource, such as an image, from the physical memory which backs it. This makes it possible to reuse the same physical memory for multiple different resources at different points in the rendering pipeline. The ability to alias memory resources can be used to reduce the total memory footprint of the application by recycling the same physical memory for multiple uses at different points in a frame. Aliasing and memory mutability can place some restrictions on driver-side optimizations, in particular optimizations which can change the memory layout such as framebuffer compression. Vulkan is a low-level API which gives the application a lot of power to optimize things, but in return it also pushes a lot of responsibility on to the application to do things the right way. Before embarking on your Vulkan journey it can be worth considering what benefits it brings and the price you will have to pay in return; it is an expert power-user API and it isn’t always the right choice for every project. The most important thing to remember with Vulkan is that it is not necessarily going to give you a performance boost. The GPU hardware is the same and the rendering functionality exposed by Vulkan is almost identical to that found in OpenGL ES. If your application is limited by GPU rendering performance then it is unlikely that Vulkan will give you better performance. + Reducing CPU load can free up thermal budget for the GPU, which may allow higher GPU frequencies to be used, so an indirect performance increase may be possible on some platforms. The biggest advantage that Vulkan brings is reduced CPU load in the drivers and application rendering logic. This is achieved through the streamlining of the API interface and the ability to multi-thread the application. This can increase performance for CPU-limited applications, and improve overall system energy efficiency. The second advantage is a reduction in the memory footprint requirements of an application, due to intra-frame recycling of intermediate memory resources. While this is rarely a problem in high-end devices, it can enable new use cases in mass-market devices with smaller RAMs attached. The main disadvantage of Vulkan is that it pushes a lot of responsibilities on to the application, including memory allocation, workload dependency management, and CPU-GPU synchronization. While this enables a high degree of control and fine tuning, it also adds risk that the application does something suboptimal and loses performance. It is also worth noting that the thinner level of abstraction means that Vulkan can be more sensitive to differences in the underlying GPU hardware, reducing performance portability because the drivers cannot help hide hardware differences. For example, OpenGL ES dependencies are entirely handed by the device driver, so that can be assumed to do the right thing, but for Vulkan they are controlled by the application. There are render pass dependencies which will work well on a traditional immediate mode renderer that are too conservative for a tile-base renderer, and so cause scheduling bubbles where parts of the GPU go idle. Vulkan is a low-level API which hands the application a high degree of control and responsibility, and in return provides access to the GPU hardware and graphics resources via a thin abstraction with very low CPU overhead. Applications which use it well can benefit from reduced CPU load and memory footprint, as well as smoother rendering with fewer hitches caused by thicker driver abstractions second-guessing the application. It should be noted that Vulkan rarely improves GPU rendering performance; the hardware is the same as that underneath OpenGL ES after all …​","title":"Vulkan essentials","component":"samples","version":"latest","name":"vulkan_basics","url":"/samples/latest/samples/vulkan_basics.html","titles":[{"text":"Low level graphics for power users","hash":"_low_level_graphics_for_power_users","id":1},{"text":"OpenGL ES vs. Vulkan","hash":"_opengl_es_vs_vulkan","id":2},{"text":"State management","hash":"_state_management","id":3},{"text":"API execution model","hash":"_api_execution_model","id":4},{"text":"API threading model","hash":"_api_threading_model","id":5},{"text":"API error checking","hash":"_api_error_checking","id":6},{"text":"Render pass abstraction","hash":"_render_pass_abstraction","id":7},{"text":"Memory allocation","hash":"_memory_allocation","id":8},{"text":"Memory usage","hash":"_memory_usage","id":9},{"text":"What to expect","hash":"_what_to_expect","id":10},{"text":"Neutral","hash":"_neutral","id":11},{"text":"Advantages","hash":"_advantages","id":12},{"text":"Disadvantages","hash":"_disadvantages","id":13},{"text":"Conclusions","hash":"_conclusions","id":14}]},"14":{"id":14,"text":"A series of helpers to make life easier. Helps to generate new files for the project. All flags are optional. Setting --name is advised. If --output-dir is not set, the sample will be generated in the samples directory filed under the specified category. ./scripts/generate.py sample --name --category --output-dir Running the above line will generate the following files: samples/category/my_sample/CMakeLists.txt samples/category/my_sample/sample_name.cpp samples/category/my_sample/sample_name.h A new class will also be generated class SampleName : public VulkanSample { ... }; API samples can be generated using the following command: ./scripts/generate.py sample_api --name --category --output-dir Running the above line will generate the following files: samples/category/my_sample/CMakeLists.txt samples/category/my_sample/sample_name.cpp samples/category/my_sample/sample_name.h A new class will also be generated class SampleName :public ApiVulkanSample { ... }; ./scripts/generate.py android ./scripts/generate.py android --output-dir build/ When called from the root of the repository, this script will run clang-format on all files in the repository that have been altered in the git diff ./scripts/clang-format.py When called from the root of the repository, this script will check all files in the repository that have been altered in the git diff to ensure they have the correct license header. ./scripts/copyright.py This is similar to the copyright CI check except when run with --fix this script will update the license headers in all files in the repository that have been altered in the git diff. ./scripts/copyright.py --fix","title":"Utility Scripts","component":"samples","version":"latest","name":"README","url":"/samples/latest/scripts/README.html","titles":[{"text":"Generate","hash":"_generate","id":1},{"text":"Generate Sample","hash":"_generate_sample","id":2},{"text":"Generate API Sample","hash":"_generate_api_sample","id":3},{"text":"Generate Android Project","hash":"_generate_android_project","id":4},{"text":"Clang Format","hash":"_clang_format","id":5},{"text":"Copyright Headers","hash":"_copyright_headers","id":6}]},"15":{"id":15,"text":"Core is a collection of pure interfaces or small utilities which are used across the project. The core component is the only component which does not follow the component pattern in its entirety. The only major difference between core and other components is the header prefix used is core/ instead of components/core/. A Platform is the name we have given to the physical hardware and operating system that the project is executing on. We support multiple platforms which can be identified by the following defines PLATFORM__ANDROID PLATFORM__WINDOWS PLATFORM__LINUX_D2D PLATFORM__LINUX PLATFORM__MACOS Using these platforms should be as transparent as possible to a sample. Components on the other hand may add platform specific code paths if required. An application can create a cross platform entrypoint by using the CUSTOM_MAIN(context_name) macro #include CUSTOM_MAIN(context) { context.arguments(); context.external_storage_directory(); context.temp_directory(); // Components using platform specific contexts FileSystem fs = FileSystem::from_context(context); } Error - A collection of error handling macros Hash - A collection of hashing functions Strings - A collection of string utilities","title":"Core","component":"samples","version":"latest","name":"README","url":"/samples/latest/components/core/README.html","titles":[{"text":"Platform","hash":"_platform","id":1},{"text":"Utilities","hash":"_utilities","id":2}]},"16":{"id":16,"text":"","title":"File System","component":"samples","version":"latest","name":"README","url":"/samples/latest/components/filesystem/README.html","titles":[]},"17":{"id":17,"text":"The goal of these samples is to demonstrate how to use a given Vulkan feature at the API level with as little abstraction as possible. Compute shader example that uses two passes and shared compute shader memory for simulating a N-Body particle system. Dynamic uniform buffers are used for rendering multiple objects with separate matrices stored in a single uniform buffer object, that are addressed dynamically. Implements a high dynamic range rendering pipeline using 16/32 bit floating point precision for all calculations. A self-contained (minimal use of framework) sample that illustrates the rendering of a triangle. A transcoded version of the API sample Compute N-Body that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Dynamic Uniform buffers that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample High dynamic rangethat illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Hello Triangle that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample HLSL Shaders that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Instancing that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample OIT Linked Lists that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp. A transcoded version of the API sample Separate image sampler that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Terrain Tessellation that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Texture loading that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Texture run-time mip-map generation that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. A transcoded version of the API sample Timestamp queries that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Uses the instancing feature for rendering many instances of the same mesh from a single vertex buffer with variable parameters and textures. Separate image and samplers, both in the application and the shaders. The sample demonstrates how to use different samplers for the same image without the need to recreate descriptors. Uses a tessellation shader for rendering a terrain with dynamic level-of-detail and frustum culling. Loading and rendering of a 2D texture map from a file. Generates a complete mip-chain for a texture at runtime instead of loading it from a file. Converts High Level Shading Language (HLSL) shaders to Vulkan-compatible SPIR-V. Using timestamp queries for profiling GPU workloads. A sample that implements best practices in handling swapchain recreation, for example due to window resizing or present mode changes. A sample that implements an order-independent transparency algorithm using per-pixel ordered linked lists. A sample that implements order-independent transparency with depth peeling.","title":"","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/README.html","titles":[{"text":"API samples","hash":"_api_samples","id":1},{"text":"Compute shader N-Body simulation","hash":"_compute_shader_n_body_simulation","id":2},{"text":"Dynamic Uniform buffers","hash":"_dynamic_uniform_buffers","id":3},{"text":"High dynamic range","hash":"_high_dynamic_range","id":4},{"text":"Hello Triangle","hash":"_hello_triangle","id":5},{"text":"HPP Compute shader N-Body simulation","hash":"_hpp_compute_shader_n_body_simulation","id":6},{"text":"HPP Dynamic Uniform Buffers","hash":"_hpp_dynamic_uniform_buffers","id":7},{"text":"HPP High dynamic range","hash":"_hpp_high_dynamic_range","id":8},{"text":"HPP Hello Triangle","hash":"_hpp_hello_triangle","id":9},{"text":"HPP HLSL shaders","hash":"_hpp_hlsl_shaders","id":10},{"text":"HPP Instancing","hash":"_hpp_instancing","id":11},{"text":"HPP OIT Linked Lists","hash":"_hpp_oit_linked_lists","id":12},{"text":"HPP Separate image sampler","hash":"_hpp_separate_image_sampler","id":13},{"text":"HPP Terrain Tessellation","hash":"_hpp_terrain_tessellation","id":14},{"text":"HPP Texture Loading","hash":"_hpp_texture_loading","id":15},{"text":"HPP Texture run-time mip-map generation","hash":"_hpp_texture_run_time_mip_map_generation","id":16},{"text":"HPP Timestamp queries","hash":"_hpp_timestamp_queries","id":17},{"text":"Instancing","hash":"_instancing","id":18},{"text":"Separate image sampler","hash":"_separate_image_sampler","id":19},{"text":"Terrain Tessellation","hash":"_terrain_tessellation","id":20},{"text":"Texture loading","hash":"_texture_loading","id":21},{"text":"Texture run-time mip-map generation","hash":"_texture_run_time_mip_map_generation","id":22},{"text":"HLSL shaders","hash":"_hlsl_shaders","id":23},{"text":"Timestamp queries","hash":"_timestamp_queries","id":24},{"text":"Swapchain recreation","hash":"_swapchain_recreation","id":25},{"text":"Order-independent transparency with per-pixel ordered linked lists","hash":"_order_independent_transparency_with_per_pixel_ordered_linked_lists","id":26},{"text":"Order-independent transparency with depth peeling","hash":"_order_independent_transparency_with_depth_peeling","id":27}]},"18":{"id":18,"text":"The goal of these samples is to demonstrate different techniques or showcase complex scenarios that doesn’t necessarily fit any of the main categories. A Neural Radiance Field synthesizer sample, based on textured polygons.","title":"","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/general/README.html","titles":[{"text":"General Samples","hash":"_general_samples","id":1},{"text":"Mobile NeRF","hash":"_mobile_nerf","id":2}]},"19":{"id":19,"text":"The goal of these samples is to demonstrate how to use a particular Vulkan extension at the API level with as little abstraction as possible. Extension: VK_EXT_conservative_rasterization Uses conservative rasterization to change the way fragments are generated. Enables overestimation to generate fragments for every pixel touched instead of only pixels that are fully covered. Extension: VK_KHR_dynamic_rendering Demonstrates how to use Dynamic Rendering. Read the blog post here for discussion: (https://www.khronos.org/blog/streamlining-render-passes) Extension: VK_KHR_push_descriptor Push descriptors apply the push constants concept to descriptor sets. Instead of creating per-object descriptor sets, this example passes descriptors at command buffer creation time. Extension: VK_EXT_debug_utils Uses the debug utilities extension to name and group Vulkan objects (command buffers, images, etc.). This information makes debugging in tools like RenderDoc significantly easier. Extension: VK_EXT_memory_budget Uses the memory budget extension to monitor the allocated memory in the GPU and demonstrates how to use it. Extension: VK_EXT_mesh_shader Uses the mesh shader extension to demonstrate how to do basic culling utilizing both a mesh and a task shader. Extensions: VK_KHR_ray_query, VK_KHR_acceleration_structure Render a sponza scene using the ray query extension. Shows how to set up all data structures required for ray queries, including the bottom and top level acceleration structures for the geometry and a standard vertex/fragment shader pipeline. Shadows are cast dynamically by ray queries being cast by the fragment shader. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure Render a basic scene using the official cross-vendor ray tracing extension. Shows how to setup all data structures required for ray tracing, including the bottom and top level acceleration structures for the geometry, the shader binding table and the ray tracing pipelines with shader groups for ray generation, ray hits, and ray misses. After dispatching the rays, the final result is copied to the swapchain image. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure Render Sponza with Ambient Occlusion. Place a vase in center. Generate a particle fire that demonstrates the TLAS (Top Level Acceleration Structure) animation for the same underlying geometry. Procedurally generate a transparent quad and deform the geometry of the quad in the BLAS (Bottom Level Acceleration Structure) to demonstrate how to animate with deforming geometry. Shows how to rebuild the acceleration structure and when to set it to fast rebuild vs fast traversal. Extensions: VK_EXT_mesh_shader Renders a triangle with the most simple of all possible mesh shader pipeline examples. There is no vertex shader, there is only a mesh and fragment shader. The mesh shader creates the vertices for the triangle. The mesh shading pipeline includes the task and mesh shaders before going into the fragment shader. This replaces the vertex / geometry shader standard pipeline. A transcoded version of the Extensions sample Mesh shading that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Extensions: VK_KHR_external_memory, VK_KHR_external_semaphore Render a procedural image using OpenGL and incorporate that rendered content into a Vulkan scene. Demonstrates using the same backing memory for a texture in both OpenGL and Vulkan and how to synchronize the APIs using shared semaphores and barriers. Extensions: VK_KHR_external_memory, VK_KHR_external_semaphore This sample shows how to do Vulkan and OpenCL interoperability using cross vendor extensions in both apis. The sample uses OpenCL to update an image that is then displayed in Vulkan. This is done by sharing the memory for that image across the two apis. The sample also shares semaphores for doing cross api synchronization. Extensions: VK_ANDROID_external_memory_android_hardware_buffer This sample demonstrates usage of OpenCL extensions available on Arm devices. Fill a procedural texture using OpenCL and display it using Vulkan. In this sample data sharing between APIs is achieved using Android Hardware Buffers. Extensions: VK_KHR_timeline_semaphore Demonstrates various use cases which are enabled with timeline semaphores. The sample implements \"Game of Life\" in an esoteric way, using out-of-order signal and wait, multiple waits on same semaphore in different queues, waiting and signalling semaphore on host. Extensions: VK_KHR_buffer_device_address Demonstrates how to use the buffer device address feature, which enables extreme flexibility in how buffer memory is accessed. Extension VK_KHR_synchronization2 Demonstrates the use of the reworked synchronization api introduced with VK_KHR_synchronization2. Based on the compute shading N-Body particle system, this sample uses the new extension to streamline the memory barriers used for the compute and graphics work submissions. Extensions: VK_EXT_descriptor_indexing Demonstrates how to use descriptor indexing to enable update-after-bind and non-dynamically uniform indexing of descriptors. Extension: VK_KHR_fragment_shading_rate Uses a special framebuffer attachment to control fragment shading rates for different framebuffer regions. This allows explicit control over the number of fragment shader invocations for each pixel covered by a fragment, which is e.g. useful for foveated rendering. Extension: VK_KHR_fragment_shading_rate Render a simple scene showing the basics of shading rate dynamic. This sample shows low and high frequency textures over several cubes. It creates a sample rate map based upon this frequency every frame. Then it uses that dynamic sample rate map as a base for the next frame. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure, VK_EXT_descriptor_indexing, VK_EXT_scalar_block_layout Render a simple scene showing the basics of ray tracing, including reflection and shadow rays. The sample creates some geometries and create a bottom acceleration structure for each, then make instances of those, using different materials and placing them at different locations. Extensions: VK_KHR_portability_subset Demonstrate how to include non-conformant portable Vulkan implementations by using the portability extension to include those implementations in the device query. An example of a non-conformant portable Vulkan implementation is MoltenVk: MoltenVk. Also demonstrate use of beta extension which allows for querying which features of the full Vulkan spec are not currently supported by the non-conformant Vulkan implementation. Extension: VK_EXT_graphics_pipeline_library Uses the graphics pipeline library extensions to improve run-time pipeline creation. Instead of creating the whole pipeline at once, this sample makes use of that extension to pre-build shared pipeline parts such as vertex input state and fragment output state. These building blocks are then used to create pipelines at runtime, improving build times compared to traditional pipeline creation. Extension: VK_EXT_conditional_rendering Demonstrate how to do conditional rendering, dynamically discarding rendering commands without having to update command buffers. This is done by sourcing conditional rendering blocks from a dedicated buffer that can be updated without having to touch command buffers. Extension: VK_EXT_vertex_input_dynamic_state Demonstrate how to use vertex input bindings and attribute descriptions dynamically, which can reduce the number of pipeline objects that are needed to be created. Extension: VK_EXT_extended_dynamic_state2 Demonstrate how to use depth bias, primitive restart, rasterizer discard and patch control points dynamically, which can reduce the number of pipeline objects that are needed to be created. Extension: VK_EXT_extended_dynamic_state2 Demonstrate how to use logical operations dynamically, which can reduce the number of pipeline objects that are needed to be created or allow to change the pipeline state dynamically (change type of the logical operation). Extension: VK_EXT_extended_dynamic_state2 Demonstrate how to use patch control points dynamically, which can reduce the number of pipeline objects that are needed to be created. Extension: VK_KHR_fragment_shader_barycentric Demonstrate how to use fragment shader barycentric feature, which allows accessing barycentric coordinates for each processed fragment. Extension: VK_EXT_descriptor_buffer Demonstrate how to use the new extension to replace descriptor sets with resource descriptor buffers Extension: VK_EXT_color_write_enable Demonstrate how to create multiple color blend attachments and then toggle them dynamically. Extension: VK_EXT_mesh_shader Demonstrates how a mesh shader can be used to achieve the same results as with geometry shader, it loads model from a file and visualizes its normals. Extension: VK_EXT_shader_object Demonstrate how to use shader objects. Extension: VK_EXT_extended_dynamic_state3 Demonstrate how to use the blending related functions available in the VK_EXT_extended_dynamic_state3 extension. Extensions: VK_EXT_line_rasterization, VK_EXT_extended_dynamic_state3 Demonstrate methods for dynamically customizing the appearance of the rendered lines. Extension: VK_KHR_shader_non_semantic_info Demonstrates how to use Printf statements in a shader to output per-invocation values. This can help find issues with shaders in combination with graphics debugging tools. Extension: VK_EXT_extended_dynamic_state3 Rendering using primitive clipping and depth clipping configured by dynamic pipeline state.","title":"","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/README.html","titles":[{"text":"Extension samples","hash":"_extension_samples","id":1},{"text":"Conservative Rasterization","hash":"_conservative_rasterization","id":2},{"text":"Dynamic Rendering","hash":"_dynamic_rendering","id":3},{"text":"Push Descriptors","hash":"_push_descriptors","id":4},{"text":"Debug Utilities","hash":"_debug_utilities","id":5},{"text":"Memory Budget","hash":"_memory_budget","id":6},{"text":"Mesh Shader Culling","hash":"_mesh_shader_culling","id":7},{"text":"Basic ray queries","hash":"_basic_ray_queries","id":8},{"text":"Basic hardware accelerated ray tracing","hash":"_basic_hardware_accelerated_ray_tracing","id":9},{"text":"Extended hardware accelerated ray tracing","hash":"_extended_hardware_accelerated_ray_tracing","id":10},{"text":"Mesh shading","hash":"_mesh_shading","id":11},{"text":"HPP Mesh shading","hash":"_hpp_mesh_shading","id":12},{"text":"OpenGL interoperability","hash":"_opengl_interoperability","id":13},{"text":"OpenCL interoperability","hash":"_opencl_interoperability","id":14},{"text":"OpenCL interoperability (Arm)","hash":"_opencl_interoperability_arm","id":15},{"text":"Timeline semaphore","hash":"_timeline_semaphore","id":16},{"text":"Buffer device address","hash":"_buffer_device_address","id":17},{"text":"Synchronization2","hash":"_synchronization2","id":18},{"text":"Descriptor indexing","hash":"_descriptor_indexing","id":19},{"text":"Fragment shading rate","hash":"_fragment_shading_rate","id":20},{"text":"Fragment shading rate_dynamic","hash":"_fragment_shading_rate_dynamic","id":21},{"text":"Ray tracing: reflection, shadow rays","hash":"_ray_tracing_reflection_shadow_rays","id":22},{"text":"Portability","hash":"_portability","id":23},{"text":"Graphics pipeline library","hash":"_graphics_pipeline_library","id":24},{"text":"Conditional rendering","hash":"_conditional_rendering","id":25},{"text":"Vertex input dynamic state","hash":"_vertex_input_dynamic_state","id":26},{"text":"Extended dynamic state 2","hash":"_extended_dynamic_state_2","id":27},{"text":"Logic operations dynamic state","hash":"_logic_operations_dynamic_state","id":28},{"text":"Patch control points","hash":"_patch_control_points","id":29},{"text":"Fragment shader barycentric","hash":"_fragment_shader_barycentric","id":30},{"text":"Basic descriptor buffer","hash":"_basic_descriptor_buffer","id":31},{"text":"Color write enable","hash":"_color_write_enable","id":32},{"text":"Geometry shader to mesh shader","hash":"_geometry_shader_to_mesh_shader","id":33},{"text":"Shader object","hash":"_shader_object","id":34},{"text":"Dynamic blending","hash":"_dynamic_blending","id":35},{"text":"Dynamic line rasterization","hash":"_dynamic_line_rasterization","id":36},{"text":"Shader Debug Printf","hash":"_shader_debug_printf","id":37},{"text":"Dynamic depth clipping and primitive clipping","hash":"_dynamic_depth_clipping_and_primitive_clipping","id":38}]},"20":{"id":20,"text":"The goal of these samples is to demonstrate how to use certain features and functions to achieve optimal performance. To visualize this, they also include real-time profiling information. AFBC (Arm Frame Buffer Compression) is a real-time lossless compression algorithm found in Arm Mali GPUs, designed to tackle the ever-growing demand for higher resolution graphics. This format is applied to the framebuffers that are to be written to the GPU. This technology can offer bandwidth reductions of up to 50%. This sample demonstrates how to use and manage secondary command buffers, and how to record them concurrently. Implementing multi-threaded recording of draw calls can help reduce CPU frame time. The Vulkan API exposes a few different ways in which we can send uniform data into our shaders. There are enough methods that it raises the question \"Which one is fastest?\", and more often than not the answer is \"It depends\". The main issue for developers is that the fastest methods may differ between the various vendors, so often there is no \"one size fits all\" solution. This sample aims to highlight this issue, and help move the Vulkan ecosystem to a point where we are better equipped to solve this for developers. This is done by having an interactive way to toggle different constant data methods that the Vulkan API expose to us. This can then be run on a platform of the developers choice to see the performance implications that each of them bring. An application using Vulkan will have to implement a system to manage descriptor pools and sets. The most straightforward and flexible approach is to re-create them for each frame, but doing so might be very inefficient, especially on mobile platforms. The problem of descriptor management is intertwined with that of buffer management, that is choosing how to pack data in VkBuffer objects. This sample will explore a few options to improve both descriptor and buffer management. A transcoded version of the Performance sample Swapchain images that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. This sample shows how to use the extensions VK_EXT_image_compression_control and VK_EXT_image_compression_control_swapchain to select between different levels of image compression. The UI shows the impact compression has on image size and bandwidth, illustrating the benefits of fixed-rate (visually lossless) compression. Vulkan requires the application to manage image layouts, so that all render pass attachments are in the correct layout when the render pass begins. This is usually done using pipeline barriers or the initialLayout and finalLayout parameters of the render pass. If the rendering pipeline is complex, transitioning each image to its correct layout is not trivial, as it requires some sort of state tracking. If previous image contents are not needed, there is an easy way out, that is setting oldLayout/initialLayout to VK_IMAGE_LAYOUT_UNDEFINED. While this is functionally correct, it can have performance implications as it may prevent the GPU from performing some optimizations. This sample will cover an example of such optimizations and how to avoid the performance overhead from using sub-optimal layouts. Aliasing is the result of under-sampling a signal. In graphics this means computing the color of a pixel at a resolution that results in artifacts, commonly jaggies at model edges. Multisample anti-aliasing (MSAA) is an efficient technique that reduces pixel sampling error. Ideally you render all stages of your frame in a single render pass. However, in some cases different stages can’t be performed in the same render pass. This sample shows how multi-threading can help to boost performance when using multiple render passes to render a single frame. Vulkan gives the application significant control over memory access for resources. Pipeline barriers are particularly convenient for synchronizing memory accesses between render passes. Having barriers is required whenever there is a memory dependency - the application should not assume that render passes are executed in order. However, having too many or too strict barriers can affect the application’s performance. This sample will cover how to set up pipeline barriers efficiently, with a focus on pipeline stages. Vulkan gives applications the ability to save internal representation of a pipeline (graphics or compute) to enable recreating the same pipeline later. This sample will look in detail at the implementation and performance implications of the pipeline creation, caching and management. Vulkan render-passes use attachments to describe input and output render targets. This sample shows how loading and storing attachments might affect performance on mobile. During the creation of a render-pass, you can specify various color attachments and a depth-stencil attachment. Each of those is described by a VkAttachmentDescription struct, which contains attributes to specify the load operation (loadOp) and the store operation (storeOp). This sample lets you choose between different combinations of these operations at runtime. Vulkan exposes a number of methods for setting values within shader code during run-time, this includes UBOs and Specialization Constants. This sample compares these two methods and the performance impact of them. Vulkan introduces the concept of subpasses to subdivide a single render pass into separate logical phases. The benefit of using subpasses over multiple render passes is that a GPU is able to perform various optimizations. Tile-based renderers, for example, can take advantage of tile memory, which being on chip is decisively faster than external memory, potentially saving a considerable amount of bandwidth. Mobile devices can be rotated, therefore the logical orientation of the application window and the physical orientation of the display may not match. Applications then need to be able to operate in two modes: portrait and landscape. The difference between these two modes can be simplified to just a change in resolution. However, some display subsystems always work on the \"native\" (or \"physical\") orientation of the display panel. Since the device has been rotated, to achieve the desired effect the application output must also rotate. In this sample we focus on the rotation step, and analyze the performance implications of implementing it correctly with Vulkan. Vulkan gives the application some significant control over the number of swapchain images to be created. This sample analyzes the available options and their performance implications. This sample compares two methods for synchronizing between the CPU and GPU, WaitIdle and Fences demonstrating which one is the best option in order to avoid stalling. This sample compares bandwidth consumption when using FP32 varyings compared to using FP16 varyings with VK_KHR_16bit_storage. This sample compares arithmetic throughput for 32-bit arithmetic operations and 16-bit arithmetic. The sample also shows how to enable 16-bit storage for SSBOs and push constants. This sample demonstrates using multiple Vulkan queues to get better hardware utilization with compute post-processing workloads. This sample demonstrates how to use Basis universal supercompressed GPU textures in a Vulkan application. This sample demonstrates how to reduce CPU usage by offloading draw call generation and frustum culling to the GPU. This sample demonstrates how to use different types of compressed GPU textures in a Vulkan application, and shows the timing benefits of each.","title":"","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/README.html","titles":[{"text":"Performance samples","hash":"_performance_samples","id":1},{"text":"AFBC","hash":"_afbc","id":2},{"text":"Command buffer usage","hash":"_command_buffer_usage","id":3},{"text":"Constant data","hash":"_constant_data","id":4},{"text":"Descriptor management","hash":"_descriptor_management","id":5},{"text":"HPP Swapchain images","hash":"_hpp_swapchain_images","id":6},{"text":"Image compression control","hash":"_image_compression_control","id":7},{"text":"Layout transitions","hash":"_layout_transitions","id":8},{"text":"MSAA","hash":"_msaa","id":9},{"text":"Multi-threaded recording with multiple render passes","hash":"_multi_threaded_recording_with_multiple_render_passes","id":10},{"text":"Pipeline barriers","hash":"_pipeline_barriers","id":11},{"text":"Pipeline cache","hash":"_pipeline_cache","id":12},{"text":"Render passes","hash":"_render_passes","id":13},{"text":"Specialization constants","hash":"_specialization_constants","id":14},{"text":"Sub passes","hash":"_sub_passes","id":15},{"text":"Surface rotation","hash":"_surface_rotation","id":16},{"text":"Swapchain images","hash":"_swapchain_images","id":17},{"text":"Wait idle","hash":"_wait_idle","id":18},{"text":"16-bit storage InputOutput","hash":"_16_bit_storage_inputoutput","id":19},{"text":"16-bit arithmetic","hash":"_16_bit_arithmetic","id":20},{"text":"Async compute","hash":"_async_compute","id":21},{"text":"Basis Universal supercompressed GPU textures","hash":"_basis_universal_supercompressed_gpu_textures","id":22},{"text":"GPU Rendering and Multi-Draw Indirect","hash":"_gpu_rendering_and_multi_draw_indirect","id":23},{"text":"Texture compression comparison","hash":"_texture_compression_comparison","id":24}]},"21":{"id":21,"text":"The goal of these samples is to demonstrate usage of tooling functions and libraries that are not directly part of the api. Use the Vulkan Profiles library to simplify instance and device setup. The library defines a common baseline of features, extensions, etc.","title":"","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/tooling/README.html","titles":[{"text":"Tooling Samples","hash":"_tooling_samples","id":1},{"text":"Profiles Library","hash":"_profiles_library","id":2}]},"22":{"id":22,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Compute shader example that uses two passes and shared compute shader memory for simulating a N-Body particle system.","title":"Compute shader N-Body simulation","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/compute_nbody/README.html","titles":[]},"23":{"id":23,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Dynamic uniform buffers are used for rendering multiple objects with separate matrices stored in a single uniform buffer object, that are addressed dynamically.","title":"Dynamic Uniform buffers","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/dynamic_uniform_buffers/README.html","titles":[]},"24":{"id":24,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Implements a high dynamic range rendering pipeline using 16/32 bit floating point precision for all calculations.","title":"High dynamic range","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hdr/README.html","titles":[]},"25":{"id":25,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A self-contained (minimal use of framework) sample that illustrates the rendering of a triangle.","title":"Hello Triangle","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hello_triangle/README.html","titles":[]},"26":{"id":26,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This tutorial, along with the accompanying example code, shows how to use shaders written in the High Level Shading Language (HLSL) in Vulkan at runtime. Vulkan does not directly consume shaders in a human-readable text format, but instead uses SPIR-V as an intermediate representation. This opens the option to use shader languages other than e.g. GLSL, as long as they can target the Vulkan SPIR-V environment. One such language is Microsoft’s HLSL, which is the shading language for DirectX. Details on how HLSL fits into the Vulkan ecosystem can be found in this Vulkan guide chapter. HLSL is a bit more object-oriented than GLSL, but the general structure of a shader is similar Vulkan-specific functions are marked with the implicit vk namespace: struct VSInput { [[vk::location(0)]] float3 Pos : POSITION0; [[vk::location(1)]] float2 UV : TEXCOORD0; [[vk::location(2)]] float3 Normal : NORMAL0; }; struct UBO { float4x4 projection; float4x4 model; float4 viewPos; }; cbuffer ubo : register(b0, space0) { UBO ubo; } struct VSOutput { float4 Pos : SV_POSITION; [[vk::location(0)]] float2 UV : TEXCOORD0; }; VSOutput main(VSInput input) { VSOutput output = (VSOutput)0; output.UV = input.UV; output.Pos = mul(ubo.projection, mul(ubo.model, float4(input.Pos.xyz, 1.0))); return output; } The Vulkan samples use Glslang for converting shaders to SPIR-V at runtime. Glslang is the reference GLSL validator and translator, but also supports HLSL as an input language. HLSL support in Glslang limited though and for a more feature complete HLSL to SPIR-V compiler, you can also use the DirectX shader compiler. For the basic shader in this tutorial, we can go with Glslang though, as it supports all features we require. Loading HLSL with Glslang is similar to loading GLSL, but requires different parameters. Here are the relevant parts that differ from loading HLSL from the HlslShaders::load_hlsl_shader function of the sample: std::vector spirv; // Use HLSL parsing rules and semantics (EShMsgReadHlsl) EShMessages messages = static_cast(EShMsgReadHlsl | ...); ... // Language needs to be selected based on the shader stage EShLanguage language = EShLangVertex; glslang::TShader shader(language); ... // Set the source language to HLSL shader.setEnvInput(glslang::EShSourceHlsl, language, glslang::EShClientVulkan, 1); ... // Parse the HLSL input if (!shader.parse(&glslang::DefaultTBuiltInResource, 100, false, messages)) { ... } // Add shader to new program object. glslang::TProgram program; program.addShader(&shader); // Link program. if (!program.link(messages)) { ... } ... // Translate to SPIRV glslang::TIntermediate *intermediate = program.getIntermediate(language); ... glslang::GlslangToSpv(*intermediate, spirv, &logger); ... The call to glslang::GlslangToSpv will generate the SPIR-V bytecode that we can use to create the Vulkan shader module from: VkShaderModule shader_module; VkShaderModuleCreateInfo module_create_info{}; module_create_info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO; module_create_info.codeSize = spirv.size() * sizeof(uint32_t); module_create_info.pCode = spirv.data(); VK_CHECK(vkCreateShaderModule(get_device().get_handle(), &module_create_info, NULL, &shader_module));","title":"Using HLSL shaders in Vulkan","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hlsl_shaders/README.html","titles":[{"text":"HLSL Syntax","hash":"_hlsl_syntax","id":1},{"text":"Glslang","hash":"_glslang","id":2},{"text":"Converting HLSL to SPIR-V","hash":"_converting_hlsl_to_spir_v","id":3},{"text":"Creating the shader module","hash":"_creating_the_shader_module","id":4}]},"27":{"id":27,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Compute N-Body that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp.","title":"HPP Compute shader N-Body simulation","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_compute_nbody/README.html","titles":[]},"28":{"id":28,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Dynamic Uniform buffers that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp.","title":"HPP Dynamic Uniform Buffers","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_dynamic_uniform_buffers/README.html","titles":[]},"29":{"id":29,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample High dynamic range that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp.","title":"HPP High dynamic range","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_hdr/README.html","titles":[]},"30":{"id":30,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Hello Triangle that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp.","title":"HPP Hello Triangle","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_hello_triangle/README.html","titles":[]},"31":{"id":31,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This is a transcoded version of the API sample that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. This tutorial, along with the accompanying example code, shows how to use shaders written in the High Level Shading Language (HLSL) in Vulkan at runtime, using Vulkan-Hpp. Vulkan does not directly consume shaders in a human-readable text format, but instead uses SPIR-V as an intermediate representation. This opens the option to use shader languages other than e.g. GLSL, as long as they can target the Vulkan SPIR-V environment. One such language is Microsoft’s HLSL, which is the shading language for DirectX. Details on how HLSL fits into the Vulkan ecosystem can be found in this Vulkan guide chapter. HLSL is a bit more object-oriented than GLSL, but the general structure of a shader is similar Vulkan-specific functions are marked with the implicit vk namespace: struct VSInput { [[vk::location(0)]] float3 Pos : POSITION0; [[vk::location(1)]] float2 UV : TEXCOORD0; [[vk::location(2)]] float3 Normal : NORMAL0; }; struct UBO { float4x4 projection; float4x4 model; float4 viewPos; }; cbuffer ubo : register(b0, space0) { UBO ubo; } struct VSOutput { float4 Pos : SV_POSITION; [[vk::location(0)]] float2 UV : TEXCOORD0; }; VSOutput main(VSInput input) { VSOutput output = (VSOutput)0; output.UV = input.UV; output.Pos = mul(ubo.projection, mul(ubo.model, float4(input.Pos.xyz, 1.0))); return output; } The Vulkan samples use Glslang for converting shaders to SPIR-V at runtime. Glslang is the reference GLSL validator and translator, but also supports HLSL as an input language. HLSL support in Glslang limited though and for a more feature complete HLSL to SPIR-V compiler, you can also use the DirectX shader compiler. For the basic shader in this tutorial, we can go with Glslang though, as it supports all features we require. Loading HLSL with Glslang is similar to loading GLSL, but requires different parameters. Here are the relevant parts that differ from loading HLSL from the HlslShaders::load_hlsl_shader function of the sample: std::vector spirvCode; // Use HLSL parsing rules and semantics (EShMsgReadHlsl) EShMessages messages = static_cast(EShMsgReadHlsl | ...); ... // Language needs to be selected based on the shader stage EShLanguage language = EShLangVertex; glslang::TShader shader(language); ... // Set the source language to HLSL shader.setEnvInput(glslang::EShSourceHlsl, language, glslang::EShClientVulkan, 1); ... // Parse the HLSL input if (!shader.parse(&glslang::DefaultTBuiltInResource, 100, false, messages)) { ... } // Add shader to new program object. glslang::TProgram program; program.addShader(&shader); // Link program. if (!program.link(messages)) { ... } ... // Translate to SPIRV glslang::TIntermediate *intermediate = program.getIntermediate(language); ... glslang::GlslangToSpv(*intermediate, spirvCode, &logger); ... The call to glslang::GlslangToSpv will generate the SPIR-V bytecode that we can use to create the Vulkan shader module from: vk::ShaderModuleCreateInfo module_create_info({}, spirvCode); vk::ShaderModule shader_module = get_device()->get_handle().createShaderModule(module_create_info);","title":"Using HLSL shaders in Vulkan with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_hlsl_shaders/README.html","titles":[{"text":"HLSL Syntax","hash":"_hlsl_syntax","id":1},{"text":"Glslang","hash":"_glslang","id":2},{"text":"Converting HLSL to SPIR-V","hash":"_converting_hlsl_to_spir_v","id":3},{"text":"Creating the shader module","hash":"_creating_the_shader_module","id":4}]},"32":{"id":32,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Instancing that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp.","title":"HPP Instancing","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_instancing/README.html","titles":[]},"33":{"id":33,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This is a transcoded version of the API sample OIT linked lists that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Please see there for the documentation on this sample.","title":"Order-independent transparency with per-pixel ordered linked lists with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_oit_linked_lists/README.html","titles":[]},"34":{"id":34,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Separate image sampler that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. This tutorial, along with the accompanying example code, shows how to separate samplers and images in a Vulkan application. Opposite to combined image and samplers, this allows the application to freely mix an arbitrary set of samplers and images in the shader. In the sample code, a single image and multiple samplers with different options will be created. The sampler to be used for sampling the image can then be selected at runtime. As image and sampler objects are separated, this only requires selecting a different descriptor at runtime. From the application’s point of view, images and samplers are always created separately. Access to the image is done via the image’s vk::ImageView. Samplers are created using a vk::Sampler object, specifying how an image will be sampled. The difference between separating and combining them starts at the descriptor level, which defines how the shader accesses the samplers and images. A separate setup uses a descriptor of type vk::DescriptorType::eSampledImage for the sampled image, and a vk::DescriptorType::eSampler for the sampler, separating the image and sampler object: // Image info only references the image vk::DescriptorImageInfo image_info({}, texture.image->get_vk_image_view().get_handle(), vk::ImageLayout::eShaderReadOnlyOptimal); // Sampled image descriptor vk::WriteDescriptorSet image_write_descriptor_set(base_descriptor_set, 1, 0, vk::DescriptorType::eSampledImage, image_info); // One set for the sampled image std::array write_descriptor_sets = {{ {base_descriptor_set, 0, 0, vk::DescriptorType::eUniformBuffer, {}, buffer_descriptor}, // Binding 0 : Vertex shader uniform buffer image_write_descriptor_set // Binding 1 : Fragment shader sampled image }}; get_device()->get_handle().updateDescriptorSets(write_descriptor_sets, {}); For this sample, we then create two samplers with different filtering options: // Sets for each of the sampler descriptor_set_alloc_info.pSetLayouts = &sampler_descriptor_set_layout; for (size_t i = 0; i get_handle().allocateDescriptorSets(descriptor_set_alloc_info).front(); // Descriptor info only references the sampler vk::DescriptorImageInfo sampler_info(samplers[i]); vk::WriteDescriptorSet sampler_write_descriptor_set(sampler_descriptor_sets[i], 0, 0, vk::DescriptorType::eSampler, sampler_info); get_device()->get_handle().updateDescriptorSets(sampler_write_descriptor_set, {}); } At draw-time, the descriptor containing the sampled image is bound to set 0 and the descriptor for the currently selected sampler is bound to set 1: // Bind the uniform buffer and sampled image to set 0 draw_cmd_buffers[i].bindDescriptorSets(vk::PipelineBindPoint::eGraphics, pipeline_layout, 0, base_descriptor_set, {}); // Bind the selected sampler to set 1 draw_cmd_buffers[i].bindDescriptorSets(vk::PipelineBindPoint::eGraphics, pipeline_layout, 1, sampler_descriptor_sets[selected_sampler], {}); ... draw_cmd_buffers[i].drawIndexed(index_count, 1, 0, 0, 0); There are no changes in the shader code to get it working with vulkan.hpp. With the above setup, the shader interface for the fragment shader also separates the sampler and image as two distinct uniforms: layout (set = 0, binding = 1) uniform texture2D _texture; layout (set = 1, binding = 0) uniform sampler _sampler; To sample from the image referenced by _texture, with the currently set sampler in '_sampler', we create a sampled image in the fragment shader at runtime using the sampler2D function. void main() { vec4 color = texture(sampler2D(_texture, _sampler), inUV); } For reference, a combined image and sampler setup would differ for both the application and the shader. The app would use a single descriptor of type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and set both image and sampler related values in the descriptor: // Descriptor info references image and sampler vk::DescriptorImageInfo image_info(texture.sampler, texture.view, texture.image_layout); vk::WriteDescriptorSet image_write_descriptor_set(descriptor_set, 1, {}, vk::DescriptorType::eCombinedImageSampler, image_info); The shader interface only uses one uniform for accessing the combined image and sampler and also doesn’t construct a sampler2D at runtime: layout (binding = 1) uniform sampler2D _combined_image; void main() { vec4 color = texture(_combined_image, inUV); } Compared to the separated setup, changing a sampler in this setup would either require creating multiple descriptors with each image/sampler combination or rebuilding the descriptor.","title":"Separating samplers and images with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_separate_image_sampler/README.html","titles":[{"text":"In the application","hash":"_in_the_application","id":1},{"text":"In the shader","hash":"_in_the_shader","id":2},{"text":"Comparison with combined image samplers","hash":"_comparison_with_combined_image_samplers","id":3}]},"35":{"id":35,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Terrain Tessellation that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp.","title":"Terrain Tessellation with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_terrain_tessellation/README.html","titles":[]},"36":{"id":36,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Texture loading that illustrates the usage of the C++ bindings of Vulkan provided by vulkan.hpp.","title":"Texture Loading with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_texture_loading/README.html","titles":[]},"37":{"id":37,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Texture mipmap generation that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Generates a complete texture mip-chain at runtime from a base image using image blits and proper image barriers. This examples demonstrates how to generate a complete texture mip-chain at runtime instead of loading offline generated mip-maps from a texture file. While usually not applied for textures stored on the disk (that usually have the mips generated offline and stored in the file) this technique is often used for dynamic textures like cubemaps for reflections or other render-to-texture effects. Having mip-maps for runtime generated textures offers lots of benefits, both in terms of image stability and performance. Without mip mapping the image will become noisy, especially with high frequency textures (and texture components like specular) and using mip mapping will result in higher performance due to caching. Though this example only generates one mip-chain for a single texture at the beginning this technique can also be used during normal frame rendering to generate mip-chains for dynamic textures. Some GPUs also offer asynchronous transfer queues that may be used for doing such operations in the background. To detect this, check for queue families with only the vk::QueueFlagBits::eTransfer set. Without mip mapping: Using mip mapping with a bilinear filter: Using mip mapping with an anisotropic filter: To downsample from one mip level to the next, we will be using vk::CommandBuffer::blitImage. This requires the format used to support the vk::FormatFeatureFlagBits::eBlitSrc and the vk::FormatFeatureFlagBits::eBlitDst flags. If these are not supported, the image format can’t be used to blit and you’d either have to choose a different format or use a custom shader to generate mip levels. The example uses the vk::Format::eR8G8B8A8Srgb that should support these flags on most implementations. Note: Use vk::PhysicalDevice::getFormatProperties to check if the format supports the blit flags first. Even though we’ll only upload the first mip level initially, we create the image with number of desired mip levels. The following formula is used to calculate the number of mip levels based on the max. image extent: texture.mip_levels = static_cast(floor(log2(std::max(texture.width, texture.height))) + 1); This is then passed to the image create info: vk::ImageCreateInfo image_create_info({}, vk::ImageType::e2D, format, vk::Extent3D(texture.extent, 1), texture.mip_levels, ... Setting the number of desired mip levels is necessary as this is used for allocating the correct amount of memory required by the image (vk::Device::allocateMemory). Before generating the mip-chain we need to copy the image data loaded from disk into the newly generated image. This image will be the base for our mip-chain: vk::BufferImageCopy buffer_copy_region({}, {}, {}, {vk::ImageAspectFlagBits::eColor, 0, 0, 1}, {}, vk::Extent3D(texture.extent, 1)); copy_command.copyBufferToImage(staging_buffer, texture.image, vk::ImageLayout::eTransferDstOptimal, buffer_copy_region); As we are going to blit from the base mip-level just uploaded we also need to insert an image memory barrier that transitions the image layout to vk::ImageLayout::eTransferSrcOptimal for the base mip level: image_memory_barrier = vk::ImageMemoryBarrier(vk::AccessFlagBits::eTransferWrite, vk::AccessFlagBits::eTransferRead, vk::ImageLayout::eTransferDstOptimal, vk::ImageLayout::eTransferSrcOptimal, VK_QUEUE_FAMILY_IGNORED, VK_QUEUE_FAMILY_IGNORED, texture.image, {vk::ImageAspectFlagBits::eColor, 0, 1, 0, 1}); copy_command.pipelineBarrier(vk::PipelineStageFlagBits::eTransfer, vk::PipelineStageFlagBits::eTransfer, {}, {}, {}, image_memory_barrier); There are two different ways of generating the mip-chain. The first one is to blit down the whole mip-chain from level n-1 to n, the other way would be to always use the base image and blit down from that to all levels. This example uses the first one. Note: Blitting (same for copying) images is done inside of a command buffer that has to be submitted and as such has to be synchronized before using the new image with e.g. a vk::Fence. We simply loop over all remaining mip levels (level 0 was loaded from disk) and prepare a vk::ImageBlit structure for each blit from mip level i-1 to level i. First the source for our blit. This is the previous mip level: for (int32_t i = 1; i > (i - 1)), int32_t(texture.extent.height >> (i - 1)), int32_t(1)}}}, // Destination {vk::ImageAspectFlagBits::eColor, i, 0, 1}, {{{}, {int32_t(texture.extent.width >> i), int32_t(texture.extent.height >> i), int32_t(1)}}}); } Before we can blit to this mip level, we need to transition it’s image layout to vk::ImageLayout::eTransferDstOptimal: // Prepare current mip level as image blit destination image_memory_barrier = vk::ImageMemoryBarrier({}, vk::AccessFlagBits::eTransferWrite, vk::ImageLayout::eUndefined, vk::ImageLayout::eTransferDstOptimal, VK_QUEUE_FAMILY_IGNORED, VK_QUEUE_FAMILY_IGNORED, texture.image, {vk::ImageAspectFlagBits::eColor, i, 1, 0, 1}); copy_command.pipelineBarrier(vk::PipelineStageFlagBits::eTransfer, vk::PipelineStageFlagBits::eTransfer, {}, {}, {}, image_memory_barrier); Note that we set the baseMipLevel of the subresource range to i, so the image memory barrier will only affect the one mip level we want to copy to. Now that the mip level we want to copy from and the one we’ll copy to are in the proper layout (transfer source and destination) we can issue the vk::CommandBuffer::blitImage to copy from mip level (i-1) to mip level (i): blit_command.blitImage(texture.image, vk::ImageLayout::eTransferSrcOptimal, texture.image, vk::ImageLayout::eTransferDstOptimal, image_blit, vk::Filter::eLinear); vk::CommandBuffer::blitImage does the down sampling from mip level (i-1) to mip level (i) using a linear filter, if you need better or more advanced filtering for this you need to resort to using custom shaders for generating the mip chain instead of blitting. After the blit is done we can use this mip level as a base for the next level, so we transition the layout from vk::ImageLayout::eTransferDstOptimal to vk::ImageLayout::eTransferSrcOptimal so we can use this level as transfer source for the next level: image_memory_barrier = vk::ImageMemoryBarrier(vk::AccessFlagBits::eTransferWrite, vk::AccessFlagBits::eTransferRead, vk::ImageLayout::eTransferDstOptimal, vk::ImageLayout::eTransferSrcOptimal, VK_QUEUE_FAMILY_IGNORED, VK_QUEUE_FAMILY_IGNORED, texture.image, {vk::ImageAspectFlagBits::eColor, i, 1, 0, 1}); copy_command.pipelineBarrier(vk::PipelineStageFlagBits::eTransfer, vk::PipelineStageFlagBits::eTransfer, {}, {}, {}, image_memory_barrier); } Once the loop is done we need to transition all mip levels of the image to their actual usage layout, which is vk::ImageLayout::eShaderReadOnlyOptimal for this example. Note that after the loop above all levels will be in the vk::ImageLayout::eTransferSrcOptimal layout allowing us to transfer the whole image with a single barrier: image_memory_barrier = vk::ImageMemoryBarrier(vk::AccessFlagBits::eTransferRead, vk::AccessFlagBits::eShaderRead, vk::ImageLayout::eTransferSrcOptimal, vk::ImageLayout::eShaderReadOnlyOptimal, VK_QUEUE_FAMILY_IGNORED, VK_QUEUE_FAMILY_IGNORED, texture.image, {vk::ImageAspectFlagBits::eColor, 0, texture.mip_levels, 0, 1}); copy_command.pipelineBarrier(vk::PipelineStageFlagBits::eTransfer, vk::PipelineStageFlagBits::eFragmentShader, {}, {}, {}, image_memory_barrier); Submitting that command buffer will result in an image with a complete mip-chain and all mip levels being transitioned to the proper image layout for shader reads. The Image View also requires information about how many Mip Levels are used. This is specified in the vk::ImageViewCreateInfo.subresourceRange.levelCount field. vk::ImageViewCreateInfo image_view_create_info({}, texture.image, vk::ImageViewType::e2D, format, {vk::ComponentSwizzle::eR, vk::ComponentSwizzle::eG, vk::ComponentSwizzle::eB, vk::ComponentSwizzle::eA}, {vk::ImageAspectFlagBits::eColor, 0, texture.mip_levels, 0, 1}); texture.view = get_device()->get_handle().createImageView(image_view_create_info);","title":"Run-time mip-map generation with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_texture_mipmap_generation/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Comparison","hash":"_comparison","id":2},{"text":"Requirements","hash":"_requirements","id":3},{"text":"Points of interest","hash":"_points_of_interest","id":4},{"text":"Image setup","hash":"_image_setup","id":5},{"text":"Upload base mip level","hash":"_upload_base_mip_level","id":6},{"text":"Prepare base mip level","hash":"_prepare_base_mip_level","id":7},{"text":"Generating the mip-chain","hash":"_generating_the_mip_chain","id":8},{"text":"Final image layout transitions","hash":"_final_image_layout_transitions","id":9},{"text":"Image View creation","hash":"_image_view_creation","id":10}]},"38":{"id":38,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the API sample Timestamp queries that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. This tutorial, along with the accompanying example code, shows how to use timestamp queries to measure timings on the GPU. The sample, based on the HDR one, does multiple render passes and will use timestamp queries to get GPU timings for the different render passes. This is done by writing GPU timestamps at certain points within a command buffer. These can then be read on the host and used for approximate profiling and to e.g. improve performance where needed. Vulkan offers several query types that allow you to query different types of information from the GPU. One such query type is the timestamp query. This provides your application with a mechanism to time the execution of commands on the GPU. As with the other query types, a query pool is then used to either directly fetch or copy over the results to the host. It’s important to know that timestamp queries differ greatly from how timing can be done on the CPU with e.g. the high performance counter. This is mostly due to how a GPU’s dispatches, overlaps and finishes work across different stages of the pipeline. So while technically you can specify any pipeline stage at which the timestamp should be written, a lot of stage combinations and orderings won’t give meaningful result. This also means that you can’t compare timestamps taken on different queues. So while it may may sound reasonable to write timestamps for the vertex and fragment shader stage directly one after another, that will usually not return meaningful results due to how the GPU works. And so for this example, we take the same approach as some popular CPU/GPU profilers by only using the top and bottom stages of the pipeline. This combination is known to give proper approximate timing results on most GPUs. Not all GPUs support timestamp queries, so before using them we need to make sure that they can be used. This differs slightly from checking other features with a simple vk::Bool. Here we need to check if the timestampPeriod limit of the physical device is greater than zero. If that’s the case, timestamp queries are supported: vk::PhysicalDeviceLimits const &device_limits = device->get_gpu().get_properties().limits; if (device_limits.timestampPeriod == 0) { throw std::runtime_error{\"The selected device does not support timestamp queries!\"}; } Another limit we need to check is timestampComputeAndGraphics. If this is true, all graphics and compute pipelines support timestamp queries and the above check is sufficient. If not, we need to check if the queue we want to use supports timestamps: if (!device_limits.timestampComputeAndGraphics) { // Check if the graphics queue used in this sample supports time stamps vk::QueueFamilyProperties const &graphics_queue_family_properties = device->get_suitable_graphics_queue().get_properties(); if (graphics_queue_family_properties.timestampValidBits == 0) { throw std::runtime_error{\"The selected graphics queue family does not support timestamp queries!\"}; } } As with all query types, we first need to create a pool for the timestamp queries. This is used to store and read back the results (see prepare_time_stamp_queries): vk::QueryPoolCreateInfo query_pool_create_info({}, vk::QueryType::eTimestamp, static_cast(time_stamps.size())); time_stamps_query_pool = get_device()->get_handle().createQueryPool(query_pool_create_info); The interesting parts are the queryType, which we set to vk::QueryType::eTimestamp for using timestamp queries and the queryCount, which is the maximum number of the the timestamp query result this pool can store. For this sample we’ll be using 6 time points, one for the start and one for the end of three render passes. Before we can start writing data to the query pool, we need to reset it. When using Vulkan 1.0 or 1.1, this requires us to enable the VK_EXT_host_query_reset extension: add_device_extension(VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME); With using Vulkan 1.2 this extension has become part of the core and we won’t have to manually enable it. Independent of this, we also need to enable the hostQueryReset physical device feature: auto &requested_extension_features = gpu.request_extension_features(); requested_extension_features.hostQueryReset = true; With features and extensions properly enabled, we can now reset the pool at the start of the command buffer, before writing the first timestamp. This is done using vk::CommandBuffer::resetQueryPool: ... command_buffer.begin(command_buffer_begin_info); command_buffer.resetQueryPool(time_stamps_query_pool, 0, static_cast(time_stamps.size())); Unlike getting CPU side timing information that can be queried immediately, with GPU time stamps we need to tell the implementation inside a command buffer when/where to write timestamps instead. The results are then fetched afterwards (see below). This is done inside the command buffer with vk::CommandBuffer::writeTimestamp. This function will request a timestamp to be written from the GPU for a certain pipeline stage and write that value to memory. The most interesting part of calling this function is the pipelineStage argument. As noted earlier, it’s technically possible to use any pipeline stage in here, not all pipeline stages will yield proper results due to how GPUs overlap work. It’s also important to note that not all implementations are able to latch timers at all pipeline stages (e.g. if they don’t have hardware that maps to a given stage) and may return timers at a later pipeline stage instead. Calling this function also defines an execution dependency similar to a barrier on all commands that were submitted before it. command_buffer.writeTimestamp(vk::PipelineStageFlagBits::eTopOfPipe, time_stamps_query_pool, 0); // Do some work for (int i = 0; i get_handle().getQueryPoolResults(time_stamps_query_pool, 0, count, time_stamps.size() * sizeof(uint64_t), time_stamps.data(), sizeof(uint64_t), vk::QueryResultFlagBits::e64 | vk::QueryResultFlagBits::eWait); Most arguments are straightforward, e.g. where the data will be copied to (the time_stamps vector). The important part here are the `vk::QueryResultFlags ` flags used here. vk::QueryResultFlagBits::e64 will tell the api that we want to get the results as 64 bit values. Without this flag, we would only get 32 bit values. And since timestamp queries can operate in nanoseconds, only using 32 bits could result into an overflow. E.g. if your device has a timestampPeriod of 1, so that one increment in the result maps to exactly one nanosecond, with 32 bit precision you’d run into such an overflow after only about 0.43 seconds. The vk::QueryResultFlagBits::eWait bit then tells the api to wait for all results to be available. So when using this flag the values written to our time_stamps vector is guaranteed to be available after calling vk::Device::getQueryPoolResults. This is fine for our use-case where we want to immediately access the results, but may introduce unnecessary stalls in other scenarios. Alternatively you can use the vk::QueryResultFlagBits::eWithAvailability flag, which will let you poll the availability of the results and defer writing new timestamps until the results are available. This should be the preferred way of fetching the results in a real-world application. Using this flag an additional availability value is inserted after each query value. If that value becomes non-zero, the result is available. You then check availability before writing the timestamp again. Here is a basic example of how this could look like for a single timestamp value: // time_stamp_with_availibility[current_frame * 2] contains the queried timestamp // time_stamp_with_availibility[current_frame * 2 + 1] contains availability of the timestamp std::array time_stamp_with_availibility{}; void drawFrame() { command_buffer.begin(command_buffer_begin_info); // Only write new timestamp if previous result is available if (time_stamp_with_availibility[current_frame * 2 + 1] != 0) { command_buffer.writeTimestamp(vk::PipelineStageFlagBits::eTopOfPipe, time_stamps_query_pool, 0); } // Issue draw commands command_buffer.end(); // Get deferred time stamp query for the current frame vk::Result result = device.getQueryPoolResults(time_stamps_query_pool, 0, 1, 2 * sizeof(uint64_t), &time_stamp_with_availibility[current_frame * max_frames_in_flight], 2 * sizeof(uint64_t), vk::QueryResultFlagBits::e64 | vk::QueryResultFlagBits::eWithAvailability); assert(result == vk::Result::eSuccess); // Display time stamp for the current frame if available if (time_stamp_with_availibility[current_frame * 2 + 1] != 0) { std::cout get_gpu().get_properties().limits; float delta_in_ms = float(time_stamps[1] - time_stamps[0]) * device_limits.timestampPeriod / 1000000.0f; The VK_KHR_synchronization2 extension introduced vk::CommandBuffer::writeTimestamp2. This is pretty much the same as the vk::CommandBuffer::writeTimestamp function used in this sample, but adds support for some additional pipeline stages using vk::PipelineStageFlags2. Even though timestamp queries are limited due to how a GPU works, they can still be useful for profiling and finding performance GPU bottlenecks. ul for profiling and finding performance GPU bottlenecks.","title":"Timestamp queries with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/hpp_timestamp_queries/README.html","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"A few important notes on timestamp queries","hash":"_a_few_important_notes_on_timestamp_queries","id":2},{"text":"Checking for support","hash":"_checking_for_support","id":3},{"text":"Creating the query pool","hash":"_creating_the_query_pool","id":4},{"text":"Resetting the query pool","hash":"_resetting_the_query_pool","id":5},{"text":"Writing time stamps","hash":"_writing_time_stamps","id":6},{"text":"Getting the results","hash":"_getting_the_results","id":7},{"text":"Interpreting the results","hash":"_interpreting_the_results","id":8},{"text":"vk::CommandBuffer::writeTimestamp2","hash":"_vkcommandbufferwritetimestamp2","id":9},{"text":"Verdict","hash":"_verdict","id":10}]},"39":{"id":39,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Uses the instancing feature for rendering many instances of the same mesh from a single vertex buffer with variable parameters and textures.","title":"Instancing","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/instancing/README.html","titles":[]},"40":{"id":40,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample implements an order-independent transparency (OIT) algorithm using depth peeling. It renders a single torus whose opacity can be controlled via the UI. It produces pixel-perfect results. It is based on the original paper from Cass Everitt. The OIT algorithm consists of several gather passes followed by one combine pass. Each gather pass renders one layer of transparent geometry. The first pass renders the first layer, the second pass the second layer, etc. The Nth layer consists of all the Nth fragments of each pixel when the fragments are ordered from front to back. The combine pass is a screen-space operation. It merges the layer images from back to front to produce the final result. The algorithm can produce pixel-perfect results, even with intersecting geometry. When there are more geometry layers than gather passes, the backmost layers get skipped, but the visual results stay stable (i.e. no flickering pixels). Option Description Comments Camera auto-rotation Enable the automatic rotation of the camera Background grayscale Specify the grayscale value by which the background color is multiplied (0.0 to 1.0) Object alpha Specify the opacity of the transparent object (0.0 to 1.0) Front layer index The first layer to be rendered (0 to 7). Back layer index The last layer to be rendered (0 to 7). This cannot be less that the front layer index.","title":"Order-independent transparency with depth peeling","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/oit_depth_peeling/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Algorithm","hash":"_algorithm","id":2},{"text":"Options","hash":"_options","id":3}]},"41":{"id":41,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample implements an order-independent transparency (OIT) algorithm using per-pixel ordered linked lists. It renders 64 spheres with random color and opacity (from 0.2 to 1.0). It produces pixel-perfect results. The OIT algorithm consists of two passes: the gather pass and the combine pass. During the gather pass, the transparent geometry is rendered into per-pixel order linked lists. Each fragment color and depth is pushed into the linked list associated with its destination pixel. The linked lists head are stored into a storage image that is the size of the screen. The fragment data (color and depth) is stored into a storage buffer shared by all linked lists. The combine pass is a screen-space operation. For each pixel, it sorts the fragments stored in the linked list of that pixel. It then alpha blends (in the shader code) them to produce the final transparent color and coverage. Finally, it alpha blends (via the fixed blend function) the transparent color into the backbuffer. The algorithm can produce pixel-perfect results, even with intersecting geometry. However, there is a catch. To keep performance high, the maximum number of sorted fragments per-pixel is limited to 16. For more than 16 fragments, the algorithm does its best effort to blend the extra fragments, but the results might be inaccurate. This is well enough for the sample, due to the way the objects are placed in the scene. In general, there is a trade-off between performance and correctness. To keep occupancy high, the maximum number of sorted fragments (SORTED_FRAGMENT_MAX_COUNT in combine.frag) should be kept low. To get correct results in every situation, that same number should be as high as possible. The artifacts resulting from a low number of sorted fragments per pixel can be observed by using the Sorted fragments per pixel option. Option Description Comments Sort fragments Enable fragment sorting in the combine pass This option, when disabled, is meant to demonstrate the visual issues that occur with non-sorted transparent geometry. Camera auto-rotation Enable the automatic rotation of the camera Sorted fragments per pixel Specify the maximum number of fragments sorted per pixel This option, when set to a low number (e.g. 4), highlights the main weakness of the algorithm. Background grayscale Specify the grayscale value by which the background color is multiplied (0.0 to 1.0) This sample was tested on Windows. The validation layers were enabled and all reported issues were fixed. The sample was also tested on Linux during development. Both systems featured an AMD GPU.","title":"Order-independent transparency with per-pixel ordered linked lists","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/oit_linked_lists/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Algorithm","hash":"_algorithm","id":2},{"text":"Options","hash":"_options","id":3},{"text":"Tests","hash":"_tests","id":4}]},"42":{"id":42,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This tutorial, along with the accompanying example code, shows how to separate samplers and images in a Vulkan application. Opposite to combined image and samplers, this allows the application to freely mix an arbitrary set of samplers and images in the shader. In the sample code, a single image and multiple samplers with different options will be created. The sampler to be used for sampling the image can then be selected at runtime. As image and sampler objects are separated, this only requires selecting a different descriptor at runtime. From the application’s point of view, images and samplers are always created separately. Access to the image is done via the image’s VkImageView. Samplers are created using a VkSampler object, specifying how an image will be sampled. The difference between separating and combining them starts at the descriptor level, which defines how the shader accesses the samplers and images. A separate setup uses a descriptor of type VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE for the sampled image, and a VK_DESCRIPTOR_TYPE_SAMPLER for the sampler, separating the image and sampler object: // Image info only references the image VkDescriptorImageInfo image_info{}; image_info.imageView = texture.image->get_vk_image_view().get_handle(); image_info.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL; // Sampled image descriptor VkWriteDescriptorSet image_write_descriptor_set{}; image_write_descriptor_set.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET; image_write_descriptor_set.dstSet = base_descriptor_set; image_write_descriptor_set.dstBinding = 1; image_write_descriptor_set.descriptorCount = 1; image_write_descriptor_set.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE; image_write_descriptor_set.pImageInfo = &image_info; // One set for the sampled image std::vector write_descriptor_sets = { ... // Binding 1 : Fragment shader sampled image image_write_descriptor_set}; vkUpdateDescriptorSets(get_device().get_handle(), static_cast(write_descriptor_sets.size()), write_descriptor_sets.data(), 0, nullptr); For this sample, we then create two samplers with different filtering options: // Sets for each of the sampler descriptor_set_alloc_info.pSetLayouts = &sampler_descriptor_set_layout; for (size_t i = 0; i < sampler_descriptor_sets.size(); i++) { VK_CHECK(vkAllocateDescriptorSets(get_device().get_handle(), &descriptor_set_alloc_info, &sampler_descriptor_sets[i])); // Descriptor info only references the sampler VkDescriptorImageInfo sampler_info{}; sampler_info.sampler = samplers[i]; VkWriteDescriptorSet sampler_write_descriptor_set{}; sampler_write_descriptor_set.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET; sampler_write_descriptor_set.dstSet = sampler_descriptor_sets[i]; sampler_write_descriptor_set.dstBinding = 0; sampler_write_descriptor_set.descriptorCount = 1; sampler_write_descriptor_set.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLER; sampler_write_descriptor_set.pImageInfo = &sampler_info; vkUpdateDescriptorSets(get_device().get_handle(), 1, &sampler_write_descriptor_set, 0, nullptr); } At draw-time, the descriptor containing the sampled image is bound to set 0 and the descriptor for the currently selected sampler is bound to set 1: // Base descriptor with the image to be sampled in set 0 vkCmdBindDescriptorSets(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 0, 1, &base_descriptor_set, 0, nullptr); // Descriptor for the selected sampler in set 1 vkCmdBindDescriptorSets(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 1, 1, &sampler_descriptor_sets[selected_sampler], 0, nullptr); ... vkCmdDrawIndexed(draw_cmd_buffers[i], index_count, 1, 0, 0, 0); With the above setup, the shader interface for the fragment shader also separates the sampler and image as two distinct uniforms: layout (set = 0, binding = 1) uniform texture2D _texture; layout (set = 1, binding = 0) uniform sampler _sampler; To sample from the image referenced by _texture, with the currently set sampler in '_sampler', we create a sampled image in the fragment shader at runtime using the sampler2D function. void main() { vec4 color = texture(sampler2D(_texture, _sampler), inUV); } For reference, a combined image and sampler setup would differ for both the application and the shader. The app would use a single descriptor of type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and set both image and sampler related values in the descriptor: // Descriptor info references image and sampler VkDescriptorImageInfo image_info; image_info.imageView = texture.view; image_info.sampler = texture.sampler; image_info.imageLayout = texture.image_layout; VkWriteDescriptorSet image_write_descriptor_set{}; image_write_descriptor_set.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET; image_write_descriptor_set.dstSet = descriptor_set; image_write_descriptor_set.dstBinding = 0; image_write_descriptor_set.descriptorCount = 1; image_write_descriptor_set.descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER; image_write_descriptor_set.pImageInfo = &image_info; The shader interface only uses one uniform for accessing the combined image and sampler and also doesn’t construct a sampler2D at runtime: layout (binding = 1) uniform sampler2D _combined_image; void main() { vec4 color = texture(_combined_image, inUV); } Compared to the separated setup, changing a sampler in this setup would either require creating multiple descriptors with each image/sampler combination or rebuilding the descriptor.","title":"Separating samplers and images","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/separate_image_sampler/README.html","titles":[{"text":"In the application","hash":"_in_the_application","id":1},{"text":"In the shader","hash":"_in_the_shader","id":2},{"text":"Comparison with combined image samplers","hash":"_comparison_with_combined_image_samplers","id":3}]},"43":{"id":43,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A sample that implements best practices in handling present resources and swapchain recreation, for example due to window resizing or present mode changes. Before VK_EXT_swapchain_maintenance1, there is no straightforward way to tell when a semaphore associated with a present operation can be recycled, or when a retired swapchain can be destroyed. Both these operations depend on knowing when the presentation engine has acquired a reference to these resources as part of the present job, for which there is no indicator. In this sample, a workaround is implemented where a fence signaled by vkAcquireNextImageKHR is used to determine when the previous present job involving the same image index has been completed. This is often much later than the point where the present resources can be freed. Take the following shorthand notation: PE: Presentation Engine ANI: vkAcquireNextImageKHR QS: vkQueueSubmit QP: vkQueuePresentKHR W: Wait S: Signal R: Render P: Present SN: Semaphore N IN: Swapchain image N FN: Fence N Assuming both ANI calls below return the same index: CPU: ANI ... QS ... QP ANI ... QS ... QP S:S1 W:S1 W:S2 S:S3 W:S3 W:S4 S:F1 S:S2 S:F2 S:S4 GPU: PE: The following holds: F2 is signaled => The PE has handed the image to the application => The PE is no longer presenting the image (the first P operation is finished) => The PE is done waiting on S2 At this point, we can destroy or recycle S2. To implement this, a history of present operations is maintained, which includes the wait semaphore used with that presentation. Associated with each present operation, is a fence that is used to determine when that semaphore can be destroyed. Since the fence is not actually known at present time (QP), the present operation is kept in history without an associated fence. Once ANI returns the same index, the fence given to ANI is associated with the previous QP of that index. After each present call, the present history is inspected. Any present operation whose fence is signaled is cleaned up. When recreating the swapchain, all images are eventually freed and new ones are created, possibly with a different count and present mode. For the old swapchain, we can no longer rely on a future ANI to know when a previous presentation’s semaphore can be destroyed, as there won’t be any more acquisitions from the old swapchain. Similarly, we cannot know when the old swapchain itself can be destroyed. This issue is resolved by deferring the destruction of the old swapchain and its remaining present semaphores to the time when the semaphore corresponding to the first present of the new swapchain can be destroyed. Because once the first present semaphore of the new swapchain can be destroyed, the first present operation of the new swapchain is done, which means the old swapchain is no longer being presented. Note that the swapchain may be recreated without a second acquire. This means that the swapchain could be recreated while there are pending old swapchains to be destroyed. The destruction of both old swapchains must now be deferred to when the first QP of the new swapchain has been processed. If an application resizes the window constantly and at a high rate, we would keep accumulating old swapchains and not free them until it stops. With the VK_EXT_swapchain_maintenance1, all the above is unnecessary. Each QP operation can have an associated fence, which can be used to know when the semaphore associated with it can be recycled. The old swapchains can be destroyed at the same time as before.","title":"Swapchain Recreation","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/swapchain_recreation/README.html","titles":[{"text":"Swapchain recreation","hash":"_swapchain_recreation","id":1},{"text":"VK_EXT_swapchain_maintenance1","hash":"_vk_ext_swapchain_maintenance1","id":2}]},"44":{"id":44,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Uses a tessellation shader for rendering a terrain with dynamic level-of-detail and frustum culling.","title":"Terrain Tessellation","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/terrain_tessellation/README.html","titles":[]},"45":{"id":45,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Loading and rendering of a 2D texture map from a file.","title":"Texture loading","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/texture_loading/README.html","titles":[]},"46":{"id":46,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Generates a complete texture mip-chain at runtime from a base image using image blits and proper image barriers. This examples demonstrates how to generate a complete texture mip-chain at runtime instead of loading offline generated mip-maps from a texture file. While usually not applied for textures stored on the disk (that usually have the mips generated offline and stored in the file) this technique is often used for dynamic textures like cubemaps for reflections or other render-to-texture effects. Having mip-maps for runtime generated textures offers lots of benefits, both in terms of image stability and performance. Without mip mapping the image will become noisy, especially with high frequency textures (and texture components like specular) and using mip mapping will result in higher performance due to caching. Though this example only generates one mip-chain for a single texture at the beginning this technique can also be used during normal frame rendering to generate mip-chains for dynamic textures. Some GPUs also offer asynchronous transfer queues that may be used for doing such operations in the background. To detect this, check for queue families with only the VK_QUEUE_TRANSFER_BIT set. Without mip mapping: Using mip mapping with a bilinear filter: Using mip mapping with an anisotropic filter: To downsample from one mip level to the next, we will be using vkCmdBlitImage. This requires the format used to support the BLIT_SRC_BIT and the BLIT_DST_BIT flags. If these are not supported, the image format can’t be used to blit and you’d either have to choose a different format or use a custom shader to generate mip levels. The example uses the VK_FORMAT_R8G8B8A8_SRGB that should support these flags on most implementations. Note: Use vkGetPhysicalDeviceFormatProperties to check if the format supports the blit flags first. Even though we’ll only upload the first mip level initially, we create the image with number of desired mip levels. The following formula is used to calculate the number of mip levels based on the max. image extent: texture.mip_levels = static_cast(floor(log2(std::max(texture.width, texture.height))) + 1); This is then passed to the image creat info: VkImageCreateInfo image_create_info = vkb::initializers::image_create_info(); image_create_info.imageType = VK_IMAGE_TYPE_2D; image_create_info.format = format; image_create_info.mipLevels = texture.mip_levels; Setting the number of desired mip levels is necessary as this is used for allocating the correct amount of memory required the image (vkAllocateMemory). Before generating the mip-chain we need to copy the image data loaded from disk into the newly generated image. This image will be the base for our mip-chain: VkBufferImageCopy buffer_copy_region = {}; buffer_copy_region.imageSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT; buffer_copy_region.imageSubresource.mipLevel = 0; buffer_copy_region.imageSubresource.baseArrayLayer = 0; buffer_copy_region.imageSubresource.layerCount = 1; buffer_copy_region.imageExtent.width = texture.width; buffer_copy_region.imageExtent.height = texture.height; buffer_copy_region.imageExtent.depth = 1; vkCmdCopyBufferToImage(copy_command, staging_buffer, texture.image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &buffer_copy_region); As we are going to blit from the base mip-level just uploaded we also need to insert an image memory barrier that transitions the image layout to TRANSFER_SRC for the base mip level: vkb::insert_image_memory_barrier( copy_command, texture.image, VK_ACCESS_TRANSFER_WRITE_BIT, VK_ACCESS_TRANSFER_READ_BIT, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, {VK_IMAGE_ASPECT_COLOR_BIT, 0, 1, 0, 1}); There are two different ways of generating the mip-chain. The first one is to blit down the whole mip-chain from level n-1 to n, the other way would be to always use the base image and blit down from that to all levels. This example uses the first one. Note: Blitting (same for copying) images is done inside of a command buffer that has to be submitted and as such has to be synchronized before using the new image with e.g. a vkFence. We simply loop over all remaining mip levels (level 0 was loaded from disk) and prepare a VkImageBlit structure for each blit from mip level i-1 to level i. First the source for our blit. This is the previous mip level. The dimensions of the blit source are specified by srcOffset: for (int32_t i = 1; i > (i - 1)); image_blit.srcOffsets[1].y = int32_t(texture.height >> (i - 1)); image_blit.srcOffsets[1].z = 1; } Setup for the destination mip level (1), with the dimensions for the blit destination specified in dstOffsets[1]: // Destination image_blit.dstSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT; image_blit.dstSubresource.layerCount = 1; image_blit.dstSubresource.mipLevel = i; image_blit.dstOffsets[1].x = int32_t(texture.width >> i); image_blit.dstOffsets[1].y = int32_t(texture.height >> i); image_blit.dstOffsets[1].z = 1; Before we can blit to this mip level, we need to transition it’s image layout to TRANSFER_DST: // Prepare current mip level as image blit destination vkb::insert_image_memory_barrier( blit_command, texture.image, 0, VK_ACCESS_TRANSFER_WRITE_BIT, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, {VK_IMAGE_ASPECT_COLOR_BIT, i, 1, 0, 1}); Note that we set the baseMipLevel of the subresource range to i, so the image memory barrier will only affect the one mip level we want to copy to. Now that the mip level we want to copy from and the one we’ll copy to are in the proper layout (transfer source and destination) we can issue the vkCmdBlitImage to copy from mip level (i-1) to mip level (i): vkCmdBlitImage( blit_command, texture.image, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, texture.image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &image_blit, VK_FILTER_LINEAR); vkCmdBlitImage does the down sampling from mip level (i-1) to mip level (i) using a linear filter, if you need better or more advanced filtering for this you need to resort to using custom shaders for generating the mip chain instead of blitting. After the blit is done we can use this mip level as a base for the next level, so we transition the layout from TRANSFER_DST_OPTIMAL to TRANSFER_SRC_OPTIMAL so we can use this level as transfer source for the next level: vkb::insert_image_memory_barrier( blit_command, texture.image, VK_ACCESS_TRANSFER_WRITE_BIT, VK_ACCESS_TRANSFER_READ_BIT, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, {VK_IMAGE_ASPECT_COLOR_BIT, i, 1, 0, 1}); } Once the loop is done we need to transition all mip levels of the image to their actual usage layout, which is SHADER_READ for this example. Note that after the loop above all levels will be in the TRANSER_SRC layout allowing us to transfer the whole image with a single barrier: vkb::insert_image_memory_barrier( blit_command, texture.image, VK_ACCESS_TRANSFER_READ_BIT, VK_ACCESS_SHADER_READ_BIT, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, {VK_IMAGE_ASPECT_COLOR_BIT, 0, texture.mip_levels, 0, 1}); Submitting that command buffer will result in an image with a complete mip-chain and all mip levels being transitioned to the proper image layout for shader reads. The Image View also requires information about how many Mip Levels are used. This is specified in the VkImageViewCreateInfo.subresourceRange.levelCount field. VkImageViewCreateInfo view = vkb::initializers::image_view_create_info(); view.image = texture.image; view.viewType = VK_IMAGE_VIEW_TYPE_2D; view.format = format; view.components = {VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A}; view.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT; view.subresourceRange.baseMipLevel = 0; view.subresourceRange.baseArrayLayer = 0; view.subresourceRange.layerCount = 1; view.subresourceRange.levelCount = texture.mip_levels; VK_CHECK(vkCreateImageView(device->get_handle(), &view, nullptr, &texture.view));","title":"Run-time mip-map generation","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/texture_mipmap_generation/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Comparison","hash":"_comparison","id":2},{"text":"Requirements","hash":"_requirements","id":3},{"text":"Points of interest","hash":"_points_of_interest","id":4},{"text":"Image setup","hash":"_image_setup","id":5},{"text":"Upload base mip level","hash":"_upload_base_mip_level","id":6},{"text":"Prepare base mip level","hash":"_prepare_base_mip_level","id":7},{"text":"Generating the mip-chain","hash":"_generating_the_mip_chain","id":8},{"text":"Final image layout transitions","hash":"_final_image_layout_transitions","id":9},{"text":"Image View creation","hash":"_image_view_creation","id":10}]},"47":{"id":47,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This tutorial, along with the accompanying example code, shows how to use timestamp queries to measure timings on the GPU. The sample, based on the HDR one, does multiple render passes and will use timestamp queries to get GPU timings for the different render passes. This is done by writing GPU timestamps at certain points within a command buffer. These can then be read on the host and used for approximate profiling and to e.g. improve performance where needed. Vulkan offers several query types that allow you to query different types of information from the GPU. One such query type is the timestamp query. This provides your application with a mechanism to time the execution of commands on the GPU. As with the other query types, a query pool is then used to either directly fetch or copy over the results to the host. It’s important to know that timestamp queries differ greatly from how timing can be done on the CPU with e.g. the high performance counter. This is mostly due to how a GPU’s dispatches, overlaps and finishes work across different stages of the pipeline. So while technically you can specify any pipeline stage at which the timestamp should be written, a lot of stage combinations and orderings won’t give meaningful result. This also means that you you can’t compare timestamps taken on different queues. So while it may may sound reasonable to write timestamps for the vertex and fragment shader stage directly one after another, that will usually not return meaningful results due to how the GPU works. And so for this example, we take the same approach as some popular CPU/GPU profilers by only using the top and bottom stages of the pipeline. This combination is known to give proper approximate timing results on most GPUs. Not all GPUs support timestamp queries, so before using them we need to make sure that they can be used. This differs slightly from checking other features with a simple VkBool. Here we need to check if the timestampPeriod limit of the physical device is greater than zero. If that’s the case, timestamp queries are supported: VkPhysicalDeviceLimits device_limits = device->get_gpu().get_properties().limits; if (device_limits.timestampPeriod == 0) { throw std::runtime_error{\"The selected device does not support timestamp queries!\"}; } Another limit we need to check is timestampComputeAndGraphics. If this is VK_TRUE, all graphics and compute pipelines support timestamp queries and the above check is sufficient. If not, we need to check if the queue we want to use supports timestamps: if (!device_limits.timestampComputeAndGraphics) { // Check if the graphics queue used in this sample supports time stamps VkQueueFamilyProperties graphics_queue_family_properties = device->get_suitable_graphics_queue().get_properties(); if (graphics_queue_family_properties.timestampValidBits == 0) { throw std::runtime_error{\"The selected graphics queue family does not support timestamp queries!\"}; } } As with all query types, we first need to create a pool for the timestamp queries. This is used to store and read back the results (see prepare_time_stamp_queries): VkQueryPoolCreateInfo query_pool_info{}; query_pool_info.sType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO; query_pool_info.queryType = VK_QUERY_TYPE_TIMESTAMP; query_pool_info.queryCount = static_cast(time_stamps.size()); VK_CHECK(vkCreateQueryPool(device->get_handle(), &query_pool_info, nullptr, &query_pool_timestamps)); The interesting parts are the queryType, which we set to VK_QUERY_TYPE_TIMESTAMP for using timestamp queries and the queryCount, which is the maximum number of the the timestamp query result this pool can store. For this sample we’ll be using 6 time points, one for the start and one for the end of three render passes. Before we can start writing data to the query pool, we need to reset it. When using Vulkan 1.0 or 1.1, this requires us to enable the VK_EXT_host_query_reset extension: add_device_extension(VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME); With using Vulkan 1.2 this extension has become part of the core and we won’t have to manually enable it. Independent of this, we also need to enable the hostQueryReset physical device feature: auto &requested_extension_features= gpu.request_extension_features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT); requested_extension_features.hostQueryReset = VK_TRUE; With features and extensions properly enabled, we can now reset the pool at the start of the command buffer, before writing the first timestamp. This is done using vkCmdResetQueryPool: ... vkBeginCommandBuffer(draw_cmd_buffers[i], &command_buffer_begin_info); vkCmdResetQueryPool(draw_cmd_buffers[i], query_pool_timestamps, 0, static_cast(time_stamps.size())); Unlike getting CPU side timing information that can be queried immediately, with GPU time stamps we need to tell the implementation inside a command buffer when/where to write timestamps instead. The results are then fetched afterwards (see below). This is done inside the command buffer with vkCmdWriteTimestamp. This function will request a timestamp to be written from the GPU for a certain pipeline stage and write that value to memory. The most interesting part of calling this function is the pipelineStage argument. As noted earlier, it’s technically possible to use any pipeline stage in here, not all pipeline stages will yield proper results due to how GPUs overlap work. It’s also important to note that not all implementations are able to latch timers at all pipeline stages (e.g. if they don’t have hardware that maps to a given stage) and may return timers at a later pipeline stage instead. Calling this function also defines an execution dependency similar to a barrier on all commands that were submitted before it. vkCmdWriteTimestamp(draw_cmd_buffers[i], VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, query_pool_timestamps, 0); // Do some work for (int i = 0; i get_handle(), query_pool_timestamps, 0, count, time_stamps.size() * sizeof(uint64_t), time_stamps.data(), sizeof(uint64_t), VK_QUERY_RESULT_64_BIT | VK_QUERY_RESULT_WAIT_BIT); Most arguments are straightforward, e.g. where the data will be copied to (the time_stamps vector). The important part here are the VK_QUERY_RESULT_ flags used here. VK_QUERY_RESULT_64_BIT will tell the api that we want to get the results as 64 bit values. Without this flag, we would only get 32 bit values. And since timestamp queries can operate in nanoseconds, only using 32 bits could result into an overflow. E.g. if your device has a timestampPeriod of 1, so that one increment in the result maps to exactly one nanosecond, with 32 bit precision you’d run into such an overflow after only about 0.43 seconds. The VK_QUERY_RESULT_WAIT_BIT bit then tells the api to wait for all results to be available. So when using this flag the values written to our time_stamps vector is guaranteed to be available after calling vkGetQueryPoolResults. This is fine for our use-case where we want to immediately access the results, but may introduce unnecessary stalls in other scenarios. Alternatively you can use the VK_QUERY_RESULT_WITH_AVAILABILITY_BIT flag, which will let you poll the availability of the results and defer writing new timestamps until the results are available. This should be the preferred way of fetching the results in a real-world application. Using this flag an additional availability value is inserted after each query value. If that value becomes non-zero, the result is available. You then check availability before writing the timestamp again. Here is a basic example of how this could look like for a single timestamp value: // time_stamp_with_availibility[current_frame * 2] contains the queried timestamp // time_stamp_with_availibility[current_frame * 2 + 1] contains availability of the timestamp std::array time_stamp_with_availibility{}; void drawFrame() { vkBeginCommandBuffer(command_buffer, &command_buffer_begin_info); // Only write new timestamp if previous result is available if (time_stamp_with_availibility[current_frame * 2 + 1] != 0) { vkCmdWriteTimestamp(command_buffer, VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, query_pool_timestamps, 0); } // Issue draw commands vkEndCommandBuffer(command_buffer); // Get deferred time stamp query for the current frame vkGetQueryPoolResults( device, query_pool_timestamps, 0, 1, 2 * sizeof(uint64_t), &time_stamp_with_availibility[Current_frame * max_frames_in_flight], 2 * sizeof(uint64_t), VK_QUERY_RESULT_64_BIT | VK_QUERY_RESULT_WITH_AVAILABILITY_BIT); // Display time stamp for the current frame if available if (time_stamp_with_availibility[current_frame * 2 + 1] != 0) { std::cout get_gpu().get_properties().limits; float delta_in_ms = float(time_stamps[1] - time_stamps[0]) * device_limits.timestampPeriod / 1000000.0f; The VK_KHR_synchronization2 extension introduced vkCmdWriteTimestamp2. This is pretty much the same as the vkCmdWriteTimestamp function used in this sample, but adds support for some additional pipeline stages using VkPipelineStageFlags2. Even though timestamp queries are limited due to how a GPU works, they can still be useful for profiling and finding performance GPU bottlenecks. ul for profiling and finding performance GPU bottlenecks.","title":"Timestamp queries","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/api/timestamp_queries/README.html","titles":[{"text":"Introduction","hash":"_introduction","id":1},{"text":"A few important notes on timestamp queries","hash":"_a_few_important_notes_on_timestamp_queries","id":2},{"text":"Checking for support","hash":"_checking_for_support","id":3},{"text":"Creating the query pool","hash":"_creating_the_query_pool","id":4},{"text":"Resetting the query pool","hash":"_resetting_the_query_pool","id":5},{"text":"Writing time stamps","hash":"_writing_time_stamps","id":6},{"text":"Getting the results","hash":"_getting_the_results","id":7},{"text":"Interpreting the results","hash":"_interpreting_the_results","id":8},{"text":"vkCmdWriteTimestamp2","hash":"_vkcmdwritetimestamp2","id":9},{"text":"Verdict","hash":"_verdict","id":10}]},"48":{"id":48,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample is a modified version of the Mobile Nerf developed by Google. It’s based on its original source code but optimized for Vulkan. This is a different version from traditional NeRF rendering, which normally requires tracing rays (usually done via ray-marching) and querying a MLP multiple times for each ray. These many queries result in non-interactive frame rates on most of the GPUs. The mobile version uses the rasterization pipeline to render the final image; this is done via a triangle mesh and a feature texture, where each of its visible pixels are run through a small MLP (executed in the fragment shader) that converts the feature data and view direction to the corresponding output pixel color. This technique enables interactive FPS even on mobile GPUs (thus the name). Neural Radiance Fields (NeRFs) have demonstrated amazing ability to synthesize images of 3D scenes from novel views. However, they rely upon specialized volumetric rendering algorithms based on ray marching that are mismatched to the capabilities of widely deployed graphics hardware. This paper introduces a new NeRF representation based on textured polygons that can synthesize novel images efficiently with standard rendering pipelines. The NeRF is represented as a set of polygons with textures representing binary opacities and feature vectors. Traditional rendering of the polygons with a z-buffer yields an image with features at every pixel, which are interpreted by a small, view-dependent MLP running in a fragment shader to produce a final pixel color. This approach enables NeRFs to be rendered with the traditional polygon rasterization pipeline, which provides massive pixel-level parallelism, achieving interactive frame rates on a wide range of compute platforms, including mobile phones. The original source code is also licensed under Apache-2.0, all shader files used by the sample have comments to indicate changes, when applicable.","title":"Mobile NeRF","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/general/mobile_nerf/README.html","titles":[{"text":"Description: [Mobile Nerf]","hash":"_description_mobile_nerf","id":1},{"text":"Notes","hash":"_notes","id":2}]},"49":{"id":49,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Buffer device address is a very powerful and unique feature to Vulkan which is not present in any other modern graphics API. The main gist of it is that it exposes GPU virtual addresses directly to the application, and the application can then use said address to access buffer data freely through pointers rather than descriptors. What makes this feature unique is that we can place these addresses in buffers and load and store to them inside shaders, with full capability to perform pointer arithmetic and other fun tricks. To be able to grab a device address from a VkBuffer, we just need to modify our buffer creation slightly. First, the buffer must be created with SHADER_DEVICE_ADDRESS_BIT usage. VkBufferCreateInfo create_info = vkb::initializers::buffer_create_info( VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR, mesh_size); After that, the memory we bind said buffer to must be allocated with a similar flag. This time, it is a pNext struct instead. This struct is core in Vulkan 1.1, but otherwise requires the VK_KHR_device_group extension. Vulkan 1.1 should be considered a given if buffer device address is supported, so this is more of a technicality than anything else. VkMemoryAllocateFlagsInfoKHR flags_info{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR}; flags_info.flags = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR; memory_allocation_info.pNext = &flags_info; Finally, once we have allocated and bound the buffer to the memory, we can query the address. VkBufferDeviceAddressInfoKHR address_info{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR}; address_info.buffer = buffer.buffer; buffer.gpu_address = vkGetBufferDeviceAddressKHR(device, &address_info); This address works similarly to a normal addresses, and you can freely offset the VkDeviceAddress value as you see fit, as it is really just a uint64_t. There is no alignment requirement on the host. When using this pointer, you need to specify the alignment yourself, since unlike descriptors, the shader compiler won’t be able to infer anything about a raw pointer that you load from somewhere. You can now place this pointer inside another buffer and have fun. In Vulkan GLSL, we get the GL_EXT_buffer_reference extension which allows us to declare buffer blocks not as SSBOs, but faux pointer types instead. GLSL does not have true pointer types, but this is a way to introduce pointers without completely changing the language. E.g.: #extension GL_EXT_buffer_reference : require We can forward-declare types, which is nice for data structures like linked lists. layout(buffer_reference) buffer Position; We can declare a buffer type as well. This is not an SSBO declaration, but it basically declares a pointer to struct. layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer Position { vec2 positions[]; }; buffer_reference tags the type accordingly, and buffer_reference_align is used to mark that any pointer which is of this type is at least 8 byte aligned. This is required since the compiler has no idea what alignment a random pointer has. It is possible to use scalar alignments here if you need it. We can now place the Position type inside another buffer, or another buffer reference type, e.g.: layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer PositionReferences { Position buffers[]; }; Now we have a pointer to array of pointers …​ spicy! Finally, we could place a buffer reference inside push constants, an SSBO or a UBO. layout(std430, set = 0, binding = 0) readonly buffer Pointers { Positions positions[]; }; layout(std430, push_constant) uniform Registers { PositionReferences references; } registers; The size and alignment of a buffer reference is 8 bytes (64-bit). Placing pointers in push constants is an attractive way of getting direct access to buffer data since we do not require a descriptor set to access buffer data. A critical thing to note is that a raw pointer has no idea of how much memory is safe to access. Unlike SSBOs when robustness feature is enabled, you must either do range checks yourself or just not write code that relies on out-of-bounds access :) In SPIR-V we get a new storage class PhysicalStorageBuffer which represents a raw pointer to storage buffer memory. The use of physical pointers in SPIR-V can be quite useful for use cases which emit SPIR-V directly, so it is useful to know how to use this feature in the IR. Rather than the Logical addressing model, we now use the PhysicalStorageBuffer64 model, where we allow physical pointers only for the PhysicalStorageBuffer storage class. Otherwise, everything stays Logical where pointers are completely abstract. OpCapability PhysicalStorageBufferAddresses OpExtension \"SPV_KHR_physical_storage_buffer\" OpMemoryModel PhysicalStorageBuffer64 GLSL450 Explicit alignment is generally not a thing in SPIR-V, but physical storage buffer is an exception. Since the compiler has no idea what alignment a random pointer has, all uses of OpLoad or OpStore must be tagged with Aligned, e.g.: %57 = OpLoad %_ptr_PhysicalStorageBuffer_Position %56 Aligned 8 OpStore %164 %162 Aligned 8 When using Vulkan GLSL, these Aligned values are inferred from buffer_reference_align and the Offset decorations. A key aspect of buffer device address is that we gain the capability to cast pointers freely. While it is technically possible (and useful in some cases!) to \"cast pointers\" with SSBOs with clever use of aliased declarations like so: layout(set = 0, binding = 0) buffer SSBO { float v1[]; }; layout(set = 0, binding = 0) buffer SSBO2 { vec4 v4[]; }; it gets kind of hairy quickly, and not as flexible when dealing with composite types. When we have casts between integers and pointers, we get the full madness that is pointer arithmetic. Nothing stops us from doing: #extension GL_EXT_buffer_reference : require layout(buffer_reference) buffer PointerToFloat { float v; }; PointerToFloat pointer = load_pointer(); uint64_t int_pointer = uint64_t(pointer); int_pointer += offset; pointer = PointerToFloat(int_pointer); pointer.v = 42.0; In SPIR-V, this is a simple OpBitcast. Not all GPUs support 64-bit integers, so it is also possible to use uvec2 to represent pointers. This way, we can do raw pointer arithmetic in 32-bit, which might be more optimal anyways. #extension GL_EXT_buffer_reference_uvec2 : require layout(buffer_reference) buffer PointerToFloat { float v; }; PointerToFloat pointer = load_pointer(); uvec2 int_pointer = uvec2(pointer); uint carry; uint lo = uaddCarry(int_pointer.x, offset, carry); uint hi = int_pointer.y + carry; pointer = PointerToFloat(uvec2(lo, hi)); pointer.v = 42.0; The sample is a distilled demonstration of how buffer device addressing could be used to enable a more flexible vertex attribute fetch scheme. Rather than using fixed function VBOs which cannot be rebound on GPU, we could make use of buffer device address to enable a \"meshlet\" style of rendering, which is characterized by a rendering style where we chop up meshes into smaller chunks which can be culled and rendered individually. This is an attractive way of doing GPU-driven rendering. Essentially, we create a bunch of VkBuffers, where each buffer represents a separate mesh (not the most optimal approach, but a useful demonstration). A mesh has a device address (VkDeviceAddress) which we place in a separate array, which serves as a nifty way of stitching together unrelated buffers. The mesh buffers are updated in a compute shader, and subsequently read in the vertex shader. This kind of flexibility could be awkward to achieve with normal SSBOs unless everything is backed by a single VkBuffer. Of course, this is just one of many use cases for buffer device address, and was deemed to be the simplest meaningful way to demonstrate this feature. In compute, we pass down a pointer in push constants, which is a very fast way of providing shaders with a buffer as there is no descriptor set required! layout(std430, buffer_reference, buffer_reference_align = 8) writeonly buffer Position { vec2 positions[]; }; layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer PositionReferences { Position buffers[]; }; layout(push_constant) uniform Registers { PositionReferences references; float fract_time; } registers; As we can see, push constants contain a pointer which points to an array of pointers, which then point to a \"VBO\" block. We perform one large dispatch to update N different \"VBOs\" here, where each 16x16 group works with its own base pointer. The position that is computed forms a simple procedural wave pattern. The actual implementation details are not very interesting. In the vertex shader, we do our faux \"meshlet\" rendering by assigning one VBO block per gl_InstanceIndex. For multi-draw-indirect use cases, it would be natural to use gl_DrawID perhaps. layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer Position { vec2 positions[]; }; layout(std430, buffer_reference, buffer_reference_align = 8) readonly buffer PositionReferences { Position buffers[]; }; layout(push_constant) uniform Registers { mat4 view_projection; PositionReferences references; } registers; void main() { int slice = gl_InstanceIndex; // Load pointer to VBO restrict Position ptr_positions = registers.references.buffers[slice]; // Load attribute based on gl_VertexIndex. // No fixed function here! vec2 pos = ptr_positions.positions[gl_VertexIndex]; } When debugging or capturing an application that uses buffer device addresses, there are some special driver requirements that are not universally supported. Essentially, to be able to capture application buffers which contain raw pointers, we must ensure that the device address for a given buffer remains stable when the capture is replayed in a new process. Applications do not have to do anything here, since tools like RenderDoc will enable the bufferDeviceAddressCaptureReplay feature for you, and deal with all the magic associated with address capture behind the scenes. If the bufferDeviceAddressCaptureReplay is not present however, tools like RenderDoc will mask out the bufferDeviceAddress feature, so beware. Buffer device address is an extremely powerful feature which enables various use cases which were either impossible or very impractical before. e cases which were either impossible or very impractical before.","title":"Buffer device address","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/buffer_device_address/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Creating a buffer","hash":"_creating_a_buffer","id":2},{"text":"Vulkan GLSL","hash":"_vulkan_glsl","id":3},{"text":"Lack of robustness","hash":"_lack_of_robustness","id":4},{"text":"SPIR-V","hash":"_spir_v","id":5},{"text":"Addressing mode","hash":"_addressing_mode","id":6},{"text":"Alignment tags","hash":"_alignment_tags","id":7},{"text":"Casting pointers","hash":"_casting_pointers","id":8},{"text":"Casting to and from integers, pointer arithmetic","hash":"_casting_to_and_from_integers_pointer_arithmetic","id":9},{"text":"The sample","hash":"_the_sample","id":10},{"text":"Debugging notes","hash":"_debugging_notes","id":11},{"text":"Conclusion","hash":"_conclusion","id":12}]},"50":{"id":50,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates the extension VK_EXT_calibrated_timestamps. The calibrated timestamps profiles any given portion of code, unlike timestamp queries, which only profiles an entire graphic queue. To enable the VK_EXT_calibrated_timestamps extension, VK_KHR_get_physical_device_properties2 must be enabled. This sample is built upon the framework of the Vulkan Sample HDR. We demonstrate using calibrated timestamps over the build_command_buffers function. A timestamp is being sampled via the calibrated timestamp extension. In general, one must take two timestamps in order to measure the time elapsed within a block of code. Each time domain is different, and the measurement of their associated timestamp periods may vary. The precision of timestamps is calibrated by max deviations. A list of time domains can be extracted by using vkGetPhysicalDeviceCalibrateableTimeDomainsEXT. And the Vulkan time domain is defined by the enum VkTimeDomainEXT","title":"Calibrated Timestamps","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/calibrated_timestamps/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Introduction","hash":"_introduction","id":2},{"text":"* Time domain, timestamp, timestamp period, and max deviation","hash":"_time_domain_timestamp_timestamp_period_and_max_deviation","id":3},{"text":"Get time domain and timestamps","hash":"_get_time_domain_and_timestamps","id":4}]},"51":{"id":51,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use the VK_EXT_color_write_enable extension. This extension allows to toggle the output color attachments using a pipeline dynamic state. It allows the program to prepare an additional framebuffer populated with the data from a defined color blend attachment which can be blended dynamically to the final scene. The final results are comparable to those obtained with vkCmdSetColorWriteMaskEXT, but it does not require the GPU driver to support VK_EXT_extended_dynamic_state3. To use this feature, the device extension VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME has to be enabled. Support of this feature can be queried by extending the struct VkPhysicalDeviceFeatures2 in the vkGetPhysicalDeviceFeatures2 call by a VkPhysicalDeviceColorWriteEnableFeaturesEXT struct. VkPipelineColorWriteCreateInfoEXT contains an array of Boolean values that serve as toggles for the corresponding VkPipelineColorBlendAttachmentState. This array can be overwritten dynamically with the vkCmdSetColorWriteEnableEXT function. Two subpasses are performed in the sample. In the first subpass, three attachments are used. Each attachment has only one color component bit enabled - R, G and B. A triangle is drawn on each of them separately. The second subpass combines three images created in the previous pass. Checkboxes are used to toggle the vkCmdSetColorWriteEnableEXT function disabling each attachment. As a result of its disabling, the value of a given channel is set as the value of that channel in the background color. Sliders are used to set the background color. The sample shows how to setup an application to work with this extension: How to enable the extension. How to set up multiple color attachments in the color blend state. How to set up the render subpass and framebuffers for multiple color attachments. How to write a fragment shader with multiple outputs. https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_color_write_enable.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkSubpassDescription.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkFramebufferCreateInfo.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteMaskEXT.html","title":"Color write enable","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/color_write_enable/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"How to use in Vulkan","hash":"_how_to_use_in_vulkan","id":2},{"text":"The sample","hash":"_the_sample","id":3},{"text":"Documentation links","hash":"_documentation_links","id":4},{"text":"See also","hash":"_see_also","id":5}]},"52":{"id":52,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. The VK_EXT_conditional_rendering extension allows the execution of rendering commands to be conditional based on a value taken from a dedicated conditional buffer. This may help an application reduce the latency by conditionally discarding rendering commands without application intervention. This sample demonstrates usage of this extension for conditionally toggling the visibility of sub-meshes of a complex glTF model. Instead of having to update command buffers, this is done by updating the aforementioned buffer. As mentioned in the introduction a buffer is used to conditionally execute rendering and dispatch commands (for compute, which is not done in this sample). The first step is setting up this buffer. Important notes on setting up a conditional buffer: A dedicated buffer type named VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT The buffer format is fixed to consecutive 32-bit values Offset is also aligned at 32-bits The fixed alignment makes it easy to map this to C/C++ host structures: std::vector conditional_visibility_list; Setting up the buffer is no different from other buffers: conditional_visibility_buffer = std::make_unique(get_device(), sizeof(int32_t) * conditional_visibility_list.size(), VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT, VMA_MEMORY_USAGE_CPU_TO_GPU); With this we get a buffer that matches the size and layout of the host application. For simplicity we create a host visible buffer in this sample. Depending on the use-case a device local buffer would yield better performance but would also require a different update strategy The extension introduces two new functions that allow you to mark regions of a command buffer for conditional execution: // Begins a new conditional rendering block void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) // Ends the current conditional rendering block void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) Wrapping drawing and/or dispatch commands in such regions will result in them only being executed if our conditional buffer contains a non-zero value at the given offset. A basic example of this could look like this: VkConditionalRenderingBeginInfoEXT conditional_rendering_info{}; conditional_rendering_info.sType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT; conditional_rendering_info.buffer = conditional_buffer.buffer; conditional_rendering_info.offset = current_mesh_index * sizeof(int32_t); vkCmdBeginConditionalRenderingEXT(command_buffer, &conditional_rendering_info); vkCmdDrawIndexed(...); vkCmdEndConditionalRenderingEXT(command_buffer); The conditional_rendering_info structure contains the parameters used by the vkCmdBeginConditionalRenderingEXT function to determine if the commands in that region are to be executed. So for this basic example if the 32-bit conditional buffer value at the selected offset is zero, the vkCmdDrawIndexed will not be executed. Changing the buffer value at the select offset 0 to 1 and synchronizing the buffer will have the draw command executed for the next draw. Moving to the actual example we create a conditional buffer with one 32-bit value per node in the glTF scene: // Setup the host visilibty list conditional_visibility_list.resize(linear_scene_nodes.size()); std::fill(conditional_visibility_list.begin(), conditional_visibility_list.end(), 1); // Create a buffer to hold the visibility list conditional_visibility_buffer = std::make_unique(get_device(), sizeof(int32_t) * conditional_visibility_list.size(), VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT, VMA_MEMORY_USAGE_CPU_TO_GPU); // Copy the current visibility list to the dedicated buffer conditional_visibility_buffer->update(conditional_visibility_list.data(), sizeof(int32_t) * conditional_visibility_list.size()); Using this setup, each visible glTF node maps to an entry in the conditional visibility buffer by it’s unique node index, calculated as node_index * sizeof(int32_t): So we can now control draws using values stored in the conditional buffer. To do so, the command buffer iterates over all nodes of the gltF scene (put into a linear vector for convenience) and wraps the draw command for each node in a conditional rendering block, so a node is only drawn when the visibility buffer value at it’s offset equals 1: uint32_t node_index = 0; for (auto &node : linear_scene_nodes) { glm::mat4 node_transform = node.node->get_transform().get_world_matrix(); VkDeviceSize offsets[1] = {0}; const auto &vertex_buffer_pos = node.sub_mesh->vertex_buffers.at(\"position\"); const auto &vertex_buffer_normal = node.sub_mesh->vertex_buffers.at(\"normal\"); auto & index_buffer = node.sub_mesh->index_buffer; auto mat = dynamic_cast(node.sub_mesh->get_material()); // Start a conditional rendering block, commands in this block are only executed if the buffer at the current position is 1 at command buffer submission time VkConditionalRenderingBeginInfoEXT conditional_rendering_info{}; conditional_rendering_info.sType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT; conditional_rendering_info.buffer = conditional_visibility_buffer->get_handle(); // We offset into the visibility buffer based on the index of the node to be drawn conditional_rendering_info.offset = sizeof(int32_t) * node_index; vkCmdBeginConditionalRenderingEXT(draw_cmd_buffers[i], &conditional_rendering_info); // Pass data for the current node via push commands push_const_block.model_matrix = node_transform; push_const_block.color = glm::vec4(mat->base_color_factor.rgb, 1.0f); vkCmdPushConstants(draw_cmd_buffers[i], pipeline_layout, VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(push_const_block), &push_const_block); vkCmdBindVertexBuffers(draw_cmd_buffers[i], 0, 1, vertex_buffer_pos.get(), offsets); vkCmdBindVertexBuffers(draw_cmd_buffers[i], 1, 1, vertex_buffer_normal.get(), offsets); vkCmdBindIndexBuffer(draw_cmd_buffers[i], index_buffer->get_handle(), 0, node.sub_mesh->index_type); vkCmdDrawIndexed(draw_cmd_buffers[i], node.sub_mesh->vertex_indices, 1, 0, 0, 0); // End the conditional rendering block vkCmdEndConditionalRenderingEXT(draw_cmd_buffers[i]); node_index++; } With the above command buffer setup, we can toggle visibility of each node in the glTF scene by just changing the conditional buffer value at the node’s offsets.","title":"Conditional rendering","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/conditional_rendering/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Conditional buffer","hash":"_conditional_buffer","id":2},{"text":"Conditional execution","hash":"_conditional_execution","id":3}]},"53":{"id":53,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extension: VK_EXT_conservative_rasterization Uses conservative rasterization to change the way fragments are generated. Enables overestimation to generate fragments for every pixel touched instead of only pixels that are fully covered.","title":"Conservative Rasterization","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/conservative_rasterization/README.html","titles":[]},"54":{"id":54,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This tutorial, along with the accompanying example code, demonstrates the use of the VK_EXT_debug_utils extension to setup a validation layer messenger callback and pass additional debugging information to debuggers like RenderDoc. VK_EXT_debug_utils has been introduced based on feedback for the initial Vulkan debugging extensions VK_EXT_debug_report and VK_EXT_debug_marker, combining these into a single instance extensions with some added functionality. Enabling the extension is done inside the framework, see the Instance class in instance.cpp for details. Enabling the functionality for the debug utilities is done by adding the extension to the list of extensions to enable at instance level. As with all extensions, this is optional and you should check if the extension is present before enabling it. uint32_t instance_extension_count; VK_CHECK(vkEnumerateInstanceExtensionProperties(nullptr, &instance_extension_count, nullptr)); std::vector available_instance_extensions(instance_extension_count); VK_CHECK(vkEnumerateInstanceExtensionProperties(nullptr, &instance_extension_count, available_instance_extensions.data())); bool debug_utils = false; for (auto &available_extension : available_instance_extensions) { if (strcmp(available_extension.extensionName, VK_EXT_DEBUG_UTILS_EXTENSION_NAME) == 0) { debug_utils = true; extensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME); } } Validation setup is done inside the framework, see the Instance class in instance.cpp for details. After creating your instance with the VK_EXT_debug_utils extension enabled, you’ll be able to use the debug functions that it provides. Depending on the implementation and loader you’re using you may need to manually get the function pointers for these via vkGetInstanceProcAddr before you can use these. vkCreateDebugUtilsMessengerEXT is used for setting up the debug messenger callback that is triggered by the validation layers: VkDebugUtilsMessengerCreateInfoEXT debug_utils_create_info = {VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT}; debug_utils_create_info.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT; debug_utils_create_info.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT; debug_utils_create_info.pfnUserCallback = debug_utils_messenger_callback; We then pass this to the pNext member of our instance creation structure, enabling validation for instance creation and destruction: VkInstanceCreateInfo instance_create_info = {VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO}; ... instance_create_info.pNext = &debug_utils_create_info; After instance creation we can create the actual debug utils messenger callback that is invoked by the enabled validation layers: result = vkCreateDebugUtilsMessengerEXT(handle, &debug_utils_create_info, nullptr, &debug_utils_messenger); The messageSeverity member of the VkDebugUtilsMessengerCreateInfoEXT struct determines the kind of validation layer messages that are passed to the user callback: VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: Verbose messages, including diagnostic messages from loaders, layers and drivers. VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: Informational message like resource details. VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: Warnings that may hint at application side bugs and undefined behavior. VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: Errors caused by application side violation of valid usage as specified by the spec. In your typically validation setup you’d use VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT and VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT to catch bugs and errors in your application. A basic debug messenger callback may then look like this: VKAPI_ATTR VkBool32 VKAPI_CALL debug_utils_messenger_callback( VkDebugUtilsMessageSeverityFlagBitsEXT message_severity, VkDebugUtilsMessageTypeFlagsEXT message_type, const VkDebugUtilsMessengerCallbackDataEXT *callback_data, void *user_data) { if (message_severity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT) { LOGW(\"{} - {}: {}\", callback_data->messageIdNumber, callback_data->pMessageIdName, callback_data->pMessage) } else if (message_severity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT) { LOGE(\"{} - {}: {}\", callback_data->messageIdNumber, callback_data->pMessageIdName, callback_data->pMessage); } return VK_FALSE; } With the above setup, Vulkan spec violations of your application will now be reported to the standard output like this: Error: 0 - UNASSIGNED-CoreValidation-DrawState-InvalidRenderArea: Cannot execute a render pass with renderArea not within the bound of the framebuffer. RenderArea: x 0, y 0, width 1281, height 721. Framebuffer: width 1280, height 720. In this chapter we will take a look at how to pass additional information from our application to debugging tools. The debug utilities adds several functions to add debugging information to your sample application’s command buffers, queues, and all other Vulkan objects. The extension allows you to add colored labels to command buffers and queues, that work as markers inside the Vulkan Event chain. This is esp. helpful in more complex applications with multiple command buffers in flight across different queues. For comparison here is an unmarked event view from RenderDoc versus one viewed using debugging labels: Color choice aside, it’s clear that the event tree with added debug labels is much easier to navigate. There are two distinct concepts for adding labels to either a command buffer or a queue: Encapsulating labels: These are started with a begin command and closed with an end command. They encapsulate all submitted commands in between and can be arbitrarily nested. Inserting labels: Those are inserted at the exact point where the commands are submitted. Think of these as simple markers. The new functions to add such labels are: For command buffers vkCmdBeginDebugUtilsLabelEXT vkCmdEndDebugUtilsLabelEXT vkCmdInsertDebugUtilsLabelEXT For queues vkQueueBeginDebugUtilsLabelEXT vkQueueEndDebugUtilsLabelEXT vkQueueInsertDebugUtilsLabelEXT Once you start a new label via vkCmd/QueueBeginDebugUtilsLabelEXT all commands submitted to that command buffer or queue are encapsulated by that label until you end it via vkCmd/QueueEndDebugUtilsLabelEXT whereas a call to vkCmd/QueueInsertDebugUtilsLabelEXT simply inserts a marker at the current command buffer or queue command position; For convenience, the sample wraps those functions into dedicated functions. In this (simplified) code from our sample application we use encapsulating and nested labels to tag the whole separable bloom filter passes for the debugger, and also insert a marker before submitting the draw command for the bloom pass' full-screen quad: cmd_begin_label(draw_cmd_buffers[i], \"Separable bloom filter\", {0.5f, 0.76f, 0.34f, 1.0f}); cmd_begin_label(draw_cmd_buffers[i], \"Vertical bloom pass\", {0.4f, 0.61f, 0.27f, 1.0f}); vkCmdBeginRenderPass(draw_cmd_buffers[i], ...); vkCmdSetViewport(draw_cmd_buffers[i], ...); vkCmdSetScissor(draw_cmd_buffers[i], ...); vkCmdBindDescriptorSets(draw_cmd_buffers[i], ...); vkCmdBindPipeline(draw_cmd_buffers[i], ...); vkCmdDraw(draw_cmd_buffers[i], ...); vkCmdEndRenderPass(draw_cmd_buffers[i]); cmd_end_label(draw_cmd_buffers[i]); cmd_begin_label(draw_cmd_buffers[i], \"Horizontal bloom pass and composition\", {0.4f, 0.61f, 0.27f, 1.0f}); vkCmdBeginRenderPass(draw_cmd_buffers[i], ...); vkCmdSetViewport(draw_cmd_buffers[i], ...); vkCmdSetScissor(draw_cmd_buffers[i], ...); vkCmdBindDescriptorSets(draw_cmd_buffers[i], ...); vkCmdBindPipeline(draw_cmd_buffers[i], ...); vkCmdDraw(draw_cmd_buffers[i], ...); cmd_insert_label(draw_cmd_buffers[i], \"Bloom full screen quad\", {1.0f, 1.0f, 1.0f, 1.0f}); vkCmdBindPipeline(draw_cmd_buffers[i], ...); vkCmdDraw(draw_cmd_buffers[i], ...); vkCmdEndRenderPass(draw_cmd_buffers[i]); cmd_end_label(draw_cmd_buffers[i]); cmd_end_label(draw_cmd_buffers[i]); Running this in RenderDoc will display the event browser with our colored debug labels: The other important functionality of this extension is the possibility to name (and tag) all Vulkan objects in your application. This makes object identification of the resources (inside the debugger) a lot easier and will help you understand your applications structure and aid you in finding bugs and problematic behavior. Imagine you need to debug a problem with a shader module not properly working or seemingly the wrong shader used by a pipeline. Without adding names to your Vulkan objects, all your resources will have similar names auto-generated by the debugging application. In the case of RenderDoc it’s the object’s type with a continuous number: Finding \"Shader Module 257\" or any of the \"Graphics Pipeline 259/260\" in your code will prove tricky to impossible. But if you’re using the new extension to add meaningful names to your Vulkan objects, connecting the resources and finding them in your application becomes straightforward: Now you can clearly see what shader this actually is and what pipelines are using it. As an added bonus you also get named resources in the resource list, so searching for a specific resources is now also possible. This is also evident in the pipeline state, where you can now e.g. see what pipeline, shader and buffer are bound at what stage: This makes it very easy to see if the correct resources are used at that pipeline stage. (1) shows the pipeline and shader used at the vertex shader stage, and (2) lists the uniform buffer bound to set 0. The new functions to set names and tags for Vulkan objects are: vkSetDebugUtilsObjectNameEXT vkSetDebugUtilsObjectTagEXT vkSetDebugUtilsObjectNameEXT lets you add a name to any Vulkan object via it’s handle: VkDebugUtilsObjectNameInfoEXT name_info = {VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT}; name_info.objectType = VK_OBJECT_TYPE_BUFFER; name_info.objectHandle = (uint64_t) uniform_buffers.matrices.handle; name_info.pObjectName = \"Some uniform buffer\"; vkSetDebugUtilsObjectNameEXT(device, &name_info); vkSetDebugUtilsObjectTagEXT lets you add arbitrary data to any Vulkan object via it’s handle. That data may be displayed by a debugging app or your own app inside the debug messenger callback: VkDebugUtilsObjectTagInfoEXT tag_info = {VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT}; tag_info.objectType = VK_OBJECT_TYPE_SHADER_MODULE; tag_info.objectHandle = (uint64_t) shader_stage.module; tag_info.tagName = 0; tag_info.tagSize = shader_source_glsl.data_size; tag_info.pTag = &shader_source_glsl.data; vkSetDebugUtilsObjectTagEXT(device, &info); For convenience, the sample wraps those functions into dedicated functions. To see this in action, you need to run the sample application from inside a Vulkan debugger. If you’re unfamiliar with this, this is a sample setup for running our sample application from RenderDoc. The paths depend on where you have downloaded the source from this repository and the platform for which you are compiling: (1) is the binary you want to start, which depends on the platform you have compiled the samples for. (2) refers to the path that’s passed as the working directory to the binary, which must be the root path of the repository so the asset’s can be properly loaded. (3) tells the binary which sample to run. After setting these up press (4) to start the application from within RenderDoc. Once the sample application is running, press F12 do capture the current frame, close the application and then select the capture in RenderDoc. Once loaded you should be able to see a trace of a whole frame from that sample application along with labels and named Vulkan objects: s and named Vulkan objects:","title":"Vulkan Debug Utilities Extension","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/debug_utils/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Setup","hash":"_setup","id":2},{"text":"Validation","hash":"_validation","id":3},{"text":"Setting Up","hash":"_setting_up","id":4},{"text":"Adding information for debugging tools","hash":"_adding_information_for_debugging_tools","id":5},{"text":"Inserting labels","hash":"_inserting_labels","id":6},{"text":"Vulkan object naming and tagging","hash":"_vulkan_object_naming_and_tagging","id":7},{"text":"Running the sample with a Vulkan debugger","hash":"_running_the_sample_with_a_vulkan_debugger","id":8}]},"55":{"id":55,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Binding and managing descriptors in Vulkan can become pretty complex, both for the application and the driver. With the VK_EXT_descriptor_buffer extension, this interface is simplified and maps more directly to how hardware sees descriptors. It also simplifies the programming model, as you no longer have to create descriptor pool upfront. This sample shows how to use that extension by rendering multiple objects with different uniform buffers and images using the new interface of creating and binding descriptors. Creating and binding descriptors in Vulkan requires different steps and function calls. After all, descriptors are just memory, and something like a VkDescriptorPool was an abstract concept that didn’t actually map to hardware. On most implementations vkCreateDescriptorPool did nothing more than just a memory allocation. Same for vkAllocateDescriptorSets, which in the end is also just some sort of memory allocation, while vkUpdateDescriptorSets did some memory copies for the descriptors to that buffer. With the streamlined descriptor setup from VK_EXT_descriptor_buffer, the api now maps more closely to this and removes the need for the following functions: vkCreateDescriptorPool vkAllocateDescriptorSets vkUpdateDescriptorSets vkCmdBindDescriptorSets Other concepts of Vulkan’s descriptor logic like descriptor set layouts and pipeline layouts are still used and not deprecated. The VK_EXT_descriptor_buffer replaces all of this with resource descriptor buffer. These store descriptors in a way that the GPU can directly read them from such a buffer. The application simply puts them into those buffers. That buffer is then bound at command buffer recording time similar to other buffer types. To make the following code easier to understand, let’s take a look at the interfaces of our shaders: // Vertex shader layout (set = 0, binding = 0) uniform UBOScene { mat4 projection; mat4 view; } uboCamera; layout (set = 1, binding = 0) uniform UBOModel { mat4 local; } uboModel; // Fragment shader layout (set = 2, binding = 0) uniform sampler2D samplerColorMap; We use three descriptor sets, each with one binding. Descriptors are now stored in and accessed from memory, so instead of having to use the old approach of creating dedicated Vulkan objects, we create buffers that will store descriptors instead. The extension introduces two different types of descriptors: Resource descriptors for buffers (uniform buffers, shader storage buffers) and sampler/combined image sampler descriptors. In this sample we’ll be using both types, so we create two different buffers. As is usual in Vulkan, implementations have different size and alignment requirements. Alignment requirements for setting offsets in the descriptor buffer with vkCmdSetDescriptorBufferOffsetsEXT are defined by VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferOffsetAlignment. At the start of the example we fetch that information into descriptor_buffer_properties. VkPhysicalDeviceProperties2KHR device_properties{}; descriptor_buffer_properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT; device_properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR; device_properties.pNext = &descriptor_buffer_properties; vkGetPhysicalDeviceProperties2KHR(get_device().get_gpu().get_handle(), &device_properties); So to calculate the actual buffer sizes required to store the descriptors, we need to get the sizes of set layouts and also align them to VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferOffsetAlignment. We also need to fetch offsets of the descriptor bindings of a set layout as by the Vulkan specs size of the set layout is at least a sum of sizes of descriptor bindings of this layout but it can be higher than that and there are no guarantees about the layout of descriptor bindings in a descriptor set layout, meaning that first descriptor binding of a set can start exactly a the beginning of a set layout memory or it can start with non 0 offset if driver implementation puts some metadata there. // Get set layout descriptor sizes. vkGetDescriptorSetLayoutSizeEXT(get_device().get_handle(), uniform_binding_descriptor.layout, &uniform_binding_descriptor.size); vkGetDescriptorSetLayoutSizeEXT(get_device().get_handle(), image_binding_descriptor.layout, &image_binding_descriptor.size); // Adjust set layout sizes to satisfy alignment requirements. uniform_binding_descriptor.size = aligned_size(uniform_binding_descriptor.size, descriptor_buffer_properties.descriptorBufferOffsetAlignment); image_binding_descriptor.size = aligned_size(image_binding_descriptor.size, descriptor_buffer_properties.descriptorBufferOffsetAlignment); // Get descriptor bindings offsets as descriptors are placed inside set layout by those offsets. vkGetDescriptorSetLayoutBindingOffsetEXT(get_device().get_handle(), uniform_binding_descriptor.layout, 0u, &uniform_binding_descriptor.offset); vkGetDescriptorSetLayoutBindingOffsetEXT(get_device().get_handle(), image_binding_descriptor.layout, 0u, &image_binding_descriptor.offset); Creating the resource descriptors for the uniform buffers using the VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT usage flag: uniform_binding_descriptor.buffer = std::make_unique(get_device(), (static_cast(cubes.size()) + 1) * uniform_binding_descriptor.size, VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT, VMA_MEMORY_USAGE_CPU_TO_GPU); Creating the combined image sampler descriptors by additionally adding the VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT usage flag: image_binding_descriptor.buffer = std::make_unique(get_device(), static_cast(cubes.size()) * image_binding_descriptor.size, VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT | VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT | VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT, VMA_MEMORY_USAGE_CPU_TO_GPU); After creating the appropriate buffers we now put the actual descriptors into those buffers, making them accessible to the GPU. This is done with the vkGetDescriptorEXT function. The sample uses one global uniform buffer that stores the scene matrices, one uniform buffer per object displayed and one combined image sampler per object. For resource descriptor buffers, we can simply put buffer device addresses into it. No need for descriptors, as the GPU only needs to know the address of the buffers to access them: char *uniform_descriptor_buf_ptr = (char *) resource_descriptor_buffer->get_data(); // Global matrices uniform buffer VkDescriptorAddressInfoEXT addr_info = {VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT}; addr_info.address = uniform_buffers.scene->get_device_address(); addr_info.range = uniform_buffers.scene->get_size(); addr_info.format = VK_FORMAT_UNDEFINED; VkDescriptorGetInfoEXT buffer_descriptor_info{VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT}; buffer_descriptor_info.type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER; buffer_descriptor_info.data.pUniformBuffer = &addr_info; vkGetDescriptorEXT(get_device().get_handle(), &buffer_descriptor_info, descriptor_buffer_properties.uniformBufferDescriptorSize, uniform_descriptor_buf_ptr); // Per-cube uniform buffers // We use pointers to offset and align the data we put into the descriptor buffers for (size_t i = 0; i get_device_address(); cube_addr_info.range = cubes[i].uniform_buffer->get_size(); cube_addr_info.format = VK_FORMAT_UNDEFINED; buffer_descriptor_info.data.pUniformBuffer = &cube_addr_info; vkGetDescriptorEXT(get_device().get_handle(), &buffer_descriptor_info, descriptor_buffer_properties.uniformBufferDescriptorSize, uniform_descriptor_buf_ptr + (i + 1) * uniform_binding_descriptor.size + uniform_binding_descriptor.offset); } For combined image samplers (or samplers alone) we can’t use buffer device addresses as the implementation needs more information, so we have to put actual descriptors into the buffer instead: // For combined images we need to put descriptors into the descriptor buffers // We use pointers to offset and align the data we put into the descriptor buffers char *image_descriptor_buf_ptr = (char *) image_binding_descriptor.buffer->get_data(); for (size_t i = 0; i get_device_address(); descriptor_buffer_binding_info[0].usage = VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT; // Binding 1 = Image descriptor_buffer_binding_info[1].sType = VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT; descriptor_buffer_binding_info[1].address = image_descriptor_buffer->get_device_address(); descriptor_buffer_binding_info[1].usage = VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT | VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT; vkCmdBindDescriptorBuffersEXT(draw_cmd_buffers[i], 2, descriptor_buffer_binding_info); uint32_t buffer_index_ubo = 0; uint32_t buffer_index_image = 1; // Global Matrices (set 0) vkCmdSetDescriptorBufferOffsetsEXT(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 0, 1, &buffer_index_ubo, &buffer_offset); // Set and offset into descriptor for each model for (size_t j = 0; j < cubes.size(); j++) { // Uniform buffer (set 1) // Model ubos start at offset * (j + 1) (+1 as slot 0 is global matrices) buffer_offset = (j + 1) * uniform_binding_descriptor.size; vkCmdSetDescriptorBufferOffsetsEXT(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 1, 1, &buffer_index_ubo, &buffer_offset); // Image (set 2) buffer_offset = j * image_binding_descriptor.size; vkCmdSetDescriptorBufferOffsetsEXT(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 2, 1, &buffer_index_image, &buffer_offset); draw_model(models.cube, draw_cmd_buffers[i]); } In detail and in reference to our shader interface: Earlier on, we did put the device address for the global matrices uniform buffer at the beginning to the resource descriptor buffer. So we set it to point at buffer_offset = 0 for set 0: vkCmdSetDescriptorBufferOffsetsEXT(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 0, 1, &buffer_index_ubo, &buffer_offset); We then loop through all cubes displayed in the example and let the descriptor buffer point at the next device address using the alignment of the implementation for set 1: vkCmdSetDescriptorBufferOffsetsEXT(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 1, 1, &buffer_index_ubo, &buffer_offset); With an alignment of 16 (see VkPhysicalDeviceDescriptorBufferPropertiesEXT) the device address for the uniform buffer for the first cube would start at byte 16 in the resource descriptor buffer, the device address for the second cube’s uniform buffer would start at byte 32. The descriptor buffer containing the descriptors for our combined image samples is bound to set 2: vkCmdSetDescriptorBufferOffsetsEXT(draw_cmd_buffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout, 2, 1, &buffer_index_image, &buffer_offset); With descriptor set and pipeline layouts, Vulkan decouples the shader interfaces from the application. And since we don’t change these but only the way how we provide descriptors to the GPU, no changes to the shaders are required.","title":"Descriptor buffers","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/descriptor_buffer_basic/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Deprecated descriptor bindings","hash":"_deprecated_descriptor_bindings","id":2},{"text":"The new way","hash":"_the_new_way","id":3},{"text":"Creating the descriptor buffers","hash":"_creating_the_descriptor_buffers","id":4},{"text":"Putting the descriptors into the buffers","hash":"_putting_the_descriptors_into_the_buffers","id":5},{"text":"Binding the buffers","hash":"_binding_the_buffers","id":6},{"text":"What about the shaders?","hash":"_what_about_the_shaders","id":7}]},"56":{"id":56,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Descriptor indexing is an extension which adds a lot of flexibility to how resources are accessed. The core functionality of this extension is that we can treat descriptor memory as one massive array, and we can freely access any resource we want at any time, by indexing. The main insight is that if an array is large enough, an index into that array is indistinguishable from a pointer. By allowing free access to any resource at any time, we can efficiently implement some advanced algorithms which rely on this functionality. Descriptor indexing is also known by the term \"bindless\", which refers to the fact that binding individual descriptor sets and descriptors is no longer the primary way we keep shader pipelines fed. Instead, we can bind a huge descriptor set once and just index into a large number of descriptors. \"Bindless algorithms\" are generally built around this flexibility where we either index freely into a lot of descriptors at once, or update descriptors where we please. In this model, \"binding\" descriptors is not a concern anymore. At most, we need to write/copy descriptors to where we need them and we can now consider descriptors more like memory blobs rather than highly structured API objects. The first major feature is update-after-bind. In Vulkan, you generally have to create a VkDescriptorSet and update it with all descriptors before you call vkCmdBindDescriptorSets. After a set is bound, the descriptor set cannot be updated again until the GPU is done using it. This gives drivers a lot of flexibility in how they access the descriptors. They are free to copy the descriptors and pack them somewhere else, promote them to hardware registers, the list goes on. Update-After-Bind gives flexibility to applications instead. Descriptors can be updated at any time as long as they are not actually accessed by the GPU. Descriptors can also be updated while the descriptor set is bound to a command buffer, which enables a \"streaming\" use case. The Constant Data performance sample also demonstrates update-after-bind descriptors. Another \"hidden\" feature of update-after-bind is that it is possible to update the descriptor set from multiple threads. This is very useful for true \"bindless\" since unrelated tasks might want to update descriptors in different parts of the streamed/bindless descriptor set. To enable UPDATE_AFTER_BIND_BIT features for a descriptor binding, there is a little song and dance that must be performed. In VkDescriptorSetLayoutCreateInfo we must pass down binding flags in a separate struct with pNext. VkDescriptorSetLayoutCreateInfo set_layout_create_info{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO}; set_layout_create_info.flags = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT; const VkDescriptorBindingFlagsEXT flags = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT | VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT | VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT | VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT; VkDescriptorSetLayoutBindingFlagsCreateInfoEXT binding_flags{}; binding_flags.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT; binding_flags.bindingCount = 1; binding_flags.pBindingFlags = &flags; set_layout_create_info.pNext = &binding_flags; VK_CHECK(vkCreateDescriptorSetLayout(get_device().get_handle(), &set_layout_create_info, nullptr, &descriptors.set_layout)); The VkDescriptorPool must also be created with UPDATE_AFTER_BIND_BIT. Note that there is global limit to how many UPDATE_AFTER_BIND_BIT descriptors can be allocated at any point. The min-spec here is 500k, which should be good enough. See code for more detailed comments. While update-after-bind adds flexibility to descriptor management, non-uniform indexing adds great flexibility for shaders. How we access resources has changed a lot over the years. Mostly this is due to hardware considerations, but modern hardware is generally quite flexible in how resources are accessed. In the beginning there was constant indexing. layout(set = 0, binding = 0) uniform sampler2D Tex[4]; texture(Tex[0], ...); texture(Tex[2], ...); // We can trivially flatten a constant-indexed array into individual resources, // so, constant indexing requires no fancy hardware indexing support. layout(set = 0, binding = 0) uniform sampler2D Tex0; layout(set = 0, binding = 1) uniform sampler2D Tex1; layout(set = 0, binding = 2) uniform sampler2D Tex2; layout(set = 0, binding = 3) uniform sampler2D Tex3; After constant indexing we have dynamic indexing. This has been supported since Vulkan 1.0. The dynamic indexing features allow us to use a non-constant expression to index an array. The restriction is that the index must be dynamically uniform, which will be explained later …​ layout(set = 0, binding = 0) uniform sampler2D Tex[4]; texture(Tex[dynamically_uniform_expression], ...); Non-uniform indexing completely removes all restrictions on how we index into arrays, but we must notify our intent to the compiler. Normally, drivers and hardware can assume that the dynamically uniform guarantee holds, and optimize for that case. If we use the nonuniformEXT decoration in GL_EXT_nonuniform_qualifier we can let the compiler know that the guarantee does not necessarily hold, and the compiler will deal with it in the most efficient way possible for the target hardware. The rationale for having to annotate like this is that driver compiler backends would be forced to be more conservative than necessary if applications were not required to use nonuniformEXT. // Unsized arrays, nice! layout(set = 0, binding = 0) uniform sampler2D Tex[]; texture(Tex[nonuniformEXT(arbitrary_expression)], ...); Accessing arbitrary textures in a draw call is not a new problem, and graphics programmers have found ways over the years to workaround restrictions in older APIs. Rather than having multiple textures, it is technically possible to pack multiple textures into one texture resource, and sample from the correct part of the texture. This kind of technique is typically referred to as \"texture atlas\". Texture arrays (e.g. sampler2DArray) is another feature which can be used for similar purposes. Problems with atlas: Mip-mapping is hard to implement, and must likely be done manually with derivatives and math Anisotropic filtering is basically impossible Any other sampler addressing than CLAMP_TO_EDGE is very awkward to implement Cannot use different texture formats Problems with texture array: All resolutions must match Number of array layers is limited (just 256 in min-spec) Cannot use different texture formats Non-uniform indexing solves these issues since we can freely use multiple sampled image descriptors instead. Atlases and texture arrays still have their place. There are many use cases where these restrictions do not cause problems. Non-uniform indexing is not just limited to textures (although that is the most relevant use case). Any descriptor type can be used as long as the device supports it. Dynamically uniform is a somewhat difficult concept to understand. There is some terminology we must introduce here. The invocation group is a set of threads (invocations) which work together to perform a task. In graphics pipelines, the invocation group is all threads which are spawned as part of a single draw command. This includes multiple instances, and for multi-draw-indirect it is limited to a single gl_DrawID. In compute pipelines, the invocation group is a single workgroup, so it’s very easy to know when it is safe to avoid nonuniformEXT. An expression is considered dynamically uniform if all invocations in an invocation group have the same value. It is very easy to think that dynamically uniform just means \"as long as the index is uniform in the subgroup, it’s fine!\". This is certainly true for most (desktop) architectures, but not all. It is technically possible that a value can be subgroup uniform, but still not dynamically uniform. Consider a case where we a have a workgroup size of 128 threads, with a subgroup size of 32. Even if each subgroup does subgroupBroadcastFirst() on the index, each subgroup might have different values, and thus, we still technically need nonuniformEXT here. If you know that you have only one subgroup per workgroup however, subgroupBroadcastFirst() is good enough. The safe thing to do is to just add nonuniformEXT if you cannot prove the dynamically uniform property. If the compiler knows that it only really cares about subgroup uniformity, it could trivially optimize away nonuniformEXT(subgroupBroadcastFirst()) anyways. The common reason to use subgroups in the first place, is that it was an old workaround for lack of true non-uniform indexing, especially for desktop GPUs. A common pattern would be something like: bool needs_work = true; uint index = something_non_uniform(); do { if (subgroupBroadcastFirst(index) == index) { // index is subgroup uniform, which is good enough for most (all?) desktop GPU architectures. // It is not technically correct, just use nonuniformEXT(). // This style of code can still be worthwhile if we're loading uniform data based on index, // since we can greatly improve memory access patterns, // but that's another topic and is very IHV dependent ... texture(Tex[index], ...); needs_work = false; } } while (needs_work); #version 450 #extension GL_EXT_nonuniform_qualifier : require layout(local_size_x = 64) in; layout(set = 0, binding = 0) uniform sampler2D Combined[]; layout(set = 1, binding = 0) uniform texture2D Tex[]; layout(set = 2, binding = 0) uniform sampler Samp[]; layout(set = 3, binding = 0) uniform U { vec4 v; } UBO[]; layout(set = 4, binding = 0) buffer S { vec4 v; } SSBO[]; layout(set = 5, binding = 0, r32ui) uniform uimage2D Img[]; void main() { uint index = gl_GlobalInvocationID.x; vec2 uv = vec2(gl_GlobalInvocationID.yz) / 1024.0; vec4 a = textureLod(Combined[nonuniformEXT(index)], uv, 0.0); vec4 b = textureLod(nonuniformEXT(sampler2D(Tex[index], Samp[index])), uv, 0.0); vec4 c = UBO[nonuniformEXT(index)].v; vec4 d = SSBO[nonuniformEXT(index)].v; imageAtomicAdd(Img[nonuniformEXT(index)], ivec2(0), floatBitsToUint(a.x + b.y + c.z + d.w)); } With DXC: Texture2D Tex[] : register(t0, space0); SamplerState Samp[] : register(s0, space1); struct Float4 { float4 v; }; ConstantBuffer CBV[] : register(b0, space2); RWStructuredBuffer SSBO[] : register(u0, space3); RWTexture2D Img[] : register(u0, space4); [numthreads(64, 1, 1)] void main(uint3 thr : SV_DispatchThreadID) { uint index = thr.x; float2 uv = float2(thr.yz) / 1024.0; float4 a = Tex[NonUniformResourceIndex(index)].SampleLevel(Samp[NonUniformResourceIndex(index)], uv, 0.0); float4 b = CBV[NonUniformResourceIndex(index)].v; float4 c = SSBO[NonUniformResourceIndex(index)][0]; uint out_value; InterlockedAdd(Img[NonUniformResourceIndex(index)][int2(0, 0)], asuint(a.x + b.y + c.z), out_value); } In SPIR-V, it might be a bit unclear where to place the NonUniform decoration, but it is defined such that it is the final argument which is used in a load/store/sample/atomic command that must be decorated. It is meaningless to decorate the index expression itself (although it would be natural!). Some older buggy drivers did rely on the index itself being decorated though, so if you’re emitting SPIR-V yourself, it does not hurt to place NonUniform index redundantly, although it is an ugly caveat …​ E.g. for the nonuniform-quads.frag shader, we get: OpDecorate %27 NonUniform ; By spec, this is the only NonUniform we need %26 = OpSampledImage %25 %20 %24 %27 = OpCopyObject %25 %26 ; This is a glslangValidator quirk %32 = OpImageSampleImplicitLod %v4float %27 %31 ; It is %27 here which is significant Similarly for OpLoad and OpStore from and to UBO/SSBO it would be the pointer argument, and for OpAtomic* we would use NonUniform on the pointer argument. The goal of this sample is to demonstrate how to use the two main use cases enabled by descriptor indexing. On the left side, we bind 64 unique textures and render them all in one draw call. This makes use of non-uniform indexing of descriptors and assigns gl_InstanceIndex to an index into the descriptor array. #extension GL_EXT_nonuniform_qualifier : require layout(set = 0, binding = 0) uniform texture2D Textures[]; layout(set = 1, binding = 0) uniform sampler ImmutableSampler; out_frag_color = texture(nonuniformEXT(sampler2D(Textures[in_texture_index], ImmutableSampler)), in_uv); The critical aspect here is nonuniformEXT, which lets us index into an array of resources where the index is not dynamically uniform. For graphics, dynamically uniform means that the index is the same across all threads spawned by a draw commands. On the right side, we render the same textures, but in this case we use the \"update-after-bind\" model, where we simply stream descriptors to a single descriptor set. This is a style where we eliminate most of the complication with descriptor set management, and treat descriptor memory as a ring buffer. We can place an offset into this ring in push constant memory, e.g.: layout(push_constant) uniform Registers { layout(offset = 4) uint table_offset; } registers; void main() { out_frag_color = texture(sampler2D(Textures[registers.table_offset], ImmutableSampler), in_uv); } We could go up to as much as 500k textures in the minimum spec for Vulkan, but it would be impractical to use that many for purposes of visualization. Descriptor indexing is very powerful, but it also means debugging and validating such shaders becomes more difficult. There is more room for errors, e.g. it is possible for application to index into descriptors that were never initialized, or you can access stale descriptors which resource was destroyed earlier. There are means to debug and validate this in Vulkan. For example, here we look at the non-uniform draw call which renders the left half of the screen. RenderDoc supports debugging of descriptor indexing. When inspecting the state panel, we can see all the descriptors which were accessed in the draw call. It is important to note that RenderDoc must instrument your shaders with extra code which tags the resources which are actually accessed. Here we can see that all array entries were used, except index 0, which was never accessed since that particular quad was fully clipped away. This is a quirk to keep in mind. In the update-after-bind case, we draw one texture at a time, and these cases are much more straight forward to debug. Here we see that we accessed index 202, which corresponds to the push constant table_offset we passed to the shader, neat! With descriptor indexing, it is impossible for a validation layer to validate at draw time, since it cannot know which resources a shader intends to access, and with update-after-bind, the descriptor might be filled in right before vkQueueSubmit. Similar to RenderDoc, the validation layers must instrument your shaders which slows runtime down significantly. For this reason, GPU-assisted validation is opt-in. In instance.cpp we make use of VK_EXT_validation_features to enable GPU-assisted validation if VKB_VALIDATION_LAYERS_GPU_ASSISTED is set in the CMake build. The key thing to know is that this is an extension exposed by the validation layer itself, so we need to query instance extensions directly on the layer. E.g.: bool validation_features = false; uint32_t layer_instance_extension_count; VK_CHECK(vkEnumerateInstanceExtensionProperties(\"VK_LAYER_KHRONOS_validation\", &layer_instance_extension_count, nullptr)); std::vector available_layer_instance_extensions(layer_instance_extension_count); VK_CHECK(vkEnumerateInstanceExtensionProperties(\"VK_LAYER_KHRONOS_validation\", &layer_instance_extension_count, available_layer_instance_extensions.data())); for (auto &available_extension : available_layer_instance_extensions) { if (strcmp(available_extension.extensionName, VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME) == 0) { validation_features = true; LOGI(\"{} is available, enabling it\", VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME); enabled_extensions.push_back(VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME); } } If present, we can pass down information to vkCreateInstance about the features we need to enable: VkValidationFeaturesEXT validation_features_info = {VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT}; if (validation_features) { static const VkValidationFeatureEnableEXT enable_features[2] = { VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT, VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT, }; validation_features_info.enabledValidationFeatureCount = 2; validation_features_info.pEnabledValidationFeatures = enable_features; validation_features_info.pNext = instance_info.pNext; instance_info.pNext = &validation_features_info; } The features to enable is GPU_ASSISTED_EXT and RESERVE_BINDING_SLOT_EXT. The extra descriptor set slot is reserved by validation layers so it can bind metadata buffers. Instrumented shaders will write here as they execute. If we enable this, and say pretend that we forgot to update descriptor #3: for (unsigned i = 0; i < NumDescriptorsNonUniform; i++) { ... if (i != 3) vkUpdateDescriptorSets(get_device().get_handle(), 1, &write, 0, nullptr); ... } We end up with: [error] [framework/core/instance.cpp:41] -1993010233 - UNASSIGNED-Descriptor uninitialized: Validation Error: [ UNASSIGNED-Descriptor uninitialized ] Object 0: handle = 0x55625acf5600, type = VK_OBJECT_TYPE_QUEUE; | MessageID = 0x893513c7 | Descriptor index 3 is uninitialized. Command buffer (0x55625b187090). Draw Index 0x4. Pipeline (0x520000000052). Shader Module (0x510000000051). Shader Instruction Index = 59. Stage = Fragment. Fragment coord (x,y) = (930.5, 0.5). Unable to find SPIR-V OpLine for source information. Build shader with debug info to get source information. [error] [framework/core/instance.cpp:41] -1993010233 - UNASSIGNED-Descriptor uninitialized: Validation Error: [ UNASSIGNED-Descriptor uninitialized ] Object 0: handle = 0x55625acf5600, type = VK_OBJECT_TYPE_QUEUE; | MessageID = 0x893513c7 | Descriptor index 67 is uninitialized. Command buffer (0x55625b184d60). Draw Index 0x4. Pipeline (0x520000000052). Shader Module (0x510000000051). Shader Instruction Index = 59. Stage = Fragment. Fragment coord (x,y) = (944.5, 0.5). Unable to find SPIR-V OpLine for source information. Build shader with debug info to get source information. [error] [framework/core/instance.cpp:41] -1993010233 - UNASSIGNED-Descriptor uninitialized: Validation Error: [ UNASSIGNED-Descriptor uninitialized ] Object 0: handle = 0x55625acf5600, type = VK_OBJECT_TYPE_QUEUE; | MessageID = 0x893513c7 | Descriptor index 131 is uninitialized. Command buffer (0x55625b1893c0). Draw Index 0x4. Pipeline (0x520000000052). Shader Module (0x510000000051). Shader Instruction Index = 59. Stage = Fragment. Fragment coord (x,y) = (944.5, 0.5). Unable to find SPIR-V OpLine for source information. Build shader with debug info to get source information. Adding debug symbols to the SPIR-V helps here, but that’s another topic. Descriptor indexing is a highly potent extension, but with great power comes great responsibility to use all debug tools available to you. s to the SPIR-V helps here, but that’s another topic. Descriptor indexing is a highly potent extension, but with great power comes great responsibility to use all debug tools available to you.","title":"Descriptor indexing","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/descriptor_indexing/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Use cases","hash":"_use_cases","id":2},{"text":"Update-After-Bind, streaming descriptors concurrently","hash":"_update_after_bind_streaming_descriptors_concurrently","id":3},{"text":"Concurrent updates","hash":"_concurrent_updates","id":4},{"text":"Descriptor flags","hash":"_descriptor_flags","id":5},{"text":"Non-uniform indexing, enabling advanced algorithms","hash":"_non_uniform_indexing_enabling_advanced_algorithms","id":6},{"text":"The different levels of indexing resources","hash":"_the_different_levels_of_indexing_resources","id":7},{"text":"Constant indexing","hash":"_constant_indexing","id":8},{"text":"Dynamic indexing","hash":"_dynamic_indexing","id":9},{"text":"Non-uniform indexing","hash":"_non_uniform_indexing","id":10},{"text":"Non-uniform indexing vs. texture atlas vs. texture array","hash":"_non_uniform_indexing_vs_texture_atlas_vs_texture_array","id":11},{"text":"Not just textures","hash":"_not_just_textures","id":12},{"text":"When to use non-uniform indexing qualifier","hash":"_when_to_use_non_uniform_indexing_qualifier","id":13},{"text":"The invocation group","hash":"_the_invocation_group","id":14},{"text":"How do subgroups interact here?","hash":"_how_do_subgroups_interact_here","id":15},{"text":"Vulkan GLSL examples","hash":"_vulkan_glsl_examples","id":16},{"text":"HLSL examples","hash":"_hlsl_examples","id":17},{"text":"What to look for in SPIR-V","hash":"_what_to_look_for_in_spir_v","id":18},{"text":"The sample","hash":"_the_sample","id":19},{"text":"Debugging descriptor indexing","hash":"_debugging_descriptor_indexing","id":20},{"text":"RenderDoc","hash":"_renderdoc","id":21},{"text":"GPU assisted validation","hash":"_gpu_assisted_validation","id":22},{"text":"Conclusion","hash":"_conclusion","id":23},{"text":"Conclusion","hash":"_conclusion_2","id":24}]},"57":{"id":57,"text":"This sample demonstrates the functionality of VK_EXT_extended_dynamic_state3 related to blending. It includes the following features: vkCmdSetColorBlendEnableEXT: toggles blending on and off. vkCmdSetColorBlendEquationEXT: modifies blending operators and factors. vkCmdSetColorBlendAdvancedEXT: utilizes more complex blending operators. vkCmdSetColorWriteMaskEXT: toggles individual channels on and off. To utilize this feature, the device extension VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME need to be enabled. The extension VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME is required for the advanced blend equations. All presented functions take an array of objects defining their action for subsequent color attachments: The vkCmdSetColorBlendEnableEXT function expects an array of booleans to toggle blending. The vkCmdSetColorBlendEquationEXT function expects an array of VkColorBlendEquationEXT objects which determine operators and factors for color and alpha blending. The VkCmdSetColorBlendAdvancedEXT function expects an array of VkColorBlendAdvancedEXT objects, which determine blending operators and premultiplication for color blending. The vkCmdSetColorWriteMaskEXT function expects an array of VkColorComponentFlags objects. These objects can be created by combining the desired color bit flags using bitwise oring. The sample demonstrates how to set up an application to work with this extension: Enabling the extension. Setting parameters for the presented methods. The sample demonstrates how the use of each operator affects color blending. https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEnableEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendEquationEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorBlendAdvancedEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetColorWriteMaskEXT.html","title":"Dynamic blending","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/dynamic_blending/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"How to use in Vulkan","hash":"_how_to_use_in_vulkan","id":2},{"text":"The sample","hash":"_the_sample","id":3},{"text":"Documentation links","hash":"_documentation_links","id":4}]},"58":{"id":58,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates functions from various extensions related to dynamic line rasterization. These functions can be useful for developing CAD applications. From the VK_EXT_line_rasterization extension: vkCmdSetLineStippleEXT - sets the stipple pattern. From the VK_EXT_extended_dynamic_state3 extension: vkCmdSetPolygonModeEXT - sets how defined primitives should be rasterized. vkCmdSetLineRasterizationModeEXT - sets the algorithm for line rasterization. vkCmdSetLineStippleEnableEXT - toggles stippling for lines. And also from the core Vulkan: vkCmdSetLineWidth - sets the line width. vkCmdSetPrimitiveTopologyEXT - defines which type of primitives is being drawn. Dynamic line rasterization contains a wireframed cube whose appearance can be modified by the user. The cube edges and filling are rendered in a single pipeline, using a different set of indices. The vkCmdSetPrimitiveTopologyEXT and vkCmdSetPolygonModeEXT functions are used to change the way they are rendered. Users can modify the line width (vkCmdSetLineWidth) and choose how the line is drawn (vkCmdSetLineRasterizationModeEXT). The sample also demonstrates the ability to stipple the line. Stippling is defined by two variables: lineStipplePattern - a uint16_t where each bit represents whether a point on the line is colored (1) or transparent (0). lineStippleFactor - a factor used to determine how many consecutive points are affected by a single pattern bit. The sample also contains a grid rendered beneath the cube using a different pipeline. This grid represents another approach to line rasterization based on the fragment shader. Consequently, the appearance of the gridlines cannot be modified by the user. The infinite grid shader is based on the code from the asliceofrendering.com blog. https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetPolygonModeEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineRasterizationModeEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineStippleEnableEXT.html https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdSetLineWidth.html","title":"Dynamic line rasterization","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/dynamic_line_rasterization/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"The sample","hash":"_the_sample","id":2},{"text":"Credits","hash":"_credits","id":3},{"text":"Documentation links","hash":"_documentation_links","id":4}]},"59":{"id":59,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to apply depth clipping using vkCmdSetDepthClipEnableEXT() command which is a part of VK_EXT_extended_dynamic_state3 extension. Additionally it also shows how to apply primitive clipping using gl_ClipDistance[] builtin shader variable. It is worth noting that primitive clipping and depth clipping are two separate features of the fixed-function vertex post-processing stage. They’re both described in the same chapter of Vulkan specification ( chapter 27.4, \"Primitive clipping\" ). Primitives produced by vertex/geometry/tesellation shaders are sent to fixed-function vertex post-processing. Primitive clipping is a part of post-processing pipeline in which primitives such as points/lines/triangles are culled against cull volume and then clipped to clip volume. And then they might be further clipped by results stored in gl_ClipDistance[] array - values in this array must be calculated in a vertex/geometry/tesellation shader. In the past, fixed-function version of OpenGL API provided a method to specify parameters for up to 6 clipping planes ( half-spaces ) that could perform additional primitive clipping. Fixed-function hardware calculated proper distances to these planes and made a decision - should the primitive be clipped against these planes or not ( for historical study - search for the glClipPlane() description ). Vulkan inherited the idea of primitive clipping, but with one important difference: user has to calculate the distance to the clip planes on its own in the vertex shader. And - because user does it in a shader - he does not have to use clip planes at all. It can be any kind of calculation, as long as the results are put in gl_ClipDistance[] array. Values that are less than 0.0 cause the vertex to be be clipped. In case of triangle primitive the whole triangle is clipped if all of its vertices have values stored in gl_ClipDistance[] below 0.0. When some of these values are above 0.0 - triangle is split into new triangles as described in Vulkan specification. When depth clipping is disabled then effectively, there is no near or far plane clipping. depth values of primitives that are behind far plane are clamped to far plane depth value ( usually 1.0 ) depth values of primitives that are in front of near plane are clamped to near plane depth value ( by default it’s 0.0, but may be set to -1.0 if we use settings defined in VkPipelineViewportDepthClipControlCreateInfoEXT structure. This requires a presence of VK_EXT_depth_clip_control extension which is not part of this tutorial ) In this sample the result of depth clipping ( or lack of it ) is not clearly visible at first. Try to move viewer position closer to the object and see how \"use depth clipping\" checkbox changes object appearance. Primitive clipping is relatively easy to configure in Vulkan API: VkPhysicalDeviceFeatures::shaderClipDistance must be set to VK_TRUE - in order to use gl_ClipDistance[] builtin variable in shaders gl_ClipDistance[] must be added to a definition of gl_PerVertex structure in a vertex shader. Simplest form with one value per vertex will look like this: out gl_PerVertex { vec4 gl_Position; float gl_ClipDistance[1]; }; The size of gl_ClipDistance[] array may not be larger than VkPhysicalDeviceLimits::maxClipDistances. In Vulkan API there is no external command that turns the primitive clipping off. If you want to have such feature - you have to implement it yourself by providing some additional variable to the vertex shader ( see shaders/dynamic_primitive_clipping/primitive_clipping.vert on how it can be implemented ). There are few ways of applying depth clipping in Vulkan API: statically: when VkPipelineRasterizationDepthClipStateCreateInfoEXT IS NOT present and VkPipelineRasterizationStateCreateInfo::depthClampEnable is equal to VK_FALSE statically: when VkPipelineRasterizationDepthClipStateCreateInfoEXT is present in VkGraphicsPipelineCreateInfo::pNext chain and VkPipelineRasterizationDepthClipStateCreateInfoEXT::depthClipEnable is set to VK_TRUE ( requires extension VK_EXT_depth_clip_enable ) using shader objects with vkCmdSetDepthClipEnableEXT() called before vkCmdDraw*(cmd, …​ ) command ( requires extensions: VK_EXT_shader_object, VK_EXT_depth_clip_enable ) dynamically: when VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT is present in VkPipelineDynamicStateCreateInfo::pDynamicStates and command vkCmdSetDepthClipEnableEXT() is called before vkCmdDraw*(cmd, …​ ) command ( requires extensions: VK_EXT_extended_dynamic_state3, VK_EXT_depth_clip_enable ) This sample focuses on the last, dynamic case. In order to use the dynamic depth clipping we need to: create VkInstance with extension VK_KHR_get_physical_device_properties2 create VkDevice with extensions VK_EXT_extended_dynamic_state3 and VK_EXT_depth_clip_enable VkPhysicalDeviceDepthClipEnableFeaturesEXT::depthClipEnable must be set to VK_TRUE VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClipEnable must be set to VK_TRUE - in order to use vkCmdSetDepthClipEnableEXT() command during graphics pipeline creation VkPipelineDynamicStateCreateInfo::pDynamicStates must contain VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT command vkCmdSetDepthClipEnableEXT() is called before vkCmdDraw*(cmd, …​ ) command In the past primitive clipping was used in various CAD applications to make cross-sections of different 3D objects. We still can use it in similar fashion, but other applications also come to mind: we can hide parts of the 3D model we can make holes in a terrain ( e.g. for tunnels ) we can use it in some special effects Advantage of using primitive clipping over using discard keyword in a fragment shader is obvious: we are doing it earlier in a pipeline which may result in better performance ( or may not, you have to measure it ). But beware of vertex density: because this technique is vertex based it may have some nasty results when vertices are too sparse. See \"Torusknot\" object type with \"Clip space Y\" visualization in a sample to see where the problem may arise. Depth clipping ( or rather lack of it ) is widely used in different shadow mapping algorithms, where only rendering to depth buffer is performed. In other use cases, which include rendering to color buffer you must be aware that when a lot of primitives are clamped to near/far plane we will see the ones that were rendered first rather that the ones that are closer to the viewer. Example of such behavior is visible on the left part of Utah teapot on a screenshot above.","title":"Dynamic depth clipping and primitive clipping","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/dynamic_primitive_clipping/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"What is primitive clipping","hash":"_what_is_primitive_clipping","id":2},{"text":"What is depth clipping","hash":"_what_is_depth_clipping","id":3},{"text":"How to apply primitive clipping in Vulkan","hash":"_how_to_apply_primitive_clipping_in_vulkan","id":4},{"text":"How to apply depth clipping in Vulkan","hash":"_how_to_apply_depth_clipping_in_vulkan","id":5},{"text":"Potential applications","hash":"_potential_applications","id":6}]},"60":{"id":60,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use the VK_KHR_dynamic_rendering extension, which eliminates the need to create render passes and improves flexibility while developing render pipelines. This extension changes how rendering resources are managed. Rather than using render pass objects, this extension allows the developer to directly reference rendering attachments prior to the start of rendering. Below is a comparison of the common Vulkan render pass construction and dynamic rendering. Vulkan 1.0 Dynamic Rendering Rendering begins with vkCmdBeginRenderPass Rendering begins with vkCmdBeginRenderingKHR Rendering struct is VkRenderPassBeginInfo Rendering struct is VkRenderingInfoKHR Attachments are referenced by VkFramebuffer Attachments are referenced by VkRenderingAttachmentInfoKHR VkFramebuffer objects are heap-allocated and opaque VkRenderingAttachmentInfoKHR objects are stack-allocated Graphics pipeline creation references a VkRenderPass Graphics pipeline creation references a VkPipelineRenderingCreateInfoKHR More detail is provided in the sections that follow. Previously, developers had to create render passes and framebuffers, which would be referenced in VkRenderPassBeginInfo. This is illustrated in the non-dynamic version of the command buffer construction sample code: VkRenderPassBeginInfo render_pass_begin_info = vkb::initializers::render_pass_begin_info(); render_pass_begin_info.renderPass = render_pass; render_pass_begin_info.framebuffer = framebuffers[i]; render_pass_begin_info.renderArea.extent.width = width; render_pass_begin_info.renderArea.extent.height = height; render_pass_begin_info.clearValueCount = 3; render_pass_begin_info.pClearValues = clear_values.data(); vkCmdBeginRenderPass(draw_cmd_buffer, &render_pass_begin_info, VK_SUBPASS_CONTENTS_INLINE); draw_scene(); vkCmdEndRenderPass(draw_cmd_buffer); However, with dynamic rendering, the render pass and framebuffer structs are replaced by VkRenderingAttachmentInfoKHR, which contains information about color, depth, and stencil attachments, and VkRenderingInfoKHR, which references the attachments. These structs are used at the start of rendering with the new command vkCmdBeginRenderingKHR, as shown in the dynamic version of the command buffer construction sample code: VkRenderingAttachmentInfoKHR color_attachment_info = vkb::initializers::rendering_attachment_info(); color_attachment_info.imageView = swapchain_buffers[i].view; // color_attachment.image_view; ... VkRenderingAttachmentInfoKHR depth_attachment_info = vkb::initializers::rendering_attachment_info(); depth_attachment_info.imageView = depth_stencil.view; ... auto render_area = VkRect2D{VkOffset2D{}, VkExtent2D{width, height}}; auto render_info = vkb::initializers::rendering_info(render_area, 1, &color_attachment_info); render_info.layerCount = 1; render_info.pDepthAttachment = &depth_attachment_info; render_info.pStencilAttachment = &depth_attachment_info; vkCmdBeginRenderingKHR(draw_cmd_buffer, &render_info); draw_scene(); vkCmdEndRenderingKHR(draw_cmd_buffer); Dynamic rendering changes how graphics pipelines are created. Whereas before, the VkGraphicsPipelineCreateInfo struct was required to reference a non-null pointer to a VkRenderPass object, the dynamic rendering information is instead contained in a VkPipelineRenderingCreateInfoKHR struct referenced by pNext of the graphics pipeline create info: // Provide information for dynamic rendering VkPipelineRenderingCreateInfoKHR pipeline_create{VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR}; pipeline_create.pNext = VK_NULL_HANDLE; pipeline_create.colorAttachmentCount = 1; pipeline_create.pColorAttachmentFormats = &color_rendering_format; pipeline_create.depthAttachmentFormat = depth_format; pipeline_create.stencilAttachmentFormat = depth_format; // Use the pNext to point to the rendering create struct VkGraphicsPipelineCreateInfo graphics_create{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO}; graphics_create.pNext = &pipeline_create; // reference the new dynamic structure graphics_create.renderPass = VK_NULL_HANDLE; // previously required non-null During graphics pipeline construction, the VkPipelineRenderingCreateInfoKHR structure does not contain pointers to the actual attachment images (as the pointers aren’t required until VkRenderingAttachmentInfoKHR); instead, only the number and format of the attachments are required. The dynamic rendering api is provided in Vulkan 1.2.197 and the appropriate headers / SDK is required. In addition, since dynamic rendering is provided as an extension and may have varying levels of support, the developer must query availability for each device used. The device extension is provided by VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME, and additional features are provided by the VkPhysicalDeviceDynamicRenderingFeaturesKHR struct: typedef struct VkPhysicalDeviceDynamicRenderingFeaturesKHR { VkStructureType sType; void* pNext; VkBool32 dynamicRendering; } VkPhysicalDeviceDynamicRenderingFeaturesKHR; In addition to enabling the extension, developers may need to dynamically query the function pointers for vkCmdBeginRenderingKHR and vkCmdEndRenderingKHR if the preprocessor macro VK_NO_PROTOTYPES is enabled. This can be achieved through vkGetInstanceProcAddr: VkInstance instance = get_device().get_gpu().get_instance().get_handle(); assert(!!instance); vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR) vkGetInstanceProcAddr(instance, \"vkCmdBeginRenderingKHR\"); vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR) vkGetInstanceProcAddr(instance, \"vkCmdEndRenderingKHR\"); if (!vkCmdBeginRenderingKHR || !vkCmdEndRenderingKHR) { throw std::runtime_error(\"Unable to dynamically load vkCmdBeginRenderingKHR and vkCmdEndRenderingKHR\"); }","title":"Dynamic Rendering","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/dynamic_rendering/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Rendering Attachments","hash":"_rendering_attachments","id":2},{"text":"Pipelines","hash":"_pipelines","id":3},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":4}]},"61":{"id":61,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use VK_EXT_extended_dynamic_state2 extension, which eliminates the need to create multiple pipelines in case of specific different parameters. This extension changes how Depth Bias, Primitive Restart, Rasterizer Discard and Patch Control Points are managed. Instead of static description during pipeline creation, this extension allows developers to change those parameters by using a function before every draw. Below is a comparison of common Vulkan static and dynamic implementation of those extensions with additional usage of vkCmdSetPrimitiveTopologyEXT extension from dynamic state . Static/Non-dynamic Dynamic State 2 dynamic_state = {} dynamic_state = {VK_DYNAMIC_STATE_VIEWPORT, + VK_DYNAMIC_STATE_SCISSOR, + VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT, + VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, + VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT, + VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, + VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT} vkCreateGraphicsPipelines(pipeline1) + vkCreateGraphicsPipelines(pipeline2) + vkCreateGraphicsPipelines(pipeline3) + vkCreateGraphicsPipelines(pipeline4) vkCreateGraphicsPipelines(pipeline1) + vkCreateGraphicsPipelines(pipeline2) draw(model1, pipeline1) + draw(model2, pipeline2) + draw(model3, pipeline3) + draw(model4, pipeline4) vkCmdSetPrimitiveRestartEnableEXT(commandBuffer1, primitiveBoolParam) + vkCmdSetDepthBiasEnableEXT(commandBuffer1, depthBiasBoolParam) + vkCmdSetRasterizerDiscardEnableEXT(commandBuffer1,rasterizerBoolParam) + vkCmdSetPrimitiveTopologyEXT(commandBuffer1, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST) + draw(model1, pipeline1) + vkCmdSetPrimitiveTopologyEXT(commandBuffer2, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP) + vkCmdSetPrimitiveRestartEnableEXT(commandBuffer2, primitiveBoolParam) + draw(model2, pipeline1) + vkCmdSetDepthBiasEnableEXT(commandBuffer3, depthBiasBoolParam) + vkCmdSetPrimitiveRestartEnableEXT(commandBuffer3, primitiveBoolParam) + draw(model3, pipeline1) + vkCmdSetPatchControlPointsEXT(commandBuffer4, patchControlPoints) + draw(model4, pipeline2) More details are provided in the sections that follow. Previously developers had to create multiple pipelines for different parameters in Depth Bias, Primitive Restart, Rasterizer Discard and Patch Control Points. This is illustrated in a static/non-dynamic pipeline creation. ... /* First pipeline creation */ VkPipelineInputAssemblyStateCreateInfo input_assembly_state = vkb::initializers::pipeline_input_assembly_state_create_info( VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, /* value used in 1st and 2nd pipeline */ 0, VK_FALSE); /* primitiveRestartEnable */ VkPipelineRasterizationStateCreateInfo rasterization_state = vkb::initializers::pipeline_rasterization_state_create_info( VK_POLYGON_MODE_FILL, /* value used in 1st, 2nd and 3rd pipeline */ VK_CULL_MODE_BACK_BIT, VK_FRONT_FACE_CLOCKWISE, 0); rasterization_state.depthBiasConstantFactor = 1.0f; rasterization_state.depthBiasSlopeFactor = 1.0f; rasterization_state.depthBiasClamp = 0.0f; /* Note: Using reversed depth-buffer for increased precision, so greater depth values are kept */ VkPipelineDepthStencilStateCreateInfo depth_stencil_state = vkb::initializers::pipeline_depth_stencil_state_create_info( VK_TRUE, /* depthTestEnable */ VK_TRUE, /* depthWriteEnable */ VK_COMPARE_OP_GREATER); ... /* VkGraphicsPipelineCreateInfo for all pipelines, parameters are modified before each pipeline creation */ VkGraphicsPipelineCreateInfo graphics_create{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO}; graphics_create.pInputAssemblyState = &input_assembly_state; graphics_create.pRasterizationState = &rasterization_state; graphics_create.pDepthStencilState = &depth_stencil_state; graphics_create.pTessellationState = VK_NULL_HANDLE; ... VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline1)); /* Second pipeline creation */ rasterization_state.rasterizerDiscardEnable = VK_TRUE; VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline2)); /* Third pipeline creation */ rasterization_state.rasterizerDiscardEnable = VK_FALSE; input_assembly_state.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST; input_assembly_state.primitiveRestartEnable = VK_TRUE; VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline3)); /* Fourth pipeline creation */ VkPipelineTessellationStateCreateInfo tessellation_state = vkb::initializers::pipeline_tessellation_state_create_info(3); graphics_create.layout = pipeline_layouts.tesselation; graphics_create.pTessellationState = &tessellation_state; input_assembly_state.topology = VK_PRIMITIVE_TOPOLOGY_PATCH_LIST; input_assembly_state.primitiveRestartEnable = VK_FALSE; rasterization_state.depthBiasEnable = VK_TRUE; if (get_device().get_gpu().get_features().fillModeNonSolid) { rasterization_state.polygonMode = VK_POLYGON_MODE_LINE; /* Wireframe mode */ } VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline4)); In the above approach if developer would like to change the patch control points number, then for each different number a new pipeline would be required. However, with VK_EXT_extended_dynamic_state2 the number of pipelines can be reduced by the possibility to change parameters of Depth Bias, Primitive Restart, Rasterizer Discard and Patch Control Points by calling vkCmdSetDepthBiasEnableEXT, vkCmdSetPrimitiveRestartEnableEXT, vkCmdSetRasterizerDiscardEnableEXT and vkCmdSetPatchControlPointsEXT respectively before calling the draw_model method. With the usage of above functions we can reduce the number of pipelines. Required dynamic states must be enabled and passed to the VkGraphicsPipelineCreateInfo structure. VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT specifies that the topology state in the VkPipelineInputAssemblyStateCreateInfo struct only specifies the topology class. The specific topology order and adjacency must be set dynamically with vkCmdSetPrimitiveTopology before any drawing commands. VkPipelineInputAssemblyStateCreateInfo input_assembly_state = vkb::initializers::pipeline_input_assembly_state_create_info( VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, 0, VK_FALSE); std::vector dynamic_state_enables = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR, VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT, VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT, VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT, VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT, }; VkPipelineDynamicStateCreateInfo dynamic_state = vkb::initializers::pipeline_dynamic_state_create_info( dynamic_state_enables.data(), static_cast(dynamic_state_enables.size()), 0); VkGraphicsPipelineCreateInfo graphics_create{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO}; graphics_create.pInputAssemblyState = &input_assembly_state; graphics_create.pDynamicState = &dynamic_state; ... VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline.baseline)); And now, thanks to VK_EXT_extended_dynamic_state2, we can change parameters before each corresponding draw call. VK_CHECK(vkBeginCommandBuffer(draw_cmd_buffer, &command_begin)); ... /* Binding baseline pipeline and descriptor sets */ vkCmdBindDescriptorSets(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layouts.baseline, 0, 1, &descriptor_sets.baseline, 0, nullptr); vkCmdBindPipeline(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline.baseline); /* Setting topology to triangle list and disabling primitive restart functionality */ vkCmdSetPrimitiveTopologyEXT(draw_cmd_buffer, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST); vkCmdSetPrimitiveRestartEnableEXT(draw_cmd_buffer, VK_FALSE); /* Drawing objects from baseline scene (with rasterizer discard and depth bias functionality) */ draw_from_scene(draw_cmd_buffer, scene_elements_baseline); /* Changing topology to triangle strip with using primitive restart feature */ vkCmdSetPrimitiveTopologyEXT(draw_cmd_buffer, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP); vkCmdSetPrimitiveRestartEnableEXT(draw_cmd_buffer, VK_TRUE); /* Draw model with primitive restart functionality */ draw_created_model(draw_cmd_buffer); /* Changing bindings to tessellation pipeline */ vkCmdBindDescriptorSets(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layouts.tesselation, 0, 1, &descriptor_sets.tesselation, 0, nullptr); vkCmdBindPipeline(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline.tesselation); /* Change topology to patch list and setting patch control points value */ vkCmdSetPrimitiveTopologyEXT(draw_cmd_buffer, VK_PRIMITIVE_TOPOLOGY_PATCH_LIST); vkCmdSetPatchControlPointsEXT(draw_cmd_buffer, patch_control_points_triangle); /* Drawing scene with objects using tessellation feature */ draw_from_scene(draw_cmd_buffer, scene_elements_tess); /* Changing bindings to background pipeline */ vkCmdBindDescriptorSets(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layouts.background, 0, 1, &descriptor_sets.background, 0, nullptr); vkCmdBindPipeline(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline.background); /* Setting topology to triangle list */ vkCmdSetPrimitiveTopologyEXT(draw_cmd_buffer, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST); /* Drawing background */ draw_model(background_model, draw_cmd_buffer); ... VK_CHECK(vkEndCommandBuffer(draw_cmd_buffer)); The usage of depth bias dynamic state is implemented in the draw_from_scene function. For each scene element (except Geosphere) the depth bias or the rasterizer discard options are enabled depending on GUI settings. At the end of the function settings are reseted (set to VK_FALSE). void ExtendedDynamicState2::draw_from_scene(VkCommandBuffer command_buffer, std::vector const &scene_node) { for (int i = 0; i vertex_indices, 1, 0, 0, 0); } vkCmdSetDepthBiasEnableEXT(command_buffer, VK_FALSE); vkCmdSetRasterizerDiscardEnableEXT(command_buffer, VK_FALSE); } The extended dynamic state 2 api requires Vulkan 1.0 and the appropriate headers / SDK is required. This extension has been partially promoted to Vulkan 1.3. The device extension is provided by VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME. It also requires VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME instance extension to be enabled. add_instance_extension(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME); add_device_extension(VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME); If the VkPhysicalDeviceExtendedDynamicState2FeaturesEXT structure is included in the pNext chain of the VkPhysicalDeviceFeatures2 structure passed to vkGetPhysicalDeviceFeatures2, it is filled in to indicate whether each corresponding feature is supported. VkPhysicalDeviceExtendedDynamicState2FeaturesEXT can also be used in the pNext chain of VkDeviceCreateInfo to selectively enable these features. o selectively enable these features.","title":"Extended dynamic state 2","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/extended_dynamic_state2/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Pipelines","hash":"_pipelines","id":2},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":3}]},"62":{"id":62,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Fragment shader barycentric feature provides support for accessing the barycentric coordinates (linear and perspective) in the fragment shader and vertex attribute with the pervertexEXT decoration. The VK_KHR_fragment_shader_barycentric extension is based on VK_NV_fragment_shader_barycentric. The extension provides access to additional built-in variables and decorations: Type GLSL SPIR-V built-in variable in vec3 gl_BaryCoordEXT; BaryCoordKHR built-in variable in vec3 gl_BaryCoordNoPerspEXT; BaryCoordNoPerspKHR decoration pervertexEXT perVertexKHR The built-in fragment shader input variables gl_BaryCoordEXT and gl_BaryCoordNoPerspEXT are three-component floating-point vectors that provide the barycentric coordinates for the fragment. The values for these built-ins are derived as described in the Vulkan API Specifications. The built-in variables hold barycentric weights for the fragment produced using: perspective interpolation: gl_BaryCoordEXT linear interpolation: gl_BaryCoordNoPerspEXT The fragment shader inputs declared with the pervertexEXT decoration get the per-vertex values of the outputs from the previous shader stage declared with the same name. Such inputs must be declared as an array, because they have values for each vertex in the input primitive, e.g. layout(location = 0) pervertexEXT in vec4 perVertexAttr[]; Each array element corresponds to one of the vertices of the primitive that produced the fragment. The order of the vertices is defined in the Vulkan API Specifications. Interpolated values are not available for inputs declared with the pervertexEXT. The fragment shader barycentric sample demonstrates feature usage by applying different effects on a cube. The effects are implemented using the pervertexEXT decoration and built-in variables gl_BaryCoordEXT and gl_BaryCoordNoPerspEXT. The following effects are available from the GUI: Color interpolation - Demonstrates color interpolation using barycentric coordinates and information about color in vertices of the triangle (passed as pervertexEXT variable from the vertex shader). Perspective vs non-perspective - Demonstrates the difference between barycentric perspective and non-perspective coordinates. Wireframe - Demonstrates rendering a wireframe using barycentric coordinates. Interpolate to mass center - Demonstrates color interpolation to the triangle’s center of mass using barycentric coordinates. Barycoord texture - Demonstrates the modification of a texture using barycentric coordinates. Enabling the fragment shader barycentric feature is done using the VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR structure, where fragmentShaderBarycentric indicates barycentric support in fragment shaders. The structure should be passed to vkGetPhysicalDeviceFeatures2 in the pNext member of the VkPhysicalDeviceFeatures2 structure. VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR requested_fragment_shader_barycentric_features requested_fragment_shader_barycentric_features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR; requested_fragment_shader_barycentric_features.fragmentShaderBarycentric = VK_TRUE; In the sample it is done in the FragmentShaderBarycentric::request_gpu_features method using the template function vkb::PhysicalDevice::request_extension_features provided by the Vulkan-Samples framework. In the vertex shader a variable outColor is declared. It is used in the fragment shader with the pervertexEXT decoration: layout (location = 0) out vec3 outColor; In the fragment shader the required feature is defined: #extension GL_EXT_fragment_shader_barycentric : require The color input variable is declared with the pervertexEXT decoration and as a matrix (it contains color for three vertices of the triangle for each processed fragment): layout (location = 0) in pervertexEXT vec3 inColor[]; Depending on the effect chosen in the GUI outColor is calculated differently in the switch-case statement, e.g. for color interpolation using barycentric perspective coordinates: outColor.rgb = inColor[0].rgb * gl_BaryCoordEXT.x + inColor[1].rgb * gl_BaryCoordEXT.y + inColor[2].rgb * gl_BaryCoordEXT.z;","title":"Fragment shader barycentric","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/fragment_shader_barycentric/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":2},{"text":"Shaders","hash":"_shaders","id":3},{"text":"Vertex shader","hash":"_vertex_shader","id":4},{"text":"Fragment shader","hash":"_fragment_shader","id":5}]},"63":{"id":63,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extension: VK_KHR_fragment_shading_rate Uses a special framebuffer attachment to control fragment shading rates for different framebuffer regions. This allows explicit control over the number of fragment shader invocations for each pixel covered by a fragment, which is e.g. useful for foveated rendering.","title":"Fragment shading rate","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/fragment_shading_rate/README.html","titles":[]},"64":{"id":64,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. The KHR fragment shading rate extension introduces the ability to selectively render at different sample rates within the same rendered image. This can be useful when rendering at very high resolutions or when the frequency content is not evenly spread through the rendered image. This tutorial demonstrates one way of controlling that sample rate by estimating the frequency content of each pixel of the rendered image. The fragment shading rate extension can be enabled through the VK_KHR_fragment_shading_rate device extension and the VkPhysicalDeviceFragmentShadingRateFeaturesKHR device features. This sample demonstrates the attachment capability, in which the render pass directly references the shading rate image through a VkFragmentShadingRateAttachmentInfoKHR struct attached to the .pNext of a sub-pass. The image below shows the scene from this sample. Note the areas of high image variation in the center of each cube face, and the areas of low image variation in the sky and plain corners of each cube face. When used as an attachment, each pixel within the shading rate image controls a \"texel\", or fixed region within the output image, specified by shadingRateAttachmentTexelSize. For example, each pixel in the shading rate image might control the shading rate of a 4x4 texel within the rendered image, since all output pixels of the texel are shaded at the same rate, the shading rate image has a lower resolution. The number and type of possible shading rates is controlled by the device and can be queried through the vkGetPhysicalDeviceFragmentShadingRatesKHR function, and may include shading rates that vary in both the x- and y-directions, for instance 1x2 or 4x2 pixel texels. These supported shading rate values are provided to the \"compute shader\" when determining the optimal shading rate. This sample demonstrates how to use a dynamic shading rate that responds to the frequency content of the image. To achieve this, an attachment is added to the fragment shader at location=1, where the x- and y- derivatives are estimated using the dFdx and dFdy functions. A separate compute shader then processes all the pixels within the texel of the derivative image to determine the new fragment shading rate for the next image: texels with higher squared derivatives calculated using dFdx and dFdy will be afforded a higher shading rate during the next frame compared to texels with lower derivatives. The frequency information is visualized below and can be accessed by selecting \"Frequency\" in the data visualization dropdown in the sample GUI. Shading rates are encoded using 8-bit unsigned integers. For instance, the lowest shading rate of a 4x4 texel is given by: (4>>1) | (4>1)|(rate_y> 1) | (optimal_rate_y << 1); This rate code is placed into shading_rate_image_compute. Because of the device format requirements of the fragment shading rate extension (and the incompatibility of usage flags), the shading_rate_image and shading_rate_image_compute images are separate and have different usage flags: VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR for the shading rate attachment image and VK_IMAGE_USAGE_STORAGE_BIT for the \"compute\" image (in addition to transfer bits). However, their content is identical, and after the \"compute shader\" has completed, the contents from shading_rate_image_compute are copied to shading_rate_image. One problem with calculating the frequency information during the render pass is that each frame is using the previous frame’s shading rate, which results in a feedback loop that lead to unstable or \"stutter\" in the calculated frequency information. To prevent this problem, this sample introduces a separate renderpass that calculates the frequency information without using the shading rate attachment. To maintain performance, this renderpass is performed at a lower resolution controllable by the \"Subpass size reduction\" option in the sample GUI. In production systems, MSAA can also be disabled. For instance, at a 4x4 reduction with MSAA disabled, the frequency information calculation is performed over only 1/128 as many samples as the full resolution with 8 MSAA samples. If the resulting shading rate image is used to reduce the full-resolution samples by half, then the total sample reduction is still greater than 40%.","title":"Fragment Shading Rate","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/fragment_shading_rate_dynamic/README.html","titles":[{"text":"Shading Rate Image","hash":"_shading_rate_image","id":1},{"text":"Encoding the Shading Rate","hash":"_encoding_the_shading_rate","id":2},{"text":"Implementation Details","hash":"_implementation_details","id":3},{"text":"Calculating Frequency Information in a Separate Renderpass","hash":"_calculating_frequency_information_in_a_separate_renderpass","id":4}]},"65":{"id":65,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This code sample demonstrates how to incorporate the Vulkan extension VK_EXT_full_screen_exclusive. This extension provides a solution for the full screen exclusion issue on Windows prior to the 11 version. Windows prior to 11 cannot correctly get an exclusive full screen window, VK_EXT_full_screen_exclusive is applicable on Windows prior to version 11 platform alone. This sample provides a detailed procedure to activate full screen exclusive mode on Windows applications. Users can switch display modes from: 1) windowed, 2) borderless fullscreen, and 3) exclusive fullscreen using keyboard inputs. Configuring the swapchain create info using full screen exclusive extension DOES NOT automatically set the application window to full screen mode. The following procedure shows how to activate full screen exclusive mode correctly: 1) recreate the swapchain using full screen exclusive. 2) recreate the frame buffers with the new swapchain. 3) configure the application window to fullscreen mode 4) execute the acquire full screen exclusive EXT call. More details can be found in the link: MonitorFromWindow function (winuser.h)","title":"Full Screen Exclusive","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/full_screen_exclusive/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Introduction","hash":"_introduction","id":2},{"text":"*Reminder","hash":"_reminder","id":3}]},"66":{"id":66,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. The VK_EXT_graphics_pipeline_library extensions allows separate compilation of different parts of the graphics pipeline. With this it’s now possible to split up the monolithic pipeline creation into different steps and re-use common parts shared across different pipelines. Compared to monolithic pipeline state, this results in faster pipeline creation times, making this extension a good fit for applications and games that do a lot of pipeline creation at runtime. As noted above, the monolithic pipeline state has been split into distinct parts that can be compiled independently: Vertex Input Interface Pre-Rasterization Shaders Fragment Shader Fragment Output Interface Creating a pipeline library (part) is similar to creating a pipeline, with the difference that you only need to specify the properties required for that specific pipeline state (see above). E.g. for the vertex input interface you only specify input assembly and vertex input state, which is all required to define the interfaces to a vertex shader. VkGraphicsPipelineLibraryCreateInfoEXT library_info{}; library_info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT; library_info.flags = VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT; VkPipelineInputAssemblyStateCreateInfo input_assembly_state = vkb::initializers::pipeline_input_assembly_state_create_info(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, 0, VK_FALSE); VkPipelineVertexInputStateCreateInfo vertex_input_state = vkb::initializers::pipeline_vertex_input_state_create_info(); std::vector vertex_input_bindings = { vkb::initializers::vertex_input_binding_description(0, sizeof(Vertex), VK_VERTEX_INPUT_RATE_VERTEX), }; std::vector vertex_input_attributes = { vkb::initializers::vertex_input_attribute_description(0, 0, VK_FORMAT_R32G32B32_SFLOAT, 0), vkb::initializers::vertex_input_attribute_description(0, 1, VK_FORMAT_R32G32B32_SFLOAT, sizeof(float) * 3), vkb::initializers::vertex_input_attribute_description(0, 2, VK_FORMAT_R32G32_SFLOAT, sizeof(float) * 6), }; vertex_input_state.vertexBindingDescriptionCount = static_cast(vertex_input_bindings.size()); vertex_input_state.pVertexBindingDescriptions = vertex_input_bindings.data(); vertex_input_state.vertexAttributeDescriptionCount = static_cast(vertex_input_attributes.size()); vertex_input_state.pVertexAttributeDescriptions = vertex_input_attributes.data(); VkGraphicsPipelineCreateInfo pipeline_library_create_info{}; pipeline_library_create_info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO; pipeline_library_create_info.flags = VK_PIPELINE_CREATE_LIBRARY_BIT_KHR | VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT; pipeline_library_create_info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO; pipeline_library_create_info.pNext = &library_info; pipeline_library_create_info.pInputAssemblyState = &input_assembly_state; pipeline_library_create_info.pVertexInputState = &vertex_input_state; vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &pipeline_library_create_info, nullptr, &pipeline_library.vertex_input_interface); With this extension, creating shader modules with vkCreateShaderModule has been deprecated and you can instead just pass the shader module create info via pNext into your pipeline shader stage create info. This change bypasses a useless copy and is recommended: VkShaderModuleCreateInfo shader_module_create_info{}; shader_module_create_info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO; shader_module_create_info.codeSize = static_cast(spirv.size()) * sizeof(uint32_t); shader_module_create_info.pCode = spirv.data(); VkPipelineShaderStageCreateInfo shader_Stage_create_info{}; shader_Stage_create_info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO; // Chain the shader module create info shader_Stage_create_info.pNext = &shader_module_create_info; shader_Stage_create_info.stage = VK_SHADER_STAGE_VERTEX_BIT; shader_Stage_create_info.pName = \"main\"; VkGraphicsPipelineCreateInfo pipeline_library_create_info{}; pipeline_library_create_info.stageCount = 1; pipeline_library_create_info.pStages = &shader_Stage_create_info; You can see this in the pre-rasterization and fragment shader library setup parts of the sample. Once all pipeline (library) parts have been created, the pipeline executable can be linked together from them: std::vector libraries = { pipeline_library.vertex_input_interface, pipeline_library.pre_rasterization_shaders, fragment_shader, pipeline_library.fragment_output_interface }; // Link the library parts into a graphics pipeline VkPipelineLibraryCreateInfoKHR linking_info{}; linking_info.sType = VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR; linking_info.libraryCount = static_cast(libraries.size()); linking_info.pLibraries = libraries.data(); VkGraphicsPipelineCreateInfo executable_pipeline_create_info{}; executable_pipeline_create_info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO; executable_pipeline_create_info.pNext = &linking_info; executable_pipeline_create_info.flags = VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT; VkPipeline executable = VK_NULL_HANDLE; vkCreateGraphicsPipelines(get_device().get_handle(), thread_pipeline_cache, 1, &executable_pipeline_create_info, nullptr, &executable); This will result in the pipeline state object to be used at draw time. A note on VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT: This is an optimization flag. If specified, implementations are allowed to do additional optimization passes. This may increase build times but can in turn result in lower runtime costs. This sample demonstrates that functionality by creating the shared vertex input interface, pre-rasterization shader state and fragment output interface parts only once up-front, and then re-uses them to create pipelines with customized fragment shaders using random lighting models at runtime. Pipelines are created in a background thread and once they’re created, command buffers are updated to display a mesh using the new pipeline. Reducing Draw Time Hitching with VK_EXT_graphics_pipeline_library Extension proposal With the new extension it’s now possible to separate the monolithic pipeline state into multiple parts that can be reused and built independently. This opens up new possibilities for optimizing pipeline creation and reducing hitches at runtime.","title":"Graphics pipeline libraries","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/graphics_pipeline_library/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Individual pipeline states","hash":"_individual_pipeline_states","id":2},{"text":"Creating pipeline libraries","hash":"_creating_pipeline_libraries","id":3},{"text":"Deprecating shader modules","hash":"_deprecating_shader_modules","id":4},{"text":"Linking executables","hash":"_linking_executables","id":5},{"text":"The sample","hash":"_the_sample","id":6},{"text":"Additional resources","hash":"_additional_resources","id":7},{"text":"Conclusion","hash":"_conclusion","id":8}]},"67":{"id":67,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how a mesh shader can be used to achieve the same results as with geometry shader. It contains geometry and mesh shader pipelines visualizing normals in the teapot model. To access model vertices from within mesh shader it needs to be stored within an Shader Storage Buffer Object (SSBO). Indices need to be divided into meshlets and also stored within an SSBO so each work item can work on a single meshlet. Meshlets are created by spliting source geometry. Exemplary meshlet structure used in this sample: struct Meshlet { uint32_t vertices[64]; uint32_t indices[126]; uint32_t vertex_count; uint32_t index_count; }; By linearly scanning the indices of the model, Meshlet-structures are created with up to 126 indices or 64 unique vertex indices, whatever is reached first. See prepare_meshlets() for an exemplary implementation. This sample expands function load_model() by adding a bool storage_buffer parameter, set to false by default. In that function model data is read from the file teapot.gltf. By setting storage_buffer to true, vertex position and normals are stored in an SSBO using the AlignedVertex structure (because of std430 memory layout). After that, indices are divided into meshlets using the Meshlet structure and also stored in SSBOs. The device extension is provided by VK_EXT_MESH_SHADER_EXTENSION_NAME. It requires VK_KHR_SPIRV_1_4_EXTENSION_NAME, which in turn require VulkanAPI 1.1 and VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME. SPIRV needs to be set to 1.4. set_api_version(VK_API_VERSION_1_1); add_device_extension(VK_EXT_MESH_SHADER_EXTENSION_NAME); add_device_extension(VK_KHR_SPIRV_1_4_EXTENSION_NAME); add_device_extension(VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME); vkb::GLSLCompiler::set_target_environment(glslang::EShTargetSpv, glslang::EShTargetSpv_1_4); The VkPhysicalDeviceMeshShaderFeaturesEXT structure needs to be included in the pNext chain of the VkPhysicalDeviceFeatures2 structure passed to vkGetPhysicalDeviceFeatures2 auto &requested_vertex_input_features = gpu.request_extension_features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT); requested_vertex_input_features.meshShader = VK_TRUE; Usage of geometry shader is usually not advised for real-time rendering purposes as it leads to high memory bandwith and reduced performance. On the other hand it is part of traditional pipeline and doesn’t require additional pre-procesing of source geometry opposite to mesh shader. Mesh shader offers better performance and is more flexible in it potential usage but in case of working with a source geometry pre-processing is needed (meshlets).","title":"Geometry shader to mesh shader","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/gshader_to_mshader/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Meshlets","hash":"_meshlets","id":2},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":3},{"text":"Pros and cons","hash":"_pros_and_cons","id":4}]},"68":{"id":68,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This is a transcoded version of the extension sample Mesh Shading that illustrates the usage of the C++ bindings of vulkan provided by Vulkan-Hpp. This code sample demonstrates how to create the absolute most basic mesh shading example. It creates a single triangle in a mesh shader. There is no vertex shader, there is only a mesh shader and a fragment shader.","title":"Mesh shading","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/hpp_mesh_shading/README.html","titles":[]},"69":{"id":69,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. The VK_EXT_extended_dynamic_state2 extension allows to use dynamic states e.g. the VK_DYNAMIC_STATE_LOGIC_OP_EXT. This may help an application to change a logical operation used without creating a new pipeline. The sample demonstrates usage of this extension with dynamically changed logical operations applied to blending. Logical operations are applied only for signed and unsigned integer and normalized integer framebuffers. In the sample the surface format is changed to VK_FORMAT_B8G8R8A8_UNORM by overriding the virtual method create_render_context (derived from ApiVulkanSample class). auto surface_priority_list = std::vector{ {VK_FORMAT_B8G8R8A8_UNORM, VK_COLORSPACE_SRGB_NONLINEAR_KHR}, }; render_context = platform.create_render_context(*device.get(), surface, surface_priority_list); In the sample two pipelines are created: a pipeline for a background model (the background pipeline); a pipeline for a cube model (the baseline pipeline). The cube model is used to present blending effect achieved using the dynamic logical operations. The logicOpEnable member of the VkPipelineColorBlendStateCreateInfo structure controls if logical operations should be applied. The logicOpEnable member is set to VK_TRUE during creation of the baseline pipeline in the create_pipeline method. VkPipelineColorBlendStateCreateInfo color_blend_state = vkb::initializers::pipeline_color_blend_state_create_info(1, &blend_attachment_state); /* Enable logic operations */ color_blend_state.logicOpEnable = VK_TRUE; In the same method VK_DYNAMIC_STATE_LOGIC_OP_EXT is added to the vector of VkDynamicState (used to define pipeline dynamic state in VkPipelineDynamicStateCreateInfo). std::vector dynamic_state_enables = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR, VK_DYNAMIC_STATE_LOGIC_OP_EXT, }; VkPipelineDynamicStateCreateInfo dynamic_state = vkb::initializers::pipeline_dynamic_state_create_info( dynamic_state_enables.data(), static_cast(dynamic_state_enables.size()), 0); Both structures: color_blend_state and dynamic_state are used to define VkGraphicsPipelineCreateInfo needed to create the graphics pipeline. VkGraphicsPipelineCreateInfo graphics_create{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO}; graphics_create.pColorBlendState = &color_blend_state; graphics_create.pDynamicState = &dynamic_state; ... VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline.baseline)); Logical operations are not enabled in the background pipeline. std::vector dynamic_state_enables_background = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR, }; /* Disable logic operations in background pipeline */ color_blend_state.logicOpEnable = VK_FALSE; Calling vkCmdSetLogicOpEXT allows to set the logic operation dynamically. In the sample it is called before drawing the model in the build_command_buffers method using a value provided by the GUI. Available logical operations are defined by the VkLogicOp enumeration (check the Vulkan specification for details of the logical operations). The background model is drawn before the cube model (with logical operations enabled) to observe blending results on the cube model. VK_CHECK(vkBeginCommandBuffer(draw_cmd_buffer, &command_begin)); ... /* Drawing background */ draw_model(background_model, draw_cmd_buffer); ... /* Set logic operation chosen in GUI for the cube model */ vkCmdSetLogicOpEXT(draw_cmd_buffer, static_cast(gui_settings.selected_operation)); /* Draw model */ draw_created_model(draw_cmd_buffer); ... VK_CHECK(vkEndCommandBuffer(draw_cmd_buffer)); The extended dynamic state 2 API requires Vulkan 1.0 and the appropriate headers / SDK is required. This extension has been partially promoted to Vulkan 1.3. The device extension VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME requires VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME instance extension to be enabled. add_instance_extension(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME); add_device_extension(VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME); Enabling extension features is done using VkPhysicalDeviceExtendedDynamicState2FeaturesEXT and VkPhysicalDeviceExtendedDynamicStateFeaturesEXT structures. typedef struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT { VkStructureType sType; void* pNext; VkBool32 extendedDynamicState2; VkBool32 extendedDynamicState2LogicOp; VkBool32 extendedDynamicState2PatchControlPoints; } VkPhysicalD typedef struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT { VkStructureType sType; void* pNext; VkBool32 extendedDynamicState; } VkPhysicalDeviceExtendedDynamicStateFeaturesEXT; In the sample it is implemented in the request_gpu_features method. auto &requested_extended_dynamic_state2_features = gpu.request_extension_features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT); requested_extended_dynamic_state2_features.extendedDynamicState2 = VK_TRUE; requested_extended_dynamic_state2_features.extendedDynamicState2LogicOp = VK_TRUE; auto &requested_extended_dynamic_state_feature = gpu.request_extension_features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT); requested_extended_dynamic_state_feature.extendedDynamicState = VK_TRUE;","title":"Logic operations dynamic state","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/logic_op_dynamic_state/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Surface format setting","hash":"_surface_format_setting","id":2},{"text":"Enabling logical operations in pipeline creation","hash":"_enabling_logical_operations_in_pipeline_creation","id":3},{"text":"Logical operation dynamic setting in command buffer creation","hash":"_logical_operation_dynamic_setting_in_command_buffer_creation","id":4},{"text":"Enabling the required extensions","hash":"_enabling_the_required_extensions","id":5}]},"70":{"id":70,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to incorporate the Vulkan memory budget extension. Memory budget extension helps users to sample the memory budget consumption on each heap from the physical device, and is able to tell the property flag for each heap. Which is a proper debug tool to visualize the memory consumption in run-time. In order to enable usage of memory budget extension features, an instance extension and a device extension were introduced in the constructor of the MemoryBudget class, where: add_instance_extension(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME); add_device_extension(VK_EXT_MEMORY_BUDGET_EXTENSION_NAME); Memory properties related structure instances were defined and initialized in the header of the MemoryBudget class, listed as follows: VkPhysicalDeviceMemoryBudgetPropertiesEXT physical_device_memory_budget_properties{}; VkPhysicalDeviceMemoryProperties2 device_memory_properties{}; Where, the sType and pNext variables were defined inside the initialize_device_memory_properties() function, such that: void MemoryBudget::initialize_device_memory_properties() { // Initialize physical device memory budget properties structures variables physical_device_memory_budget_properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT; physical_device_memory_budget_properties.pNext = nullptr; // Initialize physical device memory properties structure variables device_memory_properties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2; device_memory_properties.pNext = &physical_device_memory_budget_properties; } The sType of device_memory_properties is defined as VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, and its pNext chained in a pointer of the structure instance physical_device_memory_budget_properties. Where, the sType of physical_device_memory_budget_properties is defined as VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT and its pNext is defined as a nullptr. Each of the mentioned extension structure instances were defined in the header and initialized in function initialize_device_memory_properties(). In application’s UI overlay, total memory usage and total memory budget will be displayed. In addition, by pressing down the arrow next to the “Memory Heap Details” tab, it expands a list of all memory usages and budgets from the heap count. Where all memory properties were converted and displayed in proper units (e.g.,kilobytes, megabytes, etc.,). Where: void MemoryBudget::on_update_ui_overlay(vkb::Drawer &drawer) { converted_memory = update_converted_memory(device_memory_total_usage); drawer.text(\"Total Memory Usage: %.2f %s\", converted_memory.data, converted_memory.units.c_str()); converted_memory = update_converted_memory(device_memory_total_budget); drawer.text(\"Total Memory Budget: %.2f %s\", converted_memory.data, converted_memory.units.c_str()); if (drawer.header(\"Memory Heap Details\")) { for (int i = 0; i (device_memory_heap_count); i++) { std::string header = \"Memory Heap Index: \" + std::to_string(i); if (drawer.header(header.c_str())) { converted_memory = update_converted_memory(physical_device_memory_budget_properties.heapUsage[i]); drawer.text(\"Usage: %.2f %s\", converted_memory.data, converted_memory.units.c_str()); converted_memory = update_converted_memory(physical_device_memory_budget_properties.heapBudget[i]); drawer.text(\"Budget: %.2f %s\", converted_memory.data, converted_memory.units.c_str()); drawer.text(\"Heap Flag: %s\", read_memoryHeap_flags(device_memory_properties.memoryProperties.memoryHeaps[i].flags).c_str()); } } } } The function update_device_memory_properties() measures and updates all memory properties related variables, by calling the vkGetPhysicalDeviceMemoryProperties2() and evaluating the device_memory_total_usage and device_memory_total_budget, where: void MemoryBudget::update_device_memory_properties() { vkGetPhysicalDeviceMemoryProperties2(get_device().get_gpu().get_handle(), &device_memory_properties); device_memory_heap_count = device_memory_properties.memoryProperties.memoryHeapCount; device_memory_total_usage = 0; device_memory_total_budget = 0; for (uint32_t i = 0; i < device_memory_heap_count; i++) { device_memory_total_usage += physical_device_memory_budget_properties.heapUsage[i]; device_memory_total_budget += physical_device_memory_budget_properties.heapBudget[i]; } } And the function update_device_memory_properties() is assigned to the prepare_instance_data(). Which, in this sample it will only need to be called once after everything was ready in the prepare_instance_data(), and before it returns true.","title":"Memory Budget extended features","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/memory_budget/README.html","titles":[{"text":"Memory budget extension","hash":"_memory_budget_extension","id":1},{"text":"UI Overlay: Memory properties","hash":"_ui_overlay_memory_properties","id":2}]},"71":{"id":71,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to incorporate the Vulkan extension VK_EXT_mesh_shader, and introduces per primitive culling in a mesh shader. 1) enable the mesh shader extension 2) create a mesh shading graphic pipeline 3) generate a simple mesh using meshlets 4) establish a basic cull logic for the meshlets. To enable the mesh shading feature, the following extensions are required: (NB: VK_API_VERSION_1_1 is required as a base requirement) 1) VK_KHR_SPIRV_1_4_EXTENSION_NAME 2) VK_EXT_MESH_SHADER_EXTENSION_NAME 3) VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME To enable task shaders and mesh shaders enable the following flags from the VkPhysicalDeviceMeshShaderFeaturesEXT feature. 1) taskShader 2) meshShader When working with Mesh shader pipelines, Vertex Input State and Input Assembly state are ignored. This is because the mesh pipeline has the responsibility of defining/creating the vertex information that the standard fragment pipeline utilizes. The mesh pipeline can create its own vertices as is done in this sample. Or it can receive them from the application the same way one would for compute shaders when working with models. Thus, we disable the pVertexInputState and pInputAssemblyState by setting them to NULL. In this sample, we use a UBO (Uniform Buffer Object) to set the settings for the culling. struct UBO { float cull_center_x = 0.0f; float cull_center_y = 0.0f; float cull_radius = 1.75f; float meshlet_density = 2.0f; } ubo_cull{}; cull_center_x and cull_center_y determines the translation of the cull mask cull_radiusdefines the size of the cull mask. meshlet_density defines the total number of meshlets used for the sample. A task shader is an optional but recommended stage responsible for launching mesh shaders. It has two purposes: Decide how many mesh shaders to launch in the workgroup. Create a task payload that mesh shaders will have read-only access to. taskPayloadSharedEXT type variable in GLSL can exist at most once it gets implicitly used by EmitMeshTasksEXT and behaves like shared memory in the task shader and like a read-only SSBO in a mesh shader. In general, one should use task shaders anytime you use the mesh pipeline. While it is \"optional,\" their use is strongly encouraged to get the most out of the mesh shading pipeline. The only time one wouldn’t use them is for very simplistic scenes such as rendering a single triangle found in the mesh shader sample. // Example of the data shared with its associated mesh shader: // 1) define some structure if more than one variable data sharing is desired: // Please note: GPU vendors recommend to use as little task payload as possible, eg. by packing the data to fewer bits etc. struct SharedData { vec4 positionTransformation; int N; int meshletsNumber; float subDimension; float cullRadius; }; // 2) use the following variable with a storage class specifier to \"establish the connection\" taskPayloadSharedEXT SharedData sharedData; Once a variable is defined with taskPayloadSharedEXT in the task shader, it will be shared with the mesh shader when EmitMeshTasksEXT is called. In general, the Mesh pipeline refers to a new pipeline which replaces everything before the fragment shader with an (optional) task shading stage that can call other mesh shading stages. A task shader (optional) is used to launch mesh shader workgroup(s) A mesh shader has the responsibility to generate primitives and vertices. More details about emitting a mesh task can be found in the attached article: Mesh Shading For Vulkan Introduction to Turing Mesh Shaders GPU manufactures have recommended best practices for their hardware in setting the work group and mesh size number. Further reading can be found here: Meshlet Size tradeoffs NVIDIA - Mesh Shaders in Turing AMD - Sampler feedback ultimate in Mesh shaders Timur’s blog Task and mesh shaders are executed in workgroups similar to compute shaders. Each task shader workgroup can launch many mesh shader workgroups. Each mesh shader workgroup is responsible for generating vertices and primitives. The API allows for any logic, but a typical application it is recommended to organize this around meshlets, which are a small group of vertices and primitives. Typically, each task shader invocation processes a group of meshlets and each mesh shader workgroup processes one meshlet. The vertices and primitives generation process can be found in the following code: // Vertices: gl_MeshVerticesEXT[k * 4 + 0].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_0, 0.0f, 1.0f) + sharedData.positionTransformation + displacement; gl_MeshVerticesEXT[k * 4 + 1].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_1, 0.0f, 1.0f) + sharedData.positionTransformation + displacement; gl_MeshVerticesEXT[k * 4 + 2].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_2, 0.0f, 1.0f) + sharedData.positionTransformation + displacement; gl_MeshVerticesEXT[k * 4 + 3].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_3, 0.0f, 1.0f) + sharedData.positionTransformation + displacement; // Indices gl_PrimitiveTriangleIndicesEXT[k * 2 + 0] = unitPrimitive_0 + k * uvec3(4); gl_PrimitiveTriangleIndicesEXT[k * 2 + 1] = unitPrimitive_1 + k * uvec3(4); // Assigning the color output: vec3 color = vec3(1.0f, 0.0f, 0.0f) * (k + 1) / sharedData.meshletsNumber; outColor[k * 4 + 0] = color; outColor[k * 4 + 1] = color; outColor[k * 4 + 2] = color; outColor[k * 4 + 3] = color; More details of meshlets generation can be found in the attached article: Using Mesh Shaders for Professional Graphics This sample uses a simple per-primitive cull functionality from the mesh shader. The intention in mesh shading is to only generate geometry that is relevant to the scene. In this sample, a circular visual zone is centered at the origin, with an adjustable radius, controlled by the gui. When a primitive moves out of the visual zone, its generation process will be skipped. // the actual position of each meshlet: vec4 position = displacement + sharedData.positionTransformation; float squareRadius = position.x * position.x + position.y * position.y; // Cull Logic: only if the meshlet center position is within the view circle defined by the cull radius, // then the meshlet will be generated. if (squareRadius < sharedData.cullRadius * sharedData.cullRadius) { // Generating meshlets } Please note that per mesh culling should be done in the task shader and used to prevent mesh shaders from even launching. The simplistic culling method demonstrated here is not the most ideal use of culling in mesh shaders and infact is discouraged due to limited benefit. Instead please opt for limiting the number of mesh shaders that require launching by doing the cull within the task shader. More advanced culling solutions can be found in the following video: Culling with NVIDIA Mesh Shaders","title":"Mesh Shader Culling","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/mesh_shader_culling/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Contents","hash":"_contents","id":2},{"text":"Enabling mesh shading","hash":"_enabling_mesh_shading","id":3},{"text":"Pipeline Creation","hash":"_pipeline_creation","id":4},{"text":"Linking resources","hash":"_linking_resources","id":5},{"text":"Task Shader","hash":"_task_shader","id":6},{"text":"Mesh Shader","hash":"_mesh_shader","id":7},{"text":"Per-primitive culling","hash":"_per_primitive_culling","id":8}]},"72":{"id":72,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This code sample demonstrates how to create the absolute most basic mesh shading example. It creates a single triangle in a mesh shader. There is no vertex shader, there is only a mesh shader and a fragment shader.","title":"Mesh shading","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/mesh_shading/README.html","titles":[]},"73":{"id":73,"text":"This folder does not contain a sample, but only OpenCL related units shared by the OpenCL interoperability samples in this repository.","title":"OpenCL common source files","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/open_cl_common/README.html","titles":[]},"74":{"id":74,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Even though compute support in Vulkan is mandatory, there are still use-cases where the broader range of OpenCL’s compute features may be required, e.g. for complex scientific computations or for re-using existing OpenCL kernels. For that both apis offer a set of vendor independent extensions that allow zero-copy sharing of objects known to both apis (known as \"api interoperability\"). Zero-copy means that both apis can access these objects without the need to duplicate and copy them between the apis. This allows for an efficient sharing of these objects between Vulkan and OpenCL. This sample demonstrates zero-copy sharing with an image that’s updated using an OpenCL compute kernel and displayed as a texture on a quad inside Vulkan. To sync between the two apis the sample also makes use of shared semaphores. To fully understand how this sample works it’s advised to have experience with both Vulkan and OpenCL. While both apis are maintained by Khronos, they differ greatly in their usage and concepts Both Vulkan and OpenCL offer extensions for so called external objects. An external object is something that can be referenced in multiple apis. In this sample we share images and semaphores, so we need to enable related extensions on both apis. For sharing the memory backing up the image, in Vulkan we need to enable VK_KHR_external_memory_capabilities at instance level and VK_KHR_external_memory at device level. We also need to enable specific extensions based on the platform we’re running on. For Windows that’s VK_KHR_external_memory_win32 and for all Unix based platforms we need to enable VK_KHR_external_memory_fd. The OpenCl equivalents to these extensions are cl_khr_external_memory, cl_khr_external_memory_win32 (Windows) and cl_khr_external_memory_opaque_fd (Unix based platforms). For sharing the semaphores used to sync image access between the apis, in Vulkan we need to enable VK_KHR_external_semaphore_capabilities at the instance level and VK_KHR_external_semaphore at the device level. The platform specific extension to enable are VK_KHR_external_semaphore_win32 for Windows and VK_KHR_external_semaphore_fd for Unix based platforms. The OpenCL equivalents to these are cl_khr_external_semaphore, cl_khr_external_semaphore_win32 (Windows) and cl_khr_external_semaphore_opaque_fd (Unix based platforms). We also need to match devices between Vulkan and OpenCL. In Vulkan this functionality is provided e.g. by the VK_KHR_external_memory_capabilities extension, in OpenCL this requires the cl_khr_device_uuid. More on this later. For the type of external objects we are going to share between Vulkan and OpenCL in this sample, we must make sure that we use the same device in Vulkan and OpenCL. See this chapter of the spec as to why this is required and to what types of external objects this applies. Esp. on desktop systems you may have multiple Vulkan and/or OpenCL implementations, and they may be reported by both apis in different orders. So just assuming that the first Vulkan device is also the first OpenCL device may not work. For that, both apis expose universally unique (device) identifiers (uuid) that we can use to match the devices between the apis. This is done in the prepare_opencl_resources function. Since this is a Vulkan sample we’ll try to find the OpenCL device that matches the UUID of our Vulkan sample: // Get the UUID of the current Vulkan device VkPhysicalDeviceIDPropertiesKHR physical_device_id_propreties{}; physical_device_id_propreties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES; VkPhysicalDeviceProperties2 physical_device_properties_2{}; physical_device_properties_2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR; physical_device_properties_2.pNext = &physical_device_id_propreties; vkGetPhysicalDeviceProperties2KHR(device->get_gpu().get_handle(), &physical_device_properties_2); // Iterate over all available OpenCL platforms and find the first that fits our requirements (extensions, device UUID) cl_uint num_platforms; clGetPlatformIDs_ptr(0, nullptr, &num_platforms); std::vector platform_ids(num_platforms); clGetPlatformIDs_ptr(num_platforms, platform_ids.data(), nullptr); cl_platform_id selected_platform_id{nullptr}; cl_device_id selected_device_id{nullptr}; // Iterate over all available OpenCL platforms for (auto &platform_id : platform_ids) { cl_uint num_devices; clGetDeviceIDs_ptr(platform_id, CL_DEVICE_TYPE_ALL, 0, nullptr, &num_devices); std::vector device_ids(num_devices); clGetDeviceIDs_ptr(platform_id, CL_DEVICE_TYPE_ALL, num_devices, device_ids.data(), nullptr); ... // Check every device of this platform and see if it matches our Vulkan device UUID selected_device_id = nullptr; for (auto &device_id : device_ids) { cl_uchar uuid[CL_UUID_SIZE_KHR]; clGetDeviceInfo_ptr(device_id, CL_DEVICE_UUID_KHR, sizeof(uuid), &uuid, nullptr); bool device_uuid_match = true; for (uint32_t i = 0; i get_memory_type(memory_requirements.memoryTypeBits, 0); VK_CHECK(vkAllocateMemory(device_handle, &memory_allocate_info, nullptr, &shared_image.memory)); VK_CHECK(vkBindImageMemory(device_handle, shared_image.image, shared_image.memory, 0)); As noted earlier, on Windows we need to pass additional process security related information using the VkExportMemoryWin32HandleInfoKHR structure: #ifdef _WIN32 WinSecurityAttributes win_security_attributes; VkExportMemoryWin32HandleInfoKHR export_memory_win32_handle_info{}; export_memory_win32_handle_info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR; export_memory_win32_handle_info.pAttributes = &win_security_attributes; export_memory_win32_handle_info.dwAccess = DXGI_SHARED_RESOURCE_READ | DXGI_SHARED_RESOURCE_WRITE; export_memory_allocate_info.pNext = &export_memory_win32_handle_info; #endif Once we created the image along with it’s memory in Vulkan, we switch over to OpenCL where we’ll import the image. Note that the OpenCL api looks very different from Vulkan. OpenCL e.g. often uses zero terminated property lists instead of explicit structures. For this property list we need to get a shareable handle for the Vulkan memory backing up our image, This is done with the get_vulkan_memory_handle function, which is a light wrapper around the Vulkan functions for getting the platform specific handle (e.g. vkGetMemoryWin32HandleKHR on Windows): std::vector mem_properties; #ifdef _WIN32 HANDLE handle = get_vulkan_memory_handle(shared_image.memory); mem_properties.push_back((cl_mem_properties) CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KHR); mem_properties.push_back((cl_mem_properties) handle); #else int fd = get_vulkan_memory_handle(shared_image.memory); mem_properties.push_back((cl_mem_properties) CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR); mem_properties.push_back((cl_mem_properties) fd); #endif mem_properties.push_back((cl_mem_properties) CL_MEM_DEVICE_HANDLE_LIST_KHR); mem_properties.push_back((cl_mem_properties) opencl_objects.device_id); mem_properties.push_back((cl_mem_properties) CL_MEM_DEVICE_HANDLE_LIST_END_KHR); mem_properties.push_back(0); And then create an OpenCL image using that handle: cl_image_format cl_img_fmt{}; cl_img_fmt.image_channel_order = CL_RGBA; cl_img_fmt.image_channel_data_type = CL_UNSIGNED_INT8; cl_image_desc cl_img_desc{}; cl_img_desc.image_width = shared_image.width; cl_img_desc.image_height = shared_image.height; cl_img_desc.image_type = CL_MEM_OBJECT_IMAGE2D; cl_img_desc.image_slice_pitch = cl_img_desc.image_row_pitch * cl_img_desc.image_height; cl_img_desc.num_mip_levels = 1; cl_img_desc.buffer = nullptr; int cl_result; opencl_objects.image = clCreateImageWithProperties(opencl_objects.context, mem_properties.data(), CL_MEM_READ_WRITE, &cl_img_fmt, &cl_img_desc, NULL, &cl_result); CL_CHECK(cl_result); The interesting part here is: cl_img_desc.buffer = nullptr; This means that we don’t allocate a buffer backing the image in OpenCL, but rather import it via the handle specified in the mem_properties property list. After the call to clCreateImageWithProperties we’re ready to use the image in both apis. To sync work across Vulkan and OpenCL we’ll be using semaphores. Once again we create these on the Vulkan side of our sample inside the OpenCLInterop::prepare_sync_objects() function. Sharing them is very similar to sharing any other object like e.g. the image: VkExportSemaphoreCreateInfoKHR export_semaphore_create_info{}; export_semaphore_create_info.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR; #ifdef _WIN32 WinSecurityAttributes win_security_attributes; VkExportSemaphoreWin32HandleInfoKHR export_semaphore_handle_info{}; export_semaphore_handle_info.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR; export_semaphore_handle_info.pAttributes = &win_security_attributes; export_semaphore_handle_info.dwAccess = DXGI_SHARED_RESOURCE_READ | DXGI_SHARED_RESOURCE_WRITE; export_semaphore_create_info.pNext = &export_semaphore_handle_info; export_semaphore_create_info.handleTypes = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT; #else export_semaphore_create_info.handleTypes = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT; #endif VkSemaphoreCreateInfo semaphore_create_info{}; semaphore_create_info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO; semaphore_create_info.pNext = &export_semaphore_create_info; VK_CHECK(vkCreateSemaphore(device->get_handle(), &semaphore_create_info, nullptr, &cl_update_vk_semaphore)); VK_CHECK(vkCreateSemaphore(device->get_handle(), &semaphore_create_info, nullptr, &vk_update_cl_semaphore)); We once again select the handle type based on the platform we’re compiling on and if it’s a Windows system we set the required security access information before creating two semaphores with vkCreateSemaphore. With the Vulkan part done, we again switch over to OpenCL, where we’ll import the Vulkan semaphores. The get_vulkan_semaphore_handle function is a convenient wrapper for getting a platform specific handle to a Vulkan semaphore. It’ll use vkGetSemaphoreWin32HandleKHR on windows, and vkGetSemaphoreFdKHR on all other platforms: std::vector semaphore_properties{ (cl_semaphore_properties_khr) CL_SEMAPHORE_TYPE_KHR, (cl_semaphore_properties_khr) CL_SEMAPHORE_TYPE_BINARY_KHR, (cl_semaphore_properties_khr) CL_SEMAPHORE_DEVICE_HANDLE_LIST_KHR, (cl_semaphore_properties_khr) opencl_objects.device_id, (cl_semaphore_properties_khr) CL_SEMAPHORE_DEVICE_HANDLE_LIST_END_KHR, }; // CL to VK semaphore // We need to select the external handle type based on our target platform #ifdef _WIN32 semaphore_properties.push_back((cl_semaphore_properties_khr) CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KHR); HANDLE handle = get_vulkan_semaphore_handle(cl_update_vk_semaphore); semaphore_properties.push_back((cl_semaphore_properties_khr) handle); #else semaphore_properties.push_back((cl_semaphore_properties_khr) CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR); int fd = get_vulkan_semaphore_handle(cl_update_vk_semaphore); semaphore_properties.push_back((cl_semaphore_properties_khr) fd); #endif semaphore_properties.push_back(0); cl_int cl_result; opencl_objects.cl_update_vk_semaphore = clCreateSemaphoreWithPropertiesKHR(opencl_objects.context, semaphore_properties.data(), &cl_result); CL_CHECK(cl_result); // Remove the last two entries so we can push the next handle and zero terminator to the properties list and re-use the other values semaphore_properties.pop_back(); semaphore_properties.pop_back(); // VK to CL semaphore // Code is the same, and not repeated here ... Now that all objects shared between Vulkan and OpenCL have been set up we can actually start sharing the images. Remember that we’ll be using OpenCL to update the contents of an image that we’ll then display in our Vulkan sample on a quad. This is done in the OpenCLInterop::render() function. This includes proper synchronization of the image access as well as acquiring and releasing the image between the two apis. First we need to ensure that the command buffer displaying our image has finished. This is done on the Vulkan side using a fence: vkWaitForFences(device->get_handle(), 1, &rendering_finished_fence, VK_TRUE, std::numeric_limits::max()); vkResetFences(device->get_handle(), 1, &rendering_finished_fence); Next up is work submission. As we’re now submitting work to two different apis we need to make sure that they’ll properly wait for and signal the semaphores. As noted above we have two semaphores: cl_update_vk_semaphore - Is signalled by OpenCL and waited on by Vulkan vk_update_cl_semaphore - Is signalled by Vulkan and waited by OpenCL Due to how basic semaphores in Vulkan work (we’re not using timeline semaphores), we don’t have a way of manually signalling them. So instead we differ between the first and consecutive command buffer submissions: if (first_submit) { first_submit = false; wait_stages = {VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT}; wait_semaphores = {semaphores.acquired_image_ready}; signal_semaphores = {semaphores.render_complete, vk_update_cl_semaphore}; } else { wait_stages = {VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, VK_PIPELINE_STAGE_ALL_COMMANDS_BIT}; wait_semaphores = {semaphores.acquired_image_ready, cl_update_vk_semaphore}; signal_semaphores = {semaphores.render_complete, vk_update_cl_semaphore}; } .. VK_CHECK(vkQueueSubmit(queue, 1, &submit_info, rendering_finished_fence)); The first submission won’t wait on any OpenCL semaphore (because it’s not signaled yet), and signals the Vulkan->OpenCL semaphore. So the OpenCl workload following the Vulkan queue submission will wait on it. On consecutive submits, the OpenCL code workload already has been submitted so we’ll also wait for the OpenCL->vulkan semaphore. Additionally we also provide an additional pipeline stage to wait on to match OpenCL’s workload. Now we move to the OpenCL side of things to update our image with an OpenCL kernel. The concepts here are similar to those in the Vulkan API. We first wait for the Vulkan->OpenCL semaphore to ensure that the Vulkan side of the graphics queue is done before we start with the OpenCL update part: CL_CHECK(clEnqueueWaitSemaphoresKHR(opencl_objects.command_queue, 1, &opencl_objects.vk_update_cl_semaphore, nullptr, 0, nullptr, nullptr)); We then need to acquire the image handle created from our image. In this case, the image is an external memory handle (to OpenCL) as it was created in Vulkan: CL_CHECK(clEnqueueAcquireExternalMemObjectsKHR(opencl_objects.command_queue, 1, &opencl_objects.image, 0, nullptr, nullptr)); Once we have successfully acquired the image for use with OpenCL, we can run the kernel to update the image contents. An OpenCL kernel is similar to a Vulkan compute shader. This part of the sample isn’t specific to api sharing, and just a basic example of how to run an OpenCL kernel on an image: std::array global_size = {shared_image.width, shared_image.height}; std::array local_size = {16, 16}; CL_CHECK(clSetKernelArg(opencl_objects.kernel, 0, sizeof(cl_mem), &opencl_objects.image)); CL_CHECK(clSetKernelArg(opencl_objects.kernel, 1, sizeof(float), &total_time_passed)); CL_CHECK(clEnqueueNDRangeKernel(opencl_objects.command_queue, opencl_objects.kernel, global_size.size(), nullptr, global_size.data(), local_size.data(), 0, nullptr, nullptr)); After this command we can return ownership of the image back to Vulkan by releasing it on the OpenCL side: CL_CHECK(clEnqueueReleaseExternalMemObjectsKHR(opencl_objects.command_queue, 1, &opencl_objects.image, 0, nullptr, nullptr)); After that we signal the OpenCL->Vulkan semaphore from the OpenCL side, so Vulkan can wait on this for the next frame: CL_CHECK(clEnqueueSignalSemaphoresKHR(opencl_objects.command_queue, 1, &opencl_objects.cl_update_vk_semaphore, nullptr, 0, nullptr, nullptr)); On the OpenCL side we’ll use the cl_update_vk_semaphore semaphore to signal work completion to Vulkan for the next frame (where first_submit is false). This ensures that the Vulkan graphics queue won’t start accessing the image until OpenCL queue has finished work. Doing cross api interoperability is a rather niche use case and quite involved, but with both apis offering similar concepts and extensions it’s not too hard to understand. Sharing other resources like buffers btw. is very similar to how we share images in this sample.","title":"Cross vendor OpenCL and Vulkan interoperability","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/open_cl_interop/README.html","titles":[{"text":"Background","hash":"_background","id":1},{"text":"The sample","hash":"_the_sample","id":2},{"text":"Required extensions","hash":"_required_extensions","id":3},{"text":"Matching devices","hash":"_matching_devices","id":4},{"text":"A note on Windows security","hash":"_a_note_on_windows_security","id":5},{"text":"Creating and sharing the image","hash":"_creating_and_sharing_the_image","id":6},{"text":"Creating and sharing semaphores","hash":"_creating_and_sharing_semaphores","id":7},{"text":"Sharing data between the apis","hash":"_sharing_data_between_the_apis","id":8},{"text":"Conclusion","hash":"_conclusion","id":9}]},"75":{"id":75,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. In certain scenarios OpenCL is used for compute, while another API is used for graphics, and interoperability between two APIs becomes important in this case. For example, in AR applications graphics rendering is often combined with machine learning workloads, which can be executed using OpenCL. In such cases we need zero-copy data sharing and efficient workload synchronization to achieve the best performance. While there are no dedicated extensions for direct Vulkan - OpenCL interoperability at the moment, both APIs provide generic sharing mechanism that can be used to achieve it. This sample demonstrates an approach for zero-copy data sharing using Android Hardware Buffers and corresponding extensions for Vulkan and OpenCL. Zero-copy assumes that both APIs use the same region of memory for an image or a buffer. In case of OpenCL and Vulkan we can use extensions to share data using: Android Hardware Buffers dma_buf Host memory This sample covers one of these options, which is more relevant to mobile developers working with Vulkan: Android Hardware Buffers. Native hardware buffers on Android represent a region of memory which can be bound to Vulkan, OpenGL ES or OpenCL primitives. This allows us to reuse it with two different APIs: In Vulkan hardware buffers can be imported or exported using VK_ANDROID_external_memory_android_hardware_buffer extension. AHardwareBuffer can be bound to a VkDeviceMemory object, which serves as an allocation for objects of type VkImage or VkBuffer. If we need to use an image backed by an AHardwareBuffer, we must specify while creating the image. It is done by assigning a pointer to the following structure to pNext field of VkImageCreateInfo: VkExternalMemoryImageCreateInfo external_memory_image_create_info; external_memory_image_create_info.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO; external_memory_image_create_info.pNext = nullptr; external_memory_image_create_info.handleTypes = VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID; This image (or buffer) must be specified as target during memory allocation. Below you can see, how the image object which is supposed to be shared with OpenCL is assigned to the image field of VkMemoryDedicatedAllocateInfo, while buffer field is assigned with VK_NULL_HANDLE: VkMemoryDedicatedAllocateInfo dedicated_allocate_info; dedicated_allocate_info.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO; dedicated_allocate_info.pNext = nullptr; dedicated_allocate_info.buffer = VK_NULL_HANDLE; dedicated_allocate_info.image = shared_image; A pointer to dedicated_allocate_info is provided as pNext of VkExportMemoryAllocateInfo. VkExportMemoryAllocateInfo export_memory_allocate_Info; export_memory_allocate_Info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO; export_memory_allocate_Info.pNext = &dedicated_allocate_info; export_memory_allocate_Info.handleTypes = VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID; This is specified as pNext of VkMemoryAllocateInfo, while allocationSize is set to 0. You can find more info on this in the specification. Once the memory is allocated and bound to the image (or buffer), we can export a handle of type AHardwareBuffer: VkMemoryGetAndroidHardwareBufferInfoANDROID info; info.sType = VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID; info.pNext = nullptr; info.memory = shared_memory; vkGetMemoryAndroidHardwareBufferANDROID(device, &info, &hardware_buffer); In this case AHardwareBuffer is created first and then used for VkDeviceMemory allocation. there are certain restrictions on image or buffer format and usage. You can find the list of Android Hardware Buffer formats and their Vulkan counterparts in this table. A pointer to dedicated_allocate_info is provided as pNext of VkImportAndroidHardwareBufferInfoANDROID. Also the hardware buffer we want to import must be provided during this stage: VkImportAndroidHardwareBufferInfoANDROID import_info; import_info.sType = VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID; import_info.pNext = &dedicated_allocate_info; import_info.buffer = hardware_buffer; We need to specify this data as pNext in VkMemoryAllocateInfo. In case of import, allocationSize and memoryTypeIndex should be based on the results of vkGetAndroidHardwareBufferPropertiesANDROID: VkAndroidHardwareBufferPropertiesANDROID buffer_properties; buffer_properties.sType = VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID; buffer_properties.pNext = nullptr; vkGetAndroidHardwareBufferPropertiesANDROID(device, hardware_buffer, &buffer_properties); Then the memory is allocated and bound to the image as usual. On Arm devices Android hardware buffers (as well as dma_buf and host memory) can be imported to OpenCL using cl_arm_import_memory extension. cl_mem object is retrieved in the following way: const cl_import_properties_arm import_properties[3] = { CL_IMPORT_TYPE_ARM, CL_IMPORT_TYPE_ANDROID_HARDWARE_BUFFER_ARM, 0}; cl_int result = CL_SUCCESS; cl_mem shared_cl_mem = clImportMemoryARM(context, CL_MEM_READ_WRITE, import_properties, hardware_buffer, CL_IMPORT_MEMORY_WHOLE_ALLOCATION_ARM, &result); In cl_import_properties_arm array the types and values of the properties are listed one by one with a 0 as a terminator in the end. We need to specify the type of the imported object in this list (in our case it’s CL_IMPORT_TYPE_ANDROID_HARDWARE_BUFFER_ARM). In this sample a simple OpenCL kernel is executed in the beginning of each frame to fill a cl_mem object backed by an AHardwareBuffer with a simple pattern (this pattern changes over time). This AHardwareBuffer is exported from a VkDeviceMemory object which is bound to a texture. After the OpenCL kernel is executed, the filled texture is displayed. The texture is displayed as a quad using the approach and shaders from Texture Loading sample. The sample uses only one shared texture for simplicity, but in real applications it’s worth having as many shared textures as there are framebuffers. This way the OpenCL kernel would be executed for the current frame, while the previous frame is being rendered and displayed (double buffering). Synchronization between APIs is performed on host: OpenCL queue is flushed before rendering A VkFence object is used to make sure the rendering is finished Both OpenCL and Vulkan extensions allow us to import or export certain handle types, which represent a region of memory. These memory regions can be used to achieve zero-copy data sharing. In this sample one of such handle types is demonstrated: Android Hardware Buffers. The extensions used in this case are: VK_ANDROID_external_memory_android_hardware_buffer cl_arm_import_memory","title":"OpenCL interoperability","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/open_cl_interop_arm/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Data sharing","hash":"_data_sharing","id":2},{"text":"Android Hardware Buffers","hash":"_android_hardware_buffers","id":3},{"text":"Support by Vulkan API","hash":"_support_by_vulkan_api","id":4},{"text":"Export from Vulkan API","hash":"_export_from_vulkan_api","id":5},{"text":"Import to Vulkan API","hash":"_import_to_vulkan_api","id":6},{"text":"Support by OpenCL","hash":"_support_by_opencl","id":7},{"text":"The sample","hash":"_the_sample","id":8},{"text":"Conclusion","hash":"_conclusion","id":9}]},"76":{"id":76,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extensions: VK_KHR_external_memory, VK_KHR_external_semaphore Render a procedural image using OpenGL and incorporate that rendered content into a Vulkan scene. Demonstrates using the same backing memory for a texture in both OpenGL and Vulkan and how to synchronize the APIs using shared semaphores and barriers.","title":"OpenGL interoperability","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/open_gl_interop/README.html","titles":[]},"77":{"id":77,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use VK_EXT_extended_dynamic_state2 extension, which eliminates the need to create multiple pipelines in case of specific different parameters. This extension changes how Patch Control Points are managed. Instead of static description during pipeline creation, this extension allows developers to change the parameter by using a function before every draw. Below is a comparison of common Vulkan static and dynamic setting of patch control points in the tessellation. Static/Non-dynamic Dynamic State 2 dynamic_state = {VK_DYNAMIC_STATE_VIEWPORT, + VK_DYNAMIC_STATE_SCISSOR} dynamic_state = {VK_DYNAMIC_STATE_VIEWPORT, + VK_DYNAMIC_STATE_SCISSOR, + VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT} VkPipelineTessellationStateCreateInfo tessellation_state{} + tessellation_state.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO + tessellation_state.patchControlPoints = patchControlPoints + …​ + vkCreateGraphicsPipelines(pipeline) vkCreateGraphicsPipelines(pipeline) draw(model, pipeline) vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints) + draw(model, pipeline) More details are provided in the sections that follow. In the static approach to pipeline creation patch control points have to be defined while creating the pipeline. This is illustrated in a static/non-dynamic pipeline creation. VkPipelineInputAssemblyStateCreateInfo input_assembly_state = vkb::initializers::pipeline_input_assembly_state_create_info( VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, 0, VK_FALSE); VkPipelineTessellationStateCreateInfo tessellation_state = vkb::initializers::pipeline_tessellation_state_create_info(3); std::vector dynamic_state_enables = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR }; VkPipelineDynamicStateCreateInfo dynamic_state = vkb::initializers::pipeline_dynamic_state_create_info( dynamic_state_enables.data(), static_cast(dynamic_state_enables.size()), 0); VkGraphicsPipelineCreateInfo graphics_create{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO}; graphics_create.pInputAssemblyState = &input_assembly_state; graphics_create.pDynamicState = &dynamic_state; graphics_create.pTessellationState = &tessellation_state; graphics_create.layout = pipeline_layouts.statically_tessellation; ... VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline.statically_tessellation)); In the approach if developer would like to change the patch control points number, then for each different number a new pipeline would be required. However, with VK_EXT_extended_dynamic_state2 the number of pipelines can be reduced by the possibility to change parameter Patch Control Points by calling vkCmdSetPatchControlPointsEXT before calling the draw_model method. With the usage of above function we can reduce the number of pipelines. Required dynamic states must be enabled and passed to the VkGraphicsPipelineCreateInfo structure. By setting VK_PRIMITIVE_TOPOLOGY_PATCH_LIST in the VkPipelineInputAssemblyStateCreateInfo structure, the pipeline can use the patch control points functionality. VkPipelineInputAssemblyStateCreateInfo input_assembly_state = vkb::initializers::pipeline_input_assembly_state_create_info( VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, 0, VK_FALSE); std::vector dynamic_state_enables = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR, VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT, }; VkPipelineDynamicStateCreateInfo dynamic_state = vkb::initializers::pipeline_dynamic_state_create_info( dynamic_state_enables.data(), static_cast(dynamic_state_enables.size()), 0); VkGraphicsPipelineCreateInfo graphics_create{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO}; graphics_create.pInputAssemblyState = &input_assembly_state; graphics_create.pDynamicState = &dynamic_state; graphics_create.layout = pipeline_layouts.dynamically_tessellation; ... VK_CHECK(vkCreateGraphicsPipelines(get_device().get_handle(), pipeline_cache, 1, &graphics_create, VK_NULL_HANDLE, &pipeline.dynamically_tessellation)); And now, thanks to VK_EXT_extended_dynamic_state2, we can change parameters before each corresponding draw call. VK_CHECK(vkBeginCommandBuffer(draw_cmd_buffer, &command_begin)); ... /* Binding dynamically_tessellation pipeline and descriptor sets */ vkCmdBindDescriptorSets(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layouts.dynamically_tessellation, 0, 1, &descriptor_sets.dynamically_tessellation, 0, nullptr); vkCmdBindPipeline(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline.dynamically_tessellation); /* Set patch control points value */ vkCmdSetPatchControlPointsEXT(draw_cmd_buffer, patch_control_points_triangle); /* Drawing scene with objects using tessellation feature */ draw_model(model, draw_cmd_buffer); ... VK_CHECK(vkEndCommandBuffer(draw_cmd_buffer)); The extended dynamic state 2 API requires Vulkan 1.0 and the appropriate headers / SDK is required. This extension has been partially promoted to Vulkan 1.3. The device extension is provided by VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME. It also requires VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME instance extension to be enabled. add_instance_extension(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME); add_device_extension(VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME); If the VkPhysicalDeviceExtendedDynamicState2FeaturesEXT structure is included in the pNext chain of the VkPhysicalDeviceFeatures2 structure passed to vkGetPhysicalDeviceFeatures2, it is filled in to indicate whether each corresponding feature is supported. VkPhysicalDeviceExtendedDynamicState2FeaturesEXT can also be used in the pNext chain of VkDeviceCreateInfo to selectively enable these features.","title":"Patch control point","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/patch_control_points/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Pipelines","hash":"_pipelines","id":2},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":3}]},"78":{"id":78,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This tutorial, along with the accompanying example code, demonstrates the use of the VK_KHR_portability_subset extension. When the VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR is set in the Instance class, Vulkan will consider devices that aren’t fully conformant such as MoltenVk to be identified as a conformant implementation. When this happens, use the VkPhysicalDevicePortabilitySubsetPropertiesKHR extension with the vkGetPhysicalDeviceFeatures2 as detailed below to get the list of supported/unsupported features. This tutorial along with the accompanying code also demonstrates the use of the VkPhysicalDevicePortabilitySubsetPropertiesKHR which is currently a beta khronos extension. This extension provides a list of supported and unsupported parts of Vulkan on a non-conformant Vulkan instance. Build with VK_ENABLE_BETA_EXTENSIONS set to enable this. Enabling the extension globally is done inside the framework, see the Instance class in instance. cpp for details. To enable the extension for all samples, build with VKB_ENABLE_PORTABILITY defined. Enabling the functionality for the portability subset is done by adding the extension to the list of extensions to enable at instance level. The device instance can also be used to generate the subset of portability enabled device items. As with all extensions, this is optional, and you should check if the extension is present before enabling it. uint32_t instance_extension_count; VK_CHECK(vkEnumerateInstanceExtensionProperties(nullptr, &instance_extension_count, nullptr)); std::vector available_instance_extensions(instance_extension_count); VK_CHECK(vkEnumerateInstanceExtensionProperties(nullptr, &instance_extension_count, available_instance_extensions.data())); bool debug_utils = false; for (auto &available_extension : available_instance_extensions) { if (strcmp(available_extension.extensionName, VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME) == 0) { debug_utils = true; extensions.push_back(VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME); } } NB: VkPhysicalDevicePortabilitySubsetFeaturesKHR is currently a beta extension and will only compile with the VK_ENABLE_BETA_EXTENSIONS definition set. VkPhysicalDevicePortabilitySubsetFeaturesKHR portability_features{}; portability_features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR; We then pass this to the pNext member of our Physical Device Features creation structure, then call the vkGetPhysicalDeviceFeatures2 function, the structure will populate and can be queried: VkPhysicalDeviceFeatures2 device_features{}; device_features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2; device_features.pNext = &portability_features; vkGetPhysicalDeviceFeatures2(get_device().get_gpu().get_handle(), &device_features);","title":"Vulkan Portability Extension","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/portability/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Setup","hash":"_setup","id":2},{"text":"Asking the device for the list of supported features","hash":"_asking_the_device_for_the_list_of_supported_features","id":3}]},"79":{"id":79,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extension: VK_KHR_push_descriptor Push descriptors apply the push constants concept to descriptor sets. Instead of creating per-object descriptor sets, this example passes descriptors at command buffer creation time.","title":"Push Descriptors","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/push_descriptors/README.html","titles":[]},"80":{"id":80,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extensions: VK_KHR_ray_query, VK_KHR_acceleration_structure Render a sponza scene using the ray query extension. Shows how to set up all data structures required for ray queries, including the bottom and top level acceleration structures for the geometry and a standard vertex/fragment shader pipeline. Shadows are cast dynamically by ray queries being cast by the fragment shader.","title":"Basic ray queries","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/ray_queries/README.html","titles":[]},"81":{"id":81,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extensions: VK_KHR_ray_tracing_pipeline, VK_KHR_acceleration_structure Render a basic scene using the official cross-vendor ray tracing extension. Shows how to setup all data structures required for ray tracing, including the bottom and top level acceleration structures for the geometry, the shader binding table and the ray tracing pipelines with shader groups for ray generation, ray hits, and ray misses. After dispatching the rays, the final result is copied to the swapchain image.","title":"Basic hardware accelerated ray tracing","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/ray_tracing_basic/README.html","titles":[]},"82":{"id":82,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This code sample demonstrates how to incorporate animations into a ray-traced scene, and shows how to incorporate different types of changing objects within the acceleration structures. The ray tracing acceleration structures are separated into two types: bottom-level acceleration structures (BLAS) and top-level acceleration structures (TLAS). The BLAS contains information about each object’s geometry within its own coordinate system and is built using the vertex and index data stored in a GPU buffer. In contrast, the TLAS contains information about each instance of the geometry and its transformation (i.e. scaling, rotation, translation, etc.). Each object must be represented in the BLAS, but can have any number of instances, each with its own transformation. This allows objects to be replicated without creating an acceleration structure for each instance. There are three categories of objects to consider when building acceleration structures: static, moving, and changing geometry. Static geometry includes scene data. In this code sample, the Sponza scene has a single, non-moving instance. In contrast, dynamic objects can have a changing transformation, changing geometry, or both. An example of transformation-only dynamic objects in this code sample are given by the flame particle effect, which is achieved by adjusting only the location and rotation of a square billboard — the internal geometry (and thus the billboard’s BLAS) does not change. In contrast, the refraction effect is achieved by changing both the internal geometry each frame, and the rotation (so that it faces the viewer). Vulkan offers methods of optimizing the acceleration structures for each type of geometry. The VkAccelerationStructureBuildGeometryInfoKHR struct has flags that can either toggle \"fast trace\", which optimizes run-time performance at the expense of build time, or \"fast build\", which optimizes build time. When constructing large, static objects such as the Sponza scene, for instance, the \"fast trace\" bit (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR) is selected because the build will occur once and the model contains many points. When constructing dynamic objects such as the refraction model, which will need a BLAS update every frame, the \"fast build\" bit (VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR) is selected. Further optimization methods can be used. For instance, the refraction model is updated every frame by the CPU and thus uses host-visible memory. However, because host-visible memory can incur a performance penalty, the Sponza and billboard models use a staging buffer to copy to device-exclusive memory. An alternative method would be to use a \"compute shader\" to generate the refraction model each frame, but that is outside the scope of this tutorial. Though the ray-tracing pipeline uses an acceleration structure to traverse the scene’s geometry, the acceleration structures themselves do not store user-defined information about the geometry and instead give the developer the flexibility to define their own custom geometry information. This information can be encoded at the per-instance level, per-object level, or per-primitive level. Per-instance level: The top-level acceleration structure allows instance information to encode a custom ID ( per-instance level). Per-object level: In this code sample, this custom ID then references a struct at the per-object level containing the object ID , the index of the vertices in the vertex buffer, and the index of the (triangle) indices in the index buffer: struct SceneInstanceData { uint32_t vertex_index; uint32_t indices_index; uint32_t image_index; uint32_t object_type; }; Per-primitive level In this sample, each vertex is encoded with a per-vertex normal and texture coordinate, though other applications may wish to provide other information at the per-vertex level. To allow the bottom-level acceleration structure to reference geometry data with a custom-defined layout, the VkAccelerationStructureGeometryKHR provides the ability to set geometry offsets and strides (i.e. vertexStride). In the code below, the struct acceleration_structure_geometry of type VkAccelerationStructureGeometryKHR references the data layout provided by NewVertex, which encodes the normal and texture coordinate: acceleration_structure_geometry.geometry.triangles.vertexData = vertex_data_device_address; acceleration_structure_geometry.geometry.triangles.maxVertex = model_buffer.num_vertices; acceleration_structure_geometry.geometry.triangles.vertexStride = sizeof(NewVertex); acceleration_structure_geometry.geometry.triangles.indexType = VK_INDEX_TYPE_UINT32; acceleration_structure_geometry.geometry.triangles.indexData = index_data_device_address; acceleration_structure_geometry.geometry.triangles.transformData = transform_matrix_device_address; This technique allows the closest-hit shader to access pre-calculated vertex information. In a traditional raster pipeline, it is possible to render each object separately and bind its appropriate texture images during that pass. However, in a ray-tracing pipeline, each ray during a render pass could intersect with many objects within the scene, and thus all textures must be available to the shader. In this code sample, an array of textures (Sampler2D[]) is bound, and each object is associated with a given texture index. The texture ID information is stored in the object data. This code sample explores two different ways to calculate lighting: ray-traced shadows and ambient occlusion, both of which are updated each frame and are triggered when a primary ray intersects a scene object (i.e. an element of the Sponza scene). Ray-traced shadows are calculated by performing a test: a ray is shot from the object point in the direction of the light. If the returned distance is less than the distance to the light source, then the object point is in a shadow. In pseudocode: direction = object_pt - light_pt dist = trace_ray(object_pt, direction) if (dist < distance(object_pt, light_pt)): color.rgb *= 0.2 The ambient occlusion effect is used to simulate the light diminishing effect of clustered geometry. It’s simulated by tracing rays distributed about a hemisphere centered at the intersection point with the object’s normal. The light-diminishing effect is estimated using the distance to the nearest ray intersection. In some implementations, a hard threshold is used. In pseudocode: for theta,phi in angles: hard_threshold = 10.f direction = hemisphere_pt(object_pt, normal, theta, phi) dist = trace_ray(object_pt, direction) if (dist < hard_threshold): color.rgb *= 0.2 The code sample in this tutorial instead linearly interpolates up to the hard_threshold: color.rgb *= min(dist, hard_threshold) / min_threshold There are further optimizations that can be used. One common technique is to reduce the number of generated ambient occlusion rays at each point, often shooting just a single ray. The resulting image can then be de-noised using a separate de-noising pass, though this technique is outside the scope of this tutorial.","title":"Ray-tracing: Extended features and dynamic objects","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/ray_tracing_extended/README.html","titles":[{"text":"Acceleration structures","hash":"_acceleration_structures","id":1},{"text":"Objects: Static, moving, and changing","hash":"_objects_static_moving_and_changing","id":2},{"text":"Reference Object Data from a Closest-Hit Shader","hash":"_reference_object_data_from_a_closest_hit_shader","id":3},{"text":"Texture Binding and Shaders","hash":"_texture_binding_and_shaders","id":4},{"text":"Ambient Occlusion and Ray-Traced Shadows","hash":"_ambient_occlusion_and_ray_traced_shadows","id":5}]},"83":{"id":83,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample is a extended version of the ray tracing basic with the addition of multiple geometries, instances and materials. In addition, this sample is showing how to cast shadow rays and reflections. The structures of the geometry are like those described in the OBJ format. For our geometry there is a list of vertices (position and normal) and a triplet of indices for each triangle. Each triangle also has an index for a material. In this example, each object has its own list of materials, but we could have made it so that the materials are shared by all objects in the scene. The example scene has two geometries: a plane and a cube. You can see the creation of the scene under RaytracingReflection::create_scene(). This function allocates and upload the geometry to the GPU. There are four buffers per geometry. Vertices: the position and normal Indices: index of vertex to form a triangle Material index: material id per triangle Materials: a list of materials (albedo, specular, reflection) In this example, buffer references are used. Instead of having a descriptor set with multiple arrays to access the buffers, we create a buffer that contains the addresses of the scene models. With this method, we can easily access the data of the model we hit in the shader. In the shader, VkDeviceAddress are uint64_t, therefore we will access a buffer of an array of structure ObjBuffers. struct ObjBuffers { uint64_t vertices; uint64_t indices; uint64_t materials; uint64_t materialIndices; }; layout(set = 0, binding = 3) buffer _scene_desc { ObjBuffers i[]; } scene_desc; The addresses correspond to buffers, so we will declare them like this: layout(buffer_reference, scalar) buffer Vertices {Vertex v[]; }; // Positions of an object layout(buffer_reference, scalar) buffer Indices {uvec3 i[]; }; // Triangle indices layout(buffer_reference, scalar) buffer Materials {WaveFrontMaterial m[]; }; // Array of all materials on an object layout(buffer_reference, scalar) buffer MatIndices {int i[]; }; // Material ID for each triangle The in the shader, to access the data of an object, we will do the following: ObjBuffers objResource = scene_desc.i[gl_InstanceCustomIndexEXT]; MatIndices matIndices = MatIndices(objResource.materialIndices); Materials materials = Materials(objResource.materials); Indices indices = Indices(objResource.indices); Vertices vertices = Vertices(objResource.vertices); Note that gl_InstanceCustomIndexEXT was set with one of the three scene objects. See RaytracingReflection::create_blas_instance. We build a lower-level acceleration structure (BLAS) for each geometry: a cube with one material on each face (0), a plane (1), and a mirror cube (2). These BLAS are instantiated by the top-level acceleration structure (TLAS) with a transformation matrix. In this example w are calling separately the construction of all BLAS, allocating scratch buffer each time. A better way would be to build them, knowing the size the biggest scratch buffer and doing all at once. Also provide in the helper , is the ability to compact the memory used to store the BLAS when using the VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR flag. The top-level acceleration structure (TLAS) embeds multiple BLAS. It is possible to reuse the same BLAS and give it a different transformation matrix to place it in a different position in the scene. We see this in create_scene(), the same BLAS id is reused with different matrices. Note, the BLAS id will be identified by the gl_InstanceCustomIndexEXT in the shader. The difference with ray tracing basic, is the addition of the second miss-shade module. This is called from the closest-hit shader to detect if there is an object between the hit point and the light. More on ray tracing pipeline here. In the closest-hit shader, we trace a ray to determine if there is an object between the hit point and the light. For this trace ray, we use the shadow-miss shader (index 1) and a different payload (index 1) that contains only one boolean value, \"isShadowed\". We assume that an object is blocking the light, so we initialize the value to true. Then, if the ray hits nothing, we set this value to false. The origin of the ray is the hit position and the direction of the ray is toward the light. Note, we are using an hardcoded infinite light L. This method for shooting shadow rays is fast because we set the trace flag to skip execution of the closest-hit and terminate on the first hit, then only execute the shadow-miss-shader and set a small payload. uint flags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT; For reflection, we do not change maxPipelineRayRecursionDepth and leave the value at 2. Instead of recursively looping from the closest-hit shader, we store the information of the next ray in the payload and send new rays from the ray generation shader. When we call traceRayEXT from the closest-hit shader, it must store the state of all variables needed after execution. Recursively calling traceRayEXT requires storing a lot of data per ray call, and that is typically slow. Instead, we store in the payload the ray origin and the ray direction that the ray generation shader will use. This method also removes the pipeline ray recursion depth constraint. Here is how the payload is defined: struct hitPayload { vec3 radiance; vec3 attenuation; int done; vec3 rayOrigin; vec3 rayDir; }; The radiance is the value at the point of impact multiplied by the attenuation. The first time the attenuation is vec3(1) (no attenuation), but the shininess of the material reduces the attenuation in the following hits. After a few passes, the radiance will be close to vec3(0). The done is an indication that the ray did not hit anything. The miss shader sets it to true and the loop can be terminated. The origin of the ray starts at the camera, and is replaced by the position of the target. The direction starts at the camera direction, and then is reflected purely at the surface of the object. The recursion limit is set in the ray-generation shader. Currently it is set to 64, changing its value will change the number of times the ray bounces off. we could add a test on the attenuation and exist the loop if the value is below a certain threshold. The following tutorial is showing the limitation of hitting the recursion limits. Note, the spec does not guarantee a recursion check at runtime. If you exceed either the recursion depth you reported in the raytrace pipeline create info, or the physical device recursion limit, undefined behavior results.","title":"Ray tracing - reflection","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/ray_tracing_reflection/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Geometries, bottom, and top-level acceleration structures","hash":"_geometries_bottom_and_top_level_acceleration_structures","id":2},{"text":"create_model()","hash":"_create_model","id":3},{"text":"create_buffer_references()","hash":"_create_buffer_references","id":4},{"text":"create_bottom_level_acceleration_structure()","hash":"_create_bottom_level_acceleration_structure","id":5},{"text":"create_top_level_acceleration_structure()","hash":"_create_top_level_acceleration_structure","id":6},{"text":"Ray tracing pipeline","hash":"_ray_tracing_pipeline","id":7},{"text":"Shadows","hash":"_shadows","id":8},{"text":"Reflection","hash":"_reflection","id":9},{"text":"Diagram of the ray pipeline","hash":"_diagram_of_the_ray_pipeline","id":10},{"text":"Other Tutorial","hash":"_other_tutorial","id":11}]},"84":{"id":84,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates the usage of the VK_KHR_shader_non_semantic_info for adding means to output debug messages from SPIR-V shaders using a print function at runtime. It allows you to output invocation related debug messages from a given shader stage and can help to find problems or bugs together with a graphics debugger like RenderDoc. But it’s also possible to display that data in your application (e.g. a debug window or the command line), although this has some limitations like a fixed buffer size that all messages need to fit in. With this extension properly setup you can use Printf statements (which exist in some form in most CPU side programming languages) in a shader to output messages from the current invocation of the shader (e.g. the current vertex processed in the vertex shader or the current fragment produced in the fragment shader). This lets you output values specific to that single invocation, adding a way of e.g. finding bugs or problems that only occur in certain invocations of execution parts of a shader. For example outputting the transformed vertex positions in a vertex shader could look like this in glsl: void main() { vec4 outPosition = ubo.view * ubo.model * inPosition; debugPrintfEXT(\"Transformed position = %v4f\", outPosition); } And like this in HLSL: VSOutput main(VSInput input) { float4 output.Position = mul(ubo.view, mul(ubo.model, input.Position)); printf(\"Transformed position = %v4f\", output.Position); } Shader printf is a feature of the validation layers. So the first step is to enable the VK_LAYER_KHRONOS_validation layer at instance creation. In addition to the layer(s) to be enabled we also need to provide VkValidationFeaturesEXT with the VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT feature enabled: void ShaderDebugPrintf::create_instance() { ... // Shader printf is a feature of the validation layers that needs to be enabled std::vector validation_feature_enables = {VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT}; VkValidationFeaturesEXT validation_features{VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT}; validation_features.enabledValidationFeatureCount = 1; validation_features.pEnabledValidationFeatures = validation_feature_enables.data(); This then needs to be chained into the instance creation: std::vector validation_layers = {\"VK_LAYER_KHRONOS_validation\"}; VkInstanceCreateInfo instance_create_info{VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO}; ... instance_create_info.pNext = &validation_features; If all you want to do is read the shader printf messages in a debugger like RenderDoc there’s no additional work involved. Simply run your application with above instance setup and a printf in your shader and you can read those messages. Or use VkConfig from the LunarG SDK to redirect the messages to a specific output. But if you want to display or process those messages in your own application you need to do that via a debug messenger callback. This is pretty much the same as setting up such a callback for validation: VkDebugUtilsMessengerCreateInfoEXT debug_utils_messenger_create_info{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT}; debug_utils_messenger_create_info.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT; debug_utils_messenger_create_info.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT; debug_utils_messenger_create_info.pfnUserCallback = debug_utils_message_callback; VK_CHECK(vkCreateDebugUtilsMessengerEXT(vulkan_instance, &debug_utils_messenger_create_info, nullptr, &debug_utils_messenger)); Shader printf messages are of info type, so in order for them to be passed to the callback you need to enable the VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT messageSeverity flag. With the validation layers and feature enabled and a debug callback wired up, we can process or output the shader printf messages. The most basic option could look like this: VKAPI_ATTR VkBool32 VKAPI_CALL ShaderDebugPrintf::debug_utils_message_callback( VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageType, const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData, void *pUserData) { std::cout pMessage pMessageIdName, \"WARNING-DEBUG-PRINTF\") == 0) { // Validation messages are a bit verbose, but we only want the text from the shader, so we cut off everything before the first word from the shader message // See scene.vert: debugPrintfEXT(\"Position = %v4f\", outPos); std::string shader_message{pCallbackData->pMessage}; shader_message = shader_message.substr(shader_message.find(\"Position\")); debug_output.append(shader_message + \"\\n\"); } return VK_FALSE; } The default buffer size for debug outputs is limited. If you output a lot of messages, e.g. by doing a printf per fragment shader invocation, this may not suffice and you’ll get a validation warning telling you about the buffer being to small. This buffer size can be increased via the VkConfig utility from the LunarG SDK. See this whitepaper for details on that. This does not apply to outputting messages in graphics debuggers. Using debug printf will consume a descriptor set, so if you use every last descriptor set it may not work and you may need to increase the set count at pool allocation. Thus in the sample we allocate an additional set from the pool. It also consumes device memory based on the number and/or size fo the debug messages. While displaying the printf messages directly in the application may be useful to a certain extent (low number of invocations or low frequency of information) the most interesting use case is to use it in combination with a graphics debugger like RenderDoc. If we remove the sample’s limitation to output only for the first invocation by changing scene.vert from: // Output the vertex position using debug printf if (gl_VertexIndex == 0) { debugPrintfEXT(\"Position = %v4f\", outPos); } to this: debugPrintfEXT(\"Position = %v4f\", outPos); And then run the sample in RenderDoc we now get a list of all shader debug printf messages for all invocations: Selecting a draw call with at least one debug message on the Event browser will show a label with the no. of messages for that draw call (e.g. 1250 msg(s)). Clicking on such a label will open the list of messages for that draw call. From here you can navigate to e.g. the mesh viewer for a given vertex (in the case of a vertex shader) or the texture view (in the case of a fragment shader). While not meant as a full debugging solution, using printf in a shader can help find problems that are otherwise hard to find or visualize. Used on conjunction with a proper graphics debugger like RenderDoc, shader printf is a great tool for debugging shaders.","title":"Shader debug Printf","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/shader_debugprintf/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"(Debug) Printf for shaders","hash":"_debug_printf_for_shaders","id":2},{"text":"Setup","hash":"_setup","id":3},{"text":"Displaying debug printf output in your application","hash":"_displaying_debug_printf_output_in_your_application","id":4},{"text":"Printf output buffer size","hash":"_printf_output_buffer_size","id":5},{"text":"Memory considerations","hash":"_memory_considerations","id":6},{"text":"Printf in a graphics debugger","hash":"_printf_in_a_graphics_debugger","id":7},{"text":"Conclusion","hash":"_conclusion","id":8}]},"85":{"id":85,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use the VK_EXT_shader_object extension, which provides a way to specify shaders and state without using VkPipeline objects. When drawing with shader objects, shaders for each stage are set individually on a command buffer and state can be set at any time before calling vkCmdDraw*. This sample sets a minimal amount of state required for each draw call, and only updates state when the next draw call requires it. In its default configuration, this sample automatically iterates over permutations of shaders and state, randomly changing one of: The shader used by one stage of one model The post processing fragment shader The output color format The output depth format The models in the middle demonstrate the use of linked vertex and fragment shaders, which can only ever change in tandem. The surrounding models use unlinked shaders, where each model uses its own separate vertex, fragment, and potentially geometry shaders. Post processing, which is enabled by default, applies a specified visual effect to the results of model rendering. An optional wireframe mode may be enabled if supported by the device. This sample can be configured at runtime through a debug GUI. This UI allows you to change various aspects of the scene that would be impractical to control dynamically using pipelines. UI drawing also demonstrates interoperability between pipelines within conventional render passes (which are used to render the UI) and shader objects with dynamic rendering (which are used to render the scene). A plot of the last 2000 CPU frame times is displayed at the bottom of the screen. This plot shows the CPU impact of swapping shaders and state at runtime. Shader objects may only be used within VK_KHR_dynamic_rendering render passes. The dynamic rendering sample explains how to use that extension in more detail. The main parts relevant to drawing with shader objects are vkCmdBeginRenderingKHR and vkCmdEndRenderingKHR. In order to use shader objects, both the VK_EXT_shader_object extension and the shaderObject feature need to be enabled on the VkDevice. This is accomplished by including VK_EXT_SHADER_OBJECT_EXTENSION_NAME in VkDeviceCreateInfo's ppEnabledExtensionNames array, and also including a VkPhysicalDeviceShaderObjectFeaturesEXT structure with the shaderObject feature set to VK_TRUE in its pNext chain. In our case, these are handled through a common abstraction shared with the other samples. add_device_extension(VK_EXT_SHADER_OBJECT_EXTENSION_NAME); // Enable Shader Object auto &requestedShaderObject = gpu.request_extension_features(VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT); requestedShaderObject.shaderObject = VK_TRUE; VkShaderEXT objects are created using the vkCreateShadersEXT function. VkResult vkCreateShadersEXT( VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders); In this sample, shaders are abstracted into a Shader class. This class holds the created VkShaderEXT object, information needed for building and binding the shader. class Shader { VkShaderStageFlagBits stage; VkShaderStageFlags next_stage; VkShaderEXT shader = VK_NULL_HANDLE; std::string shader_name = \"shader\"; VkShaderCreateInfoEXT vk_shader_create_info; std::vector spirv; // ... } The scene contains multiple models that each use multiple Shader objects. If we know a combination of shaders will always be used together we can link the shaders together. Linked shaders allow the driver to perform cross stage optimizations that can potentially improve GPU performance when the shaders are executed. One of the ways this sample uses linked shaders is for the skybox. The skybox uses only a vertex and fragment shader. The vertex shader’s stage is set to VK_SHADER_STAGE_VERTEX_BIT with its next stage set to only VK_SHADER_STAGE_FRAGMENT_BIT. The fragment shader’s stage is set to VK_SHADER_STAGE_FRAGMENT_BIT, with no next stage. To draw with shader objects we need to create one VkShaderEXT object per shader stage. This means we need an instance of the Shader class for each shader stage. // Create shaders with current and next stage bits and set the shaders GLSL shader data, descriptor sets, and push constants skybox_vert_shader = new Shader(VK_SHADER_STAGE_VERTEX_BIT, VK_SHADER_STAGE_FRAGMENT_BIT, \"skybox vert\", vert_shader_data, &descriptor_set_layouts[ShaderTypeBasic], &push_constant_ranges[ShaderTypeBasic]); skybox_frag_shader = new Shader(VK_SHADER_STAGE_FRAGMENT_BIT, 0, \"skybox frag\", frag_shader_data, &descriptor_set_layouts[ShaderTypeBasic], &push_constant_ranges[ShaderTypeBasic]); The Shader class require us to provide the entire contents of the VkShaderCreateInfoEXT structure including information to compile the GLSL. The constructor will compile the GLSL and fill out the VkShaderCreateInfoEXT structure for this Shader. ShaderObject::Shader::Shader(VkShaderStageFlagBits stage_, VkShaderStageFlags next_stage_, std::string shader_name_, const std::vector & vert_glsl_source, const VkDescriptorSetLayout *pSetLayouts, const VkPushConstantRange * pPushConstantRange) { stage = stage_; shader_name = shader_name_; next_stage = next_stage_; // Compile the GLSL source if (!glsl_compiler.compile_to_spirv(stage, vert_glsl_source, \"main\", {}, spirv, info_log)) { LOGE(\"Failed to compile shader, Error: {}\", info_log.c_str()); } // Fill out the shader create info struct vk_shader_create_info.sType = VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT; vk_shader_create_info.pNext = nullptr; vk_shader_create_info.flags = 0; vk_shader_create_info.stage = stage; vk_shader_create_info.nextStage = next_stage; vk_shader_create_info.codeType = VK_SHADER_CODE_TYPE_SPIRV_EXT; vk_shader_create_info.codeSize = spirv.size() * sizeof(spirv[0]); vk_shader_create_info.pCode = spirv.data(); vk_shader_create_info.pName = \"main\"; vk_shader_create_info.setLayoutCount = 1; vk_shader_create_info.pSetLayouts = pSetLayouts; vk_shader_create_info.pushConstantRangeCount = 1; vk_shader_create_info.pPushConstantRanges = pPushConstantRange; vk_shader_create_info.pSpecializationInfo = nullptr; } We want the skybox shaders to be linked, so we need to add the VK_SHADER_CREATE_LINK_STAGE_BIT_EXT flag to each shader’s VkShaderCreateInfoEXT. The sample determines whether to add the flag at shader creation time depending on if build_shader or build_linked_shaders is called. build_linked_shaders will be called with pointers to the vertex and fragment shaders. The sample only supports linked vertex and fragment shaders and does not handle linking other shader stages such as geometry. // Set the fragment shader as linked to build them linked and build the shader build_linked_shaders(device, skybox_vert_shader, skybox_frag_shader); To build the shaders we call vkCreateShadersEXT with all of the VkShaderCreateInfoEXTs for each of the linked shaders. The build_linked_shaders function adds the VK_SHADER_CREATE_LINK_STAGE_BIT_EXT flag to each VkShaderCreateInfoEXT struct, then calls vkCreateShadersEXT on both shaders. void ShaderObject::build_linked_shaders(VkDevice device, ShaderObject::Shader *vert, ShaderObject::Shader *frag) { VkShaderCreateInfoEXT shader_create_infos[2]; if (vert == nullptr || frag == nullptr) { LOGE(\"build_linked_shaders failed with null vertex or fragment shader\\n\"); } shader_create_infos[0] = vert->get_create_info(); shader_create_infos[1] = frag->get_create_info(); for (auto &shader_create : shader_create_infos) { shader_create.flags |= VK_SHADER_CREATE_LINK_STAGE_BIT_EXT; } VkShaderEXT shaderEXTs[2]; // Create the shader objects VkResult result = vkCreateShadersEXT(device, 2, shader_create_infos, nullptr, shaderEXTs); if (result != VK_SUCCESS) { LOGE(\"vkCreateShadersEXT failed\\n\"); } vert->set_shader(shaderEXTs[0]); frag->set_shader(shaderEXTs[1]); } The skybox shaders can now be bound and used to draw. Linking shaders is optional. For some use cases it may be advantageous to create shaders that are not linked. This allows arbitrary combinations of shaders to be used together at command buffer recording time, though you should keep in mind that the driver may be less able to optimize the shaders' GPU performance. In order to use a given combination of unlinked shaders together, their input and output interfaces need to be compatible and their arrays of descriptor set layouts and push constants must be identical. Some models in the scene use unlinked shaders. For the sake of convenience, this sample refers to these models as \"material models\". Each of the material models binds different vertex, geometry, and fragment shaders. Each of the vertex shaders can be used with each of the geometry and fragment shaders. This sample lets you disable the geometry stage through the debug UI, so all of the vertex shaders support both geometry or fragment as a next stage. In order to allow either next stage, the vertex shaders are created with next stage flags of VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT and set the GLSL, descriptors, and push constants. // Create shader with current and next stage bits set the GLSL shader data, descriptor sets, and push constants material_vert_shaders.emplace_back( new Shader(VK_SHADER_STAGE_VERTEX_BIT, VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT, shader_name.substr(unlinked_material_prefix_size, shader_name.length() - (unlinked_material_prefix_size + frag_suffix_size)), shader_data, &descriptor_set_layouts[ShaderTypeMaterial], &push_constant_ranges[ShaderTypeMaterial])); Then build the shader alone. This works similarly to the earlier skybox example, except that the VkShaderEXTs are created separately. // Build shader build_shader(device, material_vert_shaders.back()); The build_shader function is very similar to build_linked_shaders but only creates one VkShaderEXT object. void ShaderObject::build_shader(VkDevice device, ShaderObject::Shader *shader) { VkShaderEXT shaderEXT; VkShaderCreateInfoEXT shaderCreateInfo = shader->get_create_info(); VkResult result = vkCreateShadersEXT(device, 1, &shaderCreateInfo, nullptr, &shaderEXT); if (result != VK_SUCCESS) { LOGE(\"vkCreateShadersEXT failed\\n\"); } shader->set_shader(shaderEXT); } VkShaderEXT objects need to be bound to the command buffer for use in subsequent vkCmdDraw* calls. One or more shader objects can be bound using vkCmdBindShadersEXT. Before drawing the skybox we need to bind the relevant VkShaderEXT objects. This sample calls the bind_shader function, which simply binds the Shader's VkShaderEXT. // Bind shaders for the skybox bind_shader(draw_cmd_buffer, skybox_vert_shader); bind_shader(draw_cmd_buffer, skybox_frag_shader); void ShaderObject::bind_shader(VkCommandBuffer cmd_buffer, ShaderObject::Shader *shader) { vkCmdBindShadersEXT(cmd_buffer, 1, shader->get_stage(), shader->get_shader()); } The unlinked shaders are bound with multiple calls to bind_shader, one per each shader to bind. void ShaderObject::bind_material_shader(VkCommandBuffer cmd_buffer, int shader_index) { CurrentShader &shader = current_material_shaders[shader_index]; bind_shader(cmd_buffer, material_vert_shaders[shader.vert]); if (enable_geometry_pass) bind_shader(cmd_buffer, material_geo_shaders[shader.geo]); bind_shader(cmd_buffer, material_frag_shaders[shader.frag]); } It would be equally valid for the Shader class to be designed to bind all of the VkShaderEXT objects in a single vkCmdBindShadersEXT call. Bound shaders can be unbound by calling vkCmdBindShadersEXT with pShaders set to nullptr and pStages set to an array of stages to unbind. This sample uses a geometry shader for only some draws, so we need to unbind the geometry shader before draws that don’t need them. // Unbind geometry shader by binding nullptr to the geometry stage VkShaderStageFlagBits geo_stage = VK_SHADER_STAGE_GEOMETRY_BIT; vkCmdBindShadersEXT(draw_cmd_buffer, 1, &geo_stage, nullptr); Before drawing with shader objects, applications are required to bind either nullptr or a valid VkShaderEXT object for every shader stage enabled on the device. A valid geometry stage shader will not be bound before the first draw so we need to bind nullptr to it. The same code as above can be used. This sample does not enable the tessellationShader device feature, so it’s not necessary to bind anything to either tessellation stage. The Setting State subsection of the Shader Objects section of the Vulkan specification lists the graphics state that needs to be set on a command buffer before vkCmdDraw* can be called with graphics shader objects bound. This sample demonstrates one possible way to take advantage of these rules to minimize calls into the Vulkan driver. All of the required and common state for this sample, such as vertex input binding descriptions, is set in set_initial_state before any draw calls. State specific to particular draws is set on the command buffer as needed. For the skybox, we disable culling and writing to depth. // Disable depth write and use cull mode none to draw skybox vkCmdSetCullModeEXT(draw_cmd_buffer, VK_CULL_MODE_NONE); vkCmdSetDepthWriteEnableEXT(draw_cmd_buffer, VK_FALSE); Then we bind the descriptor sets and push constants for the draw. // Bind descriptors and push constants for the skybox draw glm::mat4 model_matrix = glm::mat4(1.0f); vkCmdBindDescriptorSets(draw_cmd_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_layout[ShaderTypeBasic], 0, 1, &descriptor_sets[ShaderTypeBasic], 0, nullptr); vkCmdPushConstants(draw_cmd_buffer, pipeline_layout[ShaderTypeBasic], VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(BasicPushConstant), &model_matrix); Finally, we bind the shaders and draw the model. // Bind shaders for the skybox bind_shader(draw_cmd_buffer, skybox_vert_shader); bind_shader(draw_cmd_buffer, skybox_frag_shader); // Draw the skybox model draw_model(skybox, draw_cmd_buffer); The models that will be drawn next require different state than the skybox. vkCmdSetCullModeEXT(draw_cmd_buffer, VK_CULL_MODE_BACK_BIT); vkCmdSetDepthWriteEnableEXT(draw_cmd_buffer, VK_TRUE); Unlinked shaders are bound the same way as linked shaders. First we set state, bind descriptor sets, push constants, and finally bind shaders and draw the model. // Update and push constants for cube 1 material_push_constant.model = glm::translate(glm::vec3(1.2f, -1.f, 0)) * glm::rotate((float) elapsed_time, glm::vec3(0, 1, 0)) * glm::scale(glm::vec3(0.05f)); vkCmdPushConstants(draw_cmd_buffer, pipeline_layout[ShaderTypeMaterial], VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(MaterialPushConstant), &material_push_constant); // Bind shaders for cube 1, which is material model 2 bind_material_shader(draw_cmd_buffer, 2); // Draw cube 1 draw_model(cube, draw_cmd_buffer); After rendering the skybox, terrain, and all other models, an optional post processing effect is applied to the intermediate image. The final result is drawn to the screen. The debug UI allows various aspects of rendering to be controlled dynamically. It can change shaders per model, both color and depth output formats, and the post processing effect. This level of dynamism would be impractical to achieve using pipelines because the tens of thousands of permutations of state would potentially each require their own pipeline. Shader objects, on the other hand, support this kind of application architecture naturally. The Vulkan SDK ships with an emulation layer that allows VK_EXT_shader_object to be used on drivers that don’t yet have native support for the extension. The layer is useful for applications that want to use shader objects without implementing their own pipeline based fallback path for older drivers without native support. The layer can be shipped with your application, and it will disable itself if a native implementation of VK_EXT_shader_object exists in the driver. The emulation layer can be enabled by adding VK_LAYER_KHRONOS_shader_object to ppEnabledLayerNames in VkDeviceCreateInfo. The sample framework already has an existing abstraction normally used for enabling the validation layer. This sample repurposes this mechanism to instead load the emulation layer. const std::vector ShaderObject::get_validation_layers() { return {\"VK_LAYER_KHRONOS_shader_object\"}; } Because you can’t rely on the Vulkan SDK to be installed on a user’s system, this sample’s method of loading the layer is not suitable for a real application. Instead, the layer needs to be shipped with the application. There are various ways to ship the layer with an application. One method is to copy the layer’s VkLayer_khronos_shader_object.dll and VkLayer_khronos_shader_object.json from the Vulkan SDK to the same directory as your application’s executable and then append the path to these files to the VK_LAYER_PATH environment variable before your first call into the Vulkan API. However the layer is packaged, the Vulkan Loader is always responsible for loading the layer. Because of this the layer’s files will always need to be somewhere accessible to the loader. You Can Use Vulkan Without Pipelines Today Extension Proposal Specification Emulation Layer Shader objects can be an invaluable tool for simplifying shader and state management in highly dynamic application architectures which don’t lend themselves to practical implementation using pipelines. With increasingly widespread driver support augmented by the emulation layer, applications best suited to this kind of architecture can be designed around shader objects instead of pipelines with high confidence that they will achieve a user experience as good or better than what a pipeline based implementation could realistically achieve. d to this kind of architecture can be designed around shader objects instead of pipelines with high confidence that they will achieve a user experience as good or better than what a pipeline based implementation could realistically achieve.","title":"Shader Object","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/shader_object/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":2},{"text":"Shader Object Creation","hash":"_shader_object_creation","id":3},{"text":"Linked Shaders","hash":"_linked_shaders","id":4},{"text":"Unlinked Shaders","hash":"_unlinked_shaders","id":5},{"text":"Binding Shaders","hash":"_binding_shaders","id":6},{"text":"Unbinding Shaders","hash":"_unbinding_shaders","id":7},{"text":"State Setting and Drawing","hash":"_state_setting_and_drawing","id":8},{"text":"Options","hash":"_options","id":9},{"text":"Emulation Layer","hash":"_emulation_layer","id":10},{"text":"Additional Resources","hash":"_additional_resources","id":11},{"text":"Conclusion","hash":"_conclusion","id":12}]},"86":{"id":86,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. The usage of Sparse Resources allows for less restrict memory binding in comparison to a standard resource. The key differences between standard and sparse resources, showcased in this sample are: Sparse resources can be bound non-contiguously to one or more VkDeviceMemory allocations; Sparse resources can be re-bound to different memory allocations over the lifetime of the resource; The sample demonstrates usage of the Sparse Image feature by rendering a high-resolution texture with only a fraction of the total image size actually allocated on the device’s memory. This is possible by dynamically loading required memory areas, generating mip levels for outer parts, removing unused memory and finally: binding an image in real-time. There are 3 features to be enabled: sparseBinding; sparseResidencyImage2D; shaderResourceResidency; First two, are the key features required for the usage of the sparse image resources. The last one - shaderResourceResidency, is required for the fragment shader to be able to detect which parts of the image are allocated in the memory. void SparseImage::request_gpu_features(vkb::PhysicalDevice &gpu) { if (gpu.get_features().sparseBinding && gpu.get_features().sparseResidencyImage2D && gpu.get_features().shaderResourceResidency) { gpu.get_mutable_requested_features().sparseBinding = VK_TRUE; gpu.get_mutable_requested_features().sparseResidencyImage2D = VK_TRUE; gpu.get_mutable_requested_features().shaderResourceResidency = VK_TRUE; } There is a single extensions used in this sample: GL_ARB_sparse_texture2; This extension is used only by the fragment shader, but requires shaderResourceResidency feature to be enabled first. What this extension does, is allowing the fragment to check if the memory for the particular fragment is actually allocated or not. Because of this extension, it is possible to keep checking the residency from the fragment shader, and basically use the most detailed data available. #extension GL_ARB_sparse_texture2 : enable for(; (lod <= maxLOD) && !sparseTexelsResidentARB(residencyCode); lod += 1) { residencyCode = sparseTextureLodARB(texSampler, fragTexCoord, lod, color); } The whole method is well-described in the source file. In general, the value of LOD is obtained by calculating: What is the ratio between x or y movement on the screen, to the u or v movement on the texture? The idea is, that when moving pixel-by-pixel along the x or y axis on-screen, if the small on-screen step causes a significant step on-texture, then the area is far away from the observer and a less-detailed mip-level is required. The formula used for those calculations is: LOD = log2 (max(dT / dx, dT / dy)); where: dT is an on-texture-step in texels, dx, dy are on-screen-steps in pixels. The user can alter the application by using the GUI. These are available options: Color highlight - if enabled, areas of a particular LOD usage are color-highlighted. Memory defragmentation - if enabled, memory pages are reallocated from low-occupied sectors to higher-occupied (but available) sectors to keep the overall number of allocations as low as possible. Update prioritization - if enabled, the application is focused on processing the most actual requests and discards remainings from the previous requests. This can be observed when dynamically moving the camera around. Blocks per cycle - describes up to how many blocks can be updated per a single render cycle. The total number of blocks is defined as: (Vertical blocks) * (Horizontal blocks). Vertical blocks - describes the number of columns the texture is divided into. Horizontal blocks - describes the number of rows the texture is divided into. Additionally, GUI contains memory usage data. It describes (in pages) what are the virtual requirements (what if the whole image was allocated in the memory) and what is the actual, current allocation on the device. The primary usage of the sparse image feature is generally speaking dedicated for cases where too much device’s memory is occupied. Keeping a low-detailed mip-level constantly in the memory and dynamically loading required areas when the camera changes, is the way to handle terrain mega-textures. The downside of these solution is that there is a possibility of a bottleneck problem when constantly transferring required memory chunks from the CPU to the device. The other downside is that since the application decides what memory is going to be allocated, it must take care of the calculations such as: “what level of detail is required?”. This creates an unwanted CPU overhead.","title":"","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/sparse_image/README.html","titles":[{"text":"Sparse image","hash":"_sparse_image","id":1},{"text":"Overview","hash":"_overview","id":2},{"text":"Enabling features","hash":"_enabling_features","id":3},{"text":"Enabling extensions","hash":"_enabling_extensions","id":4},{"text":"How is required LOD calculated?","hash":"_how_is_required_lod_calculated","id":5},{"text":"User Interface","hash":"_user_interface","id":6},{"text":"Conclusion","hash":"_conclusion","id":7}]},"87":{"id":87,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Extension VK_KHR_synchronization2 Demonstrates the use of the reworked synchronization api introduced with VK_KHR_synchronization2. Based on the compute shading N-Body particle system, this sample uses the new extension to streamline the memory barriers used for the compute and graphics work submissions.","title":"Synchronization2","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/synchronization_2/README.html","titles":[]},"88":{"id":88,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. In Vulkan 1.0, we were introduced to VkSemaphore which is able to synchronize work between Vulkan queues. It has some peculiar behavior which makes it somewhat difficult to use in practice. The timeline semaphore is designed to solve these problems and it also makes the queue synchronization model closer to what we see in D3D12. The existing semaphore as-is works fine in normal situations, but as applications learn to take advantage of async compute, async transfer, and other advanced synchronization use cases, there are problems which are hard to ignore. The existing semaphore type is now called a BINARY semaphore, as signals and waits must always happen in 1:1 pairs. Completing a wait for a semaphore on the VkQueue also unsignals it. This is problematic for more advanced use cases where we wish to create a single producer, multiple consumers scenario. To make binary semaphores work, we would have to signal multiple semaphores in a single vkQueueSubmit, and then assign one semaphore to each waiting queue. This is rather awkward, since it might not be obvious at signal time how this scenario will play out, and juggling N semaphores just for this case is not fun. When juggling N semaphores, it might also happen that a semaphore was not required after all, and we are now sitting with a signalled semaphore which cannot be recycled and signalled again unless we wait for it first. The solution here is to just destroy such \"hung\" semaphores, which is unfortunate. Ideally we would be able to reset semaphores on the host as well, but no such API exists and submitting a wait to GPU just for the purpose of unsignalling a semaphore is silly. There is also an object bloat problem. Usually, there are many submissions in flight on a GPU, and to be able to synchronize with each submission, we must keep track of a certain number of semaphores which are in-flight at any one time. This is doable, but inelegant. There is a similar problem for VkFence as well. The final problem is a lack of out-of-order signal and wait. This is a somewhat of a niche problem, but in a world with free threaded task graphs, it could make sense to be able to submit work out of order and let synchronization objects take care of synchronization on the GPU. With binary semaphores, a signal must be submitted before the wait, which guarantees forward progress, but guarantees jank in the engine. There are certainly good reasons for this restriction, but it removes some flexibility. In order to signal on a VkQueue, we wait for everything that happened before we signal anything. This also means that future signal operations will wait for a superset of the operations in the signal that came before. In this sense, instead of thinking of synchronizing against individual submissions, we can think about things like \"Wait for submission #134 on compute queue to complete\", i.e. we just associate a single monotonically increasing number to a queue. Submitting to a VkQueue can now be considered a simple increment of the monotonically increasing number. This is the foundation of timeline semaphores. A VkSemaphore can have a 64-bit counter associated with it and there are two new operations we can do: As a signal semaphore, wait for everything to complete in queue, then monotonically bump counter value to $old_value + $increment, where $increment is usually 1. As a wait semaphore, wait for the counter of the semaphore to reach at least the wait count value. From an application point of view, there is no longer a need to own synchronization objects and applications can instead agree on 64-bit counters. Timeline semaphores also adds support for submitting waits before the corresponding signal operation. This hands over the burden to the driver, where it will need to either hold back submissions on its own, or defer this work to the kernel driver. Either way, the application no longer needs to hold back submissions. This can be quite useful when applications have multiple threads which perform queue submission, since ensuring ordering otherwise would require a lot of careful thread synchronization. There is no unsignal operation with timeline semaphores, so it’s perfectly fine to do something like: Signal graphics queue, value 40 Wait async compute queue 0, value 40 Wait async compute queue 1, value 39 Wait async compute queue 2, value 36 Once the counter reaches 40, it will always be at least 40, and we can keep waiting for this counter as long as we wish. VkFence is somewhat redundant when we have timeline semaphores, since we can now wait for counter values on CPU as well. There is not even a requirement to externally synchronize VkSemaphore objects when doing so, which is very nice! To synchronize GPU work with CPU, we just need to know the timeline value we signalled with. First, we need to create a VkSemaphore with TIMELINE type. // A timeline semaphore is still a semaphore, but it is of TIMELINE type rather than BINARY. VkSemaphoreCreateInfo create_info = vkb::initializers::semaphore_create_info(); VkSemaphoreTypeCreateInfoKHR type_create_info{VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR}; type_create_info.semaphoreType = VK_SEMAPHORE_TYPE_TIMELINE_KHR; type_create_info.initialValue = 0; create_info.pNext = &type_create_info; VK_CHECK(vkCreateSemaphore(get_device().get_handle(), &create_info, nullptr, &timeline.semaphore)); We can signal the timeline in vkQueueSubmit. VkSubmitInfo submit = vkb::initializers::submit_info(); submit.pSignalSemaphores = &timeline.semaphore; submit.signalSemaphoreCount = 1; submit.pCommandBuffers = &cmd; submit.commandBufferCount = 1; // For every timeline semaphore we signal, we give an auxillary timeline value. VkTimelineSemaphoreSubmitInfoKHR timeline_info{VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR}; timeline_info.signalSemaphoreValueCount = 1; timeline_info.pSignalSemaphoreValues = &timeline.timeline; submit.pNext = &timeline_info; VK_CHECK(vkQueueSubmit(signal_queue, 1, &submit, VK_NULL_HANDLE)); Similarly, we can wait in vkQueueSubmit. const VkPipelineStageFlags wait_stages = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT; VkSubmitInfo submit = vkb::initializers::submit_info(); submit.pWaitSemaphores = &timeline.semaphore; submit.pWaitDstStageMask = &wait_stages; submit.waitSemaphoreCount = 1; submit.pCommandBuffers = &cmd; submit.commandBufferCount = 1; VkTimelineSemaphoreSubmitInfoKHR timeline_info{VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR}; timeline_info.waitSemaphoreValueCount = 1; timeline_info.pWaitSemaphoreValues = &timeline.timeline; submit.pNext = &timeline_info; VK_CHECK(vkQueueSubmit(wait_queue, 1, &submit, VK_NULL_HANDLE)); We can wait for one or more semaphores on host as well! VkSemaphoreWaitInfoKHR wait_info{VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR}; wait_info.pSemaphores = &semaphore; wait_info.semaphoreCount = 1; wait_info.pValues = &value; VK_CHECK(vkWaitSemaphoresKHR(device->get_handle(), &wait_info, UINT64_MAX)); A somewhat esoteric feature is to signal a timeline on host, this can be used to \"kick\" the GPU. VkSemaphoreSignalInfoKHR signal_info{VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR}; signal_info.semaphore = semaphore; signal_info.value = value; VK_CHECK(vkSignalSemaphoreKHR(device->get_handle(), &signal_info)); This sample demonstrates an esoteric way of implementing the well-known \"Game of Life\". Through this sample we end up using all the core features of timeline semaphores. In this sample, we make use of two VkQueues, an async compute queue which performs simulation, and the main graphics queue which blits to swapchain and presents the results. The two queues need to carefully synchronize with each other. This sample could trivially be done with binary semaphores of course, so in this sample we implement it in a difficult way to demonstrate the full API capabilities. The key aspect we use to demonstrate out of order submission is a dedicated worker thread which does all work related to simulation on the async compute queue. It never synchronizes with the main thread except at teardown, so the only way it synchronizes is through timeline semaphores. Submission order is completely out-of-order in this case and forward progress in the async queue is generally blocked by the main thread submitting more work. To simulate \"Game of Life\", we allocate two images of 64x64 RGBA8. First, one image is initialized with initial state, and from here there is a ping-pong where image N is updated, while reading from image 1 - N. After updating image N, the main thread will sample from image N. Before async compute updates the same image index N again, it must wait for graphics queue to complete. With the double buffer in play, the async queue can run ahead for a little while and it will be mostly stalled by graphics queue. The sequential flow of the rendering is something like, assuming two timeline semaphores A and G: Async compute write image 1. Async compute signal A = 1. Graphics wait A = 1. Graphics read image 1. Graphics signal G = 1. Async compute wait A = 1. (Could use pipeline barrier of course, but hey!) Async compute write image 0. Async compute signal A = 2. Graphics wait A = 2. Graphics read image 0. Graphics signal G = 2. Async compute wait G = 1. (Resolve write-after-read hazard) Async compute wait A = 2. (Could use pipeline barrier of course, but hey!) Async compute wait host A = 1. (Wait for command buffer to retire so we can re-record it!) Async compute write image 1. Async compute signal A = 3. Graphics wait A = 3. Graphics read image 1. Graphics signal G = 3. And so on …​ With out of order signal, we can end up observing this order of submissions instead. Async compute write image 1. Async compute signal A = 1. Async compute wait A = 1. Async compute write image 0. Async compute signal A = 2. Async compute wait G = 1. (Out of order submission, queue progress is stalled, but we can keep recording) Async compute wait A = 2. Async compute wait host A = 1. Async compute write image 1. Async compute signal A = 3. Graphics wait A = 1. Graphics read image 1. Graphics signal G = 1. (Unblocks queue forward progress) Graphics wait A = 2. Graphics read image 0. Graphics signal G = 2. Graphics wait A = 3. Graphics read image 1. Graphics signal G = 3. When submitting out of order, it is important that you don’t just submit work way ahead of where the GPU actually is, since the latency becomes extremely large. The natural place to keep submission explosion under control here is the place where we wait for the timeline on host, since we need to re-record command buffers anyways. When submitting out-of-order we end up in a situation where a queue cannot see any forward progress until another queue submits. Calling vkDeviceWaitIdle at this point triggers a deadlock of the application since vkDeviceWaitIdle will never finish, as there is one queue which cannot make forward progress. While calling vkDeviceWaitIdle, you cannot call vkQueueSubmit due to external synchronization rules. Instead, just wait for timeline semaphores on host to \"drain\" the GPU, or if you must use API calls, use vkQueueWaitIdle and only wait on queues which you need. Similar to vkDeviceWaitIdle, when tearing down the application, an out-of-order submission might be waiting on work which never comes, and that queue becomes deadlocked. To alleviate this, we can make use of host signalling of timeline semaphores to unblock everything in one fell swoop. From TimelineSemaphore::finish(): // Draining queues which submit out-of-order can be quite tricky, since QueueWaitIdle can deadlock for threads which want to run ahead. // If we call Submit waiting for a semaphore which is yet to be signalled, // QueueWaitIdle will not finish until a signal in another thread happens. // Here's an approach we can use to safely tear down the queue. // Drain the main thread timeline. // The async queue might be stalled waiting on the main queue to finish rendering a future frame which it never completes, // but we might never hit that count, since we're tearing down the application now. wait_timeline_cpu(main_thread_timeline); // Now we're guaranteed that the graphics timeline is at N and the async compute queue is blocked at N + num_frames + 1, waiting for N + 1 to finish. // Since we're not reading any more in graphics queue, we can jump bump the timeline on CPU towards infinity. // On the next loop iteration, we will exit the rendering loop and QueueWaitIdle will not be blocked on async thread anymore. // Just bump the timeline by INT32_MAX which is min-spec for maxTimelineSemaphoreValueDifference. // This is a useful way to mark a timeline semaphore as \"permanently\" signalled. main_thread_timeline.timeline += std::numeric_limits::max(); // Order matters here, this works kinda like a condition variable. // If the timeline update is observed, we should see that the worker is not alive anymore. async_compute_worker.alive = false; signal_timeline_cpu(main_thread_timeline, main_thread_timeline_lock); // This will now complete in finite time. if (async_compute_worker.thread.joinable()) { async_compute_worker.thread.join(); } Since this sample needs to run on all implementations which support timeline semaphores, the sample also demonstrates the limitations of out-of-order queue submissions. It’s easy to land in a situation where you deadlock the GPU or driver which only happens on single queue Vulkan implementations. There are two fixes we need to make this work. This workaround ensures that submissions happen in-order, where forward progress can always be made. Since we are using multiple submission threads this sample uses a condition variable to only allow a wait to be submitted if it ensures forward progress. This is handled by TimelineSemaphore::update_pending(): std::lock_guard holder{lock.lock}; lock.pending_timeline = timeline; lock.cond.notify_one(); and TimelineSemaphore::wait_pending(): std::unique_lock holder{lock.lock}; lock.cond.wait(holder, [&lock, timeline]() -> bool { return lock.pending_timeline >= timeline; }); Blocking like this only works when multiple threads can submit, but that’s what this sample is doing, so it is a simple fix. The most robust workaround is probably to not lean too heavily on out-of-order submission unless you know you have all the VkQueues you need to resolve the dependencies properly. If two threads end up submitting to the same queue at the same time, we need to add locks due to external synchronization requirement of the VkQueue. In this sample, we only add the locks if we’re applying workarounds. Currently, the Vulkan WSI swapchain does not support timeline semaphores. In practice, this isn’t too big of a deal as swapchain integration tends to be a \"special case\" either way in most rendering backends. The acquire and release semaphores have no analog in other modern APIs. Another related issue with WSI swapchains is that when using binary semaphores, it is not possible to use wait-before-signal. The specification states that in order to submit a wait on a binary semaphore all dependencies for that semaphore wait must have been submitted already. This means that we need to potentially block a bit on host before we can call vkQueuePresentKHR. The sample does this right before calling ApiVulkanSample::submit_frame(). // Before we call present, which uses a binary semaphore, we must ensure that all dependent submissions // have been submitted, so that the presenting queue is unblocked at the time of calling. wait_pending(async_compute_timeline_lock, main_thread_timeline.timeline); ApiVulkanSample::submit_frame(); Timeline semaphores grants a lot of flexibility to applications. With modern approaches of task graphs, many threads and free flowing synchronization, timeline semaphores simplify a lot of things and removes the need for emulating a similar concept with binary semaphores and fences. Be careful with out-of-order submissions. There are various pitfalls with this approach which have been outlined in this sample. s. Be careful with out-of-order submissions. There are various pitfalls with this approach which have been outlined in this sample.","title":"Timeline semaphore","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/timeline_semaphore/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"The binary semaphore problems","hash":"_the_binary_semaphore_problems","id":2},{"text":"Viewing a VkQueue as a sequence - thinking in terms of counters","hash":"_viewing_a_vkqueue_as_a_sequence_thinking_in_terms_of_counters","id":3},{"text":"Out-of-order signal and wait","hash":"_out_of_order_signal_and_wait","id":4},{"text":"Single producer, multiple consumers","hash":"_single_producer_multiple_consumers","id":5},{"text":"Integration of host signal and wait, good night sweet VkFence","hash":"_integration_of_host_signal_and_wait_good_night_sweet_vkfence","id":6},{"text":"Using timeline semaphores","hash":"_using_timeline_semaphores","id":7},{"text":"The sample","hash":"_the_sample","id":8},{"text":"The queues","hash":"_the_queues","id":9},{"text":"Async worker thread - out-of-order submission","hash":"_async_worker_thread_out_of_order_submission","id":10},{"text":"Data flow","hash":"_data_flow","id":11},{"text":"Avoiding deadlocks in vkDeviceWaitIdle","hash":"_avoiding_deadlocks_in_vkdevicewaitidle","id":12},{"text":"Avoiding deadlocks when tearing down worker thread","hash":"_avoiding_deadlocks_when_tearing_down_worker_thread","id":13},{"text":"Out-of-order submission fallbacks for single queue implementations","hash":"_out_of_order_submission_fallbacks_for_single_queue_implementations","id":14},{"text":"Holding back submissions","hash":"_holding_back_submissions","id":15},{"text":"Locking vkQueueSubmit","hash":"_locking_vkqueuesubmit","id":16},{"text":"API limitations","hash":"_api_limitations","id":17},{"text":"Conclusion","hash":"_conclusion","id":18}]},"89":{"id":89,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use the VK_EXT_vertex_input_dynamic_state extension, which eliminates the need to create multiple pipelines in case of different binding and/or attribute descriptions. This extension changes how attributes and bindings are managed. Instead of static description during pipeline creation, this extension allows developers to change attributes and bindings using a function before every draw. Below is a comparison of common Vulkan vertex input description and dynamic one. Vertex input static state Vertex input dynamic state dynamic_state = {} dynamic_state = {VK_DYNAMIC_STATE_VERTEX_INPUT_EXT} pVertexInputState = &vertex_input_state pVertexInputState = VK_NULL_HANDLE vkCreateGraphicsPipelines(model1) + vkCreateGraphicsPipelines(model2) vkCreateGraphicsPipelines(model) draw(model1, pipeline1) + draw(model2, pipeline2) vertex_bindings_description.stride = sizeof(Vertex1); + vertex_attribute_description.offset = offsetof(Vertex1, param); + vkCmdSetVertexInputEXT(&vertex1_params) + draw(model1, pipeline) + vertex_bindings_description.stride = sizeof(Vertex2); + vertex_attribute_description.offset = offsetof(Vertex2, param); + vkCmdSetVertexInputEXT(&vertex2_params) + draw(model2, pipeline) More details are provided in the sections that follow. Previously, developers had to create multiple pipeline’s for models with different vertex input data, which would be referenced in VkGraphicsPipelineCreateInfo. This is illustrated in the non-dynamic version of vertex input. // First pipeline vertex data // Binding description std::vector vertex_input_bindings_1 = { vkb::initializers::vertex_input_binding_description( 0, sizeof(Vertex1), VK_VERTEX_INPUT_RATE_VERTEX), }; // Attribute descriptions std::vector vertex_input_attributes_1 = { vkb::initializers::vertex_input_attribute_description( 0, 0, VK_FORMAT_R32G32B32_SFLOAT, 0), // Position vkb::initializers::vertex_input_attribute_description( 0, 1, VK_FORMAT_R32G32B32_SFLOAT, offsetof(Vertex1, normal)), // Normal VkPipelineVertexInputStateCreateInfo vertex_input_state_1 = vkb::initializers::pipeline_vertex_input_state_create_info(); vertex_input_state_1.vertexBindingDescriptionCount = static_cast(vertex_input_bindings_1.size()); vertex_input_state_1.pVertexBindingDescriptions = vertex_input_bindings_1.data(); vertex_input_state_1.vertexAttributeDescriptionCount = static_cast(vertex_input_attributes_1.size()); vertex_input_state_1.pVertexAttributeDescriptions = vertex_input_attributes_1.data(); graphics_create_info_1.pVertexInputState = &vertex_input_state_1; vkCreateGraphicsPipelines(get_device().get_handle(), VK_NULL_HANDLE, 1, &graphics_create_info, VK_NULL_HANDLE, &pipeline1); // Second pipeline vertex data // Binding description std::vector vertex_input_bindings_2 = { vkb::initializers::vertex_input_binding_description( 0, sizeof(Vertex2), VK_VERTEX_INPUT_RATE_VERTEX), }; // Attribute descriptions std::vector vertex_input_attributes_2 = { vkb::initializers::vertex_input_attribute_description( 0, 0, VK_FORMAT_R32G32B32_SFLOAT, 0), // Position vkb::initializers::vertex_input_attribute_description( 0, 1, VK_FORMAT_R32G32B32_SFLOAT, offsetof(Vertex2, normal)), // Normal (different offset than in vertex_input_attributes_1) VkPipelineVertexInputStateCreateInfo vertex_input_state_2 = vkb::initializers::pipeline_vertex_input_state_create_info(); vertex_input_state_1.vertexBindingDescriptionCount = static_cast(vertex_input_bindings_2.size()); vertex_input_state_2.pVertexBindingDescriptions = vertex_input_bindings_2.data(); vertex_input_state_2.vertexAttributeDescriptionCount = static_cast(vertex_input_attributes_2.size()); vertex_input_state_2.pVertexAttributeDescriptions = vertex_input_attributes_2.data(); graphics_create_info_2.pVertexInputState = &vertex_input_state_2; vkCreateGraphicsPipelines(get_device().get_handle(), VK_NULL_HANDLE, 1, &graphics_create_info_2, VK_NULL_HANDLE, &pipeline2); draw_model(model1, pipeline1); draw_model(model2, pipeline2); }; However, with dynamic vertex input state the number of pipelines can be reduced because of possibility to change vertex bindings and attribute descriptions on runtime by calling vkCmdSetVertexInputEXT before draw_model. + This extension extends 2 structures: + VkVertexInputBindingDescription to VkVertexInputBindingDescription2EXT + VkVertexInputAttributeDescription to VkVertexInputAttributeDescription2EXT + An example of 2 sets of different vertex input data architectures Vertex and SampleVertex. First model is loaded from assets (load_model function from framework), second model was created directly in code (have different vertex input data architecture). VkVertexInputBindingDescription2EXT vertex_bindings_description_ext = { vkb::initializers::vertex_input_binding_description2ext( 0, sizeof(Vertex), VK_VERTEX_INPUT_RATE_VERTEX, 1); } VkVertexInputAttributeDescription2EXT vertex_attribute_description_ext[2] = { vkb::initializers::vertex_input_attribute_description2ext( 0, 0, VK_FORMAT_R32G32B32_SFLOAT, offsetof(Vertex, pos)), vkb::initializers::vertex_input_attribute_description2ext( 0, 1, VK_FORMAT_R32G32B32_SFLOAT, offsetof(Vertex, normal); } graphics_create_info.pVertexInputState = nullptr; vkCreateGraphicsPipelines(get_device().get_handle(), VK_NULL_HANDLE, 1, &graphics_create_info, VK_NULL_HANDLE, &pipeline); /* First set of vertex input dynamic data (Vertex structure) */ vertex_bindings_description_ext[0].stride = sizeof(Vertex); vertex_attribute_description_ext[1].offset = offsetof(Vertex, normal); vkCmdSetVertexInputEXT(draw_cmd_buffer, static_cast(vertex_bindings_description_ext.size()), vertex_bindings_description_ext.data(), static_cast(vertex_attribute_description_ext.size()), vertex_attribute_description_ext.data()); draw_model(model1, pipeline); /* Second set of vertex input dynamic data (SampleVertex structure) */ vertex_bindings_description_ext[0].stride = sizeof(SampleVertex); vertex_attribute_description_ext[1].offset = offsetof(SampleVertex, normal); vkCmdSetVertexInputEXT(draw_cmd_buffer, static_cast(vertex_bindings_description_ext.size()), vertex_bindings_description_ext.data(), static_cast(vertex_attribute_description_ext.size()), vertex_attribute_description_ext.data()); draw_model(model2, pipeline); The vertex input dynamic state api is provided in Vulkan 1.0 and the appropriate headers / SDK is required. In addition, since vertex input dynamic state is provided as an extension and may have varying levels of support, the developer must query availability for each device used. The device extension is provided by VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME. It also requires VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME instance extension to be enabled: add_instance_extension(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME); add_device_extension(VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME); Additional features are provided by the VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT struct: typedef struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT { VkStructureType sType; void* pNext; VkBool32 vertexInputDynamicState; } VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;","title":"Vertex input dynamic state","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/extensions/vertex_dynamic_state/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Pipelines","hash":"_pipelines","id":2},{"text":"Enabling the Extension","hash":"_enabling_the_extension","id":3}]},"90":{"id":90,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. In the world of mobile GPUs, mediump has long been used as a critical optimization for performance and bandwidth. The desktop GPUs and APIs have not had much support for native 16-bit operations, but in recent architectures, this feature is becoming widespread, and FP16 in particular is becoming more common. In this sample, we demonstrate VK_KHR_shader_float16_int8, which adds standardized support for FP16 arithmetic (and INT8 arithmetic). To add FP16 arithmetic support, enable the VK_KHR_shader_float16_int8 extension. You will also need to query vkGetPhysicalDeviceFeatures2 with the VkPhysicalDeviceShaderFloat16Int8Features struct. Here, we can query and enable two separate features: shaderFloat16 shaderInt8 With these features enabled, we can create SPIR-V modules with the Float16 and Int8 capabilities enabled, respectively. Note that this feature does not include support for 16-bit or 8-bit storage. For 16-bit storage, see VK_KHR_16bit_storage. While this extension also adds supports for using 8-bit integer arithmetic, this feature is not exercised by this sample. Vulkan 1.0 already had a shaderInt16 feature. When using 16-bit arithmetic, it’s very likely that you would also use 16-bit values in buffers. To that end, this sample also shows how to make use of 16-bit storage in SSBOs and push constants. For this case, we need enable the VK_KHR_16bit_storage extension, as well as VK_KHR_storage_buffer_storage_class, which is required for VK_KHR_16bit_storage. From vkGetPhysicalDeviceFeatures2, we check VkPhysicalDevice16BitStorageFeatures, and enable: storageBuffer16BitAccess storagePushConstant16 This sample aims to hammer the GPU with 16-bit floating-point arithmetic to observe a significant uplift in arithmetic throughput. The sample is completely brute force and computes some procedural color rings. For animation purposes, these rings move around on screen and change their appearance over time. This is not intended to be an efficient way of rendering this kind of effect, quite the contrary. Every pixel tests every ring unconditionally, and the math expended to compute the final color is heavily exaggerated to make sure that we completely isolate arithmetic throughput as the main bottleneck. Here, the critical arithmetic overhead is: // This is very arbitrary. Expends a ton of arithmetic to compute // something that looks similar to a lens flare. vec4 compute_blob(vec2 pos, vec4 blob, float seed) { vec2 offset = pos - blob.xy; vec2 s_offset = offset * (1.1 + seed); vec2 r_offset = offset * 0.95; vec2 g_offset = offset * 1.0; vec2 b_offset = offset * 1.05; float r_dot = dot(r_offset, r_offset); float g_dot = dot(g_offset, g_offset); float b_dot = dot(b_offset, b_offset); float s_dot = dot(s_offset, s_offset); vec4 dots = vec4(r_dot, g_dot, b_dot, s_dot) * blob.w; // Now we have square distances to blob center. // Gotta have some FMAs, right? :D dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; vec4 parabolas = max(vec4(1.0, 1.0, 1.0, 0.9) - dots, vec4(0.0)); parabolas -= parabolas.w; parabolas = max(parabolas, vec4(0.0)); return parabolas; } In this version, we rewrite compute_blob and the rest of the shader to be as pure FP16 as we can: // Allows us to use float16_t for arithmetic purposes. #extension GL_EXT_shader_explicit_arithmetic_types_float16 : require // Allows us to use int16_t, uint16_t and float16_t for buffers. #extension GL_EXT_shader_16bit_storage : require // This is very arbitrary. Expends a ton of arithmetic to compute // something that looks similar to a lens flare. f16vec4 compute_blob(f16vec2 pos, f16vec4 blob, float16_t seed) { f16vec2 offset = pos - blob.xy; f16vec4 rg_offset = offset.xxyy * f16vec4(0.95hf, 1.0hf, 0.95hf, 1.0hf); f16vec4 bs_offset = offset.xxyy * f16vec4(1.05hf, 1.1hf + seed, 1.05hf, 1.1hf + seed); f16vec4 rg_dot = rg_offset * rg_offset; f16vec4 bs_dot = bs_offset * bs_offset; // Dot products can be somewhat awkward in FP16, since the result is a scalar 16-bit value, and we don't want that. // To that end, we compute at least two dot products side by side, and rg_offset and bs_offset are swizzled // such that we avoid swizzling across a 32-bit boundary. f16vec4 dots = f16vec4(rg_dot.xy + rg_dot.zw, bs_dot.xy + bs_dot.zw) * blob.w; // Now we have square distances to blob center. // Gotta have some FMAs, right? :D dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; dots = dots * dots + dots; f16vec4 parabolas = max(f16vec4(1.0hf, 1.0hf, 1.0hf, 0.9hf) - dots, f16vec4(0.0hf)); parabolas -= parabolas.w; parabolas = max(parabolas, f16vec4(0.0hf)); return parabolas; } Explicit, standardized 16-bit arithmetic support is quite recent in the graphics API world, but mediump will be familiar to many mobile (OpenGL ES) developers. In SPIR-V, this translates to the RelaxedPrecision decoration. The main problem with mediump has always been that you’re just not quite sure if the driver actually makes use of the precision qualifier. mediump simply signals the intent that \"it’s okay to use FP16 here, but compiler is free to ignore it and just use FP32\". This causes many headaches for developers (and users!), as developers might add mediump, observe that everything renders correctly on their implementation, but then try on a different implementation and see that rendering is broken. If you use explicit FP16, you’re guaranteed that the device in question is actually using FP16, and there is no guesswork involved. mediump is supported in Vulkan GLSL even in desktop profile, and some desktop drivers and GPUs actually do make use of the resulting RelaxedPrecision qualifier. It is a legitimate strategy to use mediump in Vulkan. The main benefit of going that route is that you do not need to implement shader variants to handle FP16 vs. FP32, as not all devices support explicit FP16 arithmetic yet. Especially for fragment shaders rendering normal graphics, it can cause a headache to have to add more shader variants just for this case. mediump can be a useful tool here since it works everywhere, but you have to accept different rendering results on different devices. Explicit FP16 shines in compute workloads, where the consideration for shader variants is less of a concern, and you can implement and tune FP16 kernels. A somewhat hidden benefit of using smaller arithmetic types is not just a higher throughput potential, but reduction in register use. GPU performance is in large part dictated by how many registers are required to run shaders. As more registers are used, fewer threads can run concurrently, and thus, it is worse at hiding instruction latency. Memory operations such as loads and stores, as well as texture operations tend to have high latencies, and if register use is too high, the shader cores are not able to effectively \"hide\" this latency. This directly results in worse performance as the shader cores spend cycles doing nothing useful. In compute shaders, you can also use shared memory with small arithmetic types, which is very nice as well. Demonstrating these effects in a sample is quite difficult since it depends on so many unknown factors, but these effects are possible to study by using vendor tools or the VK_KHR_pipeline_executable_properties extension, which typically reports register usage/occupancy. Do Consider using FP16 if you’re struggling with arithmetic throughput or register pressure. Carefully benchmark your algorithmic improvements. It is very hard to guarantee uplift when using FP16. The more complicated the code is, the harder it is to successfully make good use of FP16. If the problem can be expressed almost entirely with FMA, it is very easy to see uplift however. Consider using mediump / RelaxedPrecision if you don’t want to explicitly use FP16, or you would need to use a lot of shader variants to select between FP32 and FP16. The most common case here being typical graphics fragment shaders, which can easily have a combinatorial explosion of variants. Using specially optimized compute shaders is a more plausible scenario for explicit FP16. If using mediump, make sure you test on a wide number of implementations to actually observe precision losses when using it. If using FP16, make sure you carefully vectorize the code by using f16vec2 or f16vec4. Modern GPU architectures rely on \"packed\" f16x2 instructions to achieve improved arithmetic performance. Scalar float16_t won’t have much, if any, benefit. Don’t Cast between FP16 and FP32 too much. Most GPUs need to spend cycles when converting between FP16 and FP32. Rely on mediump without testing it on a wide range of implementations. Impact Not taking advantage of FP16 could leave some optimization potential on the table. Not taking advantage of FP16 could lead to poor shader occupancy, i.e. too many registers are used. This in turn would lead to execution bubbles on a shader core, where cycles are wasted. Debugging The only reasonable way to debug arithmetic throughput is with a profiler that can give you stats about this. To debug shader occupancy, an offline compiler, vendor tools or the standard VK_KHR_pipeline_executable_properties extension could help to obtain this kind of information.","title":"Using explicit 16-bit arithmetic in applications","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/16bit_arithmetic/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Enable 16-bit floating-point arithmetic support","hash":"_enable_16_bit_floating_point_arithmetic_support","id":2},{"text":"8-bit arithmetic?","hash":"_8_bit_arithmetic","id":3},{"text":"16-bit integers?","hash":"_16_bit_integers","id":4},{"text":"Enable 16-bit storage support","hash":"_enable_16_bit_storage_support","id":5},{"text":"The 16-bit arithmetic sample","hash":"_the_16_bit_arithmetic_sample","id":6},{"text":"Explicit 16-bit arithmetic vs. mediump / RelaxedPrecision","hash":"_explicit_16_bit_arithmetic_vs_mediump_relaxedprecision","id":7},{"text":"The hidden benefit of FP16, reducing register pressure","hash":"_the_hidden_benefit_of_fp16_reducing_register_pressure","id":8},{"text":"Best practice summary","hash":"_best_practice_summary","id":9}]},"91":{"id":91,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. On some tile-based deferred renderers (TBDR), such as Arm Mali GPUs, vertex shading and fragment shading is split into two distinct stages. Vertex shaders and the general geometry pipeline will write to memory for each visible vertex: Position (gl_Position) Vertex output data (layout(location = N) out). GPU specific data structures to accelerate rasterization later. Then, in fragment stage, the positions and GPU specific data structures are read to rasterize primitives, and for each fragment we invoke, the vertex output data can be read by the fragment shader as input variables. All of this consumes bandwidth. As vertex output data is something the application controls (and tends to consume many bytes per vertex), we should attempt to minimize the bandwidth we consume. This samples demonstrates real bandwidth saving achieved with a simple sample. VK_KHR_16bit_storage is an extension which supports many different features, but this sample in particular will focus on the storageInputOutput16 feature. The VK_KHR_16bit_storage is core in Vulkan 1.1, so an extension is not required, but the feature you plan to use must still be enabled. First, add VkPhysicalDevice16BitStorageFeatures as a pNext to vkGetPhysicalDeviceFeatures2. Now, you can check which features are supported: storageBuffer16BitAccess: Allows you to use true 16-bit values in SSBOs. uniformAndStorageBuffer16BitAccess: Allows you to use true 16-bit values in UBOs as well. storagePushConstant16: Allows you to use true 16-bit values in push constant blocks (quite handy since push constant space is so tight!) storageInputOutput16: A TBDR friendly feature, allows you to use true 16-bit values in shader input and output interfaces. To use the feature, make sure VkPhysicalDevice16BitStorageFeatures is passed down to vkCreateDevice's pNext chain. There’s two aspects to 16-bit support, storage and arithmetic. With storage support, the main goal is to reduce bandwidth and memory requirements. With 16-bit arithmetic, we will be able to improve arithmetic throughput. This sample focuses on storage only, so the sample takes care not to enable any 16-bit arithmetic features. If a device only supports 16-bit storage, but not arithmetic, we need to be somewhat careful when writing shaders. The native 16-bit types can only be used when storing to the variable, or when loading from the variable. // GL_EXT_16bit_storage would normally be used here, but that extension does not support input/output. // glslang enables SPIR-V capabilities as required. #extension GL_EXT_shader_explicit_arithmetic_types_float16 : require layout(location = 0) out f16vec4 Foo; vec4 arithmetic = blah(); // Arithmetic happens in FP32. Foo = f16vec4(arithmetic); // Narrowing store. // GL_EXT_16bit_storage would normally be used here, but that extension does not support input/output. // glslang enables SPIR-V capabilities as required. #extension GL_EXT_shader_explicit_arithmetic_types_float16 : require layout(location = 0) in f16vec4 Foo; vec4 arithmetic = vec4(Foo); // Expand fp16 -> fp32. arithmetic += blah(); In SPIR-V, you can verify what is going on by looking at the enabled capabilities: OpCapability Shader OpCapability StorageInputOutput16 ; <-- Only needs VK_KHR_16bit_storage %51 = OpLoad %v4float %color %52 = OpFConvert %v4half %51 <-- OpFConvert followed by OpStore just requires storage. ; Similarly, OpLoad followed by OpFConvert just requires Storage feature. OpStore %o_color %52 For example, if you use 16-bit arithmetic, you will see: OpCapability Shader OpCapability Float16 ; <-- Arithmetic support, needs a different extension. OpCapability StorageInputOutput16 %55 = OpFAdd %v4half %52 %54 <-- This is arithmetic in native FP16 OpStore %o_color %55 The validation layers will catch this if you forget to enable the extensions and features. In the sample, we render a large number of teapot meshes (17 * 9 = 153), each with 9128 triangles and 4689 unique vertices. The teapots are not textured, and there is no post-processing happening, meaning that geometry bandwidth is the key contributor to overall bandwidth. As mentioned above, a significant contributor to geometry bandwidth on TBDR is the storage for shader input and output data. Vertex shaders which write to layout(location = N) out T variable; consume bandwidth. Similarly, fragment shaders which read layout(location = N) in T variable; also consume bandwidth. This sample demonstrates that there can be significant savings in global device bandwidth by ensuring that the types used in vertex output and fragment input interfaces are as narrow as possible. In the first scenario, the vertex shader has 3 vec3 outputs, which is not a lot when considering modern rendering engines. layout (location = 0) out vec3 o_vertex_color; layout (location = 1) out vec3 o_normal; layout (location = 2) out vec3 o_delta_pos; For each unique vertex that is visible on screen, we must assume 52 bytes of memory bandwidth is consumed, 16 bytes for gl_Position and 36 bytes for vertex outputs. The shading itself is somewhat contrived, it is mostly there to show something being rendered. In the unoptimized case, we observe ~1.67 GB/s write bandwidth and ~1.16 GB/s read bandwidth on the specific device we tested (see screenshot). We can estimate what is going on here using intuition. We are rendering 153 teapots with 4689 vertices. 717417 unique vertices will be vertex shaded. On average, half the vertices are actually visible due to back-face culling (358k). VSync is approximately 60 FPS on the test device in the screenshots, so ~21.5M unique vertices / s will need to be written to memory. For each vertex, we have 16 bytes for gl_Position and 36 bytes for output variables, meaning this data accounts for at least ~1.11 GB/s here. That’s about 2/3 of the total write bandwidth we are measuring here. Here, we simply replace the vertex outputs and fragment inputs to be fp16. This should theoretically save 18 bytes per vertex, or ~21.5 M/s * 18 B = 387 MB / s of pure write bandwidth, and that seems to be almost spot-on with observed results. Similarly, read bandwidth is significantly reduced as well. Marking vertex output variables as mediump will generally allow us to achieve the same bandwidth savings as explicit FP16 would, but the caveat is that you cannot be sure unless you know the driver implementation details. The snippet below will work on any core Vulkan 1.0 implementation, but it may or may not give you true FP16 vertex outputs: // Vertex layout(location = 0) out mediump vec3 o_normal; // Fragment layout(location = 0) in mediump vec3 in_normal; FP16 is not very accurate, and you most likely cannot use FP16 for every vertex output in your application. Things which work well with FP16 precision: Normals / Tangent / Bi-tangent Vertex colors (if you’re still using those) Any auxillary data which is centered around 0 and doesn’t need exceptionally high precision. Use cases which may, or may not work well with FP16 precision: Local world position. Precision can be significantly improved if you use delta_pos = f16vec3(world_position - camera_position);. This centers the value around 0, and has the nice property that the closer you get to the camera, the better precision you get. Far away from the camera precision is less of a concern anyways. On a mobile screen, the precision errors might not be perceptible. Texture coordinates with smaller texture resolutions and constrained UV range. If UVs can be kept between [-1, 1], we have reasonable resolution in FP16, but might not be enough. Things which almost certainly won’t work: Global world position. UI texture coordinates. Do Use FP16 vertex outputs when possible and meets quality requirements. If you cannot rely on VK_KHR_16bit_storage being available, at the very least use mediump in lieu of true FP16. Don’t Ignore bandwidth benefits of FP16 vertex outputs. Even if 60 FPS is met, battery life can be extended by saving bandwidth. Impact Not using FP16 vertex outputs where you can will waste bandwidth on TBDR renderers, leading to increased power consumption. Debugging To observe the impact of any change to vertex output precision, use a profiler such as Streamline to observe external write or read bandwidth.","title":"Using 16-bit storage InputOutput feature to reduce bandwidth on tile-based architectures","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/16bit_storage_input_output/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Enabling the 16-bit storage extension","hash":"_enabling_the_16_bit_storage_extension","id":2},{"text":"Difference between storage and arithmetic support","hash":"_difference_between_storage_and_arithmetic_support","id":3},{"text":"The 16-bit InputOutput storage sample","hash":"_the_16_bit_inputoutput_storage_sample","id":4},{"text":"Alternative implementation: mediump","hash":"_alternative_implementation_mediump","id":5},{"text":"Considering precision","hash":"_considering_precision","id":6},{"text":"Best practice summary","hash":"_best_practice_summary","id":7}]},"92":{"id":92,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. AFBC (Arm Frame Buffer Compression) is a real-time lossless compression algorithm found in Arm Mali GPUs, designed to tackle the ever-growing demand for higher resolution graphics. This format is applied to the framebuffers that are to be written to the GPU. This technology can offer bandwidth reductions of up to 50%. The sample is geared towards demonstrating the bandwidth that you can save by toggling AFBC on and off and displaying a real-time graph of the external bandwidth. In this case we will be focusing on the swapchain images. The Vulkan API allows the developer a level of control around how the VkSwapchainKHR is created and formatted. It is here where we want to ensure that it is created and formatted in the right way so that the subsequent VkImage's that we query from it have AFBC appropriately applied. It is important to note that from a device perspective to have AFBC enabled on Vulkan, you will need at least driver version r16p0 and a Mali G-51 or higher. To find out your GPU and driver version, open the debug window or follow the steps in this article. Tested on: Samsung Galaxy S10, Huawei P30 AFBC is functionally transparent to the application and will be automatically applied on a per VkImage basis (provided multiple checks pass on various properties of your device and your images). The driver will check the applications state along with the VkImage properties to determine if it will enable AFBC or just continue without it. This section will detail the requirements. VkImage requirements: VkSampleCountFlagBits must be VK_SAMPLE_COUNT_1_BIT VkImageType must be VK_IMAGE_TYPE_2D VkImageTiling must be VK_IMAGE_TILING_OPTIMAL VkFormat supported list In addition to this, your VkImage needs to adhere to the following flags: VkImageUsageFlags must not contain: VK_IMAGE_USAGE_STORAGE_BIT VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT (Only for some devices with driver version r16p0) VK_IMAGE_USAGE_TRANSFER_DST_BIT VkImageCreateFlags must not contain: VK_IMAGE_CREATE_ALIAS_BIT VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT The sample presents the user with Sponza, with a graph displaying bandwidth at the top and a configuration window at the bottom. There is a back-and-forth oscillating camera to disable any GPU optimisations for frames that are identical. The configuration itself is simple. There is one checkbox (labelled \"Enable AFBC\") that will reload the swapchain when its value is changed. Here the sample is in its default state: AFBC off. At the top of the screen there is a graph displaying the external write bandwidth (measured from L2_EXT_WRITE_BEATS). It is currently setting the VK_IMAGE_USAGE_STORAGE_BIT flag in the VkImageUsageFlags for the swapchain images, causing the driver to skip over applying AFBC to the swapchain images. When we enable the check box, the sample will reload the swapchain with the right usage flags to have the driver enable AFBC. Here is the same scene as before, except AFBC is now enabled. The VK_IMAGE_USAGE_STORAGE_BIT flag is not being set and the swapchain is being created properly. The bandwidth has dropped from 788.0 MiB/s to 528.6 MiB/s, this is approximately a 33% reduction. You can also confirm these numbers in Streamline. Here are some screenshots: GPUs from Mali-G77 onwards support formats up to and including 32 bits per pixel regardless of color channel arrangement or sRBG. Previous generations that support AFBC only support a subset of formats: Formats VK_FORMAT_R4G4B4A4_UNORM_PACK16 VK_FORMAT_B4G4R4A4_UNORM_PACK16 VK_FORMAT_R5G6B5_UNORM_PACK16 VK_FORMAT_R5G5B5A1_UNORM_PACK16 VK_FORMAT_B5G5R5A1_UNORM_PACK16 VK_FORMAT_A1R5G5B5_UNORM_PACK16 VK_FORMAT_B8G8R8_UNORM VK_FORMAT_B8G8R8A8_UNORM VK_FORMAT_B8G8R8A8_SRGB VK_FORMAT_A8B8G8R8_UNORM VK_FORMAT_A8B8G8R8_SRGB VK_FORMAT_A8R8G8B8_SRGB VK_FORMAT_B10G10R10A2_UNORM VK_FORMAT_R4G4B4A4_UNORM VK_FORMAT_R5G6B5_UNORM VK_FORMAT_R5G5B5A1_UNORM VK_FORMAT_R8_UNORM VK_FORMAT_R8G8_UNORM VK_FORMAT_R8G8B8_UNORM VK_FORMAT_R8G8B8A8_UNORM VK_FORMAT_R8G8B8A8_SRGB VK_FORMAT_A8R8G8B8_UNORM VK_FORMAT_R10G10B10A2_UNORM VK_FORMAT_D24_UNORM_S8_UINT VK_FORMAT_D16_UNORM VK_FORMAT_D32_SFLOAT Arm Frame Buffer Compression - developer.arm.com Do Ensure that your swapchain is created correctly as per the requirements of AFBC. Ensure that all textures are compressed into ASTC format. Avoid changing your image configuration at run-time (using vkCmdCopyImage with an invalid AFBC requirement) as it will trigger a decompression. Make sure you are resolving your images using pResolveAttachments when it comes to multisampling. Any VkImage with SAMPLE_COUNT > 1 will not have AFBC applied to it. Don’t Use image usage flags, such as VK_IMAGE_USAGE_STORAGE_BIT, unless you really need it (i.e. for compute on a specific image). Impact Having an incorrect configuration of your images will cause all your surface VkImage's to be uncompressed, losing out on considerable system wide bandwidth reductions. Debugging To test if AFBC is enabled or disabled, you can use a profiler such as Streamline and record the bandwidth values when AFBC is enabled or when AFBC is disabled. You may also use the extension VK_EXT_image_compression_control to query if AFBC is enabled. See the Image Compression Control sample for more details.","title":"Enabling AFBC in your Vulkan Application","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/afbc/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Enabling AFBC","hash":"_enabling_afbc","id":2},{"text":"The AFBC Sample","hash":"_the_afbc_sample","id":3},{"text":"Format Support","hash":"_format_support","id":4},{"text":"Further Reading","hash":"_further_reading","id":5},{"text":"Best practice summary","hash":"_best_practice_summary","id":6}]},"93":{"id":93,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Most Vulkan implementations expose multiple Vulkan queues which the application can make use of at any one time. The main motivation for hardware to expose multiple queues is that we can express parallelism at a higher level than threads. Compute shaders are increasingly being employed to do \"everything\" except for main pass rasterization in modern game engines. This sample aims to demonstrate some techniques we can use to get optimal behavior on tile based renderers in particular. As we will discuss later, the strategy for immediate mode renderers are somewhat different due to architectural differences. The TBDR architecture splits vertex shading and fragment shading in two. First, vertices and shaded and binned, and once all of that is done, fragment shading happens. A critical performance win is that vertex shading in render pass N + {1, 2, …​} can overlap fragment shading in render pass N. When targeting optimal performance on these GPUs, we must ensure to never stall fragment shading. Due to this kind of rendering architecture, there should be at least two hardware queues on these GPUs. At least on Arm Mali GPUs, compute workloads run in the same queue as vertex shading and binning. This is intuitive since vertex shading is basically the same as compute shading with some extra fixed function magic. Compute shader post processing becomes problematic in this kind of frame: Rasterize pass FRAGMENT -> COMPUTE semaphore Compute pass COMPUTE -> FRAGMENT semaphore (Perf cliff! : FRAGMENT semaphore here. Due to the FRAGMENT -> COMPUTE and COMPUTE -> FRAGMENT barriers we have effectively blocked FRAGMENT from doing any work while COMPUTE is running. As mentioned earlier, this is a performance problem on TBDR. A more desktop-style approach here is to present from async compute, i.e., do everything in compute, and try to go with this approach instead: Rasterize pass FRAGMENT -> COMPUTE semaphore Compute post Render UI in graphics queue (bandwidth hit, but we don’t really care here) FRAGMENT -> COMPUTE semaphore Composite final result in a compute shader Present in compute Presenting from async compute is a different topic and is not covered by this sample, but it’s something to keep in mind. Some GPUs expose multiple graphics queues in Vulkan. This is very handy since we can fix the barrier problem this way. Assume that we have 2 VkQueues which support everything, and we can render the frame like this instead: Rasterize pass (Queue #1) FRAGMENT (Queue #1) -> COMPUTE (Queue #0) semaphore Compute pass (Queue #0) COMPUTE (Queue #0) -> FRAGMENT (Queue #0) semaphore (No perf OOF! :>) Render UI + post output (Queue #0) Present in graphics (Queue #0) …​ Rasterize pass (Queue #1) is not blocked on compute, overlap achieved :> A final cherry on top is to fiddle with queue priorities. How queue priorities behave is implementation independent, but the intention is that it allows drivers to prioritize work in one queue over another. In our case, we should make Queue #0 high priority and #1 low priority, since work late in the frame is more important than work happening early in next frame. From a latency point of view, it would be ideal if Queue #0 can interrupt Queue #1. An alternative to the approach in this sample which sidesteps the issue is to defer submitting the UI + present work, and start submitting graphics work for the next frame before blocking on compute work. This is problematic because: It adds complexity to juggle multiple in-flight frames. It adds needless input latency. When we add more overlap between frames we also reduce responsiveness, which is very important for interactive content. The sample implements a very bare bones rendering pipeline which demonstrates a plausible rendering scenario consisting of: Render directional shadowmap at 8K Render HDR image at 4K with very basic lighting Very naive and simple HDR + (a very bloomy) Bloom pipeline in async compute Tonemap + UI in swapchain pass The goal here is to exploit the shadow mapping pass, which is extremely bound on fixed function rasterization performance. If we can do useful compute work in parallel, we should get a win in performance. Here we see that fragment cycles is much lower than GPU cycles. This means the fragment queue is starved for work. This is due to our bad barriers mentioned above. Vertex + Fragment cycles is still > GPU cycles, which means there is some overlap, but this is only vertex shading that overlaps. Post-process compute is starving the GPU. Here we can see a nice perf win (21.8 ms vs. 22.9 ms), and fragment cycles is very close to GPU cycles now, which means no starvation is happening. Note that performance does not scale immensely here, and we shouldn’t expect that either. While vertex cycles and fragment cycles both increase, they are still competing for resources on the same shader core. The work we do to get good overlap means the GPU always has something to do in the lull periods between barriers which drain a hardware queue for work. Enable async queues: Uses multiple queues to avoid stalling the fragment queue. Double buffer HDR: Aims to exploit more overlap opportunities. Rotate shadows: Disables the animated light, it is hard to study performance differences when it is on since performance fluctuates a bit with it on. These tips are somewhat TBDR specific. Do Use multiple Vulkan queues if there is any FRAGMENT -> COMPUTE workload happening. Any COMPUTE work which depends on FRAGMENT should be done in a different queue to avoid stalling FRAGMENT. Use higher priority on the queue which presents the final image. Don’t Introduce a FRAGMENT -> COMPUTE barrier unless you have a plan on how to avoid the inevitable COMPUTE -> FRAGMENT barrier. Debugging IHV profiling tools can visualize how different hardware queues are saturated.","title":"Using async compute to saturate GPU","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/async_compute/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Compute all the things - a post processing case study","hash":"_compute_all_the_things_a_post_processing_case_study","id":2},{"text":"The challenge of compute shader post processing on tile-based deferred renderers (TBDR)","hash":"_the_challenge_of_compute_shader_post_processing_on_tile_based_deferred_renderers_tbdr","id":3},{"text":"A note on compute post-processing on TBDR vs immediate mode (IMR) desktop GPUs","hash":"_a_note_on_compute_post_processing_on_tbdr_vs_immediate_mode_imr_desktop_gpus","id":4},{"text":"Using multiple graphics queues to pop the bubble","hash":"_using_multiple_graphics_queues_to_pop_the_bubble","id":5},{"text":"Queue priorities","hash":"_queue_priorities","id":6},{"text":"Reordering passes manually?","hash":"_reordering_passes_manually","id":7},{"text":"The sample","hash":"_the_sample","id":8},{"text":"Options","hash":"_options","id":9},{"text":"Best practice summary","hash":"_best_practice_summary","id":10}]},"94":{"id":94,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use and manage secondary command buffers, and how to record them concurrently. Implementing multi-threaded recording of draw calls can help reduce CPU frame time. In tile-based renderers, the best approach to split the draw calls is to record them in secondary command buffers. This way they can all be submitted to the same render pass, and can take advantage of tile local memory. Secondary command buffers can inherit the render pass state from a primary command buffer using a VkCommandBufferInheritanceInfo structure which is passed to vkBeginCommandBuffer as part of VkCommandBufferBeginInfo, along with the flag VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT. Secondary command buffers may then be recorded concurrently. The primary command buffer must have used the flag VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS in vkCmdBeginRenderPass. Finally, the primary command buffer records vkCmdExecuteCommands (before vkCmdEndRenderPass) with an array of recorded secondary command buffers to execute. The sample divides the draw calls for opaque objects based on the slider value. It then submits a separate buffer for transparent objects if any, and finally one for the GUI elements if visible. To record command buffers concurrently, the framework needs to manage resource pools per frame and per thread. According to the Vulkan Spec: A command pool must not be used concurrently in multiple threads. The application must not allocate and/or free descriptor sets from the same pool in multiple threads simultaneously. In the framework, each frame in the queue (e.g. three frames in case of triple buffering) manages a collection of pools so that each thread can own: A command pool A descriptor pool cache A descriptor set cache A buffer pool This sample then uses a thread pool to push work to multiple threads. When splitting the draw calls, it is advisable to keep the loads balanced. The sample allows to change the number of buffers, but if the number of calls is not divisible, the remaining will be evenly spread through other buffers. The average number of draws per buffer is shown on the screen. Note that since state is not reused across command buffers, a reasonable number of draw calls should be submitted per command buffer, to avoid having the GPU going idle while processing commands. Therefore having many secondary command buffers with few draw calls can negatively affect performance. In any case there is no advantage in exceeding the CPU parallelism level i.e. using more command buffers than threads. Similarly having more threads than buffers may have a performance impact. To keep all threads busy, the sample resizes the thread pool for low number of buffers. The sample slider can help illustrate these trade-offs and their impact on performance, as shown by the performance graphs. Since the time of writing this tutorial, the CPU counter provider, HWCPipe, has been updated and it no longer provides CPU cycles. These may still be measured using external tools, as shown later. In this case, a scene with a high number of draw calls (~1800, this number may be found in the debug window) shows a 15% improvement in performance when dividing the workload among 8 buffers across 8 threads: To test the sample, make sure to build it in release mode and without validation layers. Both these factors can significantly affect the results. Vulkan provides different ways to manage and allocate command buffers. This sample compares them and demonstrates the best approach. Allocate and Free Resetting individual command buffers Resetting the command pool Command buffers are allocated from a command pool with vkAllocateCommandBuffers. They can then be recorded and submitted to a queue for the Vulkan device to execute them. A possible approach to managing the command buffers for each frame in our application would be to free them once they are executed, using vkFreeCommandBuffers. The command pool will not automatically recycle memory from deleted command buffers if the command pool was created without the RESET_COMMAND_BUFFER_BIT flag. This flag however will force separate internal allocators to be used for each command buffer in the pool, which can increase CPU overhead compared to a single pool reset. This is the worst-performing method of managing command buffers as it involves a significant CPU overhead for allocating and freeing memory frequently. The sample shows how to use the framework to follow this approach and profile its performance. Rather than freeing and re-allocating the memory used by a command buffer, it is more efficient to recycle it for recording new commands. There are two ways of resetting a command buffer: individually, with vkResetCommandBuffer, or indirectly by resetting the command pool with vkResetCommandPool. In order to reset command buffers individually with vkResetCommandBuffer, the pool must have been created with the RESET_COMMAND_BUFFER_BIT flag set. The buffer will then return to a recordable state and the command pool can reuse the memory it allocated for it. However frequent calls to vkResetCommandBuffer are more expensive than a command pool reset. Resetting the pool with vkResetCommandPool automatically resets all the command buffers allocated by it. Doing this periodically will allow the pool to reuse the memory allocated for command buffers with lower CPU overhead. To reset the pool the flag RESET_COMMAND_BUFFER_BIT is not required, and it is actually better to avoid it since it prevents it from using a single large allocator for all buffers in the pool thus increasing memory overhead. The sample offers the option of recording all drawing operations on a single command buffer, or to divide the opaque object draw calls among a given number of secondary command buffers. The second method allows multi-threaded command buffer construction. However the number of secondary command buffers should be kept low since their invocations are expensive. This sample lets the user adjust the number of command buffers. Using a high number of secondary command buffers causes the application to become CPU bound and makes the differences between the described memory allocation approaches more pronounced. All command buffers in this sample are initialized with the ONE_TIME_SUBMIT_BIT flag set. This indicates to the driver that the buffer will not be re-submitted after execution, and allows it to optimize accordingly. Performance may be reduced if the SIMULTANEOUS_USE_BIT flag is set instead. This sample provides options to try the three different approaches to command buffer management described above and monitor their efficiency. This is relatively obvious directly on the device by monitoring frame time. Since the application is CPU bound, the Android Profiler is a helpful tool to analyze the differences in performance. As expected, most of the time goes into the command pool framework functions: request_command_buffer and reset. These handle the different modes of operation exposed by this sample. Android Profiler capture: use the Flame Chart to visualize which functions take the most time in the capture. Filter for command buffer functions, and use the tooltips to find out how much time out of the overall capture was used by each function. Capturing the C++ calls this way allows us to determine how much each function contributed to the overall running time. The results are captured in the table below. Mode Request + Reset command buffers (ms) Total capture (ms) Contribution Reset pool 53.3 11 877 0.45 % Reset buffers 140.29 12 087 1.16 % Allocate and free 3 319.25 11 513 28.8 % In this application the differences between individual reset and pool reset are more subtle, but allocating and freeing buffers are clearly the bottleneck in the worst performing case. Multi-threaded recording with multiple render passes Command Buffer Allocation and Management Command Buffer Lifecycle \"Writing an efficient Vulkan renderer\" by Arseny Kapoulkine (from \"GPU Zen 2: Advanced Rendering Techniques\") Do Use secondary command buffers to allow multi-threaded render pass construction. Minimize the number of secondary command buffer invocations used per frame. Set ONE_TIME_SUBMIT_BIT if you are not going to reuse the command buffer. Periodically call vkResetCommandPool() to release the memory if you are not reusing command buffers. Don’t Set RESET_COMMAND_BUFFER_BIT if you only need to free the whole pool. If the bit is not set, some implementations might use a single large allocator for the pool, reducing memory management overhead. Call vkResetCommandBuffer() on a high frequency call path. Impact Increased CPU load will be incurred with secondary command buffers. Increased CPU load will be incurred if command pool creation and command buffer begin flags are not used appropriately. Increased CPU overhead if command buffer resets are too frequent. Increased memory usage until a manual command pool reset is triggered. Debugging Evaluate every use of any command buffer flag other than ONE_TIME_SUBMIT_BIT, and review whether it’s a necessary use of the flag combination. Evaluate every use of vkResetCommandBuffer() and see if it could be replaced with vkResetCommandPool() instead.","title":"Command buffer usage and multi-threaded recording","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/command_buffer_usage/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Secondary command buffers","hash":"_secondary_command_buffers","id":2},{"text":"Multi-threaded recording","hash":"_multi_threaded_recording","id":3},{"text":"Recycling strategies","hash":"_recycling_strategies","id":4},{"text":"Allocate and free","hash":"_allocate_and_free","id":5},{"text":"Resetting individual command buffers","hash":"_resetting_individual_command_buffers","id":6},{"text":"Resetting the command pool","hash":"_resetting_the_command_pool","id":7},{"text":"Relative performance","hash":"_relative_performance","id":8},{"text":"Further reading","hash":"_further_reading","id":9},{"text":"Best-practice summary","hash":"_best_practice_summary","id":10}]},"95":{"id":95,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. The Vulkan API exposes a few different ways in which we can send uniform data into our shaders. There are enough methods that it raises the question \"Which one is fastest?\", and more often than not the answer is \"It depends\". The main issue for developers is that the fastest methods may differ between the various vendors, so often there is no \"one size fits all\" solution. This sample aims to highlight this issue, and help move the Vulkan ecosystem to a point where we are better equipped to solve this for developers. This is done by having an interactive way to toggle different constant data methods that the Vulkan API expose to us. This can then be run on a platform of the developers choice to see the performance implications that each of them bring. What is Constant Data? Introduction Constant data in Vulkan shaders Vulkan API Sample Overview Push Constants Descriptor Sets Dynamic Descriptor Sets Update-after-bind Descriptor Sets Buffer Object Arrays Further reading Best practice summary Constant data is a form of information that is supplied to the pipeline to help with shader computations. In theory, this data can be anything we want it to be, for instance it can be used for things such as calculating where an object should be placed inside our world, or computing the overall brightness of an object based on the lights in the scene. It differs from other data (e.g. input vertex data) in the sense that it remains constant across every shader invocation of a draw call. This is important as because of this assumption, the data can be shared between shader stages, as we know it isn’t going to be changed throughout the runtime of a single draw call in a render pipeline. The next section aims to cover the constant data theory, starting at the shader level before moving to the basics of how to plug in your data using Vulkan. Constant data is implemented in shader code by using global variables. Global variables have the following format: . Take this vertex shader for example: layout(location = 0) in vec4 position; layout(set = 0, binding = 0) uniform ConstantData { mat4 model; } constant_data; layout(location = 0) out vec4 o_pos; We can see three global variables, each with a different storage type: Inputs (in) Uniforms (uniform) Outputs (out) The global variables that use inputs (in) and outputs (out) are values that may vary from one shader invocation to the next, therefore they shouldn’t be used for constant data. They require a layout location which is used to identify a particular input/output. They have slightly different rules for what they do depending on the shader stage, and have slightly different restrictions on the types of data it can represent. However, generally their use is to feed values from one stage to the next (e.g. from vertex shader to fragment shader). You can read more about shader stage inputs and outputs https://www.khronos.org/opengl/wiki/Type_Qualifier(GLSL)#Shader_stage_inputs_and_outputs[here]._ Uniform types are global variables that have either the uniform or buffer storage type, these are uniform buffer objects and shader storage buffer objects respectively. They describe data which remains constant across an entire draw call, meaning that the values stay the same across the different shader stages and shader invocations. These values use a layout binding and, when working with multiple VkDescriptorSets, we will also give it a layout set. Uniform buffer objects (UBOs) are the more commonly used of the two. They are read-only buffers, so trying to edit them in shader code will result in a compile-time error. Shader storage buffer objects (SSBOs) are like special types of uniform buffer objects, denoted by the storage type buffer. Unlike UBOs they can be written to, meaning the values can be changed in the shaders so therefore they don’t always represent data that is constant. Having said this, depending on the implementation, they generally can hold a lot more data as opposed to UBOs. *Note:* To check how much data we can store in uniform buffers and storage buffers, you can query the physical device for its VkPhysicalDeviceLimits and check the values maxUniformBufferRange and maxStorageBufferRange respectively. To implement our constant data we have to use an interface block. Interface blocks in shader code are used to group multiple global variables of the same type, so in theory they aren’t necessarily solely for constant data. For example: layout(set = 0, binding = 0) uniform PerMeshData { vec4 camera_position; mat4 model_matrix; vec3 mesh_color; } per_mesh_data; Interface blocks are still global variables, and technically still follow the global variable format that was mentioned at the start of this chapter. However, the difference is that they have to be given a user-defined type. They work exactly the same way as a struct in GLSL/C++. For example, to access the model matrix in this interface block, you’d use per_mesh_data.model_matrix. You can read more about interface blocks https://www.khronos.org/opengl/wiki/Interface_Block(GLSL)[here]._ We’ve covered how constant data is implemented in the shader, however to push the data from the application to the shader we need to use Vulkan. We do this mainly with the use of VkBuffers, which is Vulkan’s implementation of buffer memory. Buffers in Vulkan are just chunks of memory used for storing data, which can be read by the GPU. They need to be created and have their memory manually allocated, and then we can copy our constant data into the allocated memory. This data can then be plugged into the draw calls, so that it can finally be used in our shader computations. The library Vulkan Memory Allocator (VMA) is extremely good for handling a lot of the common pitfalls that come with managing your Vulkan memory, without removing the control that you would otherwise have with native Vulkan. The following links are useful for learning how to create a Vulkan buffer in your application: https://vulkan-tutorial.com/Vertex_buffers/Vertex_buffer_creation https://vulkan-tutorial.com/Vertex_buffers/Staging_buffer#page_Abstracting-buffer-creation https://vulkan-tutorial.com/Uniform_buffers/Descriptor_layout_and_buffer#page_Uniform-buffer There are various ways to push your constant data, where this tutorial will cover a subset of these methods. However the Vulkan API gives a lot of flexibility about how to handle descriptor sets, offering many different types and different ways to bind and use them (especially when we factor in extensions). This can puzzle developers about which is best, and for which scenarios. This tutorial aims to ease some of the confusion and uncertainty around this subject. When we break this down, we have the following methods: Push Constants Descriptor Sets Dynamic Descriptor Sets Update-after-bind Descriptor Sets Buffer array with dynamic indexing Inline uniform buffer objects (click to read more) Push descriptors (click to read more) Inline uniform buffer objects and push descriptors are not covered by this tutorial, please use the links above to learn more about them. The sample uses a mesh heavy scene which has 1856 meshes (475 KB of mesh data). This is to demonstrate a use case where many different calls to pushing constant data will occur during a single frame. This is to artificially exaggerate the performance delta. The constant data that is being sent is the per-mesh model matrix, the camera view projection matrix, a scale matrix and some extra padding. If the GPU doesn’t support at least 256 bytes of push constants, it will instead push 128 bytes (it won’t include the scale matrix and the extra padding). A performance graph is displayed at the top with two charts, one showing frame time, and one showing the load/store cycles. These two counters will show the CPU and GPU cost respectively, so when you go to toggle the different method you can see how it changes. The options presented to the user lets them change the method by which we push the MVP data. It is important to note that the configuration adapts to the device and GPU. This is so if an extension isn’t supported, the related option will no longer show. You can check the console log to see a warning message detailing what features were disabled and why. When an option is changed, the descriptor sets are flushed and recreated with their new setup, and the respective render pipeline/subpass. Push constants are usually the first method newer Vulkan programmers will stumble upon when beginning to work with constant data. They are straightforward to use and integrate nicely into any codebase, making them a great option to send simple data to your shaders. A downside to push constants is that on some platforms they have strict limitations on how much data can be sent. The Vulkan spec guarantees that drivers will support at least 128 bytes of push constants. Many modern implementations of Vulkan will commonly support 256 bytes and sometimes much more. *Note:* To determine how many bytes your system supports, you can query the physical device for its VkPhysicalDeviceLimits and check the value maxPushConstantsSize. Having said this, 128/256 bytes is still a useful amount of data, even if it isn’t exactly scalable to a full game scenario. In the case of 128 bytes, we can at least send two float 4x4 matrices (2 * 4 * 16 = 128). This, for example, can hold our world matrix and our view-projection matrix. So that the shader can understand where this data will be sent, we specify a special push constants in our shader code. For example: layout(push_constant) uniform MeshData { mat4 model; } mesh_data; To then send the push constant data to the shader we use the vkCmdPushConstants function: void vkCmdPushConstants( VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues); In early implementations of Vulkan on Arm Mali, this was usually the fastest way of pushing data to your shaders. In more recent times, we have observed on Mali devices that overall they can be slower. If performance is something you are trying to maximise on Mali devices, descriptor sets may be the way to go. However, other devices may still favour push constants. Having said this, descriptor sets are one of the more complex features of Vulkan, making the convenience of push constants still worth considering as a go-to method, especially if working with trivial data. Scroll down for a comparison with static descriptor sets. In Vulkan, resources are exposed to shaders by the use of resource descriptors. A resource descriptor (or descriptor for short) is a way for a shader to access a resource such as a buffer or an image. These descriptors are simple structures holding a pointer to the resource it is \"describing\", along with an associated resource binding so that when we execute a draw call the shader knows where to look for the resource. A collection of descriptors are called a descriptor set, which itself will have an associated set binding. For example, if we take this line of shader code: layout(set = 0, binding = 0) uniform ConstantData { mat4 model; } constant_data; The set value maps to the set binding, and the binding value maps to the resource binding. So therefore we can deduce that for this shader we’d need a pipeline that has one descriptor set with one binding (0 and 0 respectively). To create a descriptor set, we need to allocate it from a descriptor set pool and give it a specific descriptor set layout. After a descriptor set is allocated, it needs to be updated with the descriptors. The update process requires us to specify a list of write operations, where a write operation is a VkWriteDescriptorSet struct. Then the valid descriptor set is bound to a command buffer so that when vkCmdDraw*() commands are run, the right resources are made available in the GPU. For all the descriptor set sections below, we will use one such resource known as a buffer object, as this will be what we use to store our MVP data. A buffer object in Vulkan is a type of VkBuffer, created with the respective buffer usage flag. For uniform buffer objects we use the VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT flag, and for shader storage buffer objects we use the VK_BUFFER_USAGE_STORAGE_BUFFER_BIT flag. These map to the shader type uniforms and buffers respectively. While it is not straightforward to perform a 1:1 comparison between push constants and descriptor sets, the sample does show static descriptor sets outperforming push constants. When comparing with push constants on an Arm Mali GPU, we can see the frametime remains the same (16.7ms), however it is the load/store cycles we want to look at. They drop from 266 k/s to 123 k/s, showing that the GPU is worked more in the case of push constants to achieve the same visual results. Dynamic descriptor sets differ to the regular descriptor sets because they allow an offset to be specified when we are binding (vkCmdBindDescriptorSets) the descriptor set. This dynamic offset can be used in addition to the base offset used at the time of updating the descriptor set. One case in which this can be useful is: Allocating one giant uniform buffer object containing all the world matrices of the meshes in your scene. Allocating a descriptor set with a binding containing the VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC flag that then points to the UBO you just created. In our draw call, for each mesh, dynamically offset into the giant uniform buffer object. In the screenshot above (taken on an S10 with a Mali G76 GPU) we can see the load/store cycles stay roughly the same compared to static uniform buffer objects. However, the frame time goes up from 16.7 ms to 20.9 ms. This is due to the extra time you need to spend every frame determining the dynamic offsets, that you need to send in the bind call (vkCmdBindDescriptorSets). Traditionally, descriptor sets require updating before they are bound to a command buffer - any further updates after it is bound will invalidate the command buffer it is bound to. However, this can be considered an \"overly cautious\" restriction when we realise that the command buffer isn’t actually executed until it’s submitted on a queue. This is where newer versions of Vulkan have introduced the concept of \"update after bind\". Essentially it adds in a binding flag to descriptor set layouts which allows the contents of the descriptor set to be updated up until the command buffer is submitted to the queue, rather than when the descriptor set is bound to the command buffer. *Note:* Update-after-bind bindings cannot be used with dynamic descriptor sets. This should come with zero performance costs, and as a result this method is designed purely for offering flexibility to your codebase. Another approach, which can be likened to a dynamic descriptor set, is a buffer object array. This is the concept of allocating all of your constant data upfront in a large buffer, and writing the entire buffer to a descriptor set. This means in any one shader invocation we have access to all of the model data for the entire scene, at the benefit of only needing to bind one descriptor set per entire draw call. You can use either a uniform or a buffer storage type in your shader code to achieve this. However, since buffers can generally hold bigger amounts of data, this tutorial will use them. *Note:* If deciding to use a uniform, then the size of the array needs to be defined at compile time. This can be achieved with a shader variant definition. Here is an example of using a buffer in shader code: layout(set = 0, binding = 1) buffer MeshArray { mat4 model_matrices[]; } mesh_array; Before you draw the scene, you create a VkBuffer with the VK_BUFFER_USAGE_STORAGE_BUFFER_BIT usage flag, and fill it with all the model matrices of each mesh in the scene. Then to get the correct matrix inside our shader, we can pass a dynamic index to our draw call. We do this by using the gl_InstanceIndex value. For example, your shader code will look something like this: mat4 model_matrix = mesh_array.model_matrices[gl_InstanceIndex]; out_pos = model_matrix * vec4(in_pos, 1.0); To control the value of gl_InstanceIndex we use the uint32_t firstInstance parameter of the vkCmdDraw*() commands. It’s important to note that we can use other mechanisms to push this index to the shader, such as push constants. For example, this vkCmdDrawIndexed is taken from the Vulkan spec: void vkCmdDrawIndexed( VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance); Here is some pseudo-code to show how the vkCmdDrawIndexed function is used, and also to describe how a generic scene render function will look: uint32_t instance_index = 0; vkCmdBindDescriptorSet(command_buffer, buffer_array_descriptor_set); for(auto &mesh : meshes) { vkCmdBindVertexBuffer(command_buffer, mesh.vertex_buffer); vkCmdBindIndexBuffer(command_buffer, mesh.index_buffer); // This line does our drawing vkCmdDrawIndexed(command_buffer, mesh.index_buffer.size(), 1, 0, 0, instance_index++); } In the code snippet above we can see that we bind our descriptor set once, and for each mesh bind its vertex and index buffers and then execute a draw call with an incrementing value for uint32_t firstInstance. This uint32_t will be substituted in wherever gl_InstanceIndex exists in the shader code, which will pull out the required model matrix to position the mesh inside our world. While this could be a fast method for some devices, on Mali it is not a recommend practice as it disables a compiler optimisation technique known as pilot shaders. Pilot shaders are a technique that allows us to determine what calculations can be \"piloted\" into your GPU’s register so that when the data needs to be read it doesn’t take a full read cycle from the GPU RAM. To show this here is a Streamline capture of a Mali G76, showing the read cycles for using a single descriptor set per mesh against the pre allocated buffer array: A few different stats are affected in the Mali GPU by using this, but the main thing is the full read in the Mali Core Load/Store Cycles. The Vulkan 1.2 spec \"Writing an efficient Vulkan renderer\" by Arseny Kapoulkine https://zeux.io/2020/02/27/writing-an-efficient-vulkan-renderer/ Alexander Overvoorde’s Vulkan Tutorial on Descriptors guide Vulkan Fast Paths https://gpuopen.com/wp-content/uploads/2016/03/VulkanFastPaths.pdf Do Do keep constant data small, where 128 bytes is a good rule of thumb. Do use push constants if you do not want to set up a descriptor set/UBO system. Do make constant data directly available in the shader if it is pre-determinable, such as with the use of specialization constants. Avoid Avoid indexing in the shader if possible, such as dynamically indexing into buffer or uniform arrays, as this can disable shader optimisations in some platforms. Impact Failing to use the correct method of constant data will negatively impact performance, causing either reduced FPS and/or increased BW and load/store activity. On Mali, register mapped uniforms are effectively free. Any spilling to buffers in memory will increase load/store cache accesses to the per thread uniform fetches. reduced FPS and/or increased BW and load/store activity. On Mali, register mapped uniforms are effectively free. Any spilling to buffers in memory will increase load/store cache accesses to the per thread uniform fetches.","title":"Constant data in Vulkan","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/constant_data/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Contents","hash":"_contents","id":2},{"text":"What is constant data?","hash":"_what_is_constant_data","id":3},{"text":"Introduction","hash":"_introduction","id":4},{"text":"Constant data in Vulkan shaders","hash":"_constant_data_in_vulkan_shaders","id":5},{"text":"Varying Types","hash":"_varying_types","id":6},{"text":"Uniform Types","hash":"_uniform_types","id":7},{"text":"Interface Blocks","hash":"_interface_blocks","id":8},{"text":"Vulkan API","hash":"_vulkan_api","id":9},{"text":"The Methods","hash":"_the_methods","id":10},{"text":"Sample Overview","hash":"_sample_overview","id":11},{"text":"Introduction","hash":"_introduction_2","id":12},{"text":"Controls","hash":"_controls","id":13},{"text":"Push Constants","hash":"_push_constants","id":14},{"text":"Introduction","hash":"_introduction_3","id":15},{"text":"Performance","hash":"_performance","id":16},{"text":"Descriptor Sets","hash":"_descriptor_sets","id":17},{"text":"Introduction","hash":"_introduction_4","id":18},{"text":"Buffer Object","hash":"_buffer_object","id":19},{"text":"Performance","hash":"_performance_2","id":20},{"text":"Dynamic Descriptor Sets","hash":"_dynamic_descriptor_sets","id":21},{"text":"Introduction","hash":"_introduction_5","id":22},{"text":"Performance","hash":"_performance_3","id":23},{"text":"Update-after-bind Descriptor Sets","hash":"_update_after_bind_descriptor_sets","id":24},{"text":"Introduction","hash":"_introduction_6","id":25},{"text":"Performance","hash":"_performance_4","id":26},{"text":"Buffer Object Arrays","hash":"_buffer_object_arrays","id":27},{"text":"Introduction","hash":"_introduction_7","id":28},{"text":"Performance","hash":"_performance_5","id":29},{"text":"Further reading","hash":"_further_reading","id":30},{"text":"Best practice summary","hash":"_best_practice_summary","id":31}]},"96":{"id":96,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. An application using Vulkan will have to implement a system to manage descriptor pools and sets. The most straightforward and flexible approach is to re-create them for each frame, but doing so might be very inefficient, especially on mobile platforms. The problem of descriptor management is intertwined with that of buffer management, that is choosing how to pack data in VkBuffer objects. This tutorial will explore a few options to improve both descriptor and buffer management. When rendering dynamic objects the application will need to push some amount of per-object data to the GPU, such as the MVP matrix. This data may not fit into the push constant limit for the device, so it becomes necessary to send it to the GPU by putting it into a VkBuffer and binding a descriptor set that points to it. Materials also need their own descriptor sets, which point to the textures they use. We can either bind per-material and per-object descriptor sets separately or collate them into a single set. Either way, complex applications will have a large amount of descriptor sets that may need to change on the fly, for example due to textures being streamed in or out. The simplest approach to circumvent the issue is to have one or more VkDescriptorPools per frame, reset them at the beginning of the frame and allocate the required descriptor sets from it. This approach will consist of a vkResetDescriptorPool() call at the beginning, followed by a series of vkAllocateDescriptorSets() and vkUpdateDescriptorSets() to fill them with data. The issue is that these calls can add a significant overhead to the CPU frame time, especially on mobile. In the worst cases, for example calling vkUpdateDescriptorSets() for each draw call, the time it takes to update descriptors can be longer than the time of the draws themselves. The sample highlights the issue with a draw-call intensive scene. Frame time is around 44 ms (on a 2019 high-end mobile phone), corresponding to 23 FPS, with the simplest descriptor management scheme. If you want to test the sample, make sure to set it in release mode and without validation layers. Both these factors can significantly affect the results. A major way to reduce descriptor set updates is to re-use them as much as possible. Instead of calling vkResetDescriptorPool() every frame, the app will keep the VkDescriptorSet handles stored with some caching mechanism to access them. The cache could be a hashmap with the contents of the descriptor set (images, buffers) as key. This approach is used in our framework by default. It is possible to remove another level of indirection by storing descriptor sets handles directly in the materials and/or meshes. Caching descriptor sets has a dramatic effect on frame time for our CPU-heavy scene: The frame time is now around 27 ms, corresponding to 37 FPS. This is a 38% decrease in frame time. We can confirm this behavior using Streamline Performance Analyzer. The first part of the trace until the marker is without descriptor set caching. We can see that the app is CPU bound, since the GPU is idling between frames while the CPU is fully utilized. After the marker we enable descriptor set caching and we can see that frames are processed faster. GPU frame time does not change much and the app is still CPU bound, so the speedup is related to CPU-side improvements. This system is reasonably easy to implement for a static scene, but it becomes harder when you need to delete descriptor sets. Complex engines may implement techniques to figure out which descriptor sets have not been accessed for a certain number of frames, so they can be removed from the map. This may correspond to calling vkFreeDescriptorSets(), but this solution poses another issue: in order to free individual descriptor sets the pool has to be created with the VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT flag. Mobile implementations may use a simpler allocator if that flag is not set, relying on the fact that pool memory will only be recycled in block. It is possible to avoid using that flag by updating descriptor sets instead of deleting them. The application can keep track of recycled descriptor sets and re-use one of them when a new one is requested. The subpasses sample uses this approach when it re-creates the G-buffer images. Going back to the initial case, we will now explore an alternative approach, that is complementary to descriptor caching in some way. Especially for applications in which descriptor caching is not quite feasible, buffer management is another lever for optimizing performance. As discussed at the beginning, each rendered object will typically need some uniform data along with it, that needs to be pushed to the GPU somehow. A straightforward approach is to store a VkBuffer per object and update that data for each frame. This already poses an interesting question: is one buffer enough? The problem is that this data will change dynamically and will be in use by the GPU while the frame is in flight. Since we do not want to flush the GPU pipeline between each frame, we will need to keep several copies of each buffer, one for each frame in flight. Another similar option is to use just one buffer per object, but with a size equal to num_frames * buffer_size, then offset it dynamically based on the frame index. A similar approach is used in the default configuration of the sample. For each frame, one buffer per object is created and filled with data. This means that we will have many descriptor sets to create, since every object will need one that points to its VkBuffer. Furthermore, we will have to update many buffers separately, meaning we cannot control their memory layout and we might lose some optimization opportunities with caching. We can address both problems by reverting the approach: instead of having a VkBuffer per object containing per-frame data, we will have a VkBuffer per frame containing per-object data. The buffer will be cleared at the beginning of the frame, then each object will record its data and will receive a dynamic offset to be used at vkCmdBindDescriptorSets() time. With this approach we will need less descriptor sets, as more objects can share the same one: they will all reference the same VkBuffer, but at different dynamic offsets. Furthermore, we can control the memory layout within the buffer. Using a single large VkBuffer in this case shows a performance improvement similar to descriptor set caching. For this relatively simple scene stacking the two approaches does not provide a further performance boost, but for a more complex case they do stack nicely: Descriptor caching is necessary when the number of descriptors sets is not just due to VkBuffers with uniform data, for example if the scene uses a large amount of materials/textures. Buffer management will help reduce the overall number of descriptor sets, thus cache pressure will be reduced and the cache itself will be smaller. The \"DescriptorSet cache\" section from Bringing Fortnite to Mobile with Vulkan and OpenGL ES - GDC 2019 \"Writing an efficient Vulkan renderer\" by Arseny Kapoulkine (from \"GPU Zen 2: Advanced Rendering Techniques\") Do Update already allocated but no longer referenced descriptor sets, instead of resetting descriptor pools and reallocating new descriptor sets. Prefer reusing already allocated descriptor sets, and not updating them with same information every time. Consider caching your descriptor sets when feasible. Consider using a single (or few) VkBuffer per frame with dynamic offsets. Don’t Allocate descriptor sets from descriptor pools on performance critical code paths. Allocate, free or update descriptor sets every frame, unless it is necessary. Set VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT if you do not need to free individual descriptor sets. Impact Increased CPU load for draw calls. Setting VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT may prevent the implementation from using a simpler (and faster) allocator. Debugging The time spent in vkUpdateDescriptorSets() can be checked with a CPU profiler. In the worst cases it may be comparable or higher than the time spent performing the actual draw calls. Monitor if there is contention on vkAllocateDescriptorSets(), which will probably be a performance problem if it occurs.","title":"Descriptor and buffer management","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/descriptor_management/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"The problem","hash":"_the_problem","id":2},{"text":"Caching descriptor sets","hash":"_caching_descriptor_sets","id":3},{"text":"Buffer management","hash":"_buffer_management","id":4},{"text":"Further resources","hash":"_further_resources","id":5},{"text":"Best practice summary","hash":"_best_practice_summary","id":6}]},"97":{"id":97,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the performance sample Pipeline Cache that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. Vulkan gives applications the ability to save internal representation of a pipeline (graphics or compute) to enable recreating the same pipeline later. This sample will look in detail at the implementation and performance implications of the pipeline creation, caching and management. To create a graphics pipeline in Vulkan, using Vulkan-Hpp, the following objects are required: vk::ShaderModule (Vertex and Fragment stages) vk::RenderPass Subpass Index vk::PipelineLayout Push Constants Descriptor Set Layouts Pipeline States Vertex Input Input Assembly Rasterizer Depth Stencil Color Blend Alternatively for a compute pipeline in Vulkan, using Vulkan-Hpp, you need: vk::ShaderModule (Compute stage) vk::PipelineLayout Push Constants Descriptor Set Layouts Creating a Vulkan pipeline requires compiling vk::ShaderModule internally. This will have a significant increase in frame time if performed at runtime. To reduce this time, you can provide a previously initialised vk::PipelineCache object when calling the vk::Device::createGraphicsPipeline[s] or vk::Device::createComputePipeline[s] functions. This object behaves like a cache container which stores the pipeline internal representation for reuse. In order to benefit from using a vk::PipelineCache object, the data recorded during pipeline creation needs to be saved to disk and reused between application runs. Vulkan allows an application to obtain the binary data of a vk::PipelineCache object and save it to a file on disk before terminating the application. This operation can be achieved using two calls to the vk::Device::getPipelineCacheData function to obtain the size and vk::PipelineCache object’s binary data. In the next application run, the vk::PipelineCache can be initialised with the previous run’s data. This will allow the vkDevice::createGraphicsPipeline[s] or vkDevice::createComputePipeline[s] functions to reuse the baked state and avoid repeating costly operations such as shader compilation. A graphics pipeline needs information from the render pass, render state, mesh data and shaders. This makes it harder for a game engine to prepare the Vulkan pipeline upfront because rendering is controlled by game logic. Vulkan tutorials typically show pipelines being built upfront because their state is known. This can also be achieved in a game engine by recording the pipelines created during a game run and then using the information to warmup the internal resource cache in subsequent runs of the game. In order for this system to work, resource management must be done to track the state of all the Vulkan objects required for pipeline creation and cache them for later reuse. This process is usually done by hashing the input data (CreateInfo structure members) used to create the Vulkan objects. This enables a future similar request to return immediately with the cached object. The mapping between input data and the Vulkan object can also alternatively be done by creating the hash using the bitfield hash of the structure members. While the application is loading, the Vulkan resources can be prepared so that the rendering for the first frames will have minimal CPU impact as all the data necessary has been pre-computed. For example, when the level changes or the game exits, the recorded Vulkan objects can be serialised and written to a file on disk. In the next run the file can be read and deserialised to warmup the internal resource cache. The hpp_pipeline_cache sample demonstrates this behaviour, by allowing you to enable or disable the use of pipeline cache objects. Destroying the existing pipelines will trigger re-caching, which is a process that will slow down the application. In this case there are only 2 pipelines, and the effect is noticeable, therefore we can expect it to have a much greater impact in a real game. On the first run of the sample on a device, the first frames will have a slightly bigger execution time because the pipelines are created for the first time - this is expected behaviour. In the next runs of the sample, the vk::PipelineCache is created with the data saved from the previous run and the internal resource cache. Below is a screenshot of the sample on a phone with Mali G76 GPU: Pipeline cache is enabled and Sponza is rendered at 60 FPS when the existing pipelines are destroyed. Pipeline re-creation takes 24.4 ms thanks to the pipeline cache. If we disable the pipeline cache, re-creating the pipelines takes 50.4 ms, more than double the previous time. Building pipelines dynamically without a pipeline cache can result in a sudden framerate drop. Do Create known pipelines early in the application execution (use data between application runs). Use pipeline cache to reduce pipeline creation cost. Don’t Create pipelines at draw time without a pipeline cache (introduces performance stutters). Impact Increased frame time execution if a pipeline baked state is not reused. The driver then needs to rebuild the pipeline which includes shader compilation, an expensive operation. Debugging A frame capture would show if there are any calls to vk::Device::createGraphicsPipeline[s] or vk::Device::createComputePipeline[s] with an empty vk::PipelineCache object. Due to how RenderDoc captures and replays a frame, the field for vk::PipelineCache is always empty in the report for the 'create pipeline' functions.","title":"Pipeline Management with Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/hpp_pipeline_cache/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Vulkan Pipeline","hash":"_vulkan_pipeline","id":2},{"text":"Vulkan Pipeline Cache","hash":"_vulkan_pipeline_cache","id":3},{"text":"Resource Cache Warmup","hash":"_resource_cache_warmup","id":4},{"text":"The sample","hash":"_the_sample","id":5},{"text":"Best practices summary","hash":"_best_practices_summary","id":6}]},"98":{"id":98,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. A transcoded version of the performance sample Swapchain Images that illustrates the usage of the C++ bindings of vulkan provided by vulkan.hpp. This is the readme as written in Swapchain Images, with code transcoded to functions and classes from vulkan.hpp. Vulkan gives the application some significant control over the number of swapchain images to be created. This sample analyzes the available options and their performance implications. The control over the number of swapchain images is shared between the application and the platform. The application can ask for a minimum number of images by setting the minImageCount parameter in vk::Device::createSwapchainKHR. The exact number of images created can then be polled via vk::Device::getSwapchainImagesKHR. In order to properly set the minImageCount parameter, the application should get the surface capabilities of the physical device via vk::PhysicalDevice::getSurfaceCapabilitiesKHR. The vk::SurfaceCapabilitiesKHR structure has the minImageCount and maxImageCount parameters, which set the boundaries for the image count that can be safely requested. As a rule of thumb on mobile, pSurfaceCapabilities->minImageCount is usually 2, while pSurfaceCapabilities->maxImageCount is large enough to not pose any problem with common applications (though it is still good practice to check its value). The most common values that an application may ask for are: 2 for double buffering 3 for triple buffering The swapchain will then create a number of images based on both minImageCount and the requested present mode. We will discuss present modes in the next section. The available present modes can be queried via vk::PhysicalDevice::getSurfacePresentModesKHR. There are several presentation modes in Vulkan, but mobile GPUs do not support the ones in which the image is directly presented to the screen (immediate mode). The only ones which satisfy Android’s VSync requirement are vk::PresentModeKHR::eFifo and vk::PresentModeKHR::eMailbox. In vk::PresentModeKHR::eFifo mode the presentation requests are stored in a queue. If the queue is full the application will have to wait until an image is ready to be acquired again. This is a normal operating mode for mobile, which automatically locks the framerate to 60 FPS. In vk::PresentModeKHR::eMailbox mode a single presentation request is stored by the presentation engine. In case of a new request the previous image will be replaced and will be available for acquisition once again. As a rule of thumb, if we ask for vk::PresentModeKHR::eMailbox we may get more images than minImageCount, typically 4. The application can keep submitting new frames for presentation, without stalling. This is useful in some cases, e.g. for reducing input latency, but it is not optimal for mobile because it keeps the CPU and GPU active while not strictly necessary. Unless the application really needs vk::PresentModeKHR::eMailbox, it is better to go for vk::PresentModeKHR::eFifo to reduce CPU and GPU load. In vk::PresentModeKHR::eFifo mode the number of swapchain images created typically corresponds to minImageCount. We will now discuss how many images the application should ask for, which is a critical point performance-wise. Android has a VSync signal running at 60 FPS (i.e. every 16 ms), which is the only chance for an image to be presented. Double buffering works well if frames can be processed within 16 ms, so at each VSync signal the processed image is presented on screen and the previously presented one becomes available to the application again. This behavior is demonstrated in the figure below: This behavior breaks when frames take more than 16 ms to be processed. Let us suppose that a frame is ready after 20 ms. The following figure illustrates what happens in this case: The orange dashed line highlights a point in which the whole system is idle. FB1 was not yet ready for presentation for the previous VSync signal, so the presentation engine keeps presenting FB0, which in turn cannot be used to start processing the next frame. This idling behavior caps framerate at 30 fps, while the application could achieve ~50 fps. With triple buffering there will always be an image already processed and ready for presentation, so the GPU can start processing a new image without stalling. The hpp_swapchain_images Vulkan sample highlights this behavior, by allowing to switch between double buffering and triple buffering. This is a screenshot of the sample on a phone with a Mali G72 GPU: Triple buffering is enabled and Sponza is comfortably rendered at 60 FPS. When we switch to double buffering the framerate drops to 30 FPS: In this case the actual CPU and GPU frame time is close to 16 ms, so it is possible that the framerate remains at 60 FPS for a few seconds even after switching to double buffering. Thermal effects or other running processes may cause a small increase in frame time, resulting in the app missing VSync. As previously discussed, with double buffering a missed VSync causes a sudden drop in framerate. In order for an application to achieve its potential framerate without being VSync-bound, triple buffering is the preferred option. We can confirm this behavior using Streamline Performance Analyzer. The first part of the trace until the marker is with triple buffering. As we can see the CPU and GPU show a good utilization, with not much idling between frames. After the marker we switch to double buffering and we confirm what we predicted earlier: there are longer periods of time in which both the CPU and GPU are idle because the presentation system needs to wait for VSync before providing a new image. Do Ensure that the value of minImageCount is within the valid range from vk::PhysicalDevice::getSurfaceCapabilitiesKHR (between minImageCount and maxImageCount). Use vk::PresentModeKHR::eFifo to avoid unnecessary CPU and GPU load. Use triple buffering to maximize performance. Don’t Use vk::PresentModeKHR::eMailbox unless you specifically need that behavior, e.g. for lower input latency. Use double buffering, unless you are happy with the drop in framerate. If you want to cap framerate to 30 FPS to save power, this can be achieved on the CPU side while still using triple buffering. Impact Double buffering will limit framerate if VSync is missed, as the system will need to stall until the next VSync signal. Debugging It is possible to check how many images are created via vk::Device::getSwapchainImagesKHR. If only 2 images are being created, minImageCount should be increased to 3, if the physical device allows for it (it normally does).","title":"Choosing the right number of swapchain images Vulkan-Hpp","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/hpp_swapchain_images/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Choosing a number of images","hash":"_choosing_a_number_of_images","id":2},{"text":"Choosing a present mode","hash":"_choosing_a_present_mode","id":3},{"text":"Double buffering or triple buffering?","hash":"_double_buffering_or_triple_buffering","id":4},{"text":"The sample","hash":"_the_sample","id":5},{"text":"Best practice summary","hash":"_best_practice_summary","id":6}]},"99":{"id":99,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample shows how a Vulkan application can control the compression of VkImage elements, in particular a framebuffer attachment and the swapchain. This requires enabling and using the extensions VK_EXT_image_compression_control and VK_EXT_image_compression_control_swapchain, respectively. Applications that use compression generally perform better thanks to the reduced memory footprint and bandwidth. In this sample, the use-case is a simple post-processing effect (chromatic aberration) applied to the output color of the forward-rendering pass. Since the color output needs to be saved to main memory and read again by the post-processing pass, this an opportunity to improve performance by using image compression. The sample allows toggling between: \"Default\": lossless compression (e.g. AFBC). \"Fixed-rate\": visually lossless compression (e.g. AFRC). A low/high level of compression can be specified in this case. \"None\": disable all compression, which is usually not recommended except for debugging purposes. The compression settings will be applied to both the color attachment and the swapchain, if the extensions are supported. The on-screen hardware counters show the impact each option has on bandwidth and on the memory footprint. Sponza scene with default (lossless) compression This is lossless compression that devices can enable transparently to save performance where possible. Vulkan applications do not need to explicitly enable this sort of compression. Devices with Arm GPUs implement Arm Frame Buffer Compression (AFBC), which uses variable bitrate encoding: the image is compressed in blocks (e.g. 4x4 pixels) and, depending on their composition, a different bitrate will be used. This means that the bandwidth savings depend on the image being compressed, and the compression ratio applied to each block. On average, high compression ratios are often obtained, as shown in the AFBC sample. On the other hand, a compression scheme may use a constant bitrate for all blocks, and in this case the compression is defined as fixed-rate. This means that in some cases a block will lose some information, and thus the compression is lossy. Therefore the device cannot enable it automatically, and the developer must opt-in using the Vulkan image compression control extensions. Recent devices with Arm GPUs support Arm Fixed Rate Compression (AFRC), which achieve high quality results even with the highest compression ratios. For instance, see below for images saved from a Pixel 8 device: Default compression 2BPC Fixed-rate compression Pixel difference Space Module scene compression comparison Since the difference is not noticeable with the naked eye, this is sometimes referred to as \"visually lossless\" compression. Software like imagemagick allows to compare the images and obtain a PSNR quality estimation, in this case with the high value of 49.8dB: $ magick compare -metric PSNR default.png fixed_rate_2BPC.png compare.png 49.8487 (0.498487) There are some performance benefits associated with fixed-rate compression, as described below. Images compressed with a fixed-rate will always consume less memory. In this case, an image compressed with a 2BPC bitrate results in a 65% reduction compared to uncompressed. In this case, the slightly larger size of images compressed with AFBC is expected, as variable bitrates require enough space for the worse case (uncompressed) as well as some extra storage for compression-related metadata. The sample allows to observe an estimate of bytes being written out to main memory. On this device the write bandwidth difference between uncompressed and fixed-rate compression is approximately 38%: Bandwidth savings coming from image compression depend on the pixels being compressed. Moving the camera and showing different distribution of colors in the frame changes the results. Be sure to profile your application and verify which compression scheme is optimal in each case. For instance, images with a high proportion of solid color (e.g. normals or material properties) may be more optimally compressed with variable bitrates than with fixed-rate. This is the case for the Space Module scene shown above. This sample enables the VK_EXT_image_compression_control extension and requests the relevant device feature, imageCompressionControl This extension abstracts how applications choose a fixed compression rate, in terms of \"minimum number of bits per component (BPC)\". To query if a particular image supports fixed-rate compression, add a VkImageCompressionPropertiesEXT to the pNext chain of VkImageFormatProperties2, and call vkGetPhysicalDeviceImageFormatProperties2KHR: VkImageCompressionPropertiesEXT supported_compression_properties{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT}; VkImageCompressionControlEXT compression_control{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT}; compression_control.flags = VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT; VkPhysicalDeviceImageFormatInfo2 image_format_info{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2}; image_format_info.format = VK_FORMAT_R8G8B8_UNORM; image_format_info.type = VK_IMAGE_TYPE_2D; image_format_info.tiling = VK_IMAGE_TILING_OPTIMAL; image_format_info.usage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_SAMPLED_BIT; image_format_info.pNext = &compression_control; VkImageFormatProperties2 image_format_properties{VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2}; image_format_properties.pNext = &supported_compression_properties; vkGetPhysicalDeviceImageFormatProperties2KHR(device.get_gpu().get_handle(), &image_format_info, &image_format_properties); In the Vulkan Samples framework, this happens in the vkb::query_supported_fixed_rate_compression function. Then inspect the values written to the imageCompressionFixedRateFlags component of VkImageCompressionPropertiesEXT. If fixed-rate compression is supported, the flags will indicate which levels may be selected for this image, for instance VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT or VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT. The sample will use the minimum BPC available for its high compression setting, and the maximum BPC available for its low compression setting. Fixed-rate options To request fixed-rate compression, provide a VkImageCompressionControlEXT to the pNext chain of VkImageCreateInfo: VkImageCompressionFixedRateFlagsEXT fixed_rate_flags_array[1] = {VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT}; VkImageCompressionControlEXT compression_control{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT}; compression_control.flags = VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT; compression_control.compressionControlPlaneCount = 1; compression_control.pFixedRateFlags = &fixed_rate_flags_array[0]; VkImageCreateInfo image_info{VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO}; image_info.format = VK_FORMAT_R8G8B8_UNORM; image_info.imageType = VK_IMAGE_TYPE_2D; image_info.tiling = VK_IMAGE_TILING_OPTIMAL; image_info.usage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_SAMPLED_BIT; image_info.pNext = &compression_control; vkCreateImage(device, &image_info, nullptr, &new_image); Note that, instead of using VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT, one may use VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT, and in that case it would not be necessary to provide a specific set of pFixedRateFlags. In the Vulkan Samples framework, this happens in the core::Image constructor. To query which compression was applied, if any, once a VkImage has been created, add a VkImageCompressionPropertiesEXT to the pNext chain of VkImageSubresource2EXT, and call vkGetImageSubresourceLayout2EXT: VkImageCompressionPropertiesEXT compression_properties{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT}; VkSubresourceLayout2EXT subresource_layout{VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR}; subresource_layout.pNext = &compression_properties; VkImageSubresource2EXT image_subresource{VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR}; image_subresource.imageSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT; image_subresource.imageSubresource.mipLevel = 0; image_subresource.imageSubresource.arrayLayer = 0; vkGetImageSubresourceLayout2EXT(device, image, &image_subresource, &subresource_layout); Then inspect the values written to the imageCompressionFlags and imageCompressionFixedRateFlags components of VkImageCompressionPropertiesEXT. In the Vulkan Samples framework, this happens in the core::Image::query_applied_compression function. Compression control for swapchain images is similar, but it requires the VK_EXT_image_compression_control_swapchain extension and the imageCompressionControlSwapchain device feature to be enabled. These depend on the VK_EXT_image_compression_control being available and enabled too. To query if the surface supports fixed-rate compression, add a VkImageCompressionPropertiesEXT to the pNext chain of VkImageFormatProperties2, and call vkGetPhysicalDeviceImageFormatProperties2KHR: VkPhysicalDeviceSurfaceInfo2KHR surface_info{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR}; surface_info.surface = surface; uint32_t surface_format_count{0U}; vkGetPhysicalDeviceSurfaceFormats2KHR(device, &surface_info, &surface_format_count, nullptr); std::vector surface_formats; surface_formats.resize(surface_format_count, {VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR}); std::vector compression_properties; compression_properties.resize(surface_format_count, {VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT}); for (uint32_t i = 0; i < surface_format_count; i++) { surface_formats[i].pNext = &compression_properties[i]; } vkGetPhysicalDeviceSurfaceFormats2KHR(device, &surface_info, &surface_format_count, surface_formats.data()); Then inspect the values written to the imageCompressionFixedRateFlags component of VkImageCompressionPropertiesEXT, associated to a particular VkSurfaceFormat2KHR. In the Vulkan Samples framework, this happens in the Swapchain::query_supported_fixed_rate_compression function. To request fixed-rate compression, provide a VkImageCompressionControlEXT to the pNext chain of VkSwapchainCreateInfoKHR: VkImageCompressionFixedRateFlagsEXT fixed_rate_flags_array[1] = {VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT}; VkImageCompressionControlEXT compression_control{VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT}; compression_control.flags = VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT; compression_control.compressionControlPlaneCount = 1; compression_control.pFixedRateFlags = &fixed_rate_flags_array[0]; VkSwapchainCreateInfoKHR create_info{VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR}; create_info.surface = surface; create_info.pNext = &compression_control; vkCreateSwapchainKHR(device, &create_info, nullptr, &new_swapchain); Similarly to regular images, VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT may be used instead. In the Vulkan Samples framework, this happens in the Swapchain constructor. To verify that compression was applied to the swapchain images, use the same method as described for a regular VkImage in Verify image compression. No need to enable VK_EXT_image_compression_control_swapchain for this. In the Vulkan Samples framework, this happens in the Swapchain::get_applied_compression function. Note that even if the surface supports fixed-rate compression and the extensions are enabled, the surface might not be compressed. The most likely reason is that, even though the GPU supports it, other IP components in the system (e.g. the Display) do not support it, and therefore images are not compressed. As explained above, the flags in VkImageCompressionControlEXT control the compression scheme selection for images. Take care not to accidentally disable Default compression when disabling Fixed-rate compression. That is, ensure that VK_IMAGE_COMPRESSION_DEFAULT_EXT is used by default, rather than VK_IMAGE_COMPRESSION_DISABLED_EXT, which disables all compression, negatively impacting performance. VK_EXT_image_compression_control allows applications to check if default compression is enabled. It also provides the mechanism to request lossy (fixed-rate) compression where appropriate (VK_EXT_image_compression_control_swapchain is required for swapchain images). Fixed-rate compression guarantees the most efficient memory footprint and can result in substantially reduced memory bandwidth, without sacrificing image quality. Bandwidth reductions can in turn result in performance improvements and power savings.","title":"Image Compression Control","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/image_compression_control/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Default compression","hash":"default_compression","id":2},{"text":"Fixed-rate compression","hash":"fixed_rate_compression","id":3},{"text":"Memory footprint savings","hash":"_memory_footprint_savings","id":4},{"text":"Bandwidth savings","hash":"_bandwidth_savings","id":5},{"text":"VK_EXT_image_compression_control","hash":"_vk_ext_image_compression_control","id":6},{"text":"Query for image compression support","hash":"_query_for_image_compression_support","id":7},{"text":"Request image compression","hash":"_request_image_compression","id":8},{"text":"Verify image compression","hash":"verify_image_compression","id":9},{"text":"VK_EXT_image_compression_control_swapchain","hash":"_vk_ext_image_compression_control_swapchain","id":10},{"text":"Query for surface compression support","hash":"_query_for_surface_compression_support","id":11},{"text":"Request surface compression","hash":"_request_surface_compression","id":12},{"text":"Verify surface compression","hash":"_verify_surface_compression","id":13},{"text":"Disabling fixed-rate compression","hash":"_disabling_fixed_rate_compression","id":14},{"text":"Conclusion","hash":"_conclusion","id":15}]},"100":{"id":100,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan requires the application to manage image layouts, so that all render pass attachments are in the correct layout when the render pass begins. This is usually done using pipeline barriers or the initialLayout and finalLayout parameters of the render pass. If the rendering pipeline is complex, transitioning each image to its correct layout is not trivial, as it requires some sort of state tracking. If previous image contents are not needed, there is an easy way out, that is setting oldLayout/initialLayout to VK_IMAGE_LAYOUT_UNDEFINED. While this is functionally correct, it can have performance implications as it may prevent the GPU from performing some optimizations. This tutorial will cover an example of such optimizations and how to avoid the performance overhead from using sub-optimal layouts. Mali GPUs employ something called transaction elimination, which is a technology used to avoid frame buffer write bandwidth for static regions of the framebuffer. This is especially beneficial for games that contain many static opaque overlays. Transaction elimination is used for an image under the following conditions: The sample count is 1. The mipmap level is 1. The image uses COLOR_ATTACHMENT_BIT. The image does not use TRANSIENT_ATTACHMENT_BIT. A single color attachment is being used. Does not apply to the Mali G51 GPU, or later. The effective tile size is 16x16 pixels. Pixel data storage determines the effective tile size. The driver keeps a signature buffer for the image to check for redundant frame buffer writes. The signature buffer must always be in sync with the actual contents of the image, which is the case when an image is only used within the tile write path. In practice, this corresponds to only using layouts that are either read-only or can only be written to by fragment shading. These \"safe\" layouts are: COLOR_ATTACHMENT_OPTIMAL SHADER_READ_ONLY_OPTIMAL TRANSFER_SRC_OPTIMAL PRESENT_SRC_KHR All other layouts, including UNDEFINED layout, are considered \"unsafe\" as they allow writes to an image outside the tile write path. When an image is transitioned via an \"unsafe\" layout, the signature buffer must be invalidated to prevent the signature and the data from becoming desynchronized. Note that the swapchain image is a slightly special case, as it is considered \"safe\" even when transitioned from UNDEFINED. In addition signature invalidation could happen as part of a VkImageMemoryBarrier, vkCmdPipelineBarrier(), vkCmdWaitEvents(), or as part of a VkRenderPass if the color attachment reference layout is different from the final layout. The vkCmdBlitImage() framebuffer transfer stage operation will also always invalidate the signature buffer, so shader-based blits will likely be more efficient. The sample sets up deferred rendering using two render passes, to show the effect of transitioning G-buffer images from UNDEFINED rather than their last known layout. Note that a deferred rendering implementation using subpasses might be more efficient overall; see the subpasses tutorial for more detail. The base case is with all color images being transitioned from UNDEFINED, as shown in the image below. When we switch to using the last known layout as oldLayout in the pipeline barriers, transaction elimination can take place. This is highlighted in the counters showing about double the amount of tiles killed by CRC match, along with ~10% reduction in write bandwidth. A reduction in memory bandwidth will reduce the power consumption of the device, resulting in less overheating and longer battery life. Additionally, this may improve performance on games that are bandwidth limited. Do Use COLOR_ATTACHMENT_OPTIMAL image layout for color attachments. Keep an image in a \"safe\" image layout to avoid unnecessary signature invalidation, including avoiding unnecessary transitions via UNDEFINED. Use storeOp = DONT_CARE rather than UNDEFINED layouts to skip unneeded render target writes. Don’t Transition color attachments from \"safe\" to \"unsafe\" unless required by the algorithm. Use vkCmdBlitImage() to copy constant data between two images; shader-based blits are likely to be more efficient as they will preserve the signature integrity. Impact Loss of transaction elimination will increase external memory bandwidth for scenes with static regions across frames. This may reduce performance on systems which are memory bandwidth limited, as well as cause a general increase in power consumption. Debugging The GPU performance counters can count the number of tile writes killed by transaction elimination, so you can determine if it is being triggered at all.","title":"Layout transitions","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/layout_transitions/README.html","titles":[{"text":"Transaction elimination on Mali GPUs","hash":"_transaction_elimination_on_mali_gpus","id":1},{"text":"The sample","hash":"_the_sample","id":2},{"text":"Best practice summary","hash":"_best_practice_summary","id":3}]},"101":{"id":101,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Aliasing is the result of under-sampling a signal. In graphics this means computing the color of a pixel at a resolution that results in artifacts, commonly jaggies at model edges. Multisample anti-aliasing (MSAA) is an efficient technique that reduces pixel sampling error. In the figure below, the frame on the left was rendered with no anti-aliasing, whereas the same scene on the right uses 4X MSAA. When computing the color of a pixel, the GPU will evaluate the color of a given primitive if it covers the centre coordinate of the pixel (and passes the depth test). As shown in the figure below, with no anti-aliasing the fragment shader is evaluated for those pixels that pass this test, and they are shaded accordingly. Depending on the pixel density, this single-sampled procedure may result in aliasing. With multisample anti-aliasing, more than one location is tested within a pixel. In the figure below there are four samples, so it is denoted 4X MSAA. This effectively increases the resolution of each pixel, by storing a color value for each sample. The fragment shader is still evaluated only once (using the centre coordinate) and the color result is stored as the value of those samples that lie within the primitive (and pass the depth test, which means the depth buffer also needs to be larger to accommodate multiple values per pixel). In other words, the fragment shader value will be blended to all samples with coverage. The final value for the pixel is calculated as the average of all samples. This is known as the resolving step. This results in different shades of primitive color at the edges, which reduces the aliasing effect. In the figure above the samples within the pixel are positioned in a rotated grid. Sampling coordinates are defined by the spec. Irregular patterns achieve better results in horizontal and vertical edges. Note that MSAA has no effect for pixels within the primitive, where all samples store the same color value. MSAA is different from (and more efficient than) super-sampling anti-aliasing (SSAA) where the fragment shader is evaluated for each sample. This would help reduce aliasing within primitives, but usually mip-maps mitigate this already. To enable MSAA, first query vkPhysicalDeviceLimits to select a supported level of MSAA e.g. VK_SAMPLE_COUNT_4_BIT, and use this when creating the multisampled attachment, as well as when setting the rasterizationSamples member of pMultisampleState in the graphics pipeline. As stated earlier for MSAA we do not want to set sample shading as this will enable the more expensive SSAA. 4x MSAA can be particularly efficient in tiler architectures, where the multi-sampled attachment is resolved in tile memory and can therefore be transient. This is typically the case of the depth buffer as shown below: It is important to avoid writing multisampled attachments back to main memory if they are not going to be needed after rendering the scene. This means that the multisampled attachment must use storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE and usage |= VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, and allocate the image with the LAZILY_ALLOCATED memory property, as explained in the Render Passes tutorial. // Multisampled attachment is transient // This allows tilers to completely avoid writing out the multisampled attachment to memory, // a considerable performance and bandwidth improvement load_store[i_color_ms].store_op = VK_ATTACHMENT_STORE_OP_DONT_CARE; To resolve color on write-back as shown below, configure the subpass so that pResolveAttachments points to the single-sampled attachment that we want the multisampled color to be resolved to, in this case the swapchain image. // Good practice // Enable write-back resolve to single-sampled attachment subpass->set_color_resolve_attachments({i_swapchain}); With 4X MSAA enabled, we are rendering to a larger color attachment storing 4 color values for each pixel. If this attachment remains in tile memory, the impact on performance remains minimal (3% bandwidth increase shown in the screenshots above) while the aliasing is considerably reduced at the edges. As mentioned earlier this is due to the fact that the hardware can resolve (average the samples of) the multisampled attachment as the image is written back to main memory. Vulkan offers an alternative way to explicitly define a separate resolve pass for the color attachment, using vkCmdResolveImage: // Bad practice // Resolve multisampled attachment to destination, extremely expensive vkCmdResolveImage(cmd_buf.get_handle(), multisampled_img.get_handle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, swapchain_img.get_handle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, to_u32(regions.size()), regions.data()); However this path requires storing the multisampled attachment (which in this case is 4 times larger than the framebuffer) at the end of the subpass and then read it back to the GPU in order to resolve it: This consumes much more bandwidth and is therefore not recommended if the same result can be achieved by using pResolveAttachments to resolve color on write-back. To illustrate this the sample allows to toggle between resolving on write-back as opposed to in a separate pass, and to monitor the impact on bandwidth as a result. On a high-end smartphone with a Mali-G76 as shown in the screenshots above, the difference in bandwidth could be explained as follows. The sample is rendering 2168 x 1080 pixels which require 32 bits each (RGBA8, 4 bytes) at 60 FPS: 1X attachment: 2168 * 1080 * 4 * 60 = 562 bytes/s This is multiplied by 4 if when we need to store 4 sample values per pixel: 4X attachment: 2168 * 1080 * 4 * 4 * 60 = 2247 bytes/s Comparing the counter numbers shown in the screenshots above, both the read and write bandwidth increase by roughly the size of a 4X attachment, since the multisampled attachment needs to be written out at the end of the scene renderpass and then re-read to resolve the final color. This means that a separate resolve pass is resulting in 5 GB/s increase in bandwidth. Considering that in a mobile device such as this the external DDR bandwidth costs around 100 mW per GB/s, this overhead uses 500 mW (20%) out of an approximate 2.5 W device power budget, which is prohibitively expensive. These counters can also be recorded with a profiler such as Streamline, showing color resolve on write-back followed by separate resolve pass: In all of the cases shown above the depth buffer has remained transient, regardless of MSAA. This is because once the color is calculated and written out to the swapchain for presentation to the display, the depth can be discarded and therefore we recommend to configure load/store operations to avoid writing it out. There are cases where we might need to save the depth attachment. Consider a simple post-processing pass that samples both color and depth (bound as textures) in order to compute a screen-based effect such as SSAO: In this case the increase in bandwidth corresponds to that of writing out 2 full-screen attachments, as expected. With 4X MSAA the cost once again remains almost the same, as long as we remember to resolve both color and depth on write-back: To resolve depth on write-back, VK_KHR_depth_stencil_resolve (promoted in Vulkan 1.2) is required. To configure the subpass, we must use a VkSubpassDescription2 and make pNext to point to a VkSubpassDescriptionDepthStencilResolve structure. This structure defines the single-sampled attachment that will be used to resolve depth: // Good practice // Multisampled attachment is transient // This allows tilers to completely avoid writing out the multisampled attachment to memory, // a considerable performance and bandwidth improvement load_store[i_depth].store_op = VK_ATTACHMENT_STORE_OP_DONT_CARE; // Enable write-back resolve to single-sampled attachment subpass->set_depth_stencil_resolve_attachment(i_depth_resolve); subpass->set_depth_stencil_resolve_mode(depth_resolve_mode); Here we may also select how to resolve depth, by setting depthResolveMode to one of the supported options (the sample queries the device for supported modes and presents a drop-down selection list): typedef enum VkResolveModeFlagBits { VK_RESOLVE_MODE_NONE, VK_RESOLVE_MODE_SAMPLE_ZERO_BIT, VK_RESOLVE_MODE_AVERAGE_BIT, VK_RESOLVE_MODE_MIN_BIT, VK_RESOLVE_MODE_MAX_BIT } VkResolveModeFlagBits; In contrast to color, Vulkan does not offer an alternative way to resolve depth attachments (vkCmdResolveImage does not support depth). Therefore if VK_KHR_depth_stencil_resolve is not supported or properly configured, this pipeline will require an additional read-back of the multisampled depth attachment to carry out the post-processing effect: In the worst possible scenario shown above, where both multisampled depth and color are written out to main memory, the read bandwidth increases 2366 MiB/s (close to the bandwidth of a 4X attachment as calculated above) due to the color re-read required for separate resolve. The write bandwidth increases 3951 MiB/s, which roughly corresponds to the difference between a 4X (2247 MiB/s) and a 1X (562 MiB/s) depth attachment (in this case depth is also 32bpp) i.e. 1685 MiB/s, plus the bandwidth required to write out an additional 4X color attachment i.e. 2247 MiB/s. In total the read/write bandwidth increase is 6.3GB/s, a 302% increase with respect to the write-back resolve best practice and 630 mW of power (25% of budget) that could be saved to preserve battery life, achieve sustainable performance and an overall better user experience. For most uses of multisampling it is possible to keep all of the data for the additional samples in the tile memory inside of the GPU, and resolve the value to a single pixel color as part of tile write-back. This means that the additional bandwidth of those additional samples never hits external memory, which makes it exceptionally efficient. MSAA can be integrated fully with Vulkan render passes, allowing a multisampled resolve to be explicitly specified at the end of a subpass. Do Use 4x MSAA if possible; it’s not expensive and provides good image quality improvements. Use loadOp = LOAD_OP_CLEAR or loadOp = LOAD_OP_DONT_CARE for multisampled images. Use storeOp = STORE_OP_DONT_CARE for multisampled images. Use LAZILY_ALLOCATED memory to back the allocated multisampled images; they do not need to be persisted into main memory and therefore do not need physical backing storage. Use pResolveAttachments in a subpass to automatically resolve a multisampled color buffer into a single-sampled color buffer. Use VK_KHR_depth_stencil_resolve in a subpass to automatically resolve a multisampled depth buffer into a single-sampled depth buffer. Typically this is only useful if the depth buffer is going to be used further, in most cases it is transient and does not need to be resolved. Avoid Avoid using vkCmdResolveImage(); this has a significant negative impact on bandwidth and performance. Avoid using loadOp = LOAD_OP_LOAD for multisampled image attachments. Avoid using storeOp = STORE_OP_STORE for multisampled image attachments. Avoid using more than 4x MSAA without checking performance. Impact Failing to get an inline resolve can result in substantially higher memory bandwidth and reduced performance; manually writing and resolving a 4x MSAA 1080p surface at 60 FPS requires 3.9GB/s of memory bandwidth compared to just 500MB/s when using an inline resolve.","title":"MSAA (Multisample anti-aliasing)","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/msaa/README.html","titles":[{"text":"Color resolve","hash":"_color_resolve","id":1},{"text":"Depth resolve","hash":"_depth_resolve","id":2},{"text":"Best practice summary","hash":"_best_practice_summary","id":3}]},"102":{"id":102,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to reduce CPU usage by offloading draw call generation and frustum culling to the GPU. A common method of rendering large scenes is to iterate through each model and bind its resources such as vertex buffers, index buffers, and descriptors prior to each draw call. However, each bound resource has an overhead both in command buffer generation (e.g. calls to vkCmdBindVertexBuffer) and rendering (e.g. binding the resource). An alternative method is introduced by using GPU rendering and the use of the indirect call functions introduced in Vulkan 1.2. Whereas the draw parameters to the function vkCmdDrawIndexed are provided by the CPU, calls to the function vkCmdDrawIndexIndirect query commands from a GPU buffer. This has two significant advantages: Draw calls can be generated from the GPU (such as in a \"compute shader\"), and An array of draw calls can be called at once, reducing command buffer overhead The information for indirect commands is provided by the struct VkDrawIndexedIndirectCommand, which contains information about the vertices and indices to draw. Since the struct allows for offsets of both vertex and index buffers (through firstIndex and vertexOffset), multiple models from a scene can be placed into a single index buffer and vertex buffer and bound just once, wherein each portion of the index buffer is zero-indexed. This also means that a large index buffer of type uint16_t can be used even when the total number of vertices in the scene exceeds the upper limit of 2^16 for a single draw call. In this sample, the scene is composed of a 16x16 grid of sub-meshes. One vertex buffer and one index buffer contain all the geometry information in the scene, and the draw calls are placed into a device-local buffer containing an array of VkDrawIndexedIndirectCommand commands. Each command contains the vertex offset, index offset, and index count. To control whether a sub-mesh is drawn, the instance count is set to either 0 or 1. Alternatively, the draw command could be completely removed from the array. If = device supports multi-draw indirect (VkPhysicalDeviceFeatures2::bufferDeviceAddress), then the entire array of draw commands can be executed through a single call to VkDrawIndexedIndirectCommand. Otherwise, each draw call must be executed through a separate call to VkDrawIndexIndirectCommand: // m_enable_mci: supports multiDrawIndirect if (m_enable_mci && m_supports_mci) { vkCmdDrawIndexedIndirect(draw_cmd_buffers[i], indirect_call_buffer->get_handle(), 0, cpu_commands.size(), sizeof(cpu_commands[0])); } else { for (size_t j = 0; j get_handle(), j * sizeof(cpu_commands[0]), 1, sizeof(cpu_commands[0])); } } The sample provides three methods of generating draw calls: CPU-only, GPU, and GPU using buffer device address. In all three methods, the model vertex/index information is fixed, and only the number of instances is changed (to disable / enable drawing) by determining whether the bounding sphere of the model fits within the view (i.e. frustum culling). In the CPU method, frustum culling is performed through the structure VisibilityTester using the model/view matrix. An on-CPU array is modified each frame, and then pushed to the GPU through a staging buffer. In the GPU method, a \"compute shader\" is called. Each invocation of the \"compute shader\" corresponds to a VkDrawIndexedIndirectCommand struct, and the bounding sphere is queried from an SSBO (ModelInformationBuffer). To determine whether that model is drawn, the instance count is toggled between 0 and 1. The GPU is entirely responsible for generating the draw calls apart from the initial set up of the draw command buffer, which is performed by the GPU. The GPU method using buffer device address is similar to the standard GPU method, but with an additional feature: the starting address of the VkDrawIndexedIndirectCommand array is provided using buffer_reference. The advantage of this method is that each invocation of the culling compute shader can point to a different indirect command array without needing to change descriptor sets if the camera information and buffer address is provided through push constants. This allows culling of the next frame to occur prior to completion of rendering of the current frame with minimal overhead. One of the biggest advantages of GPU rendering and draw call generation is the elimination of binding calls. Rather than re-binding descriptor sets for textures or other resources with each model, an array can be used. In this sample, the textures of all sub-meshes are placed into an indexed array, and the ModelInformationBuffer is used to determine the correct index of the texture. This allows rendering of the entire scene without requiring different textures to be bound before each render call.","title":"GPU Rendering and Multi-Draw Indirect","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/multi_draw_indirect/README.html","titles":[{"text":"Draw Call Generation","hash":"_draw_call_generation","id":1},{"text":"CPU vs. GPU Call Generation","hash":"_cpu_vs_gpu_call_generation","id":2},{"text":"Texture / Resource Access","hash":"_texture_resource_access","id":3}]},"103":{"id":103,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Ideally you render all stages of your frame in a single render pass. However, in some cases different stages can’t be performed in the same render pass. This sample shows how multi-threading can help to boost performance when using multiple render passes to render a single frame. This sample uses two render passes to implement a technique called shadowmapping. The first render pass is used to render a shadowmap. It contains only depth values and represents the scene as viewed from the light position. The second pass renders the actual scene from the camera point of view and uses the shadowmap from the previous pass. When the light calculation is performed in the fragment shader, the depth value from the shadow map is used to determine whether the fragment is occluded from the light (and therefore is in shadow) or not. The diagram below shows this two step process: Note that there is a dependency because the second pass is using the output of the first. Since these are two separate render passes we cannot use a VkSubpassDependency for synchronization. Instead VkImageMemoryBarrier is used. If we have two or more render passes we can record them separately in different threads. Note that the more similar is the workload for all the passes, the more performance improvement you can get by splitting the work between multiple threads. In this sample the same scene is rendered once in each render pass but from different viewpoints and with different complexity of commands recording (shadow pass requires less descriptor and resources setup for each frame). That means the workloads are not fully equal, but it is still worth delegating part of the work to another thread, and the increase in performance is noticeable. One way to use multi-threading with multiple render passes is to create a separate primary level command buffer for each of them. In this case command buffers can be recorded independently and then submitted to the queue all at once using vkQueueSubmit. Another approach is to use secondary level command buffers. First, both of the passes are recorded into two separate secondary command buffers using two threads. Then, we can just reference them in the primary command buffer via vkCmdExecuteCommands. When using both of these methods for multi-threading, general recommendations should still be taken into account (see Multi-threaded-recording). This sample shows the difference between recording both render passes into a single command buffer in one thread and using the methods described above. Below are screenshots of the sample running on a phone with a Mali G72 GPU: Since the time of writing this tutorial, the CPU counter provider, HWCPipe, has been updated and it no longer provides CPU cycles. These may still be measured using external tools, as shown later. Using two threads gives a 10ms frame time improvement and CPU cycles show an increase in CPU utilization: With secondary command buffers you can see a further drop in frame time. A profiling tool, such as Android Profiler, can help to see how threads are utilized. Flame Chart shows how much time was spent for each function execution during a particular timeframe. In this particular example total contribution of command buffers recording in the main thread is 9.94 seconds within a 10 seconds capture with multi-threading disabled. Multithreading is disabled With multi-threading enabled it remains almost the same (9.92s), but in the second thread 5.7s was spent for shadow pass recording. Multithreading is enabled and the timeline shows how both threads are used That means, two threads perform the same amount of work in 10s as one thread in more than 15.7 seconds and we should expect approximately 1.57 times better performance. And indeed, in debug build, which was used for profiling, frame time is decreased from 531.1ms to 337.7ms using multi-threading (1.57 times decrease). Command buffer usage and multi-threaded recording Do Use multi-threading for command buffer recording if possible. Spread the workload between threads as equally, as possible, to utilize them in the most efficient way. Impact You can get a significant impact on frametime for a large scene with complex drawing commands recording. Debugging Measure CPU time or overall time for each frame and compare results of using single and multiple threads.","title":"Multi-threaded recording with multiple render passes","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/multithreading_render_passes/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Using multiple render passes","hash":"_using_multiple_render_passes","id":2},{"text":"The Multi-threading Render Passes Sample","hash":"_the_multi_threading_render_passes_sample","id":3},{"text":"Profiling","hash":"_profiling","id":4},{"text":"Further reading","hash":"_further_reading","id":5},{"text":"Best practice summary","hash":"_best_practice_summary","id":6}]},"104":{"id":104,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan gives the application significant control over memory access for resources. Pipeline barriers are particularly convenient for synchronizing memory accesses between render passes. Having barriers is required whenever there is a memory dependency - the application should not assume that render passes are executed in order. However, having too many or too strict barriers can affect the application’s performance. This sample will cover how to set up pipeline barriers efficiently, with a focus on pipeline stages. This section will give an overview of why pipeline stages are relevant, especially for tile-based GPUs. The traditional desktop GPU architecture would run the fragment shader on each primitive, in each draw call, in sequence. Each primitive is rendered to completion before starting the next one with an algorithm which approximates to: for each ( primitive ) for each ( fragment ) execute fragment shader This approach will require all fragments shaded to touch the working sets which include blending, depth testing and stencil operations. At high framebuffer resolutions the bandwidth can be exceptionally high, with multiple read-modify-write operations per fragment. Even if caching can mitigate this slightly, there is still a need for specialized high-frequency memory with a wide memory interface with lots of pins which are all particularly energy intensive. Tile-based GPUs are designed to minimize the amount of power hungry external memory accesses which are needed during rendering, using a two-pass rendering algorithm for each render target. They first process all the geometry, then execute all the per-fragment work. For tile-based architectures the algorithm equates to: for each ( tile ) for each ( primitive in tile ) for each ( fragment in primitive in tile ) execute fragment shader Mali GPUs break up the screen into small 16x16 pixel tiles which makes it possible to keep the entire working set in a fast RAM which is tightly coupled with the GPU shader core. Mali GPUs queue their work in a pair of internal slots, one for vertex/compute workloads and one for fragment workloads. The workloads from both slots can be processed by the GPU at the same time, so vertex processing and fragment processing for different frames or render passes can be run in parallel. In Vulkan a GPU command (e.g vkCmdDraw, vkCmdDrawIndirect, vkCmdDispatch, etc.) is executed in a pipeline consisting of multiple stages. The available pipeline stages are defined in the VkPipelineStage enumeration. For the synchronization of a shared resource accessed for writing by one command and then followed by another read command, Vulkan introduces the concept of pipeline barriers. Depending on the resource type (e.g. VkImage or VkBuffer) required by a read operation there are three different types of barriers - VkMemoryBarrier, VkBufferMemoryBarrier and VkImageMemoryBarrier. Adding a pipeline barrier when recording a command buffer defines an execution dependency between all commands recorded before and the ones recorded after the barrier. For example, if we set up deferred rendering with two render passes, we will write to the G-buffer images in the first render pass and then sample them in the second render pass. This will require a pipeline barrier to avoid hazards. The naive solution comes from using a very conservative barrier which blocks on all stages (e.g. ALL_GRAPHICS_BIT or ALL_COMMANDS_BIT). This will have a performance implication as it will force a pipeline flush between the two render passes. If the second render pass only needs to sample the G-buffer image during fragment shading, we can add a more relaxed barrier (COLOR_ATTACHMENT_OUTPUT_BIT → FRAGMENT_SHADER_BIT), which still ensures the correct dependencies. Such a barrier will let the GPU overlap fragment shading for the first render pass with vertex shading for the second render pass. The pipeline_barriers Vulkan sample allows to switch between conservative and relaxed pipeline barriers, letting you visualize the resulting GPU behavior. The app is fragment-bound, which allows the GPU to fully utilize pipelining. The sample sets up deferred rendering with two render passes and uses pipeline barriers to synchronize them. Note that a deferred rendering implementation using subpasses might be more efficient overall; see the subpasses tutorial for more detail. The base case is with the most conservative barrier (BOTTOM_OF_PIPE_BIT → TOP_OF_PIPE_BIT). As the graphs show, vertex and fragment work are serialized, as they never happen at the same time. A second case is with a slightly more relaxed barrier (COLOR_ATTACHMENT_OUTPUT_BIT → VERTEX_SHADER_BIT). This is most commonly used by developers as a \"default\" barrier, to ensure that the image is available by vertex shading in the next render pass, in case it is needed. While this is ok if the image is actually needed during vertex shading, there is a potential for optimization if the image is only needed for fragment shading, as discussed before. As shown in the graph, the work is still serialized and there is no performance improvement from the previous case. The third case is with the most efficient barrier for this case (COLOR_ATTACHMENT_OUTPUT_BIT → FRAGMENT_SHADER_BIT), further relaxed from the previous one. This time fragment shading keeps happening throughout, with vertex shading running in parallel to it. Pipeline bubbles have disappeared and frame time has improved by 13%. Do Keep your srcStageMask as early as possible in the pipeline. Keep your dstStageMask as late as possible in the pipeline. Review if your dependencies are pointing forwards (vertex/compute -> fragment) or backwards (fragment -> vertex/compute) through the pipeline, and minimize use of backwards-facing dependencies unless you can add sufficient latency between generation of a resource and its consumption to hide the scheduling bubble it introduces. Use srcStageMask = ALL_GRAPHICS_BIT and dstStageMask = FRAGMENT_SHADING_BIT when synchronizing render passes with each other. Minimize use of TRANSFER copy operations — zero copy algorithms are more efficient if possible — and always review their impact on the hardware pipelining. Only use intra-queue barriers when you need to, and put as much work as possible between barriers. Don’t Assume that render passes are synchronized by default. Needlessly starve the hardware for work; aim to overlap vertex/compute with fragment processing. Use the following srcStageMask → dstStageMask synchronization pairings because they will often cause a full drain of the pipeline: BOTTOM_OF_PIPE_BIT → TOP_OF_PIPE_BIT ALL_GRAPHICS_BIT → ALL_GRAPHICS_BIT ALL_COMMANDS_BIT → ALL_COMMANDS_BIT Use a VkEvent if you’re signaling and waiting for that event right away, use vkCmdPipelineBarrier() instead. Use a VkSemaphore for dependency management within a single queue. Impact Getting pipeline barriers wrong might either starve GPU of work (too much synchronization) or cause rendering corruption (too little synchronization). Getting this just right is a critical component of any Vulkan application. Note that the presence of two distinct hardware slots which are scheduled independently for different types of workload is one aspect where tile-based GPUs like Mali are very different to desktop immediate-mode renderers. Expect to have to tune your pipelining to work well on a tile-based GPU when porting content from a desktop GPU. Debugging Look through the rendering pipeline for any case of missing synchronization between passes. If on a Mali GPU, use Streamline Performance Analyzer to visualize the Arm CPU and GPU activity on both GPU hardware slots. You can quickly see if there are bubbles in scheduling either locally to the GPU hardware (indicative of a stage dependency issue) or globally across both CPU and GPU (indicative of a blocking CPU call being used).","title":"Using pipeline barriers efficiently","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/pipeline_barriers/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Tile-based rendering","hash":"_tile_based_rendering","id":2},{"text":"Choosing pipeline stages","hash":"_choosing_pipeline_stages","id":3},{"text":"The sample","hash":"_the_sample","id":4},{"text":"Best practice summary","hash":"_best_practice_summary","id":5}]},"105":{"id":105,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan gives applications the ability to save internal representation of a pipeline (graphics or compute) to enable recreating the same pipeline later. This sample will look in detail at the implementation and performance implications of the pipeline creation, caching and management. To create a graphics pipeline in Vulkan, the following objects are required: VkShaderModule (Vertex and Fragment stages) VkRenderPass Subpass Index VkPipelineLayout Push Constants Descriptor Set Layouts Pipeline States Vertex Input Input Assembly Rasterizer Depth Stencil Color Blend Alternatively for a compute pipeline in Vulkan, you need: VkShaderModule (Compute stage) VkPipelineLayout Push Constants Descriptor Set Layouts Creating a Vulkan pipeline requires compiling VkShaderModule internally. This will have a significant increase in frame time if performed at runtime. To reduce this time, you can provide a previously initialised VkPipelineCache object when calling the vkCreateGraphicsPipelines or vkCreateComputePipelines functions. This object behaves like a cache container which stores the pipeline internal representation for reuse. In order to benefit from using a VkPipelineCache object, the data recorded during pipeline creation needs to be saved to disk and reused between application runs. Vulkan allows an application to obtain the binary data of a VkPipelineCache object and save it to a file on disk before terminating the application. This operation can be achieved using two calls to the vkGetPipelineCacheData function to obtain the size and VkPipelineCache object’s binary data. In the next application run, the VkPipelineCache can be initialised with the previous run’s data. This will allow the vkCreateGraphicsPipelines or vkCreateComputePipelines functions to reuse the baked state and avoid repeating costly operations such as shader compilation. A graphics pipeline needs information from the render pass, render state, mesh data and shaders. This makes it harder for a game engine to prepare the Vulkan pipeline upfront because rendering is controlled by game logic. Vulkan tutorials typically show pipelines being built upfront because their state is known. This can also be achieved in a game engine by recording the pipelines created during a game run and then using the information to warmup the internal resource cache in subsequent runs of the game. In order for this system to work, resource management must be done to track the state of all the Vulkan objects required for pipeline creation and cache them for later reuse. This process is usually done by hashing the input data (CreateInfo structure members) used to create the Vulkan objects. This enables a future similar request to return immediately with the cached object. The mapping between input data and the Vulkan object can also alternatively be done by creating the hash using the bitfield hash of the structure members. While the application is loading, the Vulkan resources can be prepared so that the rendering for the first frames will have minimal CPU impact as all the data necessary has been pre-computed. For example, when the level changes or the game exits, the recorded Vulkan objects can be serialised and written to a file on disk. In the next run the file can be read and deserialised to warmup the internal resource cache. The pipeline_cache sample demonstrates this behaviour, by allowing you to enable or disable the use of pipeline cache objects. Destroying the existing pipelines will trigger re-caching, which is a process that will slow down the application. In this case there are only 2 pipelines, and the effect is noticeable, therefore we can expect it to have a much greater impact in a real game. On the first run of the sample on a device, the first frames will have a slightly bigger execution time because the pipelines are created for the first time - this is expected behaviour. In the next runs of the sample, the VkPipelineCache is created with the data saved from the previous run and the internal resource cache. Below is a screenshot of the sample on a phone with Mali G76 GPU: Pipeline cache is enabled and Sponza is rendered at 60 FPS when the existing pipelines are destroyed. Pipeline re-creation takes 24.4 ms thanks to the pipeline cache. If we disable the pipeline cache, re-creating the pipelines takes 50.4 ms, more than double the previous time. Building pipelines dynamically without a pipeline cache can result in a sudden framerate drop. Do Create known pipelines early in the application execution (use data between application runs). Use pipeline cache to reduce pipeline creation cost. Don’t Create pipelines at draw time without a pipeline cache (introduces performance stutters). Impact Increased frame time execution if a pipeline baked state is not reused. The driver then needs to rebuild the pipeline which includes shader compilation, an expensive operation. Debugging A frame capture would show if there are any calls to vkCreateGraphicsPipelines or vkCreateComputePipelines with an empty VkPipelineCache object. Due to how RenderDoc captures and replays a frame, the field for VkPipelineCache is always empty in the report for the 'create pipeline' functions.","title":"Pipeline Management","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/pipeline_cache/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Vulkan Pipeline","hash":"_vulkan_pipeline","id":2},{"text":"Vulkan Pipeline Cache","hash":"_vulkan_pipeline_cache","id":3},{"text":"Resource Cache Warmup","hash":"_resource_cache_warmup","id":4},{"text":"The sample","hash":"_the_sample","id":5},{"text":"Best practices summary","hash":"_best_practices_summary","id":6}]},"106":{"id":106,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan render-passes use attachments to describe input and output render targets. This sample shows how loading and storing attachments might affect performance on mobile. During the creation of a render-pass, you can specify various color attachments and a depth-stencil attachment. Each of those is described by a VkAttachmentDescription struct, which contains attributes to specify the load operation (loadOp) and the store operation (storeOp). This sample lets you choose between different combinations of these operations at runtime. VkAttachmentDescription desc = {}; desc.loadOp = VK_ATTACHMENT_LOAD_OP_*; desc.storeOp = VK_ATTACHMENT_STORE_OP_*; The sample renders a scene with a render-pass using one color attachment, which is a swapchain image used for presentation. Since we do not need to read its content at the beginning of the pass, it would make sense to use LOAD_OP_DONT_CARE in order to avoid spending time loading it. If we do not draw on the entire framebuffer, the frame might show random colors on the areas we do not draw on. In addition, it would show pixels drawn during previous frames. The solution consists in using LOAD_OP_CLEAR to clear the content of the framebuffer using a user-specified color. VkAttachmentDescription color_desc = {}; color_desc.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR; // Remember to set the clear value when beginning the render pass VkClearValue clear = {}; clear.color = {0.5f, 0.5f, 0.5f, 1.0f}; VkRenderPassBeginInfo begin = {}; begin.clearValueCount = 1; begin.pClearValues = &clear; Using the LOAD_OP_LOAD flag is the wrong choice in this case. Not only do we not use its content during this render-pass, it will cost us more in terms of bandwidth. Below is a screenshot showing a scene rendered using LOAD_OP_LOAD: Comparing the read bandwidth values (External Read Bytes graph), we observe a difference of 1533.9 - 933.7 = 600.2 MiB/s if we select LOAD_OP_CLEAR We can estimate the bandwidth cost of loading/storing an uncompressed attachment as width * height * bpp/8 * FPS [MiB/s]. We calculate an estimate of 2220 * 1080 * (32/8) * ~60 = ~575 MiB/s. The savings will be lower if the images are compressed, see Enabling AFBC in your Vulkan Application. The render-pass also uses a depth attachment. In case we need to use it in a second render-pass, the right operation to set would be STORE_OP_STORE, because choosing STORE_OP_DONT_CARE means that the second render-pass will potentially load the wrong values. The sample does not have a second render-pass, therefore there is no need to store the depth attachment. VkAttachmentDescription depth_desc = {}; depth_desc.storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE; It is worth noticing that we can create a depth image with the LAZILY_ALLOCATED memory property, which means that it will be allocated by tile-based GPUs only if it is actually stored (by using STORE_OP_STORE). VmaAllocationCreateInfo depth_alloc = {}; depth_alloc.preferredFlags = VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT; In this case the write transactions were reduced by 986.3 - 431.5 = 554.8 MiB/s, again what we would roughly expect from storing the size of an uncompressed image at ~60 FPS. The streamline trace shows us a more in-depth analysis of what is going on in the GPU. The delta between LOAD_OP_LOAD and LOAD_OP_CLEAR is evident at 10.4s having consistently less external reads. The delta between STORE_OP_STORE and STORE_OP_DONT_CARE is clear at 18.1s with the external write graphs plunging down. Using the vkCmdClear* to clear the attachments is not needed as you can get the same result by using LOAD_OP_CLEAR. The following screenshot shows that by using that command the GPU will need ~6 million more fragment cycles per second. While the vkCmdClear* functions can be used to clear images explicitly, on certain mobile devices this will result in a per-fragment clear shader which results in the additional workload demonstrated in the above screenshot. Despite this, the vkCmdClear* functions do have uses which are not covered by the loadOp operations, for example the vkCmdClearAttachments function can be used to clear a specific region within an attachment during a render pass. Beyond setting the depth image usage bit to specify that it can be used as a DEPTH_STENCIL_ATTACHMENT, we can set the TRANSIENT_ATTACHMENT bit to tell the GPU that it can be used as a transient attachment which will only live for the duration of a single render-pass. Then if this is backed by LAZILY_ALLOCATED memory it will not even need physical storage. VkImageCreateInfo depth_info = {VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO}; depth_info.usage = VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT; The render area provided to the render pass begin info struct should be tested against the vkGetRenderAreaGranularity to confirm that it is an optimal size. A render area is optimal when it satisfies all of the following conditions: The offset.x member in renderArea is a multiple of the width member of the horizontal granularity. The offset.y member in renderArea is a multiple of the height of the vertical granularity. Either the extent.width member in renderArea is a multiple of the horizontal granularity or offset.x + extent.width is equal to the width of the framebuffer in the VkRenderPassBeginInfo. Either the extent.height member in renderArea is a multiple of the vertical granularity or offset.y + extent.height is equal to the height of the framebuffer in the VkRenderPassBeginInfo. A non optimal render area may cause a negative impact to performance. More information on this is available here and here. Do Clear or invalidate each attachment at the start of a render pass using loadOp = LOAD_OP_CLEAR or loadOp = LOAD_OP_DONT_CARE. Ensure that color/depth/stencil writes are not masked when clearing; you must clear the entire content of an attachment to get a fast clear of the tile memory. Set the VK_ATTACHMENT_LOAD_OP_DONT_CARE flag to attachments not used as input for the render-pass. Set up any attachment which is only live for the duration of a single render pass as a TRANSIENT_ATTACHMENT backed by LAZILY_ALLOCATED memory and ensure that the contents are invalidated at the end of the render pass using storeOp = STORE_OP_DONT_CARE. If you know you are rendering to a sub-region of framebuffer use a scissor box to restrict the area of clearing and rendering required. Don’t Use vkCmdClearColorImage() or vkCmdClearDepthStencilImage() for any image which is used inside a render pass later; move the clear to the render pass loadOp setting. Use vkCmdClearAttachments() inside a render pass when not needed as this is not free, unlike a clear or invalidate load operation. Clear a render pass by manually writing a constant color using a shader program. Use loadOp = LOAD_OP_LOAD unless your algorithm actually relies on the initial framebuffer state. Set loadOp or storeOp for attachments which are not actually needed in the render pass; you’ll generate a needless round-trip via tile-memory for that attachment. Use vkCmdBlitImage as a way of upscaling a low-resolution game frame to native resolution if you will render UI/HUD directly on top of it with loadOp = LOAD_OP_LOAD; this will be an unnecessary round-trip to memory. Impact Correct handling of render passes is critical; failing to follow this advice can result in significantly lower fragment shading performance and increased memory bandwidth due to the need to read non-cleared attachments into the tile memory at the start of rendering and write out non-invalidated attachments at the end of rendering. Debugging Review API usage of attachments description. Review API usage of render pass creation, and any use of vkCmdClearColorImage(), vkCmdClearDepthStencilImage() and vkCmdClearAttachments().","title":"Appropriate use of render pass attachments","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/render_passes/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Color attachment load operation","hash":"_color_attachment_load_operation","id":2},{"text":"Depth attachment store operation","hash":"_depth_attachment_store_operation","id":3},{"text":"vkCmdClear* functions","hash":"_vkcmdclear_functions","id":4},{"text":"Depth image usage","hash":"_depth_image_usage","id":5},{"text":"Render area granularity","hash":"_render_area_granularity","id":6},{"text":"Best-practice summary","hash":"_best_practice_summary","id":7}]},"107":{"id":107,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan exposes a number of methods for setting values within shader code during run-time, this includes UBOs and Specialization Constants. This samples compares these two methods and the performance impact of them. Uniform buffer objects (UBOs) are one of the most common approaches when it is necessary to set values within a shader at run-time and are used in many tutorials. UBOs are pushed to the shader just prior to its execution, this is after shader compilation which occurs during vkCreateGraphicsPipelines. As these values are set after the shader has been compiled, the driver’s shader compiler has limited scope to perform optimisations to the shader during its compilation. This is because optimisations such as loop unrolling or unused code removal require the compiler to have knowledge of the values controlling them which is not possible with UBOs. Push constants also suffer from the same problems as UBOs, as they are also provided after the shader has been compiled. Unlike UBOs, specialization constants are set before pipeline creation meaning these values are known during shader compilation, this allows the driver’s shader compiler to perform optimisations. In this optimisation process the compiler has the ability to remove unused code blocks and statically unroll which reduces the fragment cycles required by the shader which results in an increased performance. While specialization constants rely on knowing the required values before pipeline creation occurs, by trading off this flexibility and allowing the compiler to perform these optimisations you can increase the performance of your application very easily as well as reducing shader code size. This sample provides two radio buttons that allow you to alternate between using UBOs and specialization constants. The value set by either the UBOs or specialization constants controls the number of lights that are rendered by the scene in a for loop. When specialization constants are used the compiler is able to statically unroll this loop and provide increased performance. Below is a screenshot of the sample running on a phone with a Mali G76 GPU: The performance increase is best displayed when using Streamline Performance Analyzer. The graph below shows the number of fragment cycles in one second of execution time when UBOs are used. Alternatively, the graph below also shows the number of fragment cycles in one second of execution time, but this time specialization constants are used. As you can see from the graphs, changing to use specialization constants provides a 4.4% performance increase even when used in an extremely simple sample. In more complex use cases such as a SSAO shader which has a more complex loop for each sample taken by the shader a greater performance difference can be seen, there is a blog available online here detailing this. The Mali Offline Compiler can be used to compare the shortest and longest paths through the shader with UBOs versus specialization constants. For the shader used in the sample, when using UBOs the number of cycles on the shortest path is as follows: Arithmetic Load/Store Varying Texture Shortest Path Cycles: 0.5 0.0 0.3 0.5 While the specialization constant shader produces the following shortest path: Arithmetic Load/Store Varying Texture Shortest Path Cycles: 0.3 0.0 0.3 0.5 This output highlights the improvement achieved when utilizing specialization constants over UBOs for control flow. Do Use compile-time specialization constants for all control flow, this allows compilation to completely remove unused code blocks and statically unroll loops. Don’t Use control-flow which is parameterized by uniform values; specialize shaders for each control path needed instead. Impact Reduced performance due to less efficient shader programs. Debugging If on a Mali GPU, use the Mali Offline Compiler to measure the impact of your shader code changes, including analysis of shortest and longest path through the programs.","title":"Utilizing Specialization Constants","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/specialization_constants/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Specialization Constants or Uniform Buffer Objects","hash":"_specialization_constants_or_uniform_buffer_objects","id":2},{"text":"The Specialization Constant Sample","hash":"_the_specialization_constant_sample","id":3},{"text":"Best practice summary","hash":"_best_practice_summary","id":4}]},"108":{"id":108,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan introduces the concept of subpasses to subdivide a single render pass into separate logical phases. The benefit of using subpasses over multiple render passes is that a GPU is able to perform various optimizations. Tile-based renderers, for example, can take advantage of tile memory, which being on chip is decisively faster than external memory, potentially saving a considerable amount of bandwidth. The Subpasses sample implements a deferred renderer, which splits rendering in two passes: A geometry pass, where data needed for shading is written to the G-buffer (depth, albedo, normals). A lighting pass, where shading is performed using the information in the G-buffer. The G-buffer layout used by the sample is below a limit of 128-bit per pixel of tile buffer color storage (more about that in the next section): Lighting (RGBA8_SRGB), as attachment #0 will take advantage of transaction elimination. Depth (D32_SFLOAT), which does not add up to the 128-bit limit. Albedo (RGBA8_UNORM) Normal (RGB10A2_UNORM) By using the format RGB10A2_UNORM for the normal buffer, normal values, which are within [-1,1], need to be transformed into [0,1]. The formula used in the shader is this: out_normal = 0.5 * in_normal + 0.5; Position can be reconstructed from the lighting pass using the depth attachment, using the following technique: [1] mat4 inv_view_proj = inverse(projection * view); vec2 inv_resolution = vec2(1.0f / width, 1.0f / height); // Load depth from tile buffer and reconstruct world position vec4 clip = vec4(in_uv * 2.0 - 1.0, subpassLoad(i_depth).x, 1.0); vec4 world_w = inv_view_proj * clip; vec3 world = world_w.xyz / world_w.w; In order to highlight the benefit of subpasses over multiple render passes, the sample allows the user to switch between two different techniques at run-time. One of the techniques uses two render passes, running one after another. The first render pass generates the G-buffer, and the second uses it in the lighting stage to generate our final image. The above screenshot shows four GPU counters (collected by HWCPipe), and their values when using two render passes. We can see that there is a high number of physical tiles (PTILES) used and a considerable amount of bandwidth (external reads/writes). Another technique uses a single render pass which is composed of two subpasses. The first subpass generates the G-buffer and the second performs the lighting calculations to generate our final image (similarly to the two render pass technique). On tile-based GPUs the G-buffer might be kept in tile memory across subpasses, which is why this method is considered a best practice. The first thing that you may notice from the Streamline screenshot below is the difference in terms of bandwidth between the two techniques: On the left, from 0s to 3.6s, the benefit of the subpasses technique is clear, as it is able to store the G-buffer on tile memory. On the right, from 3.7s, is highlighted the two render passes technique, which writes lots of data back to the external memory, as the first render pass needs to store the G-buffer in order to be read by the second render pass. As stated by the Vulkan reference, Subpasses with simple framebuffer-space dependencies may be merged into a single tile rendering pass, keeping the attachment data on-chip for the duration of a renderpass. [2]. Since subpass information is known ahead of time, the driver is able to detect if two or more subpasses can be merged together. The consequence of this is that vkCmdNextSubpass becomes a NOP. In other words, a GPU driver can optimize even more by merging two or more subpasses together as long as certain requirements are met. Such requirements may vary between vendors, the following are the ones for Arm GPUs: If merge can save a write-out/read-back; two unrelated subpasses which don’t share any data do not benefit from multipass and will not be merged. If the number of unique VkAttachments used for input and color attachments in all considered subpasses is <= 8. Note that depth/stencil does not count towards this limit. The depth/stencil attachment does not change between subpasses. Multisample counts are the same for all attachments. On Mali devices in order to be merged, subpasses are required to use at most 128-bit per pixel of tile buffer color storage, although some of the more recent GPUs such as Mali-G72 increase this to up to 256-bits per pixel. G-buffers requiring more color storage than this can be used at the expense of needing smaller tiles during fragment shading, which can reduce overall throughput and increase bandwidth reading tile lists. The best way to verify whether two subpasses are merged or not is to compare the physical tiles (PTILES) counter by switching between the subpasses and the render passes techniques. When we compare the screenshots of the two render techniques on a Mali-G76, we can see that there is approximately a 55% reduction in the number of tiles used (262.2k/s vs 614.7k/s), and therefore a 55% reduction in bandwidth. In order to calculate the number in the physical tiles counter, you need to know the resolution of the device you are using and the size of a single tile. In the case of an S10 Mali-G76, the resolution is 2220 * 1080 and a tile is 16x16 pixels. Therefore every frame needs (2220 * 1080) / (16 * 16) = ~9k tiles. To get the tiles every second, we multiply this number by the FPS (this can vary) so 9k * 30 = 270k/s which is approximately what we see in the tiles counter. It is important to note that by using a VkImageFormat that requires more bits, it is most likely that the G-buffer will no longer fit the drivers budget, denying the possibility to merge the subpasses. The following picture shows how the number of physical tiles used almost doubles to 409.6k/s, indicating that subpasses are not merged. Some framebuffer attachments in the sample (such as depth, albedo, and normal), are cleared at the beginning of the render pass, written by the geometry subpass, read by the lighting subpass, and discarded at the end of the render pass. If the GPU has enough memory available to store them on tile memory, there is no need to write them back to external memory. Actually, there is not even a need to allocate them at all. In practice, their image usage needs to be specified as TRANSIENT and their memory needs to be LAZILY_ALLOCATED. Failing to set these flags properly will lead to an increase of fragment jobs as the GPU will need to write them back to external memory. As you can see in the above screenshot, we see roughly a double in fragment jobs per second (from 56/s to 113/s). Vulkan Multipass at GDC 2017 - community.arm.com Deferring shading with Multipass - arm-software.github.io Vulkan input attachments and subpasses - saschawillems.de Getting World Position from Depth Buffer Value - stackoverflow.com Render Pass - vulkan.lunarg.com Do Use subpasses. Keep your G-buffer budget for color small. Use DEPTH_STENCIL_READ_ONLY image layout for depth after the geometry pass is done. Use LAZILY_ALLOCATED memory to back images for every attachment except for the light buffer, which is the only texture written out to memory. Follow the basic render pass best practices, with LOAD_OP_CLEAR or LOAD_OP_DONT_CARE for attachment loads and STORE_OP_DONT_CARE for transient stores. Don’t Store G-buffer data out to memory. Impact Not using multipass correctly may force the driver to use multiple physical passes, sending intermediate image data back via main memory between passes. This loses all benefits of the multipass rendering feature. Debugging The GPU performance counters provide information about the number of physical tiles rendered, which can be used to determine if passes are being merged. The GPU performance counters provide information about the number of fragment threads using late-zs testing, a high value here can be indicative of failing to use DEPTH_STENCIL_READ_ONLY correctly.","title":"Subpasses","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/subpasses/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Deferred rendering","hash":"_deferred_rendering","id":2},{"text":"Merging","hash":"_merging","id":3},{"text":"Transient attachments","hash":"_transient_attachments","id":4},{"text":"Further reading","hash":"_further_reading","id":5},{"text":"References","hash":"_references","id":6},{"text":"Best-practice summary","hash":"_best_practice_summary","id":7}]},"109":{"id":109,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Mobile devices can be rotated, therefore the logical orientation of the application window and the physical orientation of the display may not match. Applications then need to be able to operate in two modes: portrait and landscape. The difference between these two modes can be simplified to just a change in resolution. However, some display subsystems always work on the \"native\" (or \"physical\") orientation of the display panel. Since the device has been rotated, to achieve the desired effect the application output must also rotate. In OpenGL ES the GPU driver can transparently handle the logical rotation of window surface framebuffers, but the Vulkan specification has made this explicit in the API. Therefore in Vulkan the application is responsible for supporting rotation. In this sample we focus on the rotation step, and analyse the performance implications of implementing it correctly with Vulkan. /rotation_cases.jpg[Pre-rotation] The rotation step can be carried out in different ways: It can efficiently and transparently be handled in hardware by the Display Processing Unit (DPU), but this is only possible in those devices that support it. It can be handled by Android, by introducing a compositor pass that rotates the output using the GPU, or some other dedicated block. This is transparent to the application, but will have additional system-level costs such as extra memory bandwidth, or even GPU processing if the compositor uses the GPU as the rotation engine. It can be handled by the Vulkan application, by rendering into a window surface which is oriented to match the physical orientation of the display panel. We call this pre-rotation. An application has no means to tell whether the current device can support a free rotation during composition, so the only guaranteed method to avoid any additional processing cost is to render into a window surface which is oriented to match the physical orientation of the display panel, thus removing the Android compositor step. The sample application you can find here shows how you can handle rotations in your Vulkan application in a way that avoids using the Android compositor for rotation. It allows you to enable and disable pre-rotation at run time, so you can compare these two modes using the hardware counters shown on the display. In this section we will go through the code required to carry out pre-rotation. In the analysis section below we will explain the differences in more detail. Note that not all devices will show obvious differences, as more and more include a DPU capable of performing the rotation in hardware. In a nutshell, below are the steps required to handle pre-rotation: No pre-rotation Pre-rotation Destroy the Vulkan framebuffers and the swapchain Destroy the Vulkan framebuffers and the swapchain Re-create the swapchain using the new surface dimensions i.e. the swapchain dimensions match the surface’s. Ignore the preTransform field in VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR. This will not match the value returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR and therefore the Android Compositor will rotate the scene before presenting it to the display Re-create the swapchain using the old swapchain dimensions, i.e. the swapchain dimensions do not change. Update the preTransform field in VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR so that it matches the currentTransform field of the VkSurfaceCapabilitiesKHR returned by the new surface. This communicates to Android that it does not need to rotate the scene. Re-create the framebuffers Re-create the framebuffers n/a Adjust the MVP matrix so that the world is rotated Render the scene Render the scene Android added pre-rotation to their Vulkan Design Guidelines. However, by default, Android calls onDestroy when the screen is rotated. To disable this behavior and handle rotations in Vulkan, you must add the orientation (for API level 13 and lower) and screenSize attributes to the activity’s configChanges in the Android manifest: To track orientation changes, use Android’s APP_CMD_CONTENT_RECT_CHANGED event: void on_app_cmd(android_app *app, int32_t cmd) { auto platform = reinterpret_cast(app->userData); assert(platform && \"Platform is not valid\"); switch (cmd) { case APP_CMD_INIT_WINDOW: { platform->get_window().resize(ANativeWindow_getWidth(app->window), ANativeWindow_getHeight(app->window)); app->destroyRequested = !platform->prepare(); break; } case APP_CMD_CONTENT_RECT_CHANGED: { // Get the new size auto width = app->contentRect.right - app->contentRect.left; auto height = app->contentRect.bottom - app->contentRect.top; platform->resize(width, height); break; } } } Note that android NDK 21 and below does not support APP_CMD_CONTENT_RECT_CHANGED. This is fixed in version 22+ which at the date of this addition has not been released. This can be patched in the short term by registering a callback that mimics the expected behavior of OnContentRectChanged. The callback we use in this project is: void on_content_rect_changed(ANativeActivity *activity, const ARect *rect) { ... log content rect dimensions struct android_app *app = reinterpret_cast(activity->instance); auto cmd = APP_CMD_CONTENT_RECT_CHANGED; app->contentRect = *rect; if (write(app->msgwrite, &cmd, sizeof(cmd)) != sizeof(cmd)) { ... failed to write message to the app glue command stream } } The above triggers the APP_CMD_CONTENT_RECT_CHANGED event and the new content rect dimensions should be accessible by the app->contentRect attribute. There are other alternatives to CONTENT_RECT_CHANGED, an example can be found here Handling Device Orientation Efficiently in Vulkan With Pre-Rotation We need to sample the current transform from the surface: VkSurfaceCapabilitiesKHR surface_properties; VK_CHECK(vkGetPhysicalDeviceSurfaceCapabilitiesKHR(get_device().get_physical_device(), get_surface(), &surface_properties)); pre_transform = surface_properties.currentTransform; currentTransform is a VkSurfaceTransformFlagBitsKHR value. When we re-create the swapchain, we must set the swapchain’s preTransform to match this value. This informs the compositor that the application has handled the required transform so it does not have to. To re-create the swapchain, the sample uses the helper function update_swapchain provided by the framework: get_device().wait_idle(); auto surface_extent = get_render_context().get_surface_extent(); get_render_context().update_swapchain(surface_extent, select_pre_transform()); This function then takes care to safely destroy the framebuffers and use the new preTransform value to re-create the swapchain: device.get_resource_cache().clear_framebuffers(); auto width = extent.width; auto height = extent.height; if (transform == VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR || transform == VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR) { // Pre-rotation: always use native orientation i.e. if rotated, use width and height of identity transform std::swap(width, height); } swapchain = std::make_unique(*swapchain, VkExtent2D{width, height}, transform); Note that if pre-rotation is enabled and the application has been rotated by 90 degrees, then the surface dimensions must be swapped with respect to the previous orientation. This is done to preserve the dimensions of the swapchain images, since we are planning to rotate our geometry accordingly. The framework then takes care to re-create the framebuffers. When rotating our geometry, normally all we need to do is adjust the Model View Projection (MVP) matrix that we provide to the vertex shader every frame. In this case we want to rotate the scene just before applying the projection transformation. Therefore we update the matrix that the camera will use to compute the projection matrix: glm::mat4 pre_rotate_mat = glm::mat4(1.0f); glm::vec3 rotation_axis = glm::vec3(0.0f, 0.0f, 1.0f); const auto &swapchain = get_render_context().get_swapchain(); if (swapchain.get_transform() & VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR) { pre_rotate_mat = glm::rotate(pre_rotate_mat, glm::radians(90.0f), rotation_axis); } else if (swapchain.get_transform() & VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR) { pre_rotate_mat = glm::rotate(pre_rotate_mat, glm::radians(270.0f), rotation_axis); } else if (swapchain.get_transform() & VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR) { pre_rotate_mat = glm::rotate(pre_rotate_mat, glm::radians(180.0f), rotation_axis); } camera->set_pre_rotation(pre_rotate_mat) The camera stores this pre-rotation matrix. This way the framework will use the updated matrix before pushing the MVP to the shader: void GeometrySubpass::update_uniform(CommandBuffer &command_buffer, sg::Node &node, size_t thread_index) { GlobalUniform global_uniform; global_uniform.camera_view_proj = camera.get_pre_rotation() * vkb::vulkan_style_projection(camera.get_projection()) * camera.get_view(); For completion, here are the relevant sections of the vertex shader: layout(location = 0) in vec3 position; layout(set = 0, binding = 1) uniform GlobalUniform { mat4 model; mat4 view_proj; vec3 camera_position; } global_uniform; layout (location = 0) out vec4 o_pos; void main(void) { o_pos = global_uniform.model * vec4(position, 1.0); gl_Position = global_uniform.view_proj * o_pos;; } The surface_rotation Vulkan sample allows you to toggle between pre-rotation mode and compositor mode. Below is a screenshot of the sample running on a device that does not support native (DPU) rotation, but instead includes a separate 2D block which rotates the GPU output before presenting it to the display. Compare this to the same scene rendered using pre-rotation: As you can see there is a significant increase in the stall rate on the external memory bus if pre-rotation is not enabled, because the framebuffer is being read and written to the 2D rotation block. For this device the additional system memory bandwidth generated by the 2D block increases the use of external memory, which is visible as an increase in memory back-pressure seen by the GPU. This is more obvious if we trace both modes using Streamline. If you enable all Mali counters and use the relevant template (Mali-G72 in this case) to visualize the data, we can see that we go from an average 12% read stall / 7% write stall to 22% read stall / 17% write stall. In the image below pre-rotation is enabled and disabled every second (using the auto-toggle option). The absolute traffic per cycle drops, but this is because of the drop in performance associated to the increased memory pressure. image::./images/prerotate_streamline.png[Streamline capture. Pre-rotate is enabled/disabled every second] In this case the 2D rotation block is using a significant portion of the bandwidth, causing a drop in performance. Note however that this scene is rendered in a memory-heavy fashion (no culling, no compressed textures) to make the effect of pre-rotation more visible. Even if your scene is not memory-heavy, the extra load on the system resulting from performing the rotation during composition will have a negative impact on the battery life of the device. In order to save battery life in those devices without a rotation-capable DPU, always ensure that your Vulkan renderer performs pre-rotation. Do To avoid presentation engine transformation passes ensure that swapchain preTransform matches the currentTransform value returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR. If a swapchain image acquisition returns VK_SUBOPTIMAL_KHR or VK_ERROR_OUT_OF_DATE_KHR then recreate the swapchain taking into account any updated surface properties including potential orientation updates reported via currentTransform. Don’t Assume that supported presentation engine’s transforms other than currentTransform are free; many presentation engines can handle rotation and/or mirroring but at additional processing cost. Note that Android will always return all transforms as supported, because the GPU is always available as a general purpose fallback. Impact Non-native orientation may require additional transformation passes in the presentation engine. This may require use of the GPU or a dedicated 2D block on some systems which cannot handle the transformation directly in the display controller. Debugging You may use a system profiler such as Streamline to spot extra memory loads in the GPU counters, either as a direct effect (GPU composition) or as a side-effect (memory pressure). s a direct effect (GPU composition) or as a side-effect (memory pressure).","title":"Appropriate use of surface rotation","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/surface_rotation/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Pre-rotation","hash":"_pre_rotation","id":2},{"text":"Demo application","hash":"_demo_application","id":3},{"text":"Rotation in Android","hash":"_rotation_in_android","id":4},{"text":"Swapchain re-creation","hash":"_swapchain_re_creation","id":5},{"text":"Rotating the scene","hash":"_rotating_the_scene","id":6},{"text":"Performance impact","hash":"_performance_impact","id":7},{"text":"Best-practice summary","hash":"_best_practice_summary","id":8}]},"110":{"id":110,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. Vulkan gives the application some significant control over the number of swapchain images to be created. This sample analyzes the available options and their performance implications. The control over the number of swapchain images is shared between the application and the platform. The application can ask for a minimum number of images by setting the minImageCount parameter in vkCreateSwapchainKHR. The exact number of images created can then be polled via vkGetSwapchainImagesKHR. In order to properly set the minImageCount parameter, the application should get the surface capabilities of the physical device via vkGetPhysicalDeviceSurfaceCapabilitiesKHR. The VkSurfaceCapabilitiesKHR structure has the minImageCount and maxImageCount parameters, which set the boundaries for the image count that can be safely requested. As a rule of thumb on mobile, pSurfaceCapabilities->minImageCount is usually 2, while pSurfaceCapabilities->maxImageCount is large enough to not pose any problem with common applications (though it is still good practice to check its value). The most common values that an application may ask for are: 2 for double buffering 3 for triple buffering The swapchain will then create a number of images based on both minImageCount and the requested present mode. We will discuss present modes in the next section. The available present modes can be queried via vkGetPhysicalDeviceSurfacePresentModesKHR. There are several presentation modes in Vulkan, but mobile GPUs do not support the ones in which the image is directly presented to the screen (immediate mode). The only ones which satisfy Android’s VSync requirement are VK_PRESENT_MODE_FIFO_KHR and VK_PRESENT_MODE_MAILBOX_KHR. In FIFO mode the presentation requests are stored in a queue. If the queue is full the application will have to wait until an image is ready to be acquired again. This is a normal operating mode for mobile, which automatically locks the framerate to 60 FPS. In MAILBOX mode a single presentation request is stored by the presentation engine. In case of a new request the previous image will be replaced and will be available for acquisition once again. As a rule of thumb, if we ask for VK_PRESENT_MODE_MAILBOX_KHR we may get more images than minImageCount, typically 4. The application can keep submitting new frames for presentation, without stalling. This is useful in some cases, e.g. for reducing input latency, but it is not optimal for mobile because it keeps the CPU and GPU active while not strictly necessary. Unless the application really needs MAILBOX, it is better to go for FIFO to reduce CPU and GPU load. In FIFO mode the number of swapchain images created typically corresponds to minImageCount. We will now discuss how many images the application should ask for, which is a critical point performance-wise. Android has a VSync signal running at 60 FPS (i.e. every 16 ms), which is the only chance for an image to be presented. Double buffering works well if frames can be processed within 16 ms, so at each VSync signal the processed image is presented on screen and the previously presented one becomes available to the application again. This behavior is demonstrated in the figure below: This behavior breaks when frames take more than 16 ms to be processed. Let us suppose that a frame is ready after 20 ms. The following figure illustrates what happens in this case: The orange dashed line highlights a point in which the whole system is idle. FB1 was not yet ready for presentation for the previous VSync signal, so the presentation engine keeps presenting FB0, which in turn cannot be used to start processing the next frame. This idling behavior caps framerate at 30 fps, while the application could achieve ~50 fps. With triple buffering there will always be an image already processed and ready for presentation, so the GPU can start processing a new image without stalling. The swapchain_images Vulkan sample highlights this behavior, by allowing to switch between double buffering and triple buffering. This is a screenshot of the sample on a phone with a Mali G72 GPU: Triple buffering is enabled and Sponza is comfortably rendered at 60 FPS. When we switch to double buffering the framerate drops to 30 FPS: In this case the actual CPU and GPU frame time is close to 16 ms, so it is possible that the framerate remains at 60 FPS for a few seconds even after switching to double buffering. Thermal effects or other running processes may cause a small increase in frame time, resulting in the app missing VSync. As previously discussed, with double buffering a missed VSync causes a sudden drop in framerate. In order for an application to achieve its potential framerate without being VSync-bound, triple buffering is the preferred option. We can confirm this behavior using Streamline Performance Analyzer. The first part of the trace until the marker is with triple buffering. As we can see the CPU and GPU show a good utilization, with not much idling between frames. After the marker we switch to double buffering and we confirm what we predicted earlier: there are longer periods of time in which both the CPU and GPU are idle because the presentation system needs to wait for VSync before providing a new image. Do Ensure that the value of minImageCount is within the valid range from vkGetPhysicalDeviceSurfaceCapabilitiesKHR (between minImageCount and maxImageCount). Use VK_PRESENT_MODE_FIFO_KHR to avoid unnecessary CPU and GPU load. Use triple buffering to maximize performance. Don’t Use VK_PRESENT_MODE_MAILBOX_KHR unless you specifically need that behavior, e.g. for lower input latency. Use double buffering, unless you are happy with the drop in framerate. If you want to cap framerate to 30 FPS to save power, this can be achieved on the CPU side while still using triple buffering. Impact Double buffering will limit framerate if VSync is missed, as the system will need to stall until the next VSync signal. Debugging It is possible to check how many images are created via vkGetSwapchainImagesKHR. If only 2 images are being created, minImageCount should be increased to 3, if the physical device allows for it (it normally does).","title":"Choosing the right number of swapchain images","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/swapchain_images/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"Choosing a number of images","hash":"_choosing_a_number_of_images","id":2},{"text":"Choosing a present mode","hash":"_choosing_a_present_mode","id":3},{"text":"Double buffering or triple buffering?","hash":"_double_buffering_or_triple_buffering","id":4},{"text":"The sample","hash":"_the_sample","id":5},{"text":"Best practice summary","hash":"_best_practice_summary","id":6}]},"111":{"id":111,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This tutorial, along with the accompanying example code, demonstrates how to use Basis universal supercompressed GPU textures in a Vulkan application. KTX is a GPU texture container format for storing different texture types (2D, cubemap, etc.) and texture formats (uncompressed and compressed). Version 2.0 added support for Basis Universal supercompressed textures. Basis Universal is a supercompressed GPU texture data interchange system that implements the UASTC and ETC1S compressed formats that serve as transmission formats. Both can be quickly transcoded to a wide variety of GPU native compressed and uncompressed formats like RGB/RGBA, PVRTC1, BCn, ETC1, ETC2, etc. This means that unlike a KTX 2.0 file storing a BC3 textures, the data needs to be transcoded at runtime. This sample (as well as the repository) uses the libktx library from the official Khronos KTX Software Repository for loading and transcoding the Basis Universal compressed KTX 2.0 textures. It’s included in the framework via this CMakeLists.txt and also adds the Basis Universal transcoder: # libktx set(KTX_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ktx) set(KTX_SOURCES ... # Basis Universal ${KTX_DIR}/lib/basis_sgd.h ${KTX_DIR}/lib/basis_transcode.cpp ${KTX_DIR}/lib/basisu/transcoder/basisu_containers.h ${KTX_DIR}/lib/basisu/transcoder/basisu_containers_impl.h ${KTX_DIR}/lib/basisu/transcoder/basisu_file_headers.h ${KTX_DIR}/lib/basisu/transcoder/basisu_global_selector_cb.h ${KTX_DIR}/lib/basisu/transcoder/basisu_global_selector_palette.h ${KTX_DIR}/lib/basisu/transcoder/basisu_transcoder_internal.h ${KTX_DIR}/lib/basisu/transcoder/basisu_transcoder_uastc.h ${KTX_DIR}/lib/basisu/transcoder/basisu_transcoder.cpp ${KTX_DIR}/lib/basisu/transcoder/basisu_transcoder.h ${KTX_DIR}/lib/basisu/transcoder/basisu.h ${KTX_DIR}/lib/basisu/zstd/zstd.c ... # KTX2 ${KTX_DIR}/lib/texture2.c ${KTX_DIR}/lib/texture2.h An alternative to including libktx via CMake would be using the pre-built binaries provided in the KTX-Software repository. For projects that just want to use KTX 2.0 and Basis Universal texture compression, a light-weight alternative to libktx is the basisu basist::ktx2_transcoder. More information on how to use this can be found in Binomial’s documentation, How to configure and use the transcoder. As noted above, the KTX 2.0 files used in this sample store texture data in the Basis Universal ETC1S and UASTC transmission formats, which can’t be natively used by the GPU. So before transcoding the data to a native GPU format, we need to select a valid native GPU target format. In this sample, we use a simple mechanism solely based on the Vulkan formats supported by the GPU: void TextureCompressionBasisu::get_available_target_formats() { available_target_formats.clear(); VkPhysicalDeviceFeatures device_features = get_device().get_gpu().get_features(); // Block compression if (device_features.textureCompressionBC) { // BC7 is the preferred block compression if available if (format_supported(VK_FORMAT_BC7_SRGB_BLOCK)) { // Target formats from the KTX library, and prefixed with KTX_ available_target_formats.push_back(KTX_TTF_BC7_RGBA); } ... } // Adaptive scalable texture compression if (device_features.textureCompressionASTC_LDR) { ... } // Ericsson texture compression if (device_features.textureCompressionETC2) { ... } // PowerVR texture compression support needs to be checked via an extension if (get_device().is_extension_supported(VK_IMG_FORMAT_PVRTC_EXTENSION_NAME)) { ... } // Always add uncompressed RGBA as a valid target available_target_formats.push_back(KTX_TTF_RGBA32); available_target_formats_names.push_back(\"KTX_TTF_RGBA32\"); } This gives us a list of possible target formats for the Basis Universal transcoder (prefixed with KTX_) that we can later on transcode to from the ETC1S and UASTC transmission formats. Transcode target format selection in a real world application will most probably be a bit more complex. A good reference for how to select target formats can be found in the KTX 2.0 / Basis Universal Textures — Developer Guide. Loading and transcoding the KTX 2.0 texture image file handled by libktx and done inside the TextureCompressionBasisu::transcode_texture function. Loading a KTX 2.0 file is the same as loading a KTX1.0 file, with the exception that we use the ktxTexture2 class, which needs to be casted to ktxTexture in some function calls: // We are working with KTX 2.0 files, so we need to use the ktxTexture2 class ktxTexture2 *ktx_texture; // Load the KTX 2.0 file into memory. This is agnostic to the KTX version, so we cast the ktxTexture2 down to ktxTexture KTX_error_code result = ktxTexture_CreateFromNamedFile(file_name.c_str(), KTX_TEXTURE_CREATE_LOAD_IMAGE_DATA_BIT, (ktxTexture **) &ktx_texture); if (result != KTX_SUCCESS) { throw std::runtime_error(\"Could not load the requested image file.\"); } Once we have successfully loaded the file from disk, we can transcode it from ETCS1/UASTC to our desired target format from the list we created earlier. We first check if the source KTX 2.0 file actually needs transcoding via ktxTexture2_NeedsTranscoding. This is always the case for all KTX 2.0 texture files used in this sample, but if a file would e.g. already contain a native format like BCn, then we wouldn’t have to transcode it. If the file needs transcoding, we then call the Basis Universal transcoder from the libktx via ktxTexture2_TranscodeBasis. This will transcode the texture data into the GPU native target format: if (ktxTexture2_NeedsTranscoding(ktx_texture)) { result = ktxTexture2_TranscodeBasis(ktx_texture, target_format, 0); if (result != KTX_SUCCESS) { throw std::runtime_error(\"Could not transcode the input texture to the selected target format.\"); } } If we e.g. select KTX_TTF_BC7_RGBA as the transcode target format for a UASTC compressed file, this will transcode the UASTC texture data to GPU native BC7 data. Once transcoded, the ktxTexture object contains the texture data in a native GPU format (e.g. BC7 in the above sample), which can then be directly uploaded to a GPU that supports BC7 texture compression. From this point on it’s like working with regular textures. The native Vulkan format we can then use to create the Vulkan image from can be taken from the ktxTexture object: VkFormat format = (VkFormat)ktx_texture->vkFormat; // Create a buffer to store the transcoded ktx texture data for staging to the GPU VkBufferCreateInfo buffer_create_info = vkb::initializers::buffer_create_info(); buffer_create_info.size = ktx_texture->dataSize; ... // Copy the ktx texture into the host local buffer uint8_t *data; vkMapMemory(get_device().get_handle(), staging_memory, 0, memory_requirements.size, 0, (void **) &data); memcpy(data, ktx_image_data, ktx_texture->dataSize); vkUnmapMemory(get_device().get_handle(), staging_memory); // Setup buffer copy regions for each mip level std::vector buffer_copy_regions; for (uint32_t mip_level = 0; mip_level baseWidth >> mip_level; buffer_copy_region.imageExtent.height = ktx_texture->baseHeight >> mip_level; buffer_copy_region.imageExtent.depth = 1; buffer_copy_region.bufferOffset = offset; buffer_copy_regions.push_back(buffer_copy_region); } ... VkImageCreateInfo image_create_info = vkb::initializers::image_create_info(); image_create_info.imageType = VK_IMAGE_TYPE_2D; image_create_info.format = format; image_create_info.mipLevels = texture.mip_levels; image_create_info.arrayLayers = 1; image_create_info.samples = VK_SAMPLE_COUNT_1_BIT; image_create_info.tiling = VK_IMAGE_TILING_OPTIMAL; image_create_info.sharingMode = VK_SHARING_MODE_EXCLUSIVE; image_create_info.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED; image_create_info.extent = {texture.width, texture.height, 1}; image_create_info.usage = VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT; vkCreateImage(get_device().get_handle(), &image_create_info, nullptr, &texture.image); ... // Upload data to the Vulkan image using a command buffer VkCommandBuffer copy_command = device->create_command_buffer(VK_COMMAND_BUFFER_LEVEL_PRIMARY, true); ... vkCmdCopyBufferToImage( copy_command, staging_buffer, texture.image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, static_cast(buffer_copy_regions.size()), buffer_copy_regions.data()); ... device->flush_command_buffer(copy_command, queue, true); The sample allows transcoding of a fixed set of ETC1S/UASTC to supported native GPU target formats at runtime. The list of possible targets depends on the device’s capabilities. You can also zoom in and rotate the image to see the effect of different input and target format combinations. Transcoding speed suffers a lot in debug builds. For best performance, running a release build is advised. elease build is advised.","title":"Using Basis Universal supercompressed GPU texture codec with Vulkan","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/texture_compression_basisu/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"The KTX2 format","hash":"_the_ktx2_format","id":2},{"text":"Basis Universal","hash":"_basis_universal","id":3},{"text":"Libraries for loading KTX 2.0 files","hash":"_libraries_for_loading_ktx_2_0_files","id":4},{"text":"Selecting a GPU native target format","hash":"_selecting_a_gpu_native_target_format","id":5},{"text":"Loading the KTX 2.0 file","hash":"_loading_the_ktx_2_0_file","id":6},{"text":"Loading the file from disk","hash":"_loading_the_file_from_disk","id":7},{"text":"Transcoding into a native format","hash":"_transcoding_into_a_native_format","id":8},{"text":"Uploading the texture data","hash":"_uploading_the_texture_data","id":9},{"text":"The sample","hash":"_the_sample","id":10}]},"112":{"id":112,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates how to use different types of compressed GPU textures in a Vulkan application, and shows the timing benefits of each.","title":"Texture compression comparison","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/texture_compression_comparison/README.html","titles":[]},"113":{"id":113,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample compares two methods for synchronizing between the CPU and GPU, WaitIdle and Fences demonstrating which one is the best option in order to avoid stalling. The simplest way to synchronize the CPU and GPU is to use either vkQueueWaitIdle or vkDeviceWaitIdle, these commands wait until the device or queue has finished executing all work dispatched to it. Note that when using a single VkQueue, vkQueueWaitIdle is functionally equivalent to vkDeviceWaitIdle. While this method works reliably, it is far more coarse than is actually required to synchronize between the CPU and GPU. This results in bubbles within the GPU that prevent it from maintaining a full pipeline, therefore stopping it from parallelizing vertex and fragment work from separate frames which results in higher frame times and lower efficiency. The alternative to WaitIdle is to use a Vulkan Fence object, these are designed to allow the GPU to inform the CPU when it has finished with a single frame’s workload allowing the CPU to safely re-use the resources for that frame. This method avoids stalling while waiting for the GPU to finish executing, as the CPU can continue to submit the following frames without having to wait for the GPU which in turn avoids the GPU pipeline draining of work. This sample provides two radio buttons that allow you to alternate between using WaitIdle and Fence. When WaitIdle is selected the sample calls vkDeviceWaitIdle before beginning each frame, this forces the GPU to finish executing all work dispatched to it and in doing so, drains the pipeline of all the work within. As a result, the GPU is idle while the next frame’s command buffer is created until it has been dispatched, which increases frame times. When Fence is selected the sample assigns a Fence to each frame during its creation, then it calls vkWaitForFences and using the Fence for the next frame to be computed. This method allows the CPU to continue dispatching work to GPU while it executes the previous frames workload. Below is a screenshot of the sample running on a phone with a Mali G76 GPU: When WaitIdle is used the average frame time is 72ms, yet it decreases by 22% to 56ms when Fences is enabled. The performance increase is also clearly demonstrated when using Streamline Performance Analyzer. The graph below shows the Job Manager Cycles and stall in a single frame when WaitIdle is used. While, the following graph shows the Job Manager Cycles for a frame when Fences are used. This output clearly shows that WaitIdle forces the GPU to drain of all work which results in the GPU idling causing higher frame times. Do Use Fences to asynchronously read back data to the CPU; don’t block synchronously and cause the pipeline to drain. Don’t Unnecessarily wait for GPU data on either the CPU or GPU. Use vkQueueWaitIdle() or vkDeviceWaitIdle() unless absolutely necessary for less granular synchronisation. Impact The impact can be very minor or can be very significant depending on the relative sizes and ordering of the workloads which are queued. Debugging Arm Mobile Studio can be used visualize the Arm CPU and Mali GPU activity on both GPU queues, and can quickly show bubbles in scheduling either locally to the GPU queues (indicative of a stage dependency issue) or globally across both CPU and GPU (indicative of a blocking CPU call being used).","title":"Synchronizing the CPU and GPU","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/performance/wait_idle/README.html","titles":[{"text":"Overview","hash":"_overview","id":1},{"text":"WaitIdle or Fences","hash":"_waitidle_or_fences","id":2},{"text":"The Wait Idle Sample","hash":"_the_wait_idle_sample","id":3},{"text":"Best practice summary","hash":"_best_practice_summary","id":4}]},"114":{"id":114,"text":"The source for this sample can be found in the Khronos Vulkan samples github repository. This sample demonstrates the usage of the Vulkan Profiles Library. Profiles define a common requirement baseline of properties, features, extensions, etc. to make Vulkan applications more portable. Instead of having to check all of these in your app one by one at runtime, you use the profiles library to check if the selected device supports all the requirements of that given profile. If that’s the case, you then use the same library to create the device and/or instance. The library then takes care of enabling all the required features, extensions, etc. We’ll show this in a sample that makes use of descriptor indexing. We’ll be using the VP_LUNARG_desktop_portability_2021 profile that defines feature sets for common desktop platforms with drivers supporting Vulkan 1.1 on Windows and Linux. Without using the profiles library, and with an api version that doesn’t have this as a core feature, one would have to manually enable features and extensions at device and/or instance creation. This could look something like this: if (!device_extension_supported(VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME)) || (...)) { app_terminate('Extension not supported'); } // Instance creation // If using Vulkan 1.0, VK_KHR_get_physical_device_properties2 is a requirement for descriptor indexing // See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_EXT_descriptor_indexing.html#_extension_and_version_dependencies add_instance_extension(VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME); vkCreateInstance(...); // Device creation add_device_extension(VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME); // VK_KHR_maintenance3 is a requirement for descriptor indexing // See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VK_EXT_descriptor_indexing.html#_extension_and_version_dependencies add_device_extension(VK_KHR_MAINTENANCE3_EXTENSION_NAME); VkPhysicalDeviceDescriptorIndexingFeaturesEXT descriptor_indexing_features{}; descriptor_indexing_features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT; descriptor_indexing_features.shaderSampledImageArrayNonUniformIndexing = VK_TRUE; descriptor_indexing_features.runtimeDescriptorArray = VK_TRUE; descriptor_indexing_features.descriptorBindingVariableDescriptorCount = VK_TRUE; VkPhysicalDeviceFeatures2 physical_device_features2{}; physical_device_features2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2; physical_device_features2.pNext = &descriptor_indexing_features; vkGetPhysicalDeviceFeatures2(physicalDevice, &physical_device_features2); if (!descriptor_indexing_features.runtimeDescriptorArray) { app_terminate('runtime descriptor arrays not supported!'); } // ... do the same for all other extensions and features VkDeviceCreateInfo device_create_info = {}; device_create_info.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO; device_create_info.pNext = &physical_device_features2; VkResult result = vkCreateDevice(...); if (!result) { app_terminate('Could not create device, reason:' + vk_result_str(result)); } With each additional device feature this code would get longer and longer, as physical device features need to be chained via the pNext member. Using the profile library and a profile that requires all the above features and extension this can be simplified a lot: // Profile to enable const VpProfileProperties profile_properties = {PROFILE_NAME, PROFILE_SPEC_VERSION}; // Instance creation VkBool32 profile_supported; vpGetInstanceProfileSupport(nullptr, &profile_properties, &profile_supported); if (!profile_supported) { app_terminate(\"The selected profile is not supported!\"); } VkInstanceCreateInfo create_info{}; create_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO; create_info.ppEnabledExtensionNames = enabled_extensions.data(); create_info.enabledExtensionCount = static_cast(enabled_extensions.size()); VpInstanceCreateInfo instance_create_info{}; instance_create_info.pProfile = &profile_properties; instance_create_info.pCreateInfo = &create_info; instance_create_info.flags = VP_INSTANCE_CREATE_MERGE_EXTENSIONS_BIT; result = vpCreateInstance(&instance_create_info, nullptr, &vulkan_instance); // Device creation VkBool32 profile_supported; vpGetPhysicalDeviceProfileSupport(instance->get_handle(), gpu.get_handle(), &profile_properties, &profile_supported); if (!profile_supported) { app_terminate(\"The selected profile is not supported (error at creating the device)!\"); } VpDeviceCreateInfo deviceCreateInfo{}; deviceCreateInfo.pCreateInfo = &create_info; deviceCreateInfo.pProfile = &profile_properties; deviceCreateInfo.flags = VP_DEVICE_CREATE_MERGE_EXTENSIONS_BIT; VkResult result = vpCreateDevice(gpu.get_handle(), &deviceCreateInfo, nullptr, &vulkan_device); This will enable all features and extensions defined in the selected profile, including descriptor indexing. Inspecting the device created using a profile in a graphics debugger like RenderDoc we can see that the profile library did create the physical device pNext feature chain: And also enabled all required extensions: Esp. the physical device pNext chain for the different features is a lot of boiler plate code when done manually. The VP_LUNARG_desktop_portability_2021 profile we use for this sample enables many more features and extensions. You can find a comparison table for the profiles in LunarG’s SDK documentation.","title":"Using Vulkan profiles","component":"samples","version":"latest","name":"README","url":"/samples/latest/samples/tooling/profiles/README.html","titles":[{"text":"Without profiles","hash":"_without_profiles","id":1},{"text":"With profiles","hash":"_with_profiles","id":2}]}},"components":{},"componentVersions":{"samples/latest":{"displayVersion":"latest","title":"Vulkan Samples","version":"latest","name":"samples","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Vulkan Documentation Project","source-language":"asciidoc@","table-caption":false},"sourcemap":false,"extensions":[{},{},{},{}]},"url":"/samples/latest/README.html","navigation":[{"items":[{"content":"Samples overview","url":"/samples/latest/samples/README.html","urlType":"internal"},{"content":"Vulkan basics","url":"/samples/latest/samples/vulkan_basics.html","urlType":"internal"},{"content":"Sample framework","url":"/samples/latest/framework/README.html","urlType":"internal","items":[{"content":"Framework components","url":"/samples/latest/components/README.html","urlType":"internal"}]},{"content":"Api usage samples","url":"/samples/latest/samples/api/README.html","urlType":"internal","items":[{"content":"Compute N-body","url":"/samples/latest/samples/api/compute_nbody/README.html","urlType":"internal","items":[{"content":"Compute N-body (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_compute_nbody/README.html","urlType":"internal"}]},{"content":"Dynamic uniform buffers","url":"/samples/latest/samples/api/dynamic_uniform_buffers/README.html","urlType":"internal","items":[{"content":"Dynamic Uniform Buffers (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_dynamic_uniform_buffers/README.html","urlType":"internal"}]},{"content":"HDR","url":"/samples/latest/samples/api/hdr/README.html","urlType":"internal","items":[{"content":"HDR (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_hdr/README.html","urlType":"internal"}]},{"content":"Hello Triangle","url":"/samples/latest/samples/api/hello_triangle/README.html","urlType":"internal","items":[{"content":"Hello Triangle (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_hello_triangle/README.html","urlType":"internal"}]},{"content":"HLSL Shaders","url":"/samples/latest/samples/api/hlsl_shaders/README.html","urlType":"internal","items":[{"content":"HLSL Shaders (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_hlsl_shaders/README.html","urlType":"internal"}]},{"content":"Instancing","url":"/samples/latest/samples/api/instancing/README.html","urlType":"internal","items":[{"content":"Instancing (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_instancing/README.html","urlType":"internal"}]},{"content":"Separate image sampler","url":"/samples/latest/samples/api/separate_image_sampler/README.html","urlType":"internal","items":[{"content":"Separate image sampler (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_separate_image_sampler/README.html","urlType":"internal"}]},{"content":"Terrain tessellation","url":"/samples/latest/samples/api/terrain_tessellation/README.html","urlType":"internal","items":[{"content":"Terrain tessellation (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_terrain_tessellation/README.html","urlType":"internal"}]},{"content":"Texture loading","url":"/samples/latest/samples/api/texture_loading/README.html","urlType":"internal","items":[{"content":"Texture loading (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_texture_loading/README.html","urlType":"internal"}]},{"content":"Texture mipmap generation","url":"/samples/latest/samples/api/texture_mipmap_generation/README.html","urlType":"internal","items":[{"content":"Texture mipmap generation (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_texture_mipmap_generation/README.html","urlType":"internal"}]},{"content":"Timestamp queries","url":"/samples/latest/samples/api/timestamp_queries/README.html","urlType":"internal","items":[{"content":"Timestamp queries (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_timestamp_queries/README.html","urlType":"internal"}]},{"content":"OIT linked lists","url":"/samples/latest/samples/api/oit_linked_lists/README.html","urlType":"internal","items":[{"content":"OIT linked lists (Vulkan-Hpp)","url":"/samples/latest/samples/api/hpp_oit_linked_lists/README.html","urlType":"internal"}]},{"content":"OIT depth peeling","url":"/samples/latest/samples/api/oit_depth_peeling/README.html","urlType":"internal"}]},{"content":"Extension usage samples","url":"/samples/latest/samples/extensions/README.html","urlType":"internal","items":[{"content":"Buffer device address","url":"/samples/latest/samples/extensions/buffer_device_address/README.html","urlType":"internal"},{"content":"Calibrated timestamps","url":"/samples/latest/samples/extensions/calibrated_timestamps/README.html","urlType":"internal"},{"content":"Conditional rendering","url":"/samples/latest/samples/extensions/conditional_rendering/README.html","urlType":"internal"},{"content":"Conservative rasterization","url":"/samples/latest/samples/extensions/conservative_rasterization/README.html","urlType":"internal"},{"content":"Debug utils","url":"/samples/latest/samples/extensions/debug_utils/README.html","urlType":"internal"},{"content":"Descriptor buffer basic","url":"/samples/latest/samples/extensions/descriptor_buffer_basic/README.html","urlType":"internal"},{"content":"Descriptor indexing","url":"/samples/latest/samples/extensions/descriptor_indexing/README.html","urlType":"internal"},{"content":"Dynamic line rasterization","url":"/samples/latest/samples/extensions/dynamic_line_rasterization/README.html","urlType":"internal"},{"content":"Dynamic primitive clipping","url":"/samples/latest/samples/extensions/dynamic_primitive_clipping/README.html","urlType":"internal"},{"content":"Dynamic rendering","url":"/samples/latest/samples/extensions/dynamic_rendering/README.html","urlType":"internal"},{"content":"Extended dynamic state2","url":"/samples/latest/samples/extensions/extended_dynamic_state2/README.html","urlType":"internal"},{"content":"Fragment shader barycentric","url":"/samples/latest/samples/extensions/fragment_shader_barycentric/README.html","urlType":"internal"},{"content":"Fragment shading rate","url":"/samples/latest/samples/extensions/fragment_shading_rate/README.html","urlType":"internal"},{"content":"Fragment shading rate dynamic","url":"/samples/latest/samples/extensions/fragment_shading_rate_dynamic/README.html","urlType":"internal"},{"content":"Full screen exclusive","url":"/samples/latest/samples/extensions/full_screen_exclusive/README.html","urlType":"internal"},{"content":"Graphics pipeline library","url":"/samples/latest/samples/extensions/graphics_pipeline_library/README.html","urlType":"internal"},{"content":"Geometry shader to mesh shader","url":"/samples/latest/samples/extensions/gshader_to_mshader/README.html","urlType":"internal"},{"content":"Logic op dynamic state","url":"/samples/latest/samples/extensions/logic_op_dynamic_state/README.html","urlType":"internal"},{"content":"Memory budget","url":"/samples/latest/samples/extensions/memory_budget/README.html","urlType":"internal"},{"content":"Mesh shader culling","url":"/samples/latest/samples/extensions/mesh_shader_culling/README.html","urlType":"internal"},{"content":"Mesh shading","url":"/samples/latest/samples/extensions/mesh_shading/README.html","urlType":"internal"},{"content":"OpenCL interop","url":"/samples/latest/samples/extensions/open_cl_interop/README.html","urlType":"internal"},{"content":"OpenCL interop (Arm)","url":"/samples/latest/samples/extensions/open_cl_interop_arm/README.html","urlType":"internal"},{"content":"OpenGL interop","url":"/samples/latest/samples/extensions/open_gl_interop/README.html","urlType":"internal"},{"content":"Portability","url":"/samples/latest/samples/extensions/portability/README.html","urlType":"internal"},{"content":"Push descriptors","url":"/samples/latest/samples/extensions/push_descriptors/README.html","urlType":"internal"},{"content":"Raytracing basic","url":"/samples/latest/samples/extensions/ray_tracing_basic/README.html","urlType":"internal"},{"content":"Raytracing extended","url":"/samples/latest/samples/extensions/ray_tracing_extended/README.html","urlType":"internal"},{"content":"Ray queries","url":"/samples/latest/samples/extensions/ray_queries/README.html","urlType":"internal"},{"content":"Ray tracing reflection","url":"/samples/latest/samples/extensions/ray_tracing_reflection/README.html","urlType":"internal"},{"content":"Shader Object","url":"/samples/latest/samples/extensions/shader_object/README.html","urlType":"internal"},{"content":"Shader Debug Printf","url":"/samples/latest/samples/extensions/shader_debugprintf/README.html","urlType":"internal"},{"content":"Sparse Image","url":"/samples/latest/samples/extensions/sparse_image/README.html","urlType":"internal"},{"content":"Synchronization 2","url":"/samples/latest/samples/extensions/synchronization_2/README.html","urlType":"internal"},{"content":"Timeline semaphore","url":"/samples/latest/samples/extensions/timeline_semaphore/README.html","urlType":"internal"},{"content":"Vertex dynamic state","url":"/samples/latest/samples/extensions/vertex_dynamic_state/README.html","urlType":"internal"}]},{"content":"Performance samples","url":"/samples/latest/samples/performance/README.html","urlType":"internal","items":[{"content":"16bit arithmetic","url":"/samples/latest/samples/performance/16bit_arithmetic/README.html","urlType":"internal"},{"content":"16bit storage input output","url":"/samples/latest/samples/performance/16bit_storage_input_output/README.html","urlType":"internal"},{"content":"AFBC","url":"/samples/latest/samples/performance/afbc/README.html","urlType":"internal"},{"content":"Async compute","url":"/samples/latest/samples/performance/async_compute/README.html","urlType":"internal"},{"content":"Command buffer usage","url":"/samples/latest/samples/performance/command_buffer_usage/README.html","urlType":"internal"},{"content":"Constant data","url":"/samples/latest/samples/performance/constant_data/README.html","urlType":"internal"},{"content":"Descriptor management","url":"/samples/latest/samples/performance/descriptor_management/README.html","urlType":"internal"},{"content":"Image compression control","url":"/samples/latest/samples/performance/image_compression_control/README.html","urlType":"internal"},{"content":"Layout transitions","url":"/samples/latest/samples/performance/layout_transitions/README.html","urlType":"internal"},{"content":"MSAA","url":"/samples/latest/samples/performance/msaa/README.html","urlType":"internal"},{"content":"Multithreading render passes","url":"/samples/latest/samples/performance/multithreading_render_passes/README.html","urlType":"internal"},{"content":"Multi draw indirect","url":"/samples/latest/samples/performance/multi_draw_indirect/README.html","urlType":"internal"},{"content":"Pipeline barriers","url":"/samples/latest/samples/performance/pipeline_barriers/README.html","urlType":"internal"},{"content":"Pipeline cache","url":"/samples/latest/samples/performance/pipeline_cache/README.html","urlType":"internal","items":[{"content":"Pipeline cache (Vulkan-Hpp)","url":"/samples/latest/samples/performance/hpp_pipeline_cache/README.html","urlType":"internal"}]},{"content":"Render passes","url":"/samples/latest/samples/performance/render_passes/README.html","urlType":"internal"},{"content":"Specialization constants","url":"/samples/latest/samples/performance/specialization_constants/README.html","urlType":"internal"},{"content":"Subpasses","url":"/samples/latest/samples/performance/subpasses/README.html","urlType":"internal"},{"content":"Surface rotation","url":"/samples/latest/samples/performance/surface_rotation/README.html","urlType":"internal"},{"content":"Swapchain images","url":"/samples/latest/samples/performance/swapchain_images/README.html","urlType":"internal","items":[{"content":"Swapchain images (Vulkan-Hpp)","url":"/samples/latest/samples/performance/hpp_swapchain_images/README.html","urlType":"internal"}]},{"content":"Texture compression basisu","url":"/samples/latest/samples/performance/texture_compression_basisu/README.html","urlType":"internal"},{"content":"Texture compression comparison","url":"/samples/latest/samples/performance/texture_compression_comparison/README.html","urlType":"internal"},{"content":"Wait idle","url":"/samples/latest/samples/performance/wait_idle/README.html","urlType":"internal"}]},{"content":"Tooling samples","url":"/samples/latest/samples/tooling/README.html","urlType":"internal","items":[{"content":"Profiles","url":"/samples/latest/samples/tooling/profiles/README.html","urlType":"internal"}]},{"content":"General samples","url":"/samples/latest/samples/general/README.html","urlType":"internal","items":[{"content":"Mobile NeRF","url":"/samples/latest/samples/general/mobile_nerf/README.html","urlType":"internal"}]},{"content":"General documentation","url":"/samples/latest/docs/README.html","urlType":"internal","items":[{"content":"Build guide","url":"/samples/latest/docs/build.html","urlType":"internal"},{"content":"Memory limits","url":"/samples/latest/docs/memory_limits.html","urlType":"internal"},{"content":"Miscellaneous","url":"/samples/latest/docs/misc.html","urlType":"internal"}]}],"root":true,"order":0}]}}}})